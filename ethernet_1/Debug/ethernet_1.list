
ethernet_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f974  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bc4  0800fb44  0800fb44  00010b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012708  08012708  000141c8  2**0
                  CONTENTS
  4 .ARM          00000008  08012708  08012708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012710  08012710  000141c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012710  08012710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012714  08012714  00013714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08012718  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  080127a0  00014088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08012840  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007d50  200001c8  080128e0  000141c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20007f18  080128e0  00014f18  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000141c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cffd  00000000  00000000  000141f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005098  00000000  00000000  000311f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001490  00000000  00000000  00036290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001074  00000000  00000000  00037720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00032014  00000000  00000000  00038794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024120  00000000  00000000  0006a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001004d6  00000000  00000000  0008e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0018ed9e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005b50  00000000  00000000  0018ede4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  00194934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fb2c 	.word	0x0800fb2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	0800fb2c 	.word	0x0800fb2c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005a4:	f3bf 8f4f 	dsb	sy
}
 80005a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005aa:	f3bf 8f6f 	isb	sy
}
 80005ae:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005b0:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <SCB_EnableICache+0x48>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <SCB_EnableICache+0x48>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <SCB_EnableICache+0x48>)
 80005ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d0:	f3bf 8f4f 	dsb	sy
}
 80005d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d6:	f3bf 8f6f 	isb	sy
}
 80005da:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <SCB_EnableDCache+0x84>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005fa:	f3bf 8f4f 	dsb	sy
}
 80005fe:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000600:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <SCB_EnableDCache+0x84>)
 8000602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000606:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	0b5b      	lsrs	r3, r3, #13
 800060c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000610:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	08db      	lsrs	r3, r3, #3
 8000616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800061a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	015a      	lsls	r2, r3, #5
 8000620:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000624:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800062a:	4911      	ldr	r1, [pc, #68]	@ (8000670 <SCB_EnableDCache+0x84>)
 800062c:	4313      	orrs	r3, r2
 800062e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1e5a      	subs	r2, r3, #1
 8000636:	60ba      	str	r2, [r7, #8]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1ef      	bne.n	800061c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	1e5a      	subs	r2, r3, #1
 8000640:	60fa      	str	r2, [r7, #12]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1e5      	bne.n	8000612 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000646:	f3bf 8f4f 	dsb	sy
}
 800064a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <SCB_EnableDCache+0x84>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a07      	ldr	r2, [pc, #28]	@ (8000670 <SCB_EnableDCache+0x84>)
 8000652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000656:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000658:	f3bf 8f4f 	dsb	sy
}
 800065c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800065e:	f3bf 8f6f 	isb	sy
}
 8000662:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000678:	f000 fcf0 	bl	800105c <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800067c:	f7ff ff90 	bl	80005a0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000680:	f7ff ffb4 	bl	80005ec <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 ffff 	bl	8001686 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f808 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f8a4 	bl	80007d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000690:	f000 f872 	bl	8000778 <MX_USART1_UART_Init>
  MX_LWIP_Init();
 8000694:	f004 f954 	bl	8004940 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <main+0x24>

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f00e fb99 	bl	800ede2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <SystemClock_Config+0xd4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a2a      	ldr	r2, [pc, #168]	@ (8000770 <SystemClock_Config+0xd4>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b28      	ldr	r3, [pc, #160]	@ (8000770 <SystemClock_Config+0xd4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	4b26      	ldr	r3, [pc, #152]	@ (8000774 <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a25      	ldr	r2, [pc, #148]	@ (8000774 <SystemClock_Config+0xd8>)
 80006de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemClock_Config+0xd8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000704:	2319      	movs	r3, #25
 8000706:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000708:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 800070c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fc1a 	bl	8002f54 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000726:	f000 fcc7 	bl	80010b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800072a:	f002 fbc3 	bl	8002eb4 <HAL_PWREx_EnableOverDrive>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000734:	f000 fcc0 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2107      	movs	r1, #7
 8000756:	4618      	mov	r0, r3
 8000758:	f002 fea0 	bl	800349c <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000762:	f000 fca9 	bl	80010b8 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	@ 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_USART1_UART_Init+0x58>)
 800077e:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <MX_USART1_UART_Init+0x5c>)
 8000780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_USART1_UART_Init+0x58>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_USART1_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_USART1_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_USART1_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_USART1_UART_Init+0x58>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_USART1_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_USART1_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_USART1_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_USART1_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_USART1_UART_Init+0x58>)
 80007bc:	f003 fc44 	bl	8004048 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 fc77 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200001e4 	.word	0x200001e4
 80007d4:	40011000 	.word	0x40011000

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b090      	sub	sp, #64	@ 0x40
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ee:	4bad      	ldr	r3, [pc, #692]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4aac      	ldr	r2, [pc, #688]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80007f4:	f043 0310 	orr.w	r3, r3, #16
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4baa      	ldr	r3, [pc, #680]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0310 	and.w	r3, r3, #16
 8000802:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	4ba7      	ldr	r3, [pc, #668]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4aa6      	ldr	r2, [pc, #664]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4ba4      	ldr	r3, [pc, #656]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
 800081c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4ba1      	ldr	r3, [pc, #644]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4aa0      	ldr	r2, [pc, #640]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b9e      	ldr	r3, [pc, #632]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	623b      	str	r3, [r7, #32]
 8000834:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	4b9b      	ldr	r3, [pc, #620]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a9a      	ldr	r2, [pc, #616]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b98      	ldr	r3, [pc, #608]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	61fb      	str	r3, [r7, #28]
 800084c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b95      	ldr	r3, [pc, #596]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a94      	ldr	r2, [pc, #592]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b92      	ldr	r3, [pc, #584]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b8f      	ldr	r3, [pc, #572]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a8e      	ldr	r2, [pc, #568]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b8c      	ldr	r3, [pc, #560]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800087e:	4b89      	ldr	r3, [pc, #548]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a88      	ldr	r2, [pc, #544]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000884:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b86      	ldr	r3, [pc, #536]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000896:	4b83      	ldr	r3, [pc, #524]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a82      	ldr	r2, [pc, #520]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 800089c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b80      	ldr	r3, [pc, #512]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008ae:	4b7d      	ldr	r3, [pc, #500]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a7c      	ldr	r2, [pc, #496]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b7a      	ldr	r3, [pc, #488]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c6:	4b77      	ldr	r3, [pc, #476]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a76      	ldr	r2, [pc, #472]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008cc:	f043 0320 	orr.w	r3, r3, #32
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b74      	ldr	r3, [pc, #464]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b71      	ldr	r3, [pc, #452]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a70      	ldr	r2, [pc, #448]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b6e      	ldr	r3, [pc, #440]	@ (8000aa4 <MX_GPIO_Init+0x2cc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2120      	movs	r1, #32
 80008fa:	486b      	ldr	r0, [pc, #428]	@ (8000aa8 <MX_GPIO_Init+0x2d0>)
 80008fc:	f002 fac0 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000906:	4869      	ldr	r0, [pc, #420]	@ (8000aac <MX_GPIO_Init+0x2d4>)
 8000908:	f002 faba 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2108      	movs	r1, #8
 8000910:	4867      	ldr	r0, [pc, #412]	@ (8000ab0 <MX_GPIO_Init+0x2d8>)
 8000912:	f002 fab5 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800091c:	4865      	ldr	r0, [pc, #404]	@ (8000ab4 <MX_GPIO_Init+0x2dc>)
 800091e:	f002 faaf 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	21c8      	movs	r1, #200	@ 0xc8
 8000926:	4864      	ldr	r0, [pc, #400]	@ (8000ab8 <MX_GPIO_Init+0x2e0>)
 8000928:	f002 faaa 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800092c:	2310      	movs	r3, #16
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800093c:	230e      	movs	r3, #14
 800093e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000944:	4619      	mov	r1, r3
 8000946:	485d      	ldr	r0, [pc, #372]	@ (8000abc <MX_GPIO_Init+0x2e4>)
 8000948:	f002 f8ee 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800094c:	2308      	movs	r3, #8
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800095c:	4619      	mov	r1, r3
 800095e:	4857      	ldr	r0, [pc, #348]	@ (8000abc <MX_GPIO_Init+0x2e4>)
 8000960:	f002 f8e2 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000964:	2304      	movs	r3, #4
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000974:	2309      	movs	r3, #9
 8000976:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800097c:	4619      	mov	r1, r3
 800097e:	484f      	ldr	r0, [pc, #316]	@ (8000abc <MX_GPIO_Init+0x2e4>)
 8000980:	f002 f8d2 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000984:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000988:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000996:	230c      	movs	r3, #12
 8000998:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	4846      	ldr	r0, [pc, #280]	@ (8000abc <MX_GPIO_Init+0x2e4>)
 80009a2:	f002 f8c1 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80009a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ac:	2312      	movs	r3, #18
 80009ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b8:	2304      	movs	r3, #4
 80009ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009c0:	4619      	mov	r1, r3
 80009c2:	483f      	ldr	r0, [pc, #252]	@ (8000ac0 <MX_GPIO_Init+0x2e8>)
 80009c4:	f002 f8b0 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80009c8:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009da:	230a      	movs	r3, #10
 80009dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009e2:	4619      	mov	r1, r3
 80009e4:	4836      	ldr	r0, [pc, #216]	@ (8000ac0 <MX_GPIO_Init+0x2e8>)
 80009e6:	f002 f89f 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80009ea:	2310      	movs	r3, #16
 80009ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009fa:	2302      	movs	r3, #2
 80009fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a02:	4619      	mov	r1, r3
 8000a04:	482e      	ldr	r0, [pc, #184]	@ (8000ac0 <MX_GPIO_Init+0x2e8>)
 8000a06:	f002 f88f 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000a0a:	2380      	movs	r3, #128	@ 0x80
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a22:	4619      	mov	r1, r3
 8000a24:	4820      	ldr	r0, [pc, #128]	@ (8000aa8 <MX_GPIO_Init+0x2d0>)
 8000a26:	f002 f87f 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000a2a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a44:	4619      	mov	r1, r3
 8000a46:	481f      	ldr	r0, [pc, #124]	@ (8000ac4 <MX_GPIO_Init+0x2ec>)
 8000a48:	f002 f86e 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000a4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a66:	4619      	mov	r1, r3
 8000a68:	4817      	ldr	r0, [pc, #92]	@ (8000ac8 <MX_GPIO_Init+0x2f0>)
 8000a6a:	f002 f85d 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000a6e:	2360      	movs	r3, #96	@ 0x60
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a7e:	230d      	movs	r3, #13
 8000a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a86:	4619      	mov	r1, r3
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <MX_GPIO_Init+0x2e4>)
 8000a8a:	f002 f84d 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000a8e:	2340      	movs	r3, #64	@ 0x40
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000aa2:	e013      	b.n	8000acc <MX_GPIO_Init+0x2f4>
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40022000 	.word	0x40022000
 8000ab0:	40022800 	.word	0x40022800
 8000ab4:	40021c00 	.word	0x40021c00
 8000ab8:	40021800 	.word	0x40021800
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020000 	.word	0x40020000
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	48bc      	ldr	r0, [pc, #752]	@ (8000dc4 <MX_GPIO_Init+0x5ec>)
 8000ad4:	f002 f828 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000ad8:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aea:	230c      	movs	r3, #12
 8000aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000af2:	4619      	mov	r1, r3
 8000af4:	48b4      	ldr	r0, [pc, #720]	@ (8000dc8 <MX_GPIO_Init+0x5f0>)
 8000af6:	f002 f817 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000afa:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b0c:	230e      	movs	r3, #14
 8000b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b14:	4619      	mov	r1, r3
 8000b16:	48ad      	ldr	r0, [pc, #692]	@ (8000dcc <MX_GPIO_Init+0x5f4>)
 8000b18:	f002 f806 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b2e:	4619      	mov	r1, r3
 8000b30:	48a6      	ldr	r0, [pc, #664]	@ (8000dcc <MX_GPIO_Init+0x5f4>)
 8000b32:	f001 fff9 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000b36:	2340      	movs	r3, #64	@ 0x40
 8000b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b3a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b48:	4619      	mov	r1, r3
 8000b4a:	48a1      	ldr	r0, [pc, #644]	@ (8000dd0 <MX_GPIO_Init+0x5f8>)
 8000b4c:	f001 ffec 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000b50:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b62:	230c      	movs	r3, #12
 8000b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4898      	ldr	r0, [pc, #608]	@ (8000dd0 <MX_GPIO_Init+0x5f8>)
 8000b6e:	f001 ffdb 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000b72:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b84:	230a      	movs	r3, #10
 8000b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4891      	ldr	r0, [pc, #580]	@ (8000dd4 <MX_GPIO_Init+0x5fc>)
 8000b90:	f001 ffca 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000b94:	23f0      	movs	r3, #240	@ 0xf0
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000ba4:	230a      	movs	r3, #10
 8000ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ba8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bac:	4619      	mov	r1, r3
 8000bae:	488a      	ldr	r0, [pc, #552]	@ (8000dd8 <MX_GPIO_Init+0x600>)
 8000bb0:	f001 ffba 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000bb4:	23f7      	movs	r3, #247	@ 0xf7
 8000bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bc4:	230e      	movs	r3, #14
 8000bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000bc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4883      	ldr	r0, [pc, #524]	@ (8000ddc <MX_GPIO_Init+0x604>)
 8000bd0:	f001 ffaa 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000bd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000be6:	2309      	movs	r3, #9
 8000be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4875      	ldr	r0, [pc, #468]	@ (8000dc8 <MX_GPIO_Init+0x5f0>)
 8000bf2:	f001 ff99 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c08:	230a      	movs	r3, #10
 8000c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c10:	4619      	mov	r1, r3
 8000c12:	486d      	ldr	r0, [pc, #436]	@ (8000dc8 <MX_GPIO_Init+0x5f0>)
 8000c14:	f001 ff88 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c18:	2320      	movs	r3, #32
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4868      	ldr	r0, [pc, #416]	@ (8000dd0 <MX_GPIO_Init+0x5f8>)
 8000c30:	f001 ff7a 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000c34:	2308      	movs	r3, #8
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c44:	230d      	movs	r3, #13
 8000c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4860      	ldr	r0, [pc, #384]	@ (8000dd0 <MX_GPIO_Init+0x5f8>)
 8000c50:	f001 ff6a 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000c54:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	485a      	ldr	r0, [pc, #360]	@ (8000dd8 <MX_GPIO_Init+0x600>)
 8000c6e:	f001 ff5b 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000c72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c84:	4619      	mov	r1, r3
 8000c86:	4856      	ldr	r0, [pc, #344]	@ (8000de0 <MX_GPIO_Init+0x608>)
 8000c88:	f001 ff4e 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c8c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ca2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	484e      	ldr	r0, [pc, #312]	@ (8000de4 <MX_GPIO_Init+0x60c>)
 8000caa:	f001 ff3d 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000cae:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cc0:	230e      	movs	r3, #14
 8000cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4843      	ldr	r0, [pc, #268]	@ (8000dd8 <MX_GPIO_Init+0x600>)
 8000ccc:	f001 ff2c 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	483d      	ldr	r0, [pc, #244]	@ (8000ddc <MX_GPIO_Init+0x604>)
 8000ce8:	f001 ff1e 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000cec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cfe:	230d      	movs	r3, #13
 8000d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d06:	4619      	mov	r1, r3
 8000d08:	482f      	ldr	r0, [pc, #188]	@ (8000dc8 <MX_GPIO_Init+0x5f0>)
 8000d0a:	f001 ff0d 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d1e:	4619      	mov	r1, r3
 8000d20:	482b      	ldr	r0, [pc, #172]	@ (8000dd0 <MX_GPIO_Init+0x5f8>)
 8000d22:	f001 ff01 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000d26:	2304      	movs	r3, #4
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d36:	230c      	movs	r3, #12
 8000d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4823      	ldr	r0, [pc, #140]	@ (8000dd0 <MX_GPIO_Init+0x5f8>)
 8000d42:	f001 fef1 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000d46:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4823      	ldr	r0, [pc, #140]	@ (8000de8 <MX_GPIO_Init+0x610>)
 8000d5c:	f001 fee4 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000d60:	2302      	movs	r3, #2
 8000d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d70:	2305      	movs	r3, #5
 8000d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4817      	ldr	r0, [pc, #92]	@ (8000dd8 <MX_GPIO_Init+0x600>)
 8000d7c:	f001 fed4 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000d80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d96:	4619      	mov	r1, r3
 8000d98:	4813      	ldr	r0, [pc, #76]	@ (8000de8 <MX_GPIO_Init+0x610>)
 8000d9a:	f001 fec5 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000d9e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000db0:	230d      	movs	r3, #13
 8000db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000db4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db8:	4619      	mov	r1, r3
 8000dba:	480b      	ldr	r0, [pc, #44]	@ (8000de8 <MX_GPIO_Init+0x610>)
 8000dbc:	f001 feb4 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e013      	b.n	8000dec <MX_GPIO_Init+0x614>
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40021800 	.word	0x40021800
 8000dcc:	40022400 	.word	0x40022400
 8000dd0:	40020c00 	.word	0x40020c00
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40022000 	.word	0x40022000
 8000ddc:	40022800 	.word	0x40022800
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40021400 	.word	0x40021400
 8000de8:	40021c00 	.word	0x40021c00
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e02:	4619      	mov	r1, r3
 8000e04:	488d      	ldr	r0, [pc, #564]	@ (800103c <MX_GPIO_Init+0x864>)
 8000e06:	f001 fe8f 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000e0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e24:	4619      	mov	r1, r3
 8000e26:	4886      	ldr	r0, [pc, #536]	@ (8001040 <MX_GPIO_Init+0x868>)
 8000e28:	f001 fe7e 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e32:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e40:	4619      	mov	r1, r3
 8000e42:	487e      	ldr	r0, [pc, #504]	@ (800103c <MX_GPIO_Init+0x864>)
 8000e44:	f001 fe70 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000e48:	23c0      	movs	r3, #192	@ 0xc0
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e60:	4619      	mov	r1, r3
 8000e62:	4878      	ldr	r0, [pc, #480]	@ (8001044 <MX_GPIO_Init+0x86c>)
 8000e64:	f001 fe60 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000e68:	2310      	movs	r3, #16
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e78:	230a      	movs	r3, #10
 8000e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e80:	4619      	mov	r1, r3
 8000e82:	4871      	ldr	r0, [pc, #452]	@ (8001048 <MX_GPIO_Init+0x870>)
 8000e84:	f001 fe50 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000e88:	2328      	movs	r3, #40	@ 0x28
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e98:	230c      	movs	r3, #12
 8000e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4869      	ldr	r0, [pc, #420]	@ (8001048 <MX_GPIO_Init+0x870>)
 8000ea4:	f001 fe40 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000ea8:	23c8      	movs	r3, #200	@ 0xc8
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4863      	ldr	r0, [pc, #396]	@ (800104c <MX_GPIO_Init+0x874>)
 8000ec0:	f001 fe32 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000ec4:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ed2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	485d      	ldr	r0, [pc, #372]	@ (8001050 <MX_GPIO_Init+0x878>)
 8000eda:	f001 fe25 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ede:	2308      	movs	r3, #8
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eee:	230c      	movs	r3, #12
 8000ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4852      	ldr	r0, [pc, #328]	@ (8001044 <MX_GPIO_Init+0x86c>)
 8000efa:	f001 fe15 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000efe:	2305      	movs	r3, #5
 8000f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f0e:	230a      	movs	r3, #10
 8000f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f16:	4619      	mov	r1, r3
 8000f18:	484a      	ldr	r0, [pc, #296]	@ (8001044 <MX_GPIO_Init+0x86c>)
 8000f1a:	f001 fe05 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f2e:	2309      	movs	r3, #9
 8000f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f36:	4619      	mov	r1, r3
 8000f38:	4846      	ldr	r0, [pc, #280]	@ (8001054 <MX_GPIO_Init+0x87c>)
 8000f3a:	f001 fdf5 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000f3e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f50:	2309      	movs	r3, #9
 8000f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	483f      	ldr	r0, [pc, #252]	@ (8001058 <MX_GPIO_Init+0x880>)
 8000f5c:	f001 fde4 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000f60:	2304      	movs	r3, #4
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	4836      	ldr	r0, [pc, #216]	@ (800104c <MX_GPIO_Init+0x874>)
 8000f74:	f001 fdd8 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	482d      	ldr	r0, [pc, #180]	@ (8001040 <MX_GPIO_Init+0x868>)
 8000f8c:	f001 fdcc 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000f90:	2350      	movs	r3, #80	@ 0x50
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fa0:	230d      	movs	r3, #13
 8000fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4825      	ldr	r0, [pc, #148]	@ (8001040 <MX_GPIO_Init+0x868>)
 8000fac:	f001 fdbc 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000fb0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb6:	2312      	movs	r3, #18
 8000fb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	481e      	ldr	r0, [pc, #120]	@ (8001048 <MX_GPIO_Init+0x870>)
 8000fce:	f001 fdab 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000fd2:	2328      	movs	r3, #40	@ 0x28
 8000fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fea:	4619      	mov	r1, r3
 8000fec:	4814      	ldr	r0, [pc, #80]	@ (8001040 <MX_GPIO_Init+0x868>)
 8000fee:	f001 fd9b 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ff2:	2340      	movs	r3, #64	@ 0x40
 8000ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001002:	2309      	movs	r3, #9
 8001004:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800100a:	4619      	mov	r1, r3
 800100c:	480e      	ldr	r0, [pc, #56]	@ (8001048 <MX_GPIO_Init+0x870>)
 800100e:	f001 fd8b 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001012:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001024:	2305      	movs	r3, #5
 8001026:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102c:	4619      	mov	r1, r3
 800102e:	4809      	ldr	r0, [pc, #36]	@ (8001054 <MX_GPIO_Init+0x87c>)
 8001030:	f001 fd7a 	bl	8002b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001034:	bf00      	nop
 8001036:	3740      	adds	r7, #64	@ 0x40
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40022000 	.word	0x40022000
 8001040:	40020000 	.word	0x40020000
 8001044:	40020800 	.word	0x40020800
 8001048:	40021c00 	.word	0x40021c00
 800104c:	40021800 	.word	0x40021800
 8001050:	40021400 	.word	0x40021400
 8001054:	40020400 	.word	0x40020400
 8001058:	40020c00 	.word	0x40020c00

0800105c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800106e:	f000 fc71 	bl	8001954 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001072:	2301      	movs	r3, #1
 8001074:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001076:	2300      	movs	r3, #0
 8001078:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <MPU_Config+0x58>)
 800107c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800107e:	230d      	movs	r3, #13
 8001080:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001082:	2300      	movs	r3, #0
 8001084:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001086:	2301      	movs	r3, #1
 8001088:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800108a:	2300      	movs	r3, #0
 800108c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800108e:	2301      	movs	r3, #1
 8001090:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001092:	2301      	movs	r3, #1
 8001094:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800109e:	463b      	mov	r3, r7
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 fc8f 	bl	80019c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010a6:	2004      	movs	r0, #4
 80010a8:	f000 fc6c 	bl	8001984 <HAL_MPU_Enable>

}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2007c000 	.word	0x2007c000

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <Error_Handler+0x8>

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <HAL_MspInit+0x44>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <HAL_MspInit+0x44>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <HAL_MspInit+0x44>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <HAL_MspInit+0x44>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	4a08      	ldr	r2, [pc, #32]	@ (8001108 <HAL_MspInit+0x44>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_MspInit+0x44>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0ac      	sub	sp, #176	@ 0xb0
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	2284      	movs	r2, #132	@ 0x84
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f00d fe58 	bl	800ede2 <memset>
  if(huart->Instance==USART1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a32      	ldr	r2, [pc, #200]	@ (8001200 <HAL_UART_MspInit+0xf4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d15c      	bne.n	80011f6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800113c:	2340      	movs	r3, #64	@ 0x40
 800113e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001140:	2300      	movs	r3, #0
 8001142:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fb8d 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001154:	f7ff ffb0 	bl	80010b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001158:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <HAL_UART_MspInit+0xf8>)
 800115a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115c:	4a29      	ldr	r2, [pc, #164]	@ (8001204 <HAL_UART_MspInit+0xf8>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	6453      	str	r3, [r2, #68]	@ 0x44
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <HAL_UART_MspInit+0xf8>)
 8001166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <HAL_UART_MspInit+0xf8>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001174:	4a23      	ldr	r2, [pc, #140]	@ (8001204 <HAL_UART_MspInit+0xf8>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	6313      	str	r3, [r2, #48]	@ 0x30
 800117c:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <HAL_UART_MspInit+0xf8>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <HAL_UART_MspInit+0xf8>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118c:	4a1d      	ldr	r2, [pc, #116]	@ (8001204 <HAL_UART_MspInit+0xf8>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6313      	str	r3, [r2, #48]	@ 0x30
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <HAL_UART_MspInit+0xf8>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011a0:	2380      	movs	r3, #128	@ 0x80
 80011a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011b8:	2307      	movs	r3, #7
 80011ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4810      	ldr	r0, [pc, #64]	@ (8001208 <HAL_UART_MspInit+0xfc>)
 80011c6:	f001 fcaf 	bl	8002b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e4:	2307      	movs	r3, #7
 80011e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011ee:	4619      	mov	r1, r3
 80011f0:	4806      	ldr	r0, [pc, #24]	@ (800120c <HAL_UART_MspInit+0x100>)
 80011f2:	f001 fc99 	bl	8002b28 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80011f6:	bf00      	nop
 80011f8:	37b0      	adds	r7, #176	@ 0xb0
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40011000 	.word	0x40011000
 8001204:	40023800 	.word	0x40023800
 8001208:	40020400 	.word	0x40020400
 800120c:	40020000 	.word	0x40020000

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <NMI_Handler+0x4>

08001218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <MemManage_Handler+0x4>

08001228 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <UsageFault_Handler+0x4>

08001238 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001266:	f000 fa4b 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}

0800126e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  return 1;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <_kill>:

int _kill(int pid, int sig)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800128a:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <_kill+0x20>)
 800128c:	2216      	movs	r2, #22
 800128e:	601a      	str	r2, [r3, #0]
  return -1;
 8001290:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	20007f08 	.word	0x20007f08

080012a4 <_exit>:

void _exit (int status)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ffe5 	bl	8001280 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012b6:	bf00      	nop
 80012b8:	e7fd      	b.n	80012b6 <_exit+0x12>

080012ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e00a      	b.n	80012e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012cc:	f3af 8000 	nop.w
 80012d0:	4601      	mov	r1, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	60ba      	str	r2, [r7, #8]
 80012d8:	b2ca      	uxtb	r2, r1
 80012da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dbf0      	blt.n	80012cc <_read+0x12>
  }

  return len;
 80012ea:	687b      	ldr	r3, [r7, #4]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e009      	b.n	800131a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	60ba      	str	r2, [r7, #8]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3301      	adds	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	dbf1      	blt.n	8001306 <_write+0x12>
  }
  return len;
 8001322:	687b      	ldr	r3, [r7, #4]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_close>:

int _close(int file)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001354:	605a      	str	r2, [r3, #4]
  return 0;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_isatty>:

int _isatty(int file)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137a:	b480      	push	{r7}
 800137c:	b085      	sub	sp, #20
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	@ (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d205      	bcs.n	80013d0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <_sbrk+0x6c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a06      	ldr	r2, [pc, #24]	@ (80013f8 <_sbrk+0x64>)
 80013e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	20050000 	.word	0x20050000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	2000026c 	.word	0x2000026c
 80013fc:	20007f18 	.word	0x20007f18
 8001400:	20007f08 	.word	0x20007f08

08001404 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	@ (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001460 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800142c:	f7ff ffea 	bl	8001404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001432:	490d      	ldr	r1, [pc, #52]	@ (8001468 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001434:	4a0d      	ldr	r2, [pc, #52]	@ (800146c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001448:	4c0a      	ldr	r4, [pc, #40]	@ (8001474 <LoopFillZerobss+0x22>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001456:	f00d fd13 	bl	800ee80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff f90b 	bl	8000674 <main>
  bx  lr    
 800145e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001460:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800146c:	08012718 	.word	0x08012718
  ldr r2, =_sbss
 8001470:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001474:	20007f18 	.word	0x20007f18

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>

0800147a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <LAN8742_RegisterBusIO+0x28>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <LAN8742_RegisterBusIO+0x28>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <LAN8742_RegisterBusIO+0x28>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d102      	bne.n	80014a8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a6:	e014      	b.n	80014d2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d139      	bne.n	800156e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d002      	beq.n	8001508 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2220      	movs	r2, #32
 800150c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e01c      	b.n	800154e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	f107 020c 	add.w	r2, r7, #12
 800151c:	2112      	movs	r1, #18
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	4798      	blx	r3
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	da03      	bge.n	8001530 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001528:	f06f 0304 	mvn.w	r3, #4
 800152c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800152e:	e00b      	b.n	8001548 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	429a      	cmp	r2, r3
 800153a:	d105      	bne.n	8001548 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
         break;
 8001546:	e005      	b.n	8001554 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3301      	adds	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b1f      	cmp	r3, #31
 8001552:	d9df      	bls.n	8001514 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b1f      	cmp	r3, #31
 800155a:	d902      	bls.n	8001562 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800155c:	f06f 0302 	mvn.w	r3, #2
 8001560:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800156e:	693b      	ldr	r3, [r7, #16]
 }
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6810      	ldr	r0, [r2, #0]
 800158c:	f107 020c 	add.w	r2, r7, #12
 8001590:	2101      	movs	r1, #1
 8001592:	4798      	blx	r3
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	da02      	bge.n	80015a0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800159a:	f06f 0304 	mvn.w	r3, #4
 800159e:	e06e      	b.n	800167e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6810      	ldr	r0, [r2, #0]
 80015a8:	f107 020c 	add.w	r2, r7, #12
 80015ac:	2101      	movs	r1, #1
 80015ae:	4798      	blx	r3
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da02      	bge.n	80015bc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015b6:	f06f 0304 	mvn.w	r3, #4
 80015ba:	e060      	b.n	800167e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e059      	b.n	800167e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6810      	ldr	r0, [r2, #0]
 80015d2:	f107 020c 	add.w	r2, r7, #12
 80015d6:	2100      	movs	r1, #0
 80015d8:	4798      	blx	r3
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da02      	bge.n	80015e6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015e0:	f06f 0304 	mvn.w	r3, #4
 80015e4:	e04b      	b.n	800167e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d11b      	bne.n	8001628 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <LAN8742_GetLinkState+0x90>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001604:	2302      	movs	r3, #2
 8001606:	e03a      	b.n	800167e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001612:	2303      	movs	r3, #3
 8001614:	e033      	b.n	800167e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001620:	2304      	movs	r3, #4
 8001622:	e02c      	b.n	800167e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001624:	2305      	movs	r3, #5
 8001626:	e02a      	b.n	800167e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6810      	ldr	r0, [r2, #0]
 8001630:	f107 020c 	add.w	r2, r7, #12
 8001634:	211f      	movs	r1, #31
 8001636:	4798      	blx	r3
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	da02      	bge.n	8001644 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800163e:	f06f 0304 	mvn.w	r3, #4
 8001642:	e01c      	b.n	800167e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800164e:	2306      	movs	r3, #6
 8001650:	e015      	b.n	800167e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f003 031c 	and.w	r3, r3, #28
 8001658:	2b18      	cmp	r3, #24
 800165a:	d101      	bne.n	8001660 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800165c:	2302      	movs	r3, #2
 800165e:	e00e      	b.n	800167e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 031c 	and.w	r3, r3, #28
 8001666:	2b08      	cmp	r3, #8
 8001668:	d101      	bne.n	800166e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800166a:	2303      	movs	r3, #3
 800166c:	e007      	b.n	800167e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f003 031c 	and.w	r3, r3, #28
 8001674:	2b14      	cmp	r3, #20
 8001676:	d101      	bne.n	800167c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001678:	2304      	movs	r3, #4
 800167a:	e000      	b.n	800167e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800167c:	2305      	movs	r3, #5
    }
  }
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168a:	2003      	movs	r0, #3
 800168c:	f000 f92e 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001690:	2000      	movs	r0, #0
 8001692:	f000 f805 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001696:	f7ff fd15 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f93b 	bl	800193a <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016dc:	f000 f911 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	@ (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000008 	.word	0x20000008
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000008 	.word	0x20000008
 8001724:	20000270 	.word	0x20000270

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	@ (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000270 	.word	0x20000270

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175a:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008

08001788 <__NVIC_SetPriorityGrouping>:
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x40>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x40>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00
 80017cc:	05fa0000 	.word	0x05fa0000

080017d0 <__NVIC_GetPriorityGrouping>:
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_SetPriority>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	@ (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	@ (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	@ 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018cc:	f7ff ff8e 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff47 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff5c 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff8e 	bl	8001840 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5d 	bl	80017ec <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffb0 	bl	80018a8 <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001958:	f3bf 8f5f 	dmb	sy
}
 800195c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800195e:	4b07      	ldr	r3, [pc, #28]	@ (800197c <HAL_MPU_Disable+0x28>)
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	4a06      	ldr	r2, [pc, #24]	@ (800197c <HAL_MPU_Disable+0x28>)
 8001964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001968:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800196a:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_MPU_Disable+0x2c>)
 800196c:	2200      	movs	r2, #0
 800196e:	605a      	str	r2, [r3, #4]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00
 8001980:	e000ed90 	.word	0xe000ed90

08001984 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800198c:	4a0b      	ldr	r2, [pc, #44]	@ (80019bc <HAL_MPU_Enable+0x38>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001996:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <HAL_MPU_Enable+0x3c>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	4a09      	ldr	r2, [pc, #36]	@ (80019c0 <HAL_MPU_Enable+0x3c>)
 800199c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80019a2:	f3bf 8f4f 	dsb	sy
}
 80019a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019a8:	f3bf 8f6f 	isb	sy
}
 80019ac:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed90 	.word	0xe000ed90
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	785a      	ldrb	r2, [r3, #1]
 80019d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <HAL_MPU_ConfigRegion+0x7c>)
 80019d2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80019d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <HAL_MPU_ConfigRegion+0x7c>)
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	4a19      	ldr	r2, [pc, #100]	@ (8001a40 <HAL_MPU_ConfigRegion+0x7c>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80019e0:	4a17      	ldr	r2, [pc, #92]	@ (8001a40 <HAL_MPU_ConfigRegion+0x7c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7b1b      	ldrb	r3, [r3, #12]
 80019ec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7adb      	ldrb	r3, [r3, #11]
 80019f2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7a9b      	ldrb	r3, [r3, #10]
 80019fa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7b5b      	ldrb	r3, [r3, #13]
 8001a02:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7b9b      	ldrb	r3, [r3, #14]
 8001a0a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7bdb      	ldrb	r3, [r3, #15]
 8001a12:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7a5b      	ldrb	r3, [r3, #9]
 8001a1a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7a1b      	ldrb	r3, [r3, #8]
 8001a22:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a24:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	7812      	ldrb	r2, [r2, #0]
 8001a2a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a2c:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a2e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a30:	6113      	str	r3, [r2, #16]
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed90 	.word	0xe000ed90

08001a44 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e086      	b.n	8001b64 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d106      	bne.n	8001a6e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2223      	movs	r2, #35	@ 0x23
 8001a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f003 fa0b 	bl	8004e84 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b6c <HAL_ETH_Init+0x128>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a72:	4a3e      	ldr	r2, [pc, #248]	@ (8001b6c <HAL_ETH_Init+0x128>)
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b6c <HAL_ETH_Init+0x128>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a86:	4b3a      	ldr	r3, [pc, #232]	@ (8001b70 <HAL_ETH_Init+0x12c>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a39      	ldr	r2, [pc, #228]	@ (8001b70 <HAL_ETH_Init+0x12c>)
 8001a8c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001a90:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a92:	4b37      	ldr	r3, [pc, #220]	@ (8001b70 <HAL_ETH_Init+0x12c>)
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	4935      	ldr	r1, [pc, #212]	@ (8001b70 <HAL_ETH_Init+0x12c>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001aa0:	4b33      	ldr	r3, [pc, #204]	@ (8001b70 <HAL_ETH_Init+0x12c>)
 8001aa2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001aba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001abc:	f7ff fe34 	bl	8001728 <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ac2:	e011      	b.n	8001ae8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ac4:	f7ff fe30 	bl	8001728 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ad2:	d909      	bls.n	8001ae8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	22e0      	movs	r2, #224	@ 0xe0
 8001ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e03d      	b.n	8001b64 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1e4      	bne.n	8001ac4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fd58 	bl	80025b0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fe03 	bl	800270c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fe59 	bl	80027be <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	461a      	mov	r2, r3
 8001b12:	2100      	movs	r1, #0
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fdc1 	bl	800269c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001b28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <HAL_ETH_Init+0x130>)
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001b4e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40013800 	.word	0x40013800
 8001b74:	00020060 	.word	0x00020060

08001b78 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d150      	bne.n	8001c2c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2223      	movs	r2, #35	@ 0x23
 8001b8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2204      	movs	r2, #4
 8001b96:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f939 	bl	8001e10 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0208 	orr.w	r2, r2, #8
 8001bac:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f7ff fdc2 	bl	8001740 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0204 	orr.w	r2, r2, #4
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff fdaf 	bl	8001740 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fb7c 	bl	80022e8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c06:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c1e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2223      	movs	r2, #35	@ 0x23
 8001c24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e000      	b.n	8001c2e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
  }
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c44:	2b23      	cmp	r3, #35	@ 0x23
 8001c46:	d14a      	bne.n	8001cde <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2223      	movs	r2, #35	@ 0x23
 8001c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001c62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c66:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	f023 0302 	bic.w	r3, r3, #2
 8001c7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c7e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0204 	bic.w	r2, r2, #4
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f7ff fd51 	bl	8001740 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fb1e 	bl	80022e8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0208 	bic.w	r2, r2, #8
 8001cba:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7ff fd3b 	bl	8001740 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e000      	b.n	8001ce0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
  }
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e07c      	b.n	8001e08 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d14:	2b23      	cmp	r3, #35	@ 0x23
 8001d16:	d176      	bne.n	8001e06 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	68b9      	ldr	r1, [r7, #8]
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 fdbd 	bl	800289c <ETH_Prepare_Tx_Descriptors>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d2e:	f043 0202 	orr.w	r2, r3, #2
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e065      	b.n	8001e08 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d3c:	f3bf 8f4f 	dsb	sy
}
 8001d40:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3206      	adds	r2, #6
 8001d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d904      	bls.n	8001d6c <HAL_ETH_Transmit+0x84>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d66:	1f1a      	subs	r2, r3, #4
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3106      	adds	r1, #6
 8001d78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d80:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001d82:	f7ff fcd1 	bl	8001728 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001d88:	e037      	b.n	8001dfa <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d011      	beq.n	8001dc0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001da2:	f043 0208 	orr.w	r2, r3, #8
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e023      	b.n	8001e08 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dc6:	d018      	beq.n	8001dfa <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001dc8:	f7ff fcae 	bl	8001728 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d302      	bcc.n	8001dde <HAL_ETH_Transmit+0xf6>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de4:	f043 0204 	orr.w	r2, r3, #4
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001df4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e006      	b.n	8001e08 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	dbc3      	blt.n	8001d8a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
  }
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e24:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	3212      	adds	r2, #18
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e36:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001e38:	e042      	b.n	8001ec0 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d112      	bne.n	8001e68 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001e42:	f107 0308 	add.w	r3, r7, #8
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 f98e 	bl	8005168 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d102      	bne.n	8001e58 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	74fb      	strb	r3, [r7, #19]
 8001e56:	e007      	b.n	8001e68 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	461a      	mov	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001e68:	7cfb      	ldrb	r3, [r7, #19]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d028      	beq.n	8001ec0 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	4b26      	ldr	r3, [pc, #152]	@ (8001f14 <ETH_UpdateDescriptor+0x104>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	6053      	str	r3, [r2, #4]
 8001e82:	e005      	b.n	8001e90 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d902      	bls.n	8001eae <ETH_UpdateDescriptor+0x9e>
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	3212      	adds	r2, #18
 8001eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb8:	617b      	str	r3, [r7, #20]
      desccount--;
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <ETH_UpdateDescriptor+0xbc>
 8001ec6:	7cfb      	ldrb	r3, [r7, #19]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1b6      	bne.n	8001e3a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d01a      	beq.n	8001f0c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001ee0:	f3bf 8f5f 	dmb	sy
}
 8001ee4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6919      	ldr	r1, [r3, #16]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	18ca      	adds	r2, r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001efe:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	80004000 	.word	0x80004000

08001f18 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 031c 	and.w	r3, r3, #28
 8001f34:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	02db      	lsls	r3, r3, #11
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	019b      	lsls	r3, r3, #6
 8001f46:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f023 0302 	bic.w	r3, r3, #2
 8001f56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001f68:	f7ff fbde 	bl	8001728 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f6e:	e00d      	b.n	8001f8c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001f70:	f7ff fbda 	bl	8001728 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f7e:	d301      	bcc.n	8001f84 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e010      	b.n	8001fa6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1ec      	bne.n	8001f70 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 031c 	and.w	r3, r3, #28
 8001fca:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	02db      	lsls	r3, r3, #11
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	019b      	lsls	r3, r3, #6
 8001fdc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002008:	f7ff fb8e 	bl	8001728 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800200e:	e00d      	b.n	800202c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002010:	f7ff fb8a 	bl	8001728 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800201e:	d301      	bcc.n	8002024 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e009      	b.n	8002038 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1ec      	bne.n	8002010 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0e6      	b.n	8002222 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b00      	cmp	r3, #0
 8002060:	bf14      	ite	ne
 8002062:	2301      	movne	r3, #1
 8002064:	2300      	moveq	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800210e:	2b00      	cmp	r3, #0
 8002110:	bf0c      	ite	eq
 8002112:	2301      	moveq	r3, #1
 8002114:	2300      	movne	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf0c      	ite	eq
 800212c:	2301      	moveq	r3, #1
 800212e:	2300      	movne	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf14      	ite	ne
 8002146:	2301      	movne	r3, #1
 8002148:	2300      	moveq	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf14      	ite	ne
 80021a2:	2301      	movne	r3, #1
 80021a4:	2300      	moveq	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bf0c      	ite	eq
 80021be:	2301      	moveq	r3, #1
 80021c0:	2300      	movne	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf14      	ite	ne
 80021f6:	2301      	movne	r3, #1
 80021f8:	2300      	moveq	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf14      	ite	ne
 8002212:	2301      	movne	r3, #1
 8002214:	2300      	moveq	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00b      	b.n	800225a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002248:	2b10      	cmp	r3, #16
 800224a:	d105      	bne.n	8002258 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800224c:	6839      	ldr	r1, [r7, #0]
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f870 	bl	8002334 <ETH_SetMACConfig>

    return HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	e000      	b.n	800225a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
  }
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 031c 	bic.w	r3, r3, #28
 800227a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800227c:	f001 fac0 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8002280:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d804      	bhi.n	8002294 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f043 0308 	orr.w	r3, r3, #8
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	e019      	b.n	80022c8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4a11      	ldr	r2, [pc, #68]	@ (80022dc <HAL_ETH_SetMDIOClockRange+0x78>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d204      	bcs.n	80022a6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f043 030c 	orr.w	r3, r3, #12
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e010      	b.n	80022c8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4a0d      	ldr	r2, [pc, #52]	@ (80022e0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d90c      	bls.n	80022c8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4a0c      	ldr	r2, [pc, #48]	@ (80022e4 <HAL_ETH_SetMDIOClockRange+0x80>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d804      	bhi.n	80022c0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	e003      	b.n	80022c8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f043 0310 	orr.w	r3, r3, #16
 80022c6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	611a      	str	r2, [r3, #16]
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	02160ebf 	.word	0x02160ebf
 80022dc:	03938700 	.word	0x03938700
 80022e0:	05f5e0ff 	.word	0x05f5e0ff
 80022e4:	08f0d17f 	.word	0x08f0d17f

080022e8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002306:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800230a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002318:	2001      	movs	r0, #1
 800231a:	f7ff fa11 	bl	8001740 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002328:	6193      	str	r3, [r2, #24]
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4b53      	ldr	r3, [pc, #332]	@ (8002498 <ETH_SetMACConfig+0x164>)
 800234a:	4013      	ands	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	7b9b      	ldrb	r3, [r3, #14]
 8002352:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	7c12      	ldrb	r2, [r2, #16]
 8002358:	2a00      	cmp	r2, #0
 800235a:	d102      	bne.n	8002362 <ETH_SetMACConfig+0x2e>
 800235c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002360:	e000      	b.n	8002364 <ETH_SetMACConfig+0x30>
 8002362:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002364:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	7c52      	ldrb	r2, [r2, #17]
 800236a:	2a00      	cmp	r2, #0
 800236c:	d102      	bne.n	8002374 <ETH_SetMACConfig+0x40>
 800236e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002372:	e000      	b.n	8002376 <ETH_SetMACConfig+0x42>
 8002374:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002376:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800237c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	7fdb      	ldrb	r3, [r3, #31]
 8002382:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002384:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800238a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	7f92      	ldrb	r2, [r2, #30]
 8002390:	2a00      	cmp	r2, #0
 8002392:	d102      	bne.n	800239a <ETH_SetMACConfig+0x66>
 8002394:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002398:	e000      	b.n	800239c <ETH_SetMACConfig+0x68>
 800239a:	2200      	movs	r2, #0
                        macconf->Speed |
 800239c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	7f1b      	ldrb	r3, [r3, #28]
 80023a2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023a4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	791b      	ldrb	r3, [r3, #4]
 80023b0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80023b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80023ba:	2a00      	cmp	r2, #0
 80023bc:	d102      	bne.n	80023c4 <ETH_SetMACConfig+0x90>
 80023be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023c2:	e000      	b.n	80023c6 <ETH_SetMACConfig+0x92>
 80023c4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	7bdb      	ldrb	r3, [r3, #15]
 80023cc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023ce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80023dc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80023de:	4313      	orrs	r3, r2
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f6:	2001      	movs	r0, #1
 80023f8:	f7ff f9a2 	bl	8001740 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002412:	4013      	ands	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800241a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002422:	2a00      	cmp	r2, #0
 8002424:	d101      	bne.n	800242a <ETH_SetMACConfig+0xf6>
 8002426:	2280      	movs	r2, #128	@ 0x80
 8002428:	e000      	b.n	800242c <ETH_SetMACConfig+0xf8>
 800242a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800242c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002432:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800243a:	2a01      	cmp	r2, #1
 800243c:	d101      	bne.n	8002442 <ETH_SetMACConfig+0x10e>
 800243e:	2208      	movs	r2, #8
 8002440:	e000      	b.n	8002444 <ETH_SetMACConfig+0x110>
 8002442:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002444:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800244c:	2a01      	cmp	r2, #1
 800244e:	d101      	bne.n	8002454 <ETH_SetMACConfig+0x120>
 8002450:	2204      	movs	r2, #4
 8002452:	e000      	b.n	8002456 <ETH_SetMACConfig+0x122>
 8002454:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002456:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800245e:	2a01      	cmp	r2, #1
 8002460:	d101      	bne.n	8002466 <ETH_SetMACConfig+0x132>
 8002462:	2202      	movs	r2, #2
 8002464:	e000      	b.n	8002468 <ETH_SetMACConfig+0x134>
 8002466:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002468:	4313      	orrs	r3, r2
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002480:	2001      	movs	r0, #1
 8002482:	f7ff f95d 	bl	8001740 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	619a      	str	r2, [r3, #24]
}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	fd20810f 	.word	0xfd20810f

0800249c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4b3d      	ldr	r3, [pc, #244]	@ (80025ac <ETH_SetDMAConfig+0x110>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	7b1b      	ldrb	r3, [r3, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d102      	bne.n	80024c8 <ETH_SetDMAConfig+0x2c>
 80024c2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024c6:	e000      	b.n	80024ca <ETH_SetDMAConfig+0x2e>
 80024c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	7b5b      	ldrb	r3, [r3, #13]
 80024ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	7f52      	ldrb	r2, [r2, #29]
 80024d6:	2a00      	cmp	r2, #0
 80024d8:	d102      	bne.n	80024e0 <ETH_SetDMAConfig+0x44>
 80024da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80024de:	e000      	b.n	80024e2 <ETH_SetDMAConfig+0x46>
 80024e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	7b9b      	ldrb	r3, [r3, #14]
 80024e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80024ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80024f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	7f1b      	ldrb	r3, [r3, #28]
 80024f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80024f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	7f9b      	ldrb	r3, [r3, #30]
 80024fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002500:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002506:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800250e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002510:	4313      	orrs	r3, r2
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002520:	461a      	mov	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff f904 	bl	8001740 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002540:	461a      	mov	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	791b      	ldrb	r3, [r3, #4]
 800254a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002550:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002556:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800255c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002564:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002566:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800256e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002574:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800257e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002582:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002590:	2001      	movs	r0, #1
 8002592:	f7ff f8d5 	bl	8001740 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	f8de3f23 	.word	0xf8de3f23

080025b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b0a6      	sub	sp, #152	@ 0x98
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80025b8:	2301      	movs	r3, #1
 80025ba:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80025be:	2301      	movs	r3, #1
 80025c0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80025c4:	2300      	movs	r3, #0
 80025c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025f2:	2300      	movs	r3, #0
 80025f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002606:	2300      	movs	r3, #0
 8002608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002618:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800261c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800261e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800262a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800262e:	4619      	mov	r1, r3
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff fe7f 	bl	8002334 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002636:	2301      	movs	r3, #1
 8002638:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800263a:	2301      	movs	r3, #1
 800263c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800263e:	2301      	movs	r3, #1
 8002640:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002644:	2301      	movs	r3, #1
 8002646:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002658:	2300      	movs	r3, #0
 800265a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800265c:	2301      	movs	r3, #1
 800265e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002662:	2301      	movs	r3, #1
 8002664:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002666:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800266a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800266c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002670:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002672:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002676:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002678:	2301      	movs	r3, #1
 800267a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800267e:	2300      	movs	r3, #0
 8002680:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	4619      	mov	r1, r3
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ff05 	bl	800249c <ETH_SetDMAConfig>
}
 8002692:	bf00      	nop
 8002694:	3798      	adds	r7, #152	@ 0x98
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3305      	adds	r3, #5
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	3204      	adds	r2, #4
 80026b4:	7812      	ldrb	r2, [r2, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <ETH_MACAddressConfig+0x68>)
 80026be:	4413      	add	r3, r2
 80026c0:	461a      	mov	r2, r3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3303      	adds	r3, #3
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	061a      	lsls	r2, r3, #24
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3302      	adds	r3, #2
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	041b      	lsls	r3, r3, #16
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3301      	adds	r3, #1
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	4313      	orrs	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	7812      	ldrb	r2, [r2, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <ETH_MACAddressConfig+0x6c>)
 80026ee:	4413      	add	r3, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	6013      	str	r3, [r2, #0]
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40028040 	.word	0x40028040
 8002708:	40028044 	.word	0x40028044

0800270c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	e03e      	b.n	8002798 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68d9      	ldr	r1, [r3, #12]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	440b      	add	r3, r1
 800272a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2200      	movs	r2, #0
 8002742:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	3206      	adds	r2, #6
 800274c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d80c      	bhi.n	800277c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68d9      	ldr	r1, [r3, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	461a      	mov	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	e004      	b.n	8002786 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	461a      	mov	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3301      	adds	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d9bd      	bls.n	800271a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b0:	611a      	str	r2, [r3, #16]
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e048      	b.n	800285e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6919      	ldr	r1, [r3, #16]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2200      	movs	r2, #0
 80027e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2200      	movs	r2, #0
 80027fa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2200      	movs	r2, #0
 8002800:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002808:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	3212      	adds	r2, #18
 800282a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d80c      	bhi.n	800284e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6919      	ldr	r1, [r3, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	440b      	add	r3, r1
 8002846:	461a      	mov	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	e004      	b.n	8002858 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	461a      	mov	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3301      	adds	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d9b3      	bls.n	80027cc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800288e:	60da      	str	r2, [r3, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800289c:	b480      	push	{r7}
 800289e:	b091      	sub	sp, #68	@ 0x44
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3318      	adds	r3, #24
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80028d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028de:	d007      	beq.n	80028f0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e4:	3304      	adds	r3, #4
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80028f0:	2302      	movs	r3, #2
 80028f2:	e111      	b.n	8002b18 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80028f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f6:	3301      	adds	r3, #1
 80028f8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80028fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002902:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	4b86      	ldr	r3, [pc, #536]	@ (8002b24 <ETH_Prepare_Tx_Descriptors+0x288>)
 800290a:	4013      	ands	r3, r2
 800290c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800290e:	6852      	ldr	r2, [r2, #4]
 8002910:	431a      	orrs	r2, r3
 8002912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002914:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	431a      	orrs	r2, r3
 8002930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002932:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	431a      	orrs	r2, r3
 800294e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002950:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800295e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002968:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800296a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002974:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002976:	e082      	b.n	8002a7e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002982:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800298a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e005      	b.n	80029a4 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80029a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80029a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a6:	3301      	adds	r3, #1
 80029a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d902      	bls.n	80029b6 <ETH_Prepare_Tx_Descriptors+0x11a>
 80029b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b2:	3b04      	subs	r3, #4
 80029b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029be:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80029c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029cc:	d007      	beq.n	80029de <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80029ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029d2:	3304      	adds	r3, #4
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d029      	beq.n	8002a32 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029f0:	e019      	b.n	8002a26 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80029f2:	f3bf 8f5f 	dmb	sy
}
 80029f6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80029f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a02:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a06:	3301      	adds	r3, #1
 8002a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d902      	bls.n	8002a16 <ETH_Prepare_Tx_Descriptors+0x17a>
 8002a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a12:	3b04      	subs	r3, #4
 8002a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a22:	3301      	adds	r3, #1
 8002a24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d3e1      	bcc.n	80029f2 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e072      	b.n	8002b18 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a40:	3301      	adds	r3, #1
 8002a42:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a52:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4b32      	ldr	r3, [pc, #200]	@ (8002b24 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a5e:	6852      	ldr	r2, [r2, #4]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a64:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a68:	3301      	adds	r3, #1
 8002a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002a6c:	f3bf 8f5f 	dmb	sy
}
 8002a70:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f47f af78 	bne.w	8002978 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e005      	b.n	8002aa8 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	6a3a      	ldr	r2, [r7, #32]
 8002ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002abc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002abe:	f3bf 8f5f 	dmb	sy
}
 8002ac2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ace:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ad4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad8:	3304      	adds	r3, #4
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ae4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8002aea:	613b      	str	r3, [r7, #16]
  return(result);
 8002aec:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	2301      	movs	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f383 8810 	msr	PRIMASK, r3
}
 8002afa:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b02:	4413      	add	r3, r2
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	f383 8810 	msr	PRIMASK, r3
}
 8002b14:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3744      	adds	r7, #68	@ 0x44
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	ffffe000 	.word	0xffffe000

08002b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	@ 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	e175      	b.n	8002e34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	f040 8164 	bne.w	8002e2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d005      	beq.n	8002b7e <HAL_GPIO_Init+0x56>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d130      	bne.n	8002be0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 0201 	and.w	r2, r3, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d017      	beq.n	8002c1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d123      	bne.n	8002c70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	08da      	lsrs	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3208      	adds	r2, #8
 8002c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	220f      	movs	r2, #15
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	08da      	lsrs	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3208      	adds	r2, #8
 8002c6a:	69b9      	ldr	r1, [r7, #24]
 8002c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0203 	and.w	r2, r3, #3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80be 	beq.w	8002e2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb2:	4b66      	ldr	r3, [pc, #408]	@ (8002e4c <HAL_GPIO_Init+0x324>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	4a65      	ldr	r2, [pc, #404]	@ (8002e4c <HAL_GPIO_Init+0x324>)
 8002cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cbe:	4b63      	ldr	r3, [pc, #396]	@ (8002e4c <HAL_GPIO_Init+0x324>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cca:	4a61      	ldr	r2, [pc, #388]	@ (8002e50 <HAL_GPIO_Init+0x328>)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	220f      	movs	r2, #15
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a58      	ldr	r2, [pc, #352]	@ (8002e54 <HAL_GPIO_Init+0x32c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d037      	beq.n	8002d66 <HAL_GPIO_Init+0x23e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a57      	ldr	r2, [pc, #348]	@ (8002e58 <HAL_GPIO_Init+0x330>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d031      	beq.n	8002d62 <HAL_GPIO_Init+0x23a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a56      	ldr	r2, [pc, #344]	@ (8002e5c <HAL_GPIO_Init+0x334>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d02b      	beq.n	8002d5e <HAL_GPIO_Init+0x236>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a55      	ldr	r2, [pc, #340]	@ (8002e60 <HAL_GPIO_Init+0x338>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d025      	beq.n	8002d5a <HAL_GPIO_Init+0x232>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a54      	ldr	r2, [pc, #336]	@ (8002e64 <HAL_GPIO_Init+0x33c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01f      	beq.n	8002d56 <HAL_GPIO_Init+0x22e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a53      	ldr	r2, [pc, #332]	@ (8002e68 <HAL_GPIO_Init+0x340>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d019      	beq.n	8002d52 <HAL_GPIO_Init+0x22a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a52      	ldr	r2, [pc, #328]	@ (8002e6c <HAL_GPIO_Init+0x344>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_GPIO_Init+0x226>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a51      	ldr	r2, [pc, #324]	@ (8002e70 <HAL_GPIO_Init+0x348>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00d      	beq.n	8002d4a <HAL_GPIO_Init+0x222>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a50      	ldr	r2, [pc, #320]	@ (8002e74 <HAL_GPIO_Init+0x34c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d007      	beq.n	8002d46 <HAL_GPIO_Init+0x21e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4f      	ldr	r2, [pc, #316]	@ (8002e78 <HAL_GPIO_Init+0x350>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d101      	bne.n	8002d42 <HAL_GPIO_Init+0x21a>
 8002d3e:	2309      	movs	r3, #9
 8002d40:	e012      	b.n	8002d68 <HAL_GPIO_Init+0x240>
 8002d42:	230a      	movs	r3, #10
 8002d44:	e010      	b.n	8002d68 <HAL_GPIO_Init+0x240>
 8002d46:	2308      	movs	r3, #8
 8002d48:	e00e      	b.n	8002d68 <HAL_GPIO_Init+0x240>
 8002d4a:	2307      	movs	r3, #7
 8002d4c:	e00c      	b.n	8002d68 <HAL_GPIO_Init+0x240>
 8002d4e:	2306      	movs	r3, #6
 8002d50:	e00a      	b.n	8002d68 <HAL_GPIO_Init+0x240>
 8002d52:	2305      	movs	r3, #5
 8002d54:	e008      	b.n	8002d68 <HAL_GPIO_Init+0x240>
 8002d56:	2304      	movs	r3, #4
 8002d58:	e006      	b.n	8002d68 <HAL_GPIO_Init+0x240>
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e004      	b.n	8002d68 <HAL_GPIO_Init+0x240>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e002      	b.n	8002d68 <HAL_GPIO_Init+0x240>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <HAL_GPIO_Init+0x240>
 8002d66:	2300      	movs	r3, #0
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	f002 0203 	and.w	r2, r2, #3
 8002d6e:	0092      	lsls	r2, r2, #2
 8002d70:	4093      	lsls	r3, r2
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d78:	4935      	ldr	r1, [pc, #212]	@ (8002e50 <HAL_GPIO_Init+0x328>)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	3302      	adds	r3, #2
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d86:	4b3d      	ldr	r3, [pc, #244]	@ (8002e7c <HAL_GPIO_Init+0x354>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002daa:	4a34      	ldr	r2, [pc, #208]	@ (8002e7c <HAL_GPIO_Init+0x354>)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db0:	4b32      	ldr	r3, [pc, #200]	@ (8002e7c <HAL_GPIO_Init+0x354>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd4:	4a29      	ldr	r2, [pc, #164]	@ (8002e7c <HAL_GPIO_Init+0x354>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dda:	4b28      	ldr	r3, [pc, #160]	@ (8002e7c <HAL_GPIO_Init+0x354>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8002e7c <HAL_GPIO_Init+0x354>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e04:	4b1d      	ldr	r3, [pc, #116]	@ (8002e7c <HAL_GPIO_Init+0x354>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e28:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <HAL_GPIO_Init+0x354>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3301      	adds	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	2b0f      	cmp	r3, #15
 8002e38:	f67f ae86 	bls.w	8002b48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3724      	adds	r7, #36	@ 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40013800 	.word	0x40013800
 8002e54:	40020000 	.word	0x40020000
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	40020800 	.word	0x40020800
 8002e60:	40020c00 	.word	0x40020c00
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40021400 	.word	0x40021400
 8002e6c:	40021800 	.word	0x40021800
 8002e70:	40021c00 	.word	0x40021c00
 8002e74:	40022000 	.word	0x40022000
 8002e78:	40022400 	.word	0x40022400
 8002e7c:	40013c00 	.word	0x40013c00

08002e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e90:	787b      	ldrb	r3, [r7, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e9c:	e003      	b.n	8002ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	041a      	lsls	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	619a      	str	r2, [r3, #24]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	4b23      	ldr	r3, [pc, #140]	@ (8002f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	4a22      	ldr	r2, [pc, #136]	@ (8002f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eca:	4b20      	ldr	r3, [pc, #128]	@ (8002f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1d      	ldr	r2, [pc, #116]	@ (8002f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee2:	f7fe fc21 	bl	8001728 <HAL_GetTick>
 8002ee6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ee8:	e009      	b.n	8002efe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002eea:	f7fe fc1d 	bl	8001728 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ef8:	d901      	bls.n	8002efe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e022      	b.n	8002f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002efe:	4b14      	ldr	r3, [pc, #80]	@ (8002f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f0a:	d1ee      	bne.n	8002eea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f0c:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0f      	ldr	r2, [pc, #60]	@ (8002f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f18:	f7fe fc06 	bl	8001728 <HAL_GetTick>
 8002f1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f1e:	e009      	b.n	8002f34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f20:	f7fe fc02 	bl	8001728 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f2e:	d901      	bls.n	8002f34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e007      	b.n	8002f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f40:	d1ee      	bne.n	8002f20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40007000 	.word	0x40007000

08002f54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e291      	b.n	800348e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8087 	beq.w	8003086 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f78:	4b96      	ldr	r3, [pc, #600]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d00c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f84:	4b93      	ldr	r3, [pc, #588]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d112      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62>
 8002f90:	4b90      	ldr	r3, [pc, #576]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9e:	4b8d      	ldr	r3, [pc, #564]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d06c      	beq.n	8003084 <HAL_RCC_OscConfig+0x130>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d168      	bne.n	8003084 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e26b      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x7a>
 8002fc0:	4b84      	ldr	r3, [pc, #528]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a83      	ldr	r2, [pc, #524]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	e02e      	b.n	800302c <HAL_RCC_OscConfig+0xd8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x9c>
 8002fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a7e      	ldr	r2, [pc, #504]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	4b7c      	ldr	r3, [pc, #496]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a7b      	ldr	r2, [pc, #492]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fe8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e01d      	b.n	800302c <HAL_RCC_OscConfig+0xd8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0xc0>
 8002ffa:	4b76      	ldr	r3, [pc, #472]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a75      	ldr	r2, [pc, #468]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	4b73      	ldr	r3, [pc, #460]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a72      	ldr	r2, [pc, #456]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0xd8>
 8003014:	4b6f      	ldr	r3, [pc, #444]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a6e      	ldr	r2, [pc, #440]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 800301a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b6c      	ldr	r3, [pc, #432]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a6b      	ldr	r2, [pc, #428]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800302a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fe fb78 	bl	8001728 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303c:	f7fe fb74 	bl	8001728 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	@ 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e21f      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b61      	ldr	r3, [pc, #388]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0xe8>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe fb64 	bl	8001728 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe fb60 	bl	8001728 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	@ 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e20b      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003076:	4b57      	ldr	r3, [pc, #348]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x110>
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d069      	beq.n	8003166 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003092:	4b50      	ldr	r3, [pc, #320]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309e:	4b4d      	ldr	r3, [pc, #308]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d11c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x190>
 80030aa:	4b4a      	ldr	r3, [pc, #296]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d116      	bne.n	80030e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	4b47      	ldr	r3, [pc, #284]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_RCC_OscConfig+0x17a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e1df      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ce:	4b41      	ldr	r3, [pc, #260]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	493d      	ldr	r1, [pc, #244]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	e040      	b.n	8003166 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d023      	beq.n	8003134 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ec:	4b39      	ldr	r3, [pc, #228]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a38      	ldr	r2, [pc, #224]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe fb16 	bl	8001728 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003100:	f7fe fb12 	bl	8001728 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1bd      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003112:	4b30      	ldr	r3, [pc, #192]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311e:	4b2d      	ldr	r3, [pc, #180]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4929      	ldr	r1, [pc, #164]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]
 8003132:	e018      	b.n	8003166 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003134:	4b27      	ldr	r3, [pc, #156]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a26      	ldr	r2, [pc, #152]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe faf2 	bl	8001728 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003148:	f7fe faee 	bl	8001728 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e199      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315a:	4b1e      	ldr	r3, [pc, #120]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d038      	beq.n	80031e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d019      	beq.n	80031ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317a:	4b16      	ldr	r3, [pc, #88]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 800317c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800317e:	4a15      	ldr	r2, [pc, #84]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fe facf 	bl	8001728 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318e:	f7fe facb 	bl	8001728 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e176      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a0:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 80031a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x23a>
 80031ac:	e01a      	b.n	80031e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ae:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 80031b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b2:	4a08      	ldr	r2, [pc, #32]	@ (80031d4 <HAL_RCC_OscConfig+0x280>)
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fe fab5 	bl	8001728 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c2:	f7fe fab1 	bl	8001728 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d903      	bls.n	80031d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e15c      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
 80031d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	4b91      	ldr	r3, [pc, #580]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80031da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ee      	bne.n	80031c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80a4 	beq.w	800333a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f2:	4b8b      	ldr	r3, [pc, #556]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10d      	bne.n	800321a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	4b88      	ldr	r3, [pc, #544]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	4a87      	ldr	r2, [pc, #540]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003208:	6413      	str	r3, [r2, #64]	@ 0x40
 800320a:	4b85      	ldr	r3, [pc, #532]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321a:	4b82      	ldr	r3, [pc, #520]	@ (8003424 <HAL_RCC_OscConfig+0x4d0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d118      	bne.n	8003258 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003226:	4b7f      	ldr	r3, [pc, #508]	@ (8003424 <HAL_RCC_OscConfig+0x4d0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a7e      	ldr	r2, [pc, #504]	@ (8003424 <HAL_RCC_OscConfig+0x4d0>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003232:	f7fe fa79 	bl	8001728 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323a:	f7fe fa75 	bl	8001728 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b64      	cmp	r3, #100	@ 0x64
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e120      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324c:	4b75      	ldr	r3, [pc, #468]	@ (8003424 <HAL_RCC_OscConfig+0x4d0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x31a>
 8003260:	4b6f      	ldr	r3, [pc, #444]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003264:	4a6e      	ldr	r2, [pc, #440]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6713      	str	r3, [r2, #112]	@ 0x70
 800326c:	e02d      	b.n	80032ca <HAL_RCC_OscConfig+0x376>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x33c>
 8003276:	4b6a      	ldr	r3, [pc, #424]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327a:	4a69      	ldr	r2, [pc, #420]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	6713      	str	r3, [r2, #112]	@ 0x70
 8003282:	4b67      	ldr	r3, [pc, #412]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003286:	4a66      	ldr	r2, [pc, #408]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003288:	f023 0304 	bic.w	r3, r3, #4
 800328c:	6713      	str	r3, [r2, #112]	@ 0x70
 800328e:	e01c      	b.n	80032ca <HAL_RCC_OscConfig+0x376>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b05      	cmp	r3, #5
 8003296:	d10c      	bne.n	80032b2 <HAL_RCC_OscConfig+0x35e>
 8003298:	4b61      	ldr	r3, [pc, #388]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329c:	4a60      	ldr	r2, [pc, #384]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b0:	e00b      	b.n	80032ca <HAL_RCC_OscConfig+0x376>
 80032b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032be:	4b58      	ldr	r3, [pc, #352]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c2:	4a57      	ldr	r2, [pc, #348]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d015      	beq.n	80032fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fe fa29 	bl	8001728 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fe fa25 	bl	8001728 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0ce      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ee      	beq.n	80032da <HAL_RCC_OscConfig+0x386>
 80032fc:	e014      	b.n	8003328 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fe:	f7fe fa13 	bl	8001728 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003304:	e00a      	b.n	800331c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fe fa0f 	bl	8001728 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e0b8      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331c:	4b40      	ldr	r3, [pc, #256]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1ee      	bne.n	8003306 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d105      	bne.n	800333a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332e:	4b3c      	ldr	r3, [pc, #240]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	4a3b      	ldr	r2, [pc, #236]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003334:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003338:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80a4 	beq.w	800348c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003344:	4b36      	ldr	r3, [pc, #216]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d06b      	beq.n	8003428 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d149      	bne.n	80033ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b31      	ldr	r3, [pc, #196]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a30      	ldr	r2, [pc, #192]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800335e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe f9e0 	bl	8001728 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe f9dc 	bl	8001728 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e087      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	4b28      	ldr	r3, [pc, #160]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	019b      	lsls	r3, r3, #6
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	3b01      	subs	r3, #1
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	4313      	orrs	r3, r2
 80033b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80033b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b8:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a18      	ldr	r2, [pc, #96]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe f9b0 	bl	8001728 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe f9ac 	bl	8001728 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e057      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x478>
 80033ea:	e04f      	b.n	800348c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe f996 	bl	8001728 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe f992 	bl	8001728 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e03d      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b03      	ldr	r3, [pc, #12]	@ (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x4ac>
 800341e:	e035      	b.n	800348c <HAL_RCC_OscConfig+0x538>
 8003420:	40023800 	.word	0x40023800
 8003424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003428:	4b1b      	ldr	r3, [pc, #108]	@ (8003498 <HAL_RCC_OscConfig+0x544>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d028      	beq.n	8003488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d121      	bne.n	8003488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d11a      	bne.n	8003488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800345e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	3b01      	subs	r3, #1
 8003472:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800

0800349c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0d0      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d910      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b67      	ldr	r3, [pc, #412]	@ (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 020f 	bic.w	r2, r3, #15
 80034ca:	4965      	ldr	r1, [pc, #404]	@ (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b63      	ldr	r3, [pc, #396]	@ (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0b8      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034fc:	4b59      	ldr	r3, [pc, #356]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a58      	ldr	r2, [pc, #352]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003502:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003506:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003514:	4b53      	ldr	r3, [pc, #332]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	4a52      	ldr	r2, [pc, #328]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800351a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800351e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003520:	4b50      	ldr	r3, [pc, #320]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	494d      	ldr	r1, [pc, #308]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d040      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b47      	ldr	r3, [pc, #284]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d115      	bne.n	800357e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e07f      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b41      	ldr	r3, [pc, #260]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e073      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	4b3d      	ldr	r3, [pc, #244]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06b      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357e:	4b39      	ldr	r3, [pc, #228]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4936      	ldr	r1, [pc, #216]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800358c:	4313      	orrs	r3, r2
 800358e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003590:	f7fe f8ca 	bl	8001728 <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	e00a      	b.n	80035ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003598:	f7fe f8c6 	bl	8001728 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e053      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 020c 	and.w	r2, r3, #12
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1eb      	bne.n	8003598 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c0:	4b27      	ldr	r3, [pc, #156]	@ (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d210      	bcs.n	80035f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 020f 	bic.w	r2, r3, #15
 80035d6:	4922      	ldr	r1, [pc, #136]	@ (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b20      	ldr	r3, [pc, #128]	@ (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e032      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035fc:	4b19      	ldr	r3, [pc, #100]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4916      	ldr	r1, [pc, #88]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800361a:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	490e      	ldr	r1, [pc, #56]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800362e:	f000 f821 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8003632:	4602      	mov	r2, r0
 8003634:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	490a      	ldr	r1, [pc, #40]	@ (8003668 <HAL_RCC_ClockConfig+0x1cc>)
 8003640:	5ccb      	ldrb	r3, [r1, r3]
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	4a09      	ldr	r2, [pc, #36]	@ (800366c <HAL_RCC_ClockConfig+0x1d0>)
 8003648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800364a:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <HAL_RCC_ClockConfig+0x1d4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe f826 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023c00 	.word	0x40023c00
 8003664:	40023800 	.word	0x40023800
 8003668:	08012524 	.word	0x08012524
 800366c:	20000000 	.word	0x20000000
 8003670:	20000004 	.word	0x20000004

08003674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003678:	b090      	sub	sp, #64	@ 0x40
 800367a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003680:	2300      	movs	r3, #0
 8003682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003684:	2300      	movs	r3, #0
 8003686:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800368c:	4b59      	ldr	r3, [pc, #356]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 030c 	and.w	r3, r3, #12
 8003694:	2b08      	cmp	r3, #8
 8003696:	d00d      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003698:	2b08      	cmp	r3, #8
 800369a:	f200 80a1 	bhi.w	80037e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x34>
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d003      	beq.n	80036ae <HAL_RCC_GetSysClockFreq+0x3a>
 80036a6:	e09b      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036a8:	4b53      	ldr	r3, [pc, #332]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80036aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036ac:	e09b      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ae:	4b53      	ldr	r3, [pc, #332]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x188>)
 80036b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036b2:	e098      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b4:	4b4f      	ldr	r3, [pc, #316]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036be:	4b4d      	ldr	r3, [pc, #308]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d028      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ca:	4b4a      	ldr	r3, [pc, #296]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	099b      	lsrs	r3, r3, #6
 80036d0:	2200      	movs	r2, #0
 80036d2:	623b      	str	r3, [r7, #32]
 80036d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036dc:	2100      	movs	r1, #0
 80036de:	4b47      	ldr	r3, [pc, #284]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x188>)
 80036e0:	fb03 f201 	mul.w	r2, r3, r1
 80036e4:	2300      	movs	r3, #0
 80036e6:	fb00 f303 	mul.w	r3, r0, r3
 80036ea:	4413      	add	r3, r2
 80036ec:	4a43      	ldr	r2, [pc, #268]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x188>)
 80036ee:	fba0 1202 	umull	r1, r2, r0, r2
 80036f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036f4:	460a      	mov	r2, r1
 80036f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80036f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036fa:	4413      	add	r3, r2
 80036fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003700:	2200      	movs	r2, #0
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	61fa      	str	r2, [r7, #28]
 8003706:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800370a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800370e:	f7fc fdcf 	bl	80002b0 <__aeabi_uldivmod>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4613      	mov	r3, r2
 8003718:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800371a:	e053      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371c:	4b35      	ldr	r3, [pc, #212]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	099b      	lsrs	r3, r3, #6
 8003722:	2200      	movs	r2, #0
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	617a      	str	r2, [r7, #20]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800372e:	f04f 0b00 	mov.w	fp, #0
 8003732:	4652      	mov	r2, sl
 8003734:	465b      	mov	r3, fp
 8003736:	f04f 0000 	mov.w	r0, #0
 800373a:	f04f 0100 	mov.w	r1, #0
 800373e:	0159      	lsls	r1, r3, #5
 8003740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003744:	0150      	lsls	r0, r2, #5
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	ebb2 080a 	subs.w	r8, r2, sl
 800374e:	eb63 090b 	sbc.w	r9, r3, fp
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800375e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003762:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003766:	ebb2 0408 	subs.w	r4, r2, r8
 800376a:	eb63 0509 	sbc.w	r5, r3, r9
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	00eb      	lsls	r3, r5, #3
 8003778:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800377c:	00e2      	lsls	r2, r4, #3
 800377e:	4614      	mov	r4, r2
 8003780:	461d      	mov	r5, r3
 8003782:	eb14 030a 	adds.w	r3, r4, sl
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	eb45 030b 	adc.w	r3, r5, fp
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800379a:	4629      	mov	r1, r5
 800379c:	028b      	lsls	r3, r1, #10
 800379e:	4621      	mov	r1, r4
 80037a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a4:	4621      	mov	r1, r4
 80037a6:	028a      	lsls	r2, r1, #10
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ae:	2200      	movs	r2, #0
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	60fa      	str	r2, [r7, #12]
 80037b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037b8:	f7fc fd7a 	bl	80002b0 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4613      	mov	r3, r2
 80037c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	3301      	adds	r3, #1
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80037d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037de:	e002      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e0:	4b05      	ldr	r3, [pc, #20]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80037e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3740      	adds	r7, #64	@ 0x40
 80037ec:	46bd      	mov	sp, r7
 80037ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	00f42400 	.word	0x00f42400
 80037fc:	017d7840 	.word	0x017d7840

08003800 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003804:	4b03      	ldr	r3, [pc, #12]	@ (8003814 <HAL_RCC_GetHCLKFreq+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000000 	.word	0x20000000

08003818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800381c:	f7ff fff0 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0a9b      	lsrs	r3, r3, #10
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4903      	ldr	r1, [pc, #12]	@ (800383c <HAL_RCC_GetPCLK1Freq+0x24>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40023800 	.word	0x40023800
 800383c:	08012534 	.word	0x08012534

08003840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003844:	f7ff ffdc 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	0b5b      	lsrs	r3, r3, #13
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4903      	ldr	r1, [pc, #12]	@ (8003864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40023800 	.word	0x40023800
 8003864:	08012534 	.word	0x08012534

08003868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d012      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003890:	4b69      	ldr	r3, [pc, #420]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4a68      	ldr	r2, [pc, #416]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003896:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800389a:	6093      	str	r3, [r2, #8]
 800389c:	4b66      	ldr	r3, [pc, #408]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a4:	4964      	ldr	r1, [pc, #400]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d017      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d0:	4959      	ldr	r1, [pc, #356]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038e0:	d101      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d017      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003904:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	494a      	ldr	r1, [pc, #296]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800391c:	d101      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800393a:	2301      	movs	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 808b 	beq.w	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800394c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	4a39      	ldr	r2, [pc, #228]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003956:	6413      	str	r3, [r2, #64]	@ 0x40
 8003958:	4b37      	ldr	r3, [pc, #220]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003964:	4b35      	ldr	r3, [pc, #212]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a34      	ldr	r2, [pc, #208]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800396a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800396e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003970:	f7fd feda 	bl	8001728 <HAL_GetTick>
 8003974:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003978:	f7fd fed6 	bl	8001728 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	@ 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e357      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800398a:	4b2c      	ldr	r3, [pc, #176]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003996:	4b28      	ldr	r3, [pc, #160]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800399e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d035      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d02e      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b4:	4b20      	ldr	r3, [pc, #128]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039be:	4b1e      	ldr	r3, [pc, #120]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039d6:	4a18      	ldr	r2, [pc, #96]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039dc:	4b16      	ldr	r3, [pc, #88]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d114      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd fe9e 	bl	8001728 <HAL_GetTick>
 80039ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ee:	e00a      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f0:	f7fd fe9a 	bl	8001728 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e319      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a06:	4b0c      	ldr	r3, [pc, #48]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0ee      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a1e:	d111      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a20:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a2c:	4b04      	ldr	r3, [pc, #16]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a2e:	400b      	ands	r3, r1
 8003a30:	4901      	ldr	r1, [pc, #4]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40007000 	.word	0x40007000
 8003a40:	0ffffcff 	.word	0x0ffffcff
 8003a44:	4baa      	ldr	r3, [pc, #680]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4aa9      	ldr	r2, [pc, #676]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003a4e:	6093      	str	r3, [r2, #8]
 8003a50:	4ba7      	ldr	r3, [pc, #668]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5c:	49a4      	ldr	r1, [pc, #656]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d010      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a6e:	4ba0      	ldr	r3, [pc, #640]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a74:	4a9e      	ldr	r2, [pc, #632]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a7e:	4b9c      	ldr	r3, [pc, #624]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a80:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a88:	4999      	ldr	r1, [pc, #612]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a9c:	4b94      	ldr	r3, [pc, #592]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aaa:	4991      	ldr	r1, [pc, #580]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003abe:	4b8c      	ldr	r3, [pc, #560]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003acc:	4988      	ldr	r1, [pc, #544]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ae0:	4b83      	ldr	r3, [pc, #524]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aee:	4980      	ldr	r1, [pc, #512]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b02:	4b7b      	ldr	r3, [pc, #492]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b08:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b10:	4977      	ldr	r1, [pc, #476]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b24:	4b72      	ldr	r3, [pc, #456]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2a:	f023 0203 	bic.w	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	496f      	ldr	r1, [pc, #444]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b46:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4c:	f023 020c 	bic.w	r2, r3, #12
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b54:	4966      	ldr	r1, [pc, #408]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b68:	4b61      	ldr	r3, [pc, #388]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b6e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b76:	495e      	ldr	r1, [pc, #376]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b8a:	4b59      	ldr	r3, [pc, #356]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b90:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b98:	4955      	ldr	r1, [pc, #340]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bac:	4b50      	ldr	r3, [pc, #320]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bba:	494d      	ldr	r1, [pc, #308]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bce:	4b48      	ldr	r3, [pc, #288]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bdc:	4944      	ldr	r1, [pc, #272]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfe:	493c      	ldr	r1, [pc, #240]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c12:	4b37      	ldr	r3, [pc, #220]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c20:	4933      	ldr	r1, [pc, #204]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c34:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c42:	492b      	ldr	r1, [pc, #172]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d011      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c56:	4b26      	ldr	r3, [pc, #152]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c64:	4922      	ldr	r1, [pc, #136]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c74:	d101      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c86:	2301      	movs	r3, #1
 8003c88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c96:	4b16      	ldr	r3, [pc, #88]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca4:	4912      	ldr	r1, [pc, #72]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cc8:	4909      	ldr	r1, [pc, #36]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d006      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80d9 	beq.w	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ce4:	4b02      	ldr	r3, [pc, #8]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a01      	ldr	r2, [pc, #4]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cee:	e001      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf6:	f7fd fd17 	bl	8001728 <HAL_GetTick>
 8003cfa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cfe:	f7fd fd13 	bl	8001728 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b64      	cmp	r3, #100	@ 0x64
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e194      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d10:	4b6c      	ldr	r3, [pc, #432]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f0      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d021      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d11d      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d30:	4b64      	ldr	r3, [pc, #400]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d36:	0c1b      	lsrs	r3, r3, #16
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d3e:	4b61      	ldr	r3, [pc, #388]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d44:	0e1b      	lsrs	r3, r3, #24
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	019a      	lsls	r2, r3, #6
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	431a      	orrs	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	061b      	lsls	r3, r3, #24
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	071b      	lsls	r3, r3, #28
 8003d64:	4957      	ldr	r1, [pc, #348]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d02e      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d96:	d129      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d98:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d9e:	0c1b      	lsrs	r3, r3, #16
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003da6:	4b47      	ldr	r3, [pc, #284]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dac:	0f1b      	lsrs	r3, r3, #28
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	019a      	lsls	r2, r3, #6
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	061b      	lsls	r3, r3, #24
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	071b      	lsls	r3, r3, #28
 8003dcc:	493d      	ldr	r1, [pc, #244]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dda:	f023 021f 	bic.w	r2, r3, #31
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	3b01      	subs	r3, #1
 8003de4:	4937      	ldr	r1, [pc, #220]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01d      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003df8:	4b32      	ldr	r3, [pc, #200]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dfe:	0e1b      	lsrs	r3, r3, #24
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e06:	4b2f      	ldr	r3, [pc, #188]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e0c:	0f1b      	lsrs	r3, r3, #28
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	019a      	lsls	r2, r3, #6
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	041b      	lsls	r3, r3, #16
 8003e20:	431a      	orrs	r2, r3
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	061b      	lsls	r3, r3, #24
 8003e26:	431a      	orrs	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	071b      	lsls	r3, r3, #28
 8003e2c:	4925      	ldr	r1, [pc, #148]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d011      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	019a      	lsls	r2, r3, #6
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	041b      	lsls	r3, r3, #16
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	061b      	lsls	r3, r3, #24
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	071b      	lsls	r3, r3, #28
 8003e5c:	4919      	ldr	r1, [pc, #100]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e64:	4b17      	ldr	r3, [pc, #92]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a16      	ldr	r2, [pc, #88]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e70:	f7fd fc5a 	bl	8001728 <HAL_GetTick>
 8003e74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e78:	f7fd fc56 	bl	8001728 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	@ 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e0d7      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	f040 80cd 	bne.w	8004038 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e9e:	4b09      	ldr	r3, [pc, #36]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a08      	ldr	r2, [pc, #32]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ea4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eaa:	f7fd fc3d 	bl	8001728 <HAL_GetTick>
 8003eae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eb0:	e00a      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003eb2:	f7fd fc39 	bl	8001728 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b64      	cmp	r3, #100	@ 0x64
 8003ebe:	d903      	bls.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e0ba      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ec4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ed4:	d0ed      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02e      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d12a      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003efe:	4b51      	ldr	r3, [pc, #324]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f04:	0c1b      	lsrs	r3, r3, #16
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f12:	0f1b      	lsrs	r3, r3, #28
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	019a      	lsls	r2, r3, #6
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	041b      	lsls	r3, r3, #16
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	061b      	lsls	r3, r3, #24
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	071b      	lsls	r3, r3, #28
 8003f32:	4944      	ldr	r1, [pc, #272]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f3a:	4b42      	ldr	r3, [pc, #264]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f40:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	493d      	ldr	r1, [pc, #244]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d022      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f68:	d11d      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f6a:	4b36      	ldr	r3, [pc, #216]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f70:	0e1b      	lsrs	r3, r3, #24
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f78:	4b32      	ldr	r3, [pc, #200]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7e:	0f1b      	lsrs	r3, r3, #28
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	019a      	lsls	r2, r3, #6
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	041b      	lsls	r3, r3, #16
 8003f92:	431a      	orrs	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	061b      	lsls	r3, r3, #24
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	071b      	lsls	r3, r3, #28
 8003f9e:	4929      	ldr	r1, [pc, #164]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d028      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fb2:	4b24      	ldr	r3, [pc, #144]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb8:	0e1b      	lsrs	r3, r3, #24
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fc0:	4b20      	ldr	r3, [pc, #128]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc6:	0c1b      	lsrs	r3, r3, #16
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	019a      	lsls	r2, r3, #6
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	071b      	lsls	r3, r3, #28
 8003fe6:	4917      	ldr	r1, [pc, #92]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fee:	4b15      	ldr	r3, [pc, #84]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ff4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffc:	4911      	ldr	r1, [pc, #68]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004004:	4b0f      	ldr	r3, [pc, #60]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0e      	ldr	r2, [pc, #56]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800400a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800400e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004010:	f7fd fb8a 	bl	8001728 <HAL_GetTick>
 8004014:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004018:	f7fd fb86 	bl	8001728 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	@ 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e007      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800402a:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004036:	d1ef      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40023800 	.word	0x40023800

08004048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e040      	b.n	80040dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd f84e 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2224      	movs	r2, #36	@ 0x24
 8004074:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0201 	bic.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fa8c 	bl	80045ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f825 	bl	80040e4 <UART_SetConfig>
 800409a:	4603      	mov	r3, r0
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e01b      	b.n	80040dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fb0b 	bl	80046f0 <UART_CheckIdleState>
 80040da:	4603      	mov	r3, r0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4ba6      	ldr	r3, [pc, #664]	@ (80043a8 <UART_SetConfig+0x2c4>)
 8004110:	4013      	ands	r3, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	6979      	ldr	r1, [r7, #20]
 8004118:	430b      	orrs	r3, r1
 800411a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	430a      	orrs	r2, r1
 8004154:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a94      	ldr	r2, [pc, #592]	@ (80043ac <UART_SetConfig+0x2c8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d120      	bne.n	80041a2 <UART_SetConfig+0xbe>
 8004160:	4b93      	ldr	r3, [pc, #588]	@ (80043b0 <UART_SetConfig+0x2cc>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b03      	cmp	r3, #3
 800416c:	d816      	bhi.n	800419c <UART_SetConfig+0xb8>
 800416e:	a201      	add	r2, pc, #4	@ (adr r2, 8004174 <UART_SetConfig+0x90>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	08004185 	.word	0x08004185
 8004178:	08004191 	.word	0x08004191
 800417c:	0800418b 	.word	0x0800418b
 8004180:	08004197 	.word	0x08004197
 8004184:	2301      	movs	r3, #1
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e150      	b.n	800442c <UART_SetConfig+0x348>
 800418a:	2302      	movs	r3, #2
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e14d      	b.n	800442c <UART_SetConfig+0x348>
 8004190:	2304      	movs	r3, #4
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e14a      	b.n	800442c <UART_SetConfig+0x348>
 8004196:	2308      	movs	r3, #8
 8004198:	77fb      	strb	r3, [r7, #31]
 800419a:	e147      	b.n	800442c <UART_SetConfig+0x348>
 800419c:	2310      	movs	r3, #16
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e144      	b.n	800442c <UART_SetConfig+0x348>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a83      	ldr	r2, [pc, #524]	@ (80043b4 <UART_SetConfig+0x2d0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d132      	bne.n	8004212 <UART_SetConfig+0x12e>
 80041ac:	4b80      	ldr	r3, [pc, #512]	@ (80043b0 <UART_SetConfig+0x2cc>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b0c      	cmp	r3, #12
 80041b8:	d828      	bhi.n	800420c <UART_SetConfig+0x128>
 80041ba:	a201      	add	r2, pc, #4	@ (adr r2, 80041c0 <UART_SetConfig+0xdc>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	080041f5 	.word	0x080041f5
 80041c4:	0800420d 	.word	0x0800420d
 80041c8:	0800420d 	.word	0x0800420d
 80041cc:	0800420d 	.word	0x0800420d
 80041d0:	08004201 	.word	0x08004201
 80041d4:	0800420d 	.word	0x0800420d
 80041d8:	0800420d 	.word	0x0800420d
 80041dc:	0800420d 	.word	0x0800420d
 80041e0:	080041fb 	.word	0x080041fb
 80041e4:	0800420d 	.word	0x0800420d
 80041e8:	0800420d 	.word	0x0800420d
 80041ec:	0800420d 	.word	0x0800420d
 80041f0:	08004207 	.word	0x08004207
 80041f4:	2300      	movs	r3, #0
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e118      	b.n	800442c <UART_SetConfig+0x348>
 80041fa:	2302      	movs	r3, #2
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e115      	b.n	800442c <UART_SetConfig+0x348>
 8004200:	2304      	movs	r3, #4
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e112      	b.n	800442c <UART_SetConfig+0x348>
 8004206:	2308      	movs	r3, #8
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e10f      	b.n	800442c <UART_SetConfig+0x348>
 800420c:	2310      	movs	r3, #16
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e10c      	b.n	800442c <UART_SetConfig+0x348>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a68      	ldr	r2, [pc, #416]	@ (80043b8 <UART_SetConfig+0x2d4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d120      	bne.n	800425e <UART_SetConfig+0x17a>
 800421c:	4b64      	ldr	r3, [pc, #400]	@ (80043b0 <UART_SetConfig+0x2cc>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004222:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004226:	2b30      	cmp	r3, #48	@ 0x30
 8004228:	d013      	beq.n	8004252 <UART_SetConfig+0x16e>
 800422a:	2b30      	cmp	r3, #48	@ 0x30
 800422c:	d814      	bhi.n	8004258 <UART_SetConfig+0x174>
 800422e:	2b20      	cmp	r3, #32
 8004230:	d009      	beq.n	8004246 <UART_SetConfig+0x162>
 8004232:	2b20      	cmp	r3, #32
 8004234:	d810      	bhi.n	8004258 <UART_SetConfig+0x174>
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <UART_SetConfig+0x15c>
 800423a:	2b10      	cmp	r3, #16
 800423c:	d006      	beq.n	800424c <UART_SetConfig+0x168>
 800423e:	e00b      	b.n	8004258 <UART_SetConfig+0x174>
 8004240:	2300      	movs	r3, #0
 8004242:	77fb      	strb	r3, [r7, #31]
 8004244:	e0f2      	b.n	800442c <UART_SetConfig+0x348>
 8004246:	2302      	movs	r3, #2
 8004248:	77fb      	strb	r3, [r7, #31]
 800424a:	e0ef      	b.n	800442c <UART_SetConfig+0x348>
 800424c:	2304      	movs	r3, #4
 800424e:	77fb      	strb	r3, [r7, #31]
 8004250:	e0ec      	b.n	800442c <UART_SetConfig+0x348>
 8004252:	2308      	movs	r3, #8
 8004254:	77fb      	strb	r3, [r7, #31]
 8004256:	e0e9      	b.n	800442c <UART_SetConfig+0x348>
 8004258:	2310      	movs	r3, #16
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e0e6      	b.n	800442c <UART_SetConfig+0x348>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a56      	ldr	r2, [pc, #344]	@ (80043bc <UART_SetConfig+0x2d8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d120      	bne.n	80042aa <UART_SetConfig+0x1c6>
 8004268:	4b51      	ldr	r3, [pc, #324]	@ (80043b0 <UART_SetConfig+0x2cc>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004272:	2bc0      	cmp	r3, #192	@ 0xc0
 8004274:	d013      	beq.n	800429e <UART_SetConfig+0x1ba>
 8004276:	2bc0      	cmp	r3, #192	@ 0xc0
 8004278:	d814      	bhi.n	80042a4 <UART_SetConfig+0x1c0>
 800427a:	2b80      	cmp	r3, #128	@ 0x80
 800427c:	d009      	beq.n	8004292 <UART_SetConfig+0x1ae>
 800427e:	2b80      	cmp	r3, #128	@ 0x80
 8004280:	d810      	bhi.n	80042a4 <UART_SetConfig+0x1c0>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <UART_SetConfig+0x1a8>
 8004286:	2b40      	cmp	r3, #64	@ 0x40
 8004288:	d006      	beq.n	8004298 <UART_SetConfig+0x1b4>
 800428a:	e00b      	b.n	80042a4 <UART_SetConfig+0x1c0>
 800428c:	2300      	movs	r3, #0
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e0cc      	b.n	800442c <UART_SetConfig+0x348>
 8004292:	2302      	movs	r3, #2
 8004294:	77fb      	strb	r3, [r7, #31]
 8004296:	e0c9      	b.n	800442c <UART_SetConfig+0x348>
 8004298:	2304      	movs	r3, #4
 800429a:	77fb      	strb	r3, [r7, #31]
 800429c:	e0c6      	b.n	800442c <UART_SetConfig+0x348>
 800429e:	2308      	movs	r3, #8
 80042a0:	77fb      	strb	r3, [r7, #31]
 80042a2:	e0c3      	b.n	800442c <UART_SetConfig+0x348>
 80042a4:	2310      	movs	r3, #16
 80042a6:	77fb      	strb	r3, [r7, #31]
 80042a8:	e0c0      	b.n	800442c <UART_SetConfig+0x348>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a44      	ldr	r2, [pc, #272]	@ (80043c0 <UART_SetConfig+0x2dc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d125      	bne.n	8004300 <UART_SetConfig+0x21c>
 80042b4:	4b3e      	ldr	r3, [pc, #248]	@ (80043b0 <UART_SetConfig+0x2cc>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042c2:	d017      	beq.n	80042f4 <UART_SetConfig+0x210>
 80042c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042c8:	d817      	bhi.n	80042fa <UART_SetConfig+0x216>
 80042ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ce:	d00b      	beq.n	80042e8 <UART_SetConfig+0x204>
 80042d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d4:	d811      	bhi.n	80042fa <UART_SetConfig+0x216>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <UART_SetConfig+0x1fe>
 80042da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042de:	d006      	beq.n	80042ee <UART_SetConfig+0x20a>
 80042e0:	e00b      	b.n	80042fa <UART_SetConfig+0x216>
 80042e2:	2300      	movs	r3, #0
 80042e4:	77fb      	strb	r3, [r7, #31]
 80042e6:	e0a1      	b.n	800442c <UART_SetConfig+0x348>
 80042e8:	2302      	movs	r3, #2
 80042ea:	77fb      	strb	r3, [r7, #31]
 80042ec:	e09e      	b.n	800442c <UART_SetConfig+0x348>
 80042ee:	2304      	movs	r3, #4
 80042f0:	77fb      	strb	r3, [r7, #31]
 80042f2:	e09b      	b.n	800442c <UART_SetConfig+0x348>
 80042f4:	2308      	movs	r3, #8
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e098      	b.n	800442c <UART_SetConfig+0x348>
 80042fa:	2310      	movs	r3, #16
 80042fc:	77fb      	strb	r3, [r7, #31]
 80042fe:	e095      	b.n	800442c <UART_SetConfig+0x348>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a2f      	ldr	r2, [pc, #188]	@ (80043c4 <UART_SetConfig+0x2e0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d125      	bne.n	8004356 <UART_SetConfig+0x272>
 800430a:	4b29      	ldr	r3, [pc, #164]	@ (80043b0 <UART_SetConfig+0x2cc>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004310:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004314:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004318:	d017      	beq.n	800434a <UART_SetConfig+0x266>
 800431a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800431e:	d817      	bhi.n	8004350 <UART_SetConfig+0x26c>
 8004320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004324:	d00b      	beq.n	800433e <UART_SetConfig+0x25a>
 8004326:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800432a:	d811      	bhi.n	8004350 <UART_SetConfig+0x26c>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <UART_SetConfig+0x254>
 8004330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004334:	d006      	beq.n	8004344 <UART_SetConfig+0x260>
 8004336:	e00b      	b.n	8004350 <UART_SetConfig+0x26c>
 8004338:	2301      	movs	r3, #1
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e076      	b.n	800442c <UART_SetConfig+0x348>
 800433e:	2302      	movs	r3, #2
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e073      	b.n	800442c <UART_SetConfig+0x348>
 8004344:	2304      	movs	r3, #4
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e070      	b.n	800442c <UART_SetConfig+0x348>
 800434a:	2308      	movs	r3, #8
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e06d      	b.n	800442c <UART_SetConfig+0x348>
 8004350:	2310      	movs	r3, #16
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e06a      	b.n	800442c <UART_SetConfig+0x348>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1b      	ldr	r2, [pc, #108]	@ (80043c8 <UART_SetConfig+0x2e4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d138      	bne.n	80043d2 <UART_SetConfig+0x2ee>
 8004360:	4b13      	ldr	r3, [pc, #76]	@ (80043b0 <UART_SetConfig+0x2cc>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004366:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800436a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800436e:	d017      	beq.n	80043a0 <UART_SetConfig+0x2bc>
 8004370:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004374:	d82a      	bhi.n	80043cc <UART_SetConfig+0x2e8>
 8004376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800437a:	d00b      	beq.n	8004394 <UART_SetConfig+0x2b0>
 800437c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004380:	d824      	bhi.n	80043cc <UART_SetConfig+0x2e8>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <UART_SetConfig+0x2aa>
 8004386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800438a:	d006      	beq.n	800439a <UART_SetConfig+0x2b6>
 800438c:	e01e      	b.n	80043cc <UART_SetConfig+0x2e8>
 800438e:	2300      	movs	r3, #0
 8004390:	77fb      	strb	r3, [r7, #31]
 8004392:	e04b      	b.n	800442c <UART_SetConfig+0x348>
 8004394:	2302      	movs	r3, #2
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e048      	b.n	800442c <UART_SetConfig+0x348>
 800439a:	2304      	movs	r3, #4
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e045      	b.n	800442c <UART_SetConfig+0x348>
 80043a0:	2308      	movs	r3, #8
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e042      	b.n	800442c <UART_SetConfig+0x348>
 80043a6:	bf00      	nop
 80043a8:	efff69f3 	.word	0xefff69f3
 80043ac:	40011000 	.word	0x40011000
 80043b0:	40023800 	.word	0x40023800
 80043b4:	40004400 	.word	0x40004400
 80043b8:	40004800 	.word	0x40004800
 80043bc:	40004c00 	.word	0x40004c00
 80043c0:	40005000 	.word	0x40005000
 80043c4:	40011400 	.word	0x40011400
 80043c8:	40007800 	.word	0x40007800
 80043cc:	2310      	movs	r3, #16
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e02c      	b.n	800442c <UART_SetConfig+0x348>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a72      	ldr	r2, [pc, #456]	@ (80045a0 <UART_SetConfig+0x4bc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d125      	bne.n	8004428 <UART_SetConfig+0x344>
 80043dc:	4b71      	ldr	r3, [pc, #452]	@ (80045a4 <UART_SetConfig+0x4c0>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80043e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043ea:	d017      	beq.n	800441c <UART_SetConfig+0x338>
 80043ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043f0:	d817      	bhi.n	8004422 <UART_SetConfig+0x33e>
 80043f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043f6:	d00b      	beq.n	8004410 <UART_SetConfig+0x32c>
 80043f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043fc:	d811      	bhi.n	8004422 <UART_SetConfig+0x33e>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <UART_SetConfig+0x326>
 8004402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004406:	d006      	beq.n	8004416 <UART_SetConfig+0x332>
 8004408:	e00b      	b.n	8004422 <UART_SetConfig+0x33e>
 800440a:	2300      	movs	r3, #0
 800440c:	77fb      	strb	r3, [r7, #31]
 800440e:	e00d      	b.n	800442c <UART_SetConfig+0x348>
 8004410:	2302      	movs	r3, #2
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	e00a      	b.n	800442c <UART_SetConfig+0x348>
 8004416:	2304      	movs	r3, #4
 8004418:	77fb      	strb	r3, [r7, #31]
 800441a:	e007      	b.n	800442c <UART_SetConfig+0x348>
 800441c:	2308      	movs	r3, #8
 800441e:	77fb      	strb	r3, [r7, #31]
 8004420:	e004      	b.n	800442c <UART_SetConfig+0x348>
 8004422:	2310      	movs	r3, #16
 8004424:	77fb      	strb	r3, [r7, #31]
 8004426:	e001      	b.n	800442c <UART_SetConfig+0x348>
 8004428:	2310      	movs	r3, #16
 800442a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004434:	d15b      	bne.n	80044ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004436:	7ffb      	ldrb	r3, [r7, #31]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d828      	bhi.n	800448e <UART_SetConfig+0x3aa>
 800443c:	a201      	add	r2, pc, #4	@ (adr r2, 8004444 <UART_SetConfig+0x360>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	08004469 	.word	0x08004469
 8004448:	08004471 	.word	0x08004471
 800444c:	08004479 	.word	0x08004479
 8004450:	0800448f 	.word	0x0800448f
 8004454:	0800447f 	.word	0x0800447f
 8004458:	0800448f 	.word	0x0800448f
 800445c:	0800448f 	.word	0x0800448f
 8004460:	0800448f 	.word	0x0800448f
 8004464:	08004487 	.word	0x08004487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004468:	f7ff f9d6 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 800446c:	61b8      	str	r0, [r7, #24]
        break;
 800446e:	e013      	b.n	8004498 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004470:	f7ff f9e6 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 8004474:	61b8      	str	r0, [r7, #24]
        break;
 8004476:	e00f      	b.n	8004498 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004478:	4b4b      	ldr	r3, [pc, #300]	@ (80045a8 <UART_SetConfig+0x4c4>)
 800447a:	61bb      	str	r3, [r7, #24]
        break;
 800447c:	e00c      	b.n	8004498 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447e:	f7ff f8f9 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8004482:	61b8      	str	r0, [r7, #24]
        break;
 8004484:	e008      	b.n	8004498 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800448a:	61bb      	str	r3, [r7, #24]
        break;
 800448c:	e004      	b.n	8004498 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	77bb      	strb	r3, [r7, #30]
        break;
 8004496:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d074      	beq.n	8004588 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	005a      	lsls	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	441a      	add	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	d916      	bls.n	80044e8 <UART_SetConfig+0x404>
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c0:	d212      	bcs.n	80044e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f023 030f 	bic.w	r3, r3, #15
 80044ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	89fb      	ldrh	r3, [r7, #14]
 80044da:	4313      	orrs	r3, r2
 80044dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	89fa      	ldrh	r2, [r7, #14]
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	e04f      	b.n	8004588 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	77bb      	strb	r3, [r7, #30]
 80044ec:	e04c      	b.n	8004588 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044ee:	7ffb      	ldrb	r3, [r7, #31]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d828      	bhi.n	8004546 <UART_SetConfig+0x462>
 80044f4:	a201      	add	r2, pc, #4	@ (adr r2, 80044fc <UART_SetConfig+0x418>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	08004521 	.word	0x08004521
 8004500:	08004529 	.word	0x08004529
 8004504:	08004531 	.word	0x08004531
 8004508:	08004547 	.word	0x08004547
 800450c:	08004537 	.word	0x08004537
 8004510:	08004547 	.word	0x08004547
 8004514:	08004547 	.word	0x08004547
 8004518:	08004547 	.word	0x08004547
 800451c:	0800453f 	.word	0x0800453f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004520:	f7ff f97a 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8004524:	61b8      	str	r0, [r7, #24]
        break;
 8004526:	e013      	b.n	8004550 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004528:	f7ff f98a 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 800452c:	61b8      	str	r0, [r7, #24]
        break;
 800452e:	e00f      	b.n	8004550 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004530:	4b1d      	ldr	r3, [pc, #116]	@ (80045a8 <UART_SetConfig+0x4c4>)
 8004532:	61bb      	str	r3, [r7, #24]
        break;
 8004534:	e00c      	b.n	8004550 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004536:	f7ff f89d 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 800453a:	61b8      	str	r0, [r7, #24]
        break;
 800453c:	e008      	b.n	8004550 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800453e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004542:	61bb      	str	r3, [r7, #24]
        break;
 8004544:	e004      	b.n	8004550 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	77bb      	strb	r3, [r7, #30]
        break;
 800454e:	bf00      	nop
    }

    if (pclk != 0U)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d018      	beq.n	8004588 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	085a      	lsrs	r2, r3, #1
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	441a      	add	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b0f      	cmp	r3, #15
 800456e:	d909      	bls.n	8004584 <UART_SetConfig+0x4a0>
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004576:	d205      	bcs.n	8004584 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	b29a      	uxth	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60da      	str	r2, [r3, #12]
 8004582:	e001      	b.n	8004588 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004594:	7fbb      	ldrb	r3, [r7, #30]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40007c00 	.word	0x40007c00
 80045a4:	40023800 	.word	0x40023800
 80045a8:	00f42400 	.word	0x00f42400

080045ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01a      	beq.n	80046c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046aa:	d10a      	bne.n	80046c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	605a      	str	r2, [r3, #4]
  }
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08c      	sub	sp, #48	@ 0x30
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004700:	f7fd f812 	bl	8001728 <HAL_GetTick>
 8004704:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b08      	cmp	r3, #8
 8004712:	d12e      	bne.n	8004772 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004714:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	2200      	movs	r2, #0
 800471e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f83b 	bl	800479e <UART_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d021      	beq.n	8004772 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	60fb      	str	r3, [r7, #12]
   return(result);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004742:	623b      	str	r3, [r7, #32]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	69b9      	ldr	r1, [r7, #24]
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	617b      	str	r3, [r7, #20]
   return(result);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e6      	bne.n	800472e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e011      	b.n	8004796 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3728      	adds	r7, #40	@ 0x28
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	603b      	str	r3, [r7, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ae:	e04f      	b.n	8004850 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047b6:	d04b      	beq.n	8004850 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b8:	f7fc ffb6 	bl	8001728 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d302      	bcc.n	80047ce <UART_WaitOnFlagUntilTimeout+0x30>
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e04e      	b.n	8004870 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d037      	beq.n	8004850 <UART_WaitOnFlagUntilTimeout+0xb2>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b80      	cmp	r3, #128	@ 0x80
 80047e4:	d034      	beq.n	8004850 <UART_WaitOnFlagUntilTimeout+0xb2>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b40      	cmp	r3, #64	@ 0x40
 80047ea:	d031      	beq.n	8004850 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d110      	bne.n	800481c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2208      	movs	r2, #8
 8004800:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f838 	bl	8004878 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2208      	movs	r2, #8
 800480c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e029      	b.n	8004870 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004826:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800482a:	d111      	bne.n	8004850 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004834:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f81e 	bl	8004878 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e00f      	b.n	8004870 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69da      	ldr	r2, [r3, #28]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4013      	ands	r3, r2
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	429a      	cmp	r2, r3
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	429a      	cmp	r2, r3
 800486c:	d0a0      	beq.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004878:	b480      	push	{r7}
 800487a:	b095      	sub	sp, #84	@ 0x54
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800488e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004890:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004894:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489e:	643b      	str	r3, [r7, #64]	@ 0x40
 80048a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e6      	bne.n	8004880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e5      	bne.n	80048b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d118      	bne.n	8004920 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f023 0310 	bic.w	r3, r3, #16
 8004902:	647b      	str	r3, [r7, #68]	@ 0x44
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6979      	ldr	r1, [r7, #20]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	613b      	str	r3, [r7, #16]
   return(result);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e6      	bne.n	80048ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004934:	bf00      	nop
 8004936:	3754      	adds	r7, #84	@ 0x54
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004946:	4b87      	ldr	r3, [pc, #540]	@ (8004b64 <MX_LWIP_Init+0x224>)
 8004948:	22c0      	movs	r2, #192	@ 0xc0
 800494a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800494c:	4b85      	ldr	r3, [pc, #532]	@ (8004b64 <MX_LWIP_Init+0x224>)
 800494e:	22a8      	movs	r2, #168	@ 0xa8
 8004950:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004952:	4b84      	ldr	r3, [pc, #528]	@ (8004b64 <MX_LWIP_Init+0x224>)
 8004954:	2200      	movs	r2, #0
 8004956:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8004958:	4b82      	ldr	r3, [pc, #520]	@ (8004b64 <MX_LWIP_Init+0x224>)
 800495a:	227b      	movs	r2, #123	@ 0x7b
 800495c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800495e:	4b82      	ldr	r3, [pc, #520]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004960:	22ff      	movs	r2, #255	@ 0xff
 8004962:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004964:	4b80      	ldr	r3, [pc, #512]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004966:	22ff      	movs	r2, #255	@ 0xff
 8004968:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800496a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b68 <MX_LWIP_Init+0x228>)
 800496c:	22ff      	movs	r2, #255	@ 0xff
 800496e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004970:	4b7d      	ldr	r3, [pc, #500]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004972:	2200      	movs	r2, #0
 8004974:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004976:	4b7d      	ldr	r3, [pc, #500]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004978:	22c0      	movs	r2, #192	@ 0xc0
 800497a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800497c:	4b7b      	ldr	r3, [pc, #492]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 800497e:	22a8      	movs	r2, #168	@ 0xa8
 8004980:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004982:	4b7a      	ldr	r3, [pc, #488]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004984:	2200      	movs	r2, #0
 8004986:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004988:	4b78      	ldr	r3, [pc, #480]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 800498a:	2201      	movs	r2, #1
 800498c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800498e:	f000 fc49 	bl	8005224 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004992:	4b74      	ldr	r3, [pc, #464]	@ (8004b64 <MX_LWIP_Init+0x224>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	061a      	lsls	r2, r3, #24
 8004998:	4b72      	ldr	r3, [pc, #456]	@ (8004b64 <MX_LWIP_Init+0x224>)
 800499a:	785b      	ldrb	r3, [r3, #1]
 800499c:	041b      	lsls	r3, r3, #16
 800499e:	431a      	orrs	r2, r3
 80049a0:	4b70      	ldr	r3, [pc, #448]	@ (8004b64 <MX_LWIP_Init+0x224>)
 80049a2:	789b      	ldrb	r3, [r3, #2]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	4313      	orrs	r3, r2
 80049a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004b64 <MX_LWIP_Init+0x224>)
 80049aa:	78d2      	ldrb	r2, [r2, #3]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	061a      	lsls	r2, r3, #24
 80049b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004b64 <MX_LWIP_Init+0x224>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	0619      	lsls	r1, r3, #24
 80049b6:	4b6b      	ldr	r3, [pc, #428]	@ (8004b64 <MX_LWIP_Init+0x224>)
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	4319      	orrs	r1, r3
 80049be:	4b69      	ldr	r3, [pc, #420]	@ (8004b64 <MX_LWIP_Init+0x224>)
 80049c0:	789b      	ldrb	r3, [r3, #2]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	430b      	orrs	r3, r1
 80049c6:	4967      	ldr	r1, [pc, #412]	@ (8004b64 <MX_LWIP_Init+0x224>)
 80049c8:	78c9      	ldrb	r1, [r1, #3]
 80049ca:	430b      	orrs	r3, r1
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80049d2:	431a      	orrs	r2, r3
 80049d4:	4b63      	ldr	r3, [pc, #396]	@ (8004b64 <MX_LWIP_Init+0x224>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	0619      	lsls	r1, r3, #24
 80049da:	4b62      	ldr	r3, [pc, #392]	@ (8004b64 <MX_LWIP_Init+0x224>)
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	041b      	lsls	r3, r3, #16
 80049e0:	4319      	orrs	r1, r3
 80049e2:	4b60      	ldr	r3, [pc, #384]	@ (8004b64 <MX_LWIP_Init+0x224>)
 80049e4:	789b      	ldrb	r3, [r3, #2]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	430b      	orrs	r3, r1
 80049ea:	495e      	ldr	r1, [pc, #376]	@ (8004b64 <MX_LWIP_Init+0x224>)
 80049ec:	78c9      	ldrb	r1, [r1, #3]
 80049ee:	430b      	orrs	r3, r1
 80049f0:	0a1b      	lsrs	r3, r3, #8
 80049f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80049f6:	431a      	orrs	r2, r3
 80049f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004b64 <MX_LWIP_Init+0x224>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	0619      	lsls	r1, r3, #24
 80049fe:	4b59      	ldr	r3, [pc, #356]	@ (8004b64 <MX_LWIP_Init+0x224>)
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	4319      	orrs	r1, r3
 8004a06:	4b57      	ldr	r3, [pc, #348]	@ (8004b64 <MX_LWIP_Init+0x224>)
 8004a08:	789b      	ldrb	r3, [r3, #2]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	4955      	ldr	r1, [pc, #340]	@ (8004b64 <MX_LWIP_Init+0x224>)
 8004a10:	78c9      	ldrb	r1, [r1, #3]
 8004a12:	430b      	orrs	r3, r1
 8004a14:	0e1b      	lsrs	r3, r3, #24
 8004a16:	4313      	orrs	r3, r2
 8004a18:	4a55      	ldr	r2, [pc, #340]	@ (8004b70 <MX_LWIP_Init+0x230>)
 8004a1a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004a1c:	4b52      	ldr	r3, [pc, #328]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	061a      	lsls	r2, r3, #24
 8004a22:	4b51      	ldr	r3, [pc, #324]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a24:	785b      	ldrb	r3, [r3, #1]
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a2c:	789b      	ldrb	r3, [r3, #2]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	4313      	orrs	r3, r2
 8004a32:	4a4d      	ldr	r2, [pc, #308]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a34:	78d2      	ldrb	r2, [r2, #3]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	061a      	lsls	r2, r3, #24
 8004a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	0619      	lsls	r1, r3, #24
 8004a40:	4b49      	ldr	r3, [pc, #292]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a42:	785b      	ldrb	r3, [r3, #1]
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	4319      	orrs	r1, r3
 8004a48:	4b47      	ldr	r3, [pc, #284]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a4a:	789b      	ldrb	r3, [r3, #2]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	4945      	ldr	r1, [pc, #276]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a52:	78c9      	ldrb	r1, [r1, #3]
 8004a54:	430b      	orrs	r3, r1
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	4b42      	ldr	r3, [pc, #264]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	0619      	lsls	r1, r3, #24
 8004a64:	4b40      	ldr	r3, [pc, #256]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	4319      	orrs	r1, r3
 8004a6c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a6e:	789b      	ldrb	r3, [r3, #2]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	430b      	orrs	r3, r1
 8004a74:	493c      	ldr	r1, [pc, #240]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a76:	78c9      	ldrb	r1, [r1, #3]
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	0a1b      	lsrs	r3, r3, #8
 8004a7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004a80:	431a      	orrs	r2, r3
 8004a82:	4b39      	ldr	r3, [pc, #228]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	0619      	lsls	r1, r3, #24
 8004a88:	4b37      	ldr	r3, [pc, #220]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	4319      	orrs	r1, r3
 8004a90:	4b35      	ldr	r3, [pc, #212]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a92:	789b      	ldrb	r3, [r3, #2]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	430b      	orrs	r3, r1
 8004a98:	4933      	ldr	r1, [pc, #204]	@ (8004b68 <MX_LWIP_Init+0x228>)
 8004a9a:	78c9      	ldrb	r1, [r1, #3]
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	0e1b      	lsrs	r3, r3, #24
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	4a34      	ldr	r2, [pc, #208]	@ (8004b74 <MX_LWIP_Init+0x234>)
 8004aa4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004aa6:	4b31      	ldr	r3, [pc, #196]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	061a      	lsls	r2, r3, #24
 8004aac:	4b2f      	ldr	r3, [pc, #188]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004ab6:	789b      	ldrb	r3, [r3, #2]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	4313      	orrs	r3, r2
 8004abc:	4a2b      	ldr	r2, [pc, #172]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004abe:	78d2      	ldrb	r2, [r2, #3]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	061a      	lsls	r2, r3, #24
 8004ac4:	4b29      	ldr	r3, [pc, #164]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	0619      	lsls	r1, r3, #24
 8004aca:	4b28      	ldr	r3, [pc, #160]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	4319      	orrs	r1, r3
 8004ad2:	4b26      	ldr	r3, [pc, #152]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004ad4:	789b      	ldrb	r3, [r3, #2]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	4924      	ldr	r1, [pc, #144]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004adc:	78c9      	ldrb	r1, [r1, #3]
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	4b20      	ldr	r3, [pc, #128]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	0619      	lsls	r1, r3, #24
 8004aee:	4b1f      	ldr	r3, [pc, #124]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004af0:	785b      	ldrb	r3, [r3, #1]
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	4319      	orrs	r1, r3
 8004af6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004af8:	789b      	ldrb	r3, [r3, #2]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	430b      	orrs	r3, r1
 8004afe:	491b      	ldr	r1, [pc, #108]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004b00:	78c9      	ldrb	r1, [r1, #3]
 8004b02:	430b      	orrs	r3, r1
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	4b17      	ldr	r3, [pc, #92]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	0619      	lsls	r1, r3, #24
 8004b12:	4b16      	ldr	r3, [pc, #88]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004b14:	785b      	ldrb	r3, [r3, #1]
 8004b16:	041b      	lsls	r3, r3, #16
 8004b18:	4319      	orrs	r1, r3
 8004b1a:	4b14      	ldr	r3, [pc, #80]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004b1c:	789b      	ldrb	r3, [r3, #2]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	430b      	orrs	r3, r1
 8004b22:	4912      	ldr	r1, [pc, #72]	@ (8004b6c <MX_LWIP_Init+0x22c>)
 8004b24:	78c9      	ldrb	r1, [r1, #3]
 8004b26:	430b      	orrs	r3, r1
 8004b28:	0e1b      	lsrs	r3, r3, #24
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	4a12      	ldr	r2, [pc, #72]	@ (8004b78 <MX_LWIP_Init+0x238>)
 8004b2e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004b30:	4b12      	ldr	r3, [pc, #72]	@ (8004b7c <MX_LWIP_Init+0x23c>)
 8004b32:	9302      	str	r3, [sp, #8]
 8004b34:	4b12      	ldr	r3, [pc, #72]	@ (8004b80 <MX_LWIP_Init+0x240>)
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b78 <MX_LWIP_Init+0x238>)
 8004b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8004b74 <MX_LWIP_Init+0x234>)
 8004b40:	490b      	ldr	r1, [pc, #44]	@ (8004b70 <MX_LWIP_Init+0x230>)
 8004b42:	4810      	ldr	r0, [pc, #64]	@ (8004b84 <MX_LWIP_Init+0x244>)
 8004b44:	f001 f856 	bl	8005bf4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004b48:	480e      	ldr	r0, [pc, #56]	@ (8004b84 <MX_LWIP_Init+0x244>)
 8004b4a:	f001 fa05 	bl	8005f58 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004b4e:	480d      	ldr	r0, [pc, #52]	@ (8004b84 <MX_LWIP_Init+0x244>)
 8004b50:	f001 fa12 	bl	8005f78 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004b54:	490c      	ldr	r1, [pc, #48]	@ (8004b88 <MX_LWIP_Init+0x248>)
 8004b56:	480b      	ldr	r0, [pc, #44]	@ (8004b84 <MX_LWIP_Init+0x244>)
 8004b58:	f001 fb10 	bl	800617c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004b5c:	bf00      	nop
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	200002b4 	.word	0x200002b4
 8004b68:	200002b8 	.word	0x200002b8
 8004b6c:	200002bc 	.word	0x200002bc
 8004b70:	200002a8 	.word	0x200002a8
 8004b74:	200002ac 	.word	0x200002ac
 8004b78:	200002b0 	.word	0x200002b0
 8004b7c:	0800e96d 	.word	0x0800e96d
 8004b80:	08004de5 	.word	0x08004de5
 8004b84:	20000274 	.word	0x20000274
 8004b88:	08004b8d 	.word	0x08004b8d

08004b8c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004bac:	4b44      	ldr	r3, [pc, #272]	@ (8004cc0 <low_level_init+0x120>)
 8004bae:	4a45      	ldr	r2, [pc, #276]	@ (8004cc4 <low_level_init+0x124>)
 8004bb0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004bb6:	2380      	movs	r3, #128	@ 0x80
 8004bb8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004bba:	23e1      	movs	r3, #225	@ 0xe1
 8004bbc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004bca:	4a3d      	ldr	r2, [pc, #244]	@ (8004cc0 <low_level_init+0x120>)
 8004bcc:	f107 0308 	add.w	r3, r7, #8
 8004bd0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc0 <low_level_init+0x120>)
 8004bd4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004bd8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004bda:	4b39      	ldr	r3, [pc, #228]	@ (8004cc0 <low_level_init+0x120>)
 8004bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8004cc8 <low_level_init+0x128>)
 8004bde:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004be0:	4b37      	ldr	r3, [pc, #220]	@ (8004cc0 <low_level_init+0x120>)
 8004be2:	4a3a      	ldr	r2, [pc, #232]	@ (8004ccc <low_level_init+0x12c>)
 8004be4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004be6:	4b36      	ldr	r3, [pc, #216]	@ (8004cc0 <low_level_init+0x120>)
 8004be8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004bec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004bee:	4834      	ldr	r0, [pc, #208]	@ (8004cc0 <low_level_init+0x120>)
 8004bf0:	f7fc ff28 	bl	8001a44 <HAL_ETH_Init>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004bf8:	2238      	movs	r2, #56	@ 0x38
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4834      	ldr	r0, [pc, #208]	@ (8004cd0 <low_level_init+0x130>)
 8004bfe:	f00a f8f0 	bl	800ede2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004c02:	4b33      	ldr	r3, [pc, #204]	@ (8004cd0 <low_level_init+0x130>)
 8004c04:	2221      	movs	r2, #33	@ 0x21
 8004c06:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004c08:	4b31      	ldr	r3, [pc, #196]	@ (8004cd0 <low_level_init+0x130>)
 8004c0a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8004c0e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004c10:	4b2f      	ldr	r3, [pc, #188]	@ (8004cd0 <low_level_init+0x130>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004c16:	482f      	ldr	r0, [pc, #188]	@ (8004cd4 <low_level_init+0x134>)
 8004c18:	f000 feb4 	bl	8005984 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2206      	movs	r2, #6
 8004c20:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004c24:	4b26      	ldr	r3, [pc, #152]	@ (8004cc0 <low_level_init+0x120>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004c30:	4b23      	ldr	r3, [pc, #140]	@ (8004cc0 <low_level_init+0x120>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	785a      	ldrb	r2, [r3, #1]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004c3c:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <low_level_init+0x120>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	789a      	ldrb	r2, [r3, #2]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004c48:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc0 <low_level_init+0x120>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	78da      	ldrb	r2, [r3, #3]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004c54:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc0 <low_level_init+0x120>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	791a      	ldrb	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004c60:	4b17      	ldr	r3, [pc, #92]	@ (8004cc0 <low_level_init+0x120>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	795a      	ldrb	r2, [r3, #5]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004c72:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004c7a:	f043 030a 	orr.w	r3, r3, #10
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004c86:	4914      	ldr	r1, [pc, #80]	@ (8004cd8 <low_level_init+0x138>)
 8004c88:	4814      	ldr	r0, [pc, #80]	@ (8004cdc <low_level_init+0x13c>)
 8004c8a:	f7fc fbf6 	bl	800147a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004c8e:	4813      	ldr	r0, [pc, #76]	@ (8004cdc <low_level_init+0x13c>)
 8004c90:	f7fc fc25 	bl	80014de <LAN8742_Init>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f001 fa3e 	bl	800611c <netif_set_link_down>
    netif_set_down(netif);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 f9d5 	bl	8006050 <netif_set_down>
 8004ca6:	e008      	b.n	8004cba <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d103      	bne.n	8004cb6 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f9ce 	bl	8005050 <ethernet_link_check_state>
 8004cb4:	e001      	b.n	8004cba <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8004cb6:	f7fc f9ff 	bl	80010b8 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20004c4c 	.word	0x20004c4c
 8004cc4:	40028000 	.word	0x40028000
 8004cc8:	20000128 	.word	0x20000128
 8004ccc:	20000088 	.word	0x20000088
 8004cd0:	20004cfc 	.word	0x20004cfc
 8004cd4:	0801253c 	.word	0x0801253c
 8004cd8:	2000000c 	.word	0x2000000c
 8004cdc:	20004d34 	.word	0x20004d34

08004ce0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b092      	sub	sp, #72	@ 0x48
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004cf8:	f107 030c 	add.w	r3, r7, #12
 8004cfc:	2230      	movs	r2, #48	@ 0x30
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f00a f86e 	bl	800ede2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004d06:	f107 030c 	add.w	r3, r7, #12
 8004d0a:	2230      	movs	r2, #48	@ 0x30
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f00a f867 	bl	800ede2 <memset>

  for(q = p; q != NULL; q = q->next)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d18:	e045      	b.n	8004da6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d902      	bls.n	8004d26 <low_level_output+0x46>
      return ERR_IF;
 8004d20:	f06f 030b 	mvn.w	r3, #11
 8004d24:	e055      	b.n	8004dd2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	3348      	adds	r3, #72	@ 0x48
 8004d36:	443b      	add	r3, r7
 8004d38:	3b3c      	subs	r3, #60	@ 0x3c
 8004d3a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d3e:	895b      	ldrh	r3, [r3, #10]
 8004d40:	4619      	mov	r1, r3
 8004d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d44:	4613      	mov	r3, r2
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	3348      	adds	r3, #72	@ 0x48
 8004d4e:	443b      	add	r3, r7
 8004d50:	3b38      	subs	r3, #56	@ 0x38
 8004d52:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d011      	beq.n	8004d7e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d5c:	1e5a      	subs	r2, r3, #1
 8004d5e:	f107 000c 	add.w	r0, r7, #12
 8004d62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d64:	460b      	mov	r3, r1
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	440b      	add	r3, r1
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	18c1      	adds	r1, r0, r3
 8004d6e:	4613      	mov	r3, r2
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	3348      	adds	r3, #72	@ 0x48
 8004d78:	443b      	add	r3, r7
 8004d7a:	3b34      	subs	r3, #52	@ 0x34
 8004d7c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d88:	4613      	mov	r3, r2
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	3348      	adds	r3, #72	@ 0x48
 8004d92:	443b      	add	r3, r7
 8004d94:	3b34      	subs	r3, #52	@ 0x34
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1b6      	bne.n	8004d1a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	891b      	ldrh	r3, [r3, #8]
 8004db0:	461a      	mov	r2, r3
 8004db2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ddc <low_level_output+0xfc>)
 8004db4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004db6:	4a09      	ldr	r2, [pc, #36]	@ (8004ddc <low_level_output+0xfc>)
 8004db8:	f107 030c 	add.w	r3, r7, #12
 8004dbc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004dbe:	4a07      	ldr	r2, [pc, #28]	@ (8004ddc <low_level_output+0xfc>)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004dc4:	2214      	movs	r2, #20
 8004dc6:	4905      	ldr	r1, [pc, #20]	@ (8004ddc <low_level_output+0xfc>)
 8004dc8:	4805      	ldr	r0, [pc, #20]	@ (8004de0 <low_level_output+0x100>)
 8004dca:	f7fc ff8d 	bl	8001ce8 <HAL_ETH_Transmit>

  return errval;
 8004dce:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3748      	adds	r7, #72	@ 0x48
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20004cfc 	.word	0x20004cfc
 8004de0:	20004c4c 	.word	0x20004c4c

08004de4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <ethernetif_init+0x1c>
 8004df2:	4b0e      	ldr	r3, [pc, #56]	@ (8004e2c <ethernetif_init+0x48>)
 8004df4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004df8:	490d      	ldr	r1, [pc, #52]	@ (8004e30 <ethernetif_init+0x4c>)
 8004dfa:	480e      	ldr	r0, [pc, #56]	@ (8004e34 <ethernetif_init+0x50>)
 8004dfc:	f009 ff8c 	bl	800ed18 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2273      	movs	r2, #115	@ 0x73
 8004e04:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2274      	movs	r2, #116	@ 0x74
 8004e0c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a09      	ldr	r2, [pc, #36]	@ (8004e38 <ethernetif_init+0x54>)
 8004e14:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a08      	ldr	r2, [pc, #32]	@ (8004e3c <ethernetif_init+0x58>)
 8004e1a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff febf 	bl	8004ba0 <low_level_init>

  return ERR_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	0800fb44 	.word	0x0800fb44
 8004e30:	0800fb60 	.word	0x0800fb60
 8004e34:	0800fb70 	.word	0x0800fb70
 8004e38:	0800ce25 	.word	0x0800ce25
 8004e3c:	08004ce1 	.word	0x08004ce1

08004e40 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004e4c:	68f9      	ldr	r1, [r7, #12]
 8004e4e:	4807      	ldr	r0, [pc, #28]	@ (8004e6c <pbuf_free_custom+0x2c>)
 8004e50:	f000 fe7a 	bl	8005b48 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004e54:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <pbuf_free_custom+0x30>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d102      	bne.n	8004e62 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004e5c:	4b04      	ldr	r3, [pc, #16]	@ (8004e70 <pbuf_free_custom+0x30>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
  }
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	0801253c 	.word	0x0801253c
 8004e70:	20004c48 	.word	0x20004c48

08004e74 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004e78:	f7fc fc56 	bl	8001728 <HAL_GetTick>
 8004e7c:	4603      	mov	r3, r0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08e      	sub	sp, #56	@ 0x38
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	609a      	str	r2, [r3, #8]
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a3f      	ldr	r2, [pc, #252]	@ (8004fa0 <HAL_ETH_MspInit+0x11c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d178      	bne.n	8004f98 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eaa:	4a3e      	ldr	r2, [pc, #248]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004eac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eba:	623b      	str	r3, [r7, #32]
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	4b39      	ldr	r3, [pc, #228]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec2:	4a38      	ldr	r2, [pc, #224]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004ec4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eca:	4b36      	ldr	r3, [pc, #216]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ece:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4b33      	ldr	r3, [pc, #204]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eda:	4a32      	ldr	r2, [pc, #200]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004edc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ee2:	4b30      	ldr	r3, [pc, #192]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004eee:	4b2d      	ldr	r3, [pc, #180]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef2:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004efa:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f06:	4b27      	ldr	r3, [pc, #156]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0a:	4a26      	ldr	r2, [pc, #152]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004f0c:	f043 0304 	orr.w	r3, r3, #4
 8004f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f12:	4b24      	ldr	r3, [pc, #144]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f1e:	4b21      	ldr	r3, [pc, #132]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f22:	4a20      	ldr	r2, [pc, #128]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa4 <HAL_ETH_MspInit+0x120>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8004f36:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8004f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f44:	2303      	movs	r3, #3
 8004f46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f48:	230b      	movs	r3, #11
 8004f4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f50:	4619      	mov	r1, r3
 8004f52:	4815      	ldr	r0, [pc, #84]	@ (8004fa8 <HAL_ETH_MspInit+0x124>)
 8004f54:	f7fd fde8 	bl	8002b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004f58:	2332      	movs	r3, #50	@ 0x32
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f60:	2300      	movs	r3, #0
 8004f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f64:	2303      	movs	r3, #3
 8004f66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f68:	230b      	movs	r3, #11
 8004f6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f70:	4619      	mov	r1, r3
 8004f72:	480e      	ldr	r0, [pc, #56]	@ (8004fac <HAL_ETH_MspInit+0x128>)
 8004f74:	f7fd fdd8 	bl	8002b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004f78:	2386      	movs	r3, #134	@ 0x86
 8004f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f84:	2303      	movs	r3, #3
 8004f86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f88:	230b      	movs	r3, #11
 8004f8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f90:	4619      	mov	r1, r3
 8004f92:	4807      	ldr	r0, [pc, #28]	@ (8004fb0 <HAL_ETH_MspInit+0x12c>)
 8004f94:	f7fd fdc8 	bl	8002b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004f98:	bf00      	nop
 8004f9a:	3738      	adds	r7, #56	@ 0x38
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40028000 	.word	0x40028000
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	40021800 	.word	0x40021800
 8004fac:	40020800 	.word	0x40020800
 8004fb0:	40020000 	.word	0x40020000

08004fb4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004fb8:	4802      	ldr	r0, [pc, #8]	@ (8004fc4 <ETH_PHY_IO_Init+0x10>)
 8004fba:	f7fd f953 	bl	8002264 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20004c4c 	.word	0x20004c4c

08004fc8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  return 0;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	68f9      	ldr	r1, [r7, #12]
 8004fea:	4807      	ldr	r0, [pc, #28]	@ (8005008 <ETH_PHY_IO_ReadReg+0x30>)
 8004fec:	f7fc ff94 	bl	8001f18 <HAL_ETH_ReadPHYRegister>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004ff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ffa:	e000      	b.n	8004ffe <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20004c4c 	.word	0x20004c4c

0800500c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	68f9      	ldr	r1, [r7, #12]
 800501e:	4807      	ldr	r0, [pc, #28]	@ (800503c <ETH_PHY_IO_WriteReg+0x30>)
 8005020:	f7fc ffc5 	bl	8001fae <HAL_ETH_WritePHYRegister>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800502e:	e000      	b.n	8005032 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20004c4c 	.word	0x20004c4c

08005040 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005044:	f7fc fb70 	bl	8001728 <HAL_GetTick>
 8005048:	4603      	mov	r3, r0
}
 800504a:	4618      	mov	r0, r3
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b0a0      	sub	sp, #128	@ 0x80
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005058:	f107 030c 	add.w	r3, r7, #12
 800505c:	2264      	movs	r2, #100	@ 0x64
 800505e:	2100      	movs	r1, #0
 8005060:	4618      	mov	r0, r3
 8005062:	f009 febe 	bl	800ede2 <memset>
  int32_t PHYLinkState = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800506e:	2300      	movs	r3, #0
 8005070:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005072:	2300      	movs	r3, #0
 8005074:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005076:	483a      	ldr	r0, [pc, #232]	@ (8005160 <ethernet_link_check_state+0x110>)
 8005078:	f7fc fa7e 	bl	8001578 <LAN8742_GetLinkState>
 800507c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <ethernet_link_check_state+0x5a>
 8005090:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005092:	2b01      	cmp	r3, #1
 8005094:	dc09      	bgt.n	80050aa <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8005096:	4833      	ldr	r0, [pc, #204]	@ (8005164 <ethernet_link_check_state+0x114>)
 8005098:	f7fc fdcd 	bl	8001c36 <HAL_ETH_Stop>
    netif_set_down(netif);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 ffd7 	bl	8006050 <netif_set_down>
    netif_set_link_down(netif);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 f83a 	bl	800611c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80050a8:	e055      	b.n	8005156 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d14e      	bne.n	8005156 <ethernet_link_check_state+0x106>
 80050b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	dd4b      	ble.n	8005156 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80050be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050c0:	3b02      	subs	r3, #2
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d82a      	bhi.n	800511c <ethernet_link_check_state+0xcc>
 80050c6:	a201      	add	r2, pc, #4	@ (adr r2, 80050cc <ethernet_link_check_state+0x7c>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	080050dd 	.word	0x080050dd
 80050d0:	080050ef 	.word	0x080050ef
 80050d4:	080050ff 	.word	0x080050ff
 80050d8:	0800510f 	.word	0x0800510f
      duplex = ETH_FULLDUPLEX_MODE;
 80050dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80050e0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80050e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80050e6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80050e8:	2301      	movs	r3, #1
 80050ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80050ec:	e017      	b.n	800511e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80050f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80050f6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80050f8:	2301      	movs	r3, #1
 80050fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80050fc:	e00f      	b.n	800511e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80050fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005102:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005104:	2300      	movs	r3, #0
 8005106:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005108:	2301      	movs	r3, #1
 800510a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800510c:	e007      	b.n	800511e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800510e:	2300      	movs	r3, #0
 8005110:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005112:	2300      	movs	r3, #0
 8005114:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005116:	2301      	movs	r3, #1
 8005118:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800511a:	e000      	b.n	800511e <ethernet_link_check_state+0xce>
      break;
 800511c:	bf00      	nop
    if(linkchanged)
 800511e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d018      	beq.n	8005156 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005124:	f107 030c 	add.w	r3, r7, #12
 8005128:	4619      	mov	r1, r3
 800512a:	480e      	ldr	r0, [pc, #56]	@ (8005164 <ethernet_link_check_state+0x114>)
 800512c:	f7fc ff88 	bl	8002040 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005132:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8005134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005136:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005138:	f107 030c 	add.w	r3, r7, #12
 800513c:	4619      	mov	r1, r3
 800513e:	4809      	ldr	r0, [pc, #36]	@ (8005164 <ethernet_link_check_state+0x114>)
 8005140:	f7fd f875 	bl	800222e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005144:	4807      	ldr	r0, [pc, #28]	@ (8005164 <ethernet_link_check_state+0x114>)
 8005146:	f7fc fd17 	bl	8001b78 <HAL_ETH_Start>
      netif_set_up(netif);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 ff14 	bl	8005f78 <netif_set_up>
      netif_set_link_up(netif);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 ffaf 	bl	80060b4 <netif_set_link_up>
}
 8005156:	bf00      	nop
 8005158:	3780      	adds	r7, #128	@ 0x80
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20004d34 	.word	0x20004d34
 8005164:	20004c4c 	.word	0x20004c4c

08005168 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af02      	add	r7, sp, #8
 800516e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005170:	4812      	ldr	r0, [pc, #72]	@ (80051bc <HAL_ETH_RxAllocateCallback+0x54>)
 8005172:	f000 fc7b 	bl	8005a6c <memp_malloc_pool>
 8005176:	60f8      	str	r0, [r7, #12]
  if (p)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d014      	beq.n	80051a8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f103 0220 	add.w	r2, r3, #32
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4a0d      	ldr	r2, [pc, #52]	@ (80051c0 <HAL_ETH_RxAllocateCallback+0x58>)
 800518c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005196:	9201      	str	r2, [sp, #4]
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2241      	movs	r2, #65	@ 0x41
 800519e:	2100      	movs	r1, #0
 80051a0:	2000      	movs	r0, #0
 80051a2:	f001 f991 	bl	80064c8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80051a6:	e005      	b.n	80051b4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80051a8:	4b06      	ldr	r3, [pc, #24]	@ (80051c4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	0801253c 	.word	0x0801253c
 80051c0:	08004e41 	.word	0x08004e41
 80051c4:	20004c48 	.word	0x20004c48

080051c8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	b21a      	sxth	r2, r3
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	0a1b      	lsrs	r3, r3, #8
 80051dc:	b29b      	uxth	r3, r3
 80051de:	b21b      	sxth	r3, r3
 80051e0:	4313      	orrs	r3, r2
 80051e2:	b21b      	sxth	r3, r3
 80051e4:	b29b      	uxth	r3, r3
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	061a      	lsls	r2, r3, #24
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	0a1b      	lsrs	r3, r3, #8
 800520c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	0e1b      	lsrs	r3, r3, #24
 8005216:	4313      	orrs	r3, r2
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800522e:	f000 f8d5 	bl	80053dc <mem_init>
  memp_init();
 8005232:	f000 fbd7 	bl	80059e4 <memp_init>
  pbuf_init();
  netif_init();
 8005236:	f000 fcd5 	bl	8005be4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800523a:	f006 ffed 	bl	800c218 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800523e:	f001 fd8b 	bl	8006d58 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005242:	f006 ffa1 	bl	800c188 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800525a:	4b05      	ldr	r3, [pc, #20]	@ (8005270 <ptr_to_mem+0x20>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	4413      	add	r3, r2
}
 8005262:	4618      	mov	r0, r3
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20004d6c 	.word	0x20004d6c

08005274 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800527c:	4b05      	ldr	r3, [pc, #20]	@ (8005294 <mem_to_ptr+0x20>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	b29b      	uxth	r3, r3
}
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	20004d6c 	.word	0x20004d6c

08005298 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005298:	b590      	push	{r4, r7, lr}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80052a0:	4b45      	ldr	r3, [pc, #276]	@ (80053b8 <plug_holes+0x120>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d206      	bcs.n	80052b8 <plug_holes+0x20>
 80052aa:	4b44      	ldr	r3, [pc, #272]	@ (80053bc <plug_holes+0x124>)
 80052ac:	f240 12df 	movw	r2, #479	@ 0x1df
 80052b0:	4943      	ldr	r1, [pc, #268]	@ (80053c0 <plug_holes+0x128>)
 80052b2:	4844      	ldr	r0, [pc, #272]	@ (80053c4 <plug_holes+0x12c>)
 80052b4:	f009 fd30 	bl	800ed18 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80052b8:	4b43      	ldr	r3, [pc, #268]	@ (80053c8 <plug_holes+0x130>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d306      	bcc.n	80052d0 <plug_holes+0x38>
 80052c2:	4b3e      	ldr	r3, [pc, #248]	@ (80053bc <plug_holes+0x124>)
 80052c4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80052c8:	4940      	ldr	r1, [pc, #256]	@ (80053cc <plug_holes+0x134>)
 80052ca:	483e      	ldr	r0, [pc, #248]	@ (80053c4 <plug_holes+0x12c>)
 80052cc:	f009 fd24 	bl	800ed18 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	791b      	ldrb	r3, [r3, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d006      	beq.n	80052e6 <plug_holes+0x4e>
 80052d8:	4b38      	ldr	r3, [pc, #224]	@ (80053bc <plug_holes+0x124>)
 80052da:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80052de:	493c      	ldr	r1, [pc, #240]	@ (80053d0 <plug_holes+0x138>)
 80052e0:	4838      	ldr	r0, [pc, #224]	@ (80053c4 <plug_holes+0x12c>)
 80052e2:	f009 fd19 	bl	800ed18 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80052ee:	d906      	bls.n	80052fe <plug_holes+0x66>
 80052f0:	4b32      	ldr	r3, [pc, #200]	@ (80053bc <plug_holes+0x124>)
 80052f2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80052f6:	4937      	ldr	r1, [pc, #220]	@ (80053d4 <plug_holes+0x13c>)
 80052f8:	4832      	ldr	r0, [pc, #200]	@ (80053c4 <plug_holes+0x12c>)
 80052fa:	f009 fd0d 	bl	800ed18 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff ffa4 	bl	8005250 <ptr_to_mem>
 8005308:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	429a      	cmp	r2, r3
 8005310:	d024      	beq.n	800535c <plug_holes+0xc4>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	791b      	ldrb	r3, [r3, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d120      	bne.n	800535c <plug_holes+0xc4>
 800531a:	4b2b      	ldr	r3, [pc, #172]	@ (80053c8 <plug_holes+0x130>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	429a      	cmp	r2, r3
 8005322:	d01b      	beq.n	800535c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005324:	4b2c      	ldr	r3, [pc, #176]	@ (80053d8 <plug_holes+0x140>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	429a      	cmp	r2, r3
 800532c:	d102      	bne.n	8005334 <plug_holes+0x9c>
      lfree = mem;
 800532e:	4a2a      	ldr	r2, [pc, #168]	@ (80053d8 <plug_holes+0x140>)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	881a      	ldrh	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8005344:	d00a      	beq.n	800535c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff ff80 	bl	8005250 <ptr_to_mem>
 8005350:	4604      	mov	r4, r0
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff ff8e 	bl	8005274 <mem_to_ptr>
 8005358:	4603      	mov	r3, r0
 800535a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	885b      	ldrh	r3, [r3, #2]
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff ff75 	bl	8005250 <ptr_to_mem>
 8005366:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	d01f      	beq.n	80053b0 <plug_holes+0x118>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	791b      	ldrb	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d11b      	bne.n	80053b0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005378:	4b17      	ldr	r3, [pc, #92]	@ (80053d8 <plug_holes+0x140>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	429a      	cmp	r2, r3
 8005380:	d102      	bne.n	8005388 <plug_holes+0xf0>
      lfree = pmem;
 8005382:	4a15      	ldr	r2, [pc, #84]	@ (80053d8 <plug_holes+0x140>)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	881a      	ldrh	r2, [r3, #0]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8005398:	d00a      	beq.n	80053b0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ff56 	bl	8005250 <ptr_to_mem>
 80053a4:	4604      	mov	r4, r0
 80053a6:	68b8      	ldr	r0, [r7, #8]
 80053a8:	f7ff ff64 	bl	8005274 <mem_to_ptr>
 80053ac:	4603      	mov	r3, r0
 80053ae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd90      	pop	{r4, r7, pc}
 80053b8:	20004d6c 	.word	0x20004d6c
 80053bc:	0800fb98 	.word	0x0800fb98
 80053c0:	0800fbc8 	.word	0x0800fbc8
 80053c4:	0800fbe0 	.word	0x0800fbe0
 80053c8:	20004d70 	.word	0x20004d70
 80053cc:	0800fc08 	.word	0x0800fc08
 80053d0:	0800fc24 	.word	0x0800fc24
 80053d4:	0800fc40 	.word	0x0800fc40
 80053d8:	20004d74 	.word	0x20004d74

080053dc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80053e2:	4b16      	ldr	r3, [pc, #88]	@ (800543c <mem_init+0x60>)
 80053e4:	4a16      	ldr	r2, [pc, #88]	@ (8005440 <mem_init+0x64>)
 80053e6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80053e8:	4b14      	ldr	r3, [pc, #80]	@ (800543c <mem_init+0x60>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80053f4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005402:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8005406:	f7ff ff23 	bl	8005250 <ptr_to_mem>
 800540a:	4603      	mov	r3, r0
 800540c:	4a0d      	ldr	r2, [pc, #52]	@ (8005444 <mem_init+0x68>)
 800540e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005410:	4b0c      	ldr	r3, [pc, #48]	@ (8005444 <mem_init+0x68>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2201      	movs	r2, #1
 8005416:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005418:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <mem_init+0x68>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8005420:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005422:	4b08      	ldr	r3, [pc, #32]	@ (8005444 <mem_init+0x68>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800542a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800542c:	4b03      	ldr	r3, [pc, #12]	@ (800543c <mem_init+0x60>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a05      	ldr	r2, [pc, #20]	@ (8005448 <mem_init+0x6c>)
 8005432:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	20004d6c 	.word	0x20004d6c
 8005440:	30004d00 	.word	0x30004d00
 8005444:	20004d70 	.word	0x20004d70
 8005448:	20004d74 	.word	0x20004d74

0800544c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff ff0d 	bl	8005274 <mem_to_ptr>
 800545a:	4603      	mov	r3, r0
 800545c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fef4 	bl	8005250 <ptr_to_mem>
 8005468:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	885b      	ldrh	r3, [r3, #2]
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff feee 	bl	8005250 <ptr_to_mem>
 8005474:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800547e:	d818      	bhi.n	80054b2 <mem_link_valid+0x66>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	885b      	ldrh	r3, [r3, #2]
 8005484:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8005488:	d813      	bhi.n	80054b2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800548e:	8afa      	ldrh	r2, [r7, #22]
 8005490:	429a      	cmp	r2, r3
 8005492:	d004      	beq.n	800549e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	8afa      	ldrh	r2, [r7, #22]
 800549a:	429a      	cmp	r2, r3
 800549c:	d109      	bne.n	80054b2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800549e:	4b08      	ldr	r3, [pc, #32]	@ (80054c0 <mem_link_valid+0x74>)
 80054a0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d006      	beq.n	80054b6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	885b      	ldrh	r3, [r3, #2]
 80054ac:	8afa      	ldrh	r2, [r7, #22]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d001      	beq.n	80054b6 <mem_link_valid+0x6a>
    return 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e000      	b.n	80054b8 <mem_link_valid+0x6c>
  }
  return 1;
 80054b6:	2301      	movs	r3, #1
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20004d70 	.word	0x20004d70

080054c4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d04c      	beq.n	800556c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d007      	beq.n	80054ec <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80054dc:	4b25      	ldr	r3, [pc, #148]	@ (8005574 <mem_free+0xb0>)
 80054de:	f240 2273 	movw	r2, #627	@ 0x273
 80054e2:	4925      	ldr	r1, [pc, #148]	@ (8005578 <mem_free+0xb4>)
 80054e4:	4825      	ldr	r0, [pc, #148]	@ (800557c <mem_free+0xb8>)
 80054e6:	f009 fc17 	bl	800ed18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80054ea:	e040      	b.n	800556e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3b08      	subs	r3, #8
 80054f0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80054f2:	4b23      	ldr	r3, [pc, #140]	@ (8005580 <mem_free+0xbc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d306      	bcc.n	800550a <mem_free+0x46>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f103 020c 	add.w	r2, r3, #12
 8005502:	4b20      	ldr	r3, [pc, #128]	@ (8005584 <mem_free+0xc0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d907      	bls.n	800551a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800550a:	4b1a      	ldr	r3, [pc, #104]	@ (8005574 <mem_free+0xb0>)
 800550c:	f240 227f 	movw	r2, #639	@ 0x27f
 8005510:	491d      	ldr	r1, [pc, #116]	@ (8005588 <mem_free+0xc4>)
 8005512:	481a      	ldr	r0, [pc, #104]	@ (800557c <mem_free+0xb8>)
 8005514:	f009 fc00 	bl	800ed18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005518:	e029      	b.n	800556e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	791b      	ldrb	r3, [r3, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d107      	bne.n	8005532 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005522:	4b14      	ldr	r3, [pc, #80]	@ (8005574 <mem_free+0xb0>)
 8005524:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8005528:	4918      	ldr	r1, [pc, #96]	@ (800558c <mem_free+0xc8>)
 800552a:	4814      	ldr	r0, [pc, #80]	@ (800557c <mem_free+0xb8>)
 800552c:	f009 fbf4 	bl	800ed18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005530:	e01d      	b.n	800556e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f7ff ff8a 	bl	800544c <mem_link_valid>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d107      	bne.n	800554e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800553e:	4b0d      	ldr	r3, [pc, #52]	@ (8005574 <mem_free+0xb0>)
 8005540:	f240 2295 	movw	r2, #661	@ 0x295
 8005544:	4912      	ldr	r1, [pc, #72]	@ (8005590 <mem_free+0xcc>)
 8005546:	480d      	ldr	r0, [pc, #52]	@ (800557c <mem_free+0xb8>)
 8005548:	f009 fbe6 	bl	800ed18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800554c:	e00f      	b.n	800556e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005554:	4b0f      	ldr	r3, [pc, #60]	@ (8005594 <mem_free+0xd0>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	429a      	cmp	r2, r3
 800555c:	d202      	bcs.n	8005564 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800555e:	4a0d      	ldr	r2, [pc, #52]	@ (8005594 <mem_free+0xd0>)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f7ff fe97 	bl	8005298 <plug_holes>
 800556a:	e000      	b.n	800556e <mem_free+0xaa>
    return;
 800556c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	0800fb98 	.word	0x0800fb98
 8005578:	0800fc6c 	.word	0x0800fc6c
 800557c:	0800fbe0 	.word	0x0800fbe0
 8005580:	20004d6c 	.word	0x20004d6c
 8005584:	20004d70 	.word	0x20004d70
 8005588:	0800fc90 	.word	0x0800fc90
 800558c:	0800fcac 	.word	0x0800fcac
 8005590:	0800fcd4 	.word	0x0800fcd4
 8005594:	20004d74 	.word	0x20004d74

08005598 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80055a4:	887b      	ldrh	r3, [r7, #2]
 80055a6:	3303      	adds	r3, #3
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80055b0:	8bfb      	ldrh	r3, [r7, #30]
 80055b2:	2b0b      	cmp	r3, #11
 80055b4:	d801      	bhi.n	80055ba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80055b6:	230c      	movs	r3, #12
 80055b8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80055ba:	8bfb      	ldrh	r3, [r7, #30]
 80055bc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80055c0:	d803      	bhi.n	80055ca <mem_trim+0x32>
 80055c2:	8bfa      	ldrh	r2, [r7, #30]
 80055c4:	887b      	ldrh	r3, [r7, #2]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d201      	bcs.n	80055ce <mem_trim+0x36>
    return NULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e0cc      	b.n	8005768 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80055ce:	4b68      	ldr	r3, [pc, #416]	@ (8005770 <mem_trim+0x1d8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d304      	bcc.n	80055e2 <mem_trim+0x4a>
 80055d8:	4b66      	ldr	r3, [pc, #408]	@ (8005774 <mem_trim+0x1dc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d306      	bcc.n	80055f0 <mem_trim+0x58>
 80055e2:	4b65      	ldr	r3, [pc, #404]	@ (8005778 <mem_trim+0x1e0>)
 80055e4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80055e8:	4964      	ldr	r1, [pc, #400]	@ (800577c <mem_trim+0x1e4>)
 80055ea:	4865      	ldr	r0, [pc, #404]	@ (8005780 <mem_trim+0x1e8>)
 80055ec:	f009 fb94 	bl	800ed18 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80055f0:	4b5f      	ldr	r3, [pc, #380]	@ (8005770 <mem_trim+0x1d8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d304      	bcc.n	8005604 <mem_trim+0x6c>
 80055fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005774 <mem_trim+0x1dc>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	d301      	bcc.n	8005608 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	e0af      	b.n	8005768 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3b08      	subs	r3, #8
 800560c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800560e:	69b8      	ldr	r0, [r7, #24]
 8005610:	f7ff fe30 	bl	8005274 <mem_to_ptr>
 8005614:	4603      	mov	r3, r0
 8005616:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	881a      	ldrh	r2, [r3, #0]
 800561c:	8afb      	ldrh	r3, [r7, #22]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b08      	subs	r3, #8
 8005624:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005626:	8bfa      	ldrh	r2, [r7, #30]
 8005628:	8abb      	ldrh	r3, [r7, #20]
 800562a:	429a      	cmp	r2, r3
 800562c:	d906      	bls.n	800563c <mem_trim+0xa4>
 800562e:	4b52      	ldr	r3, [pc, #328]	@ (8005778 <mem_trim+0x1e0>)
 8005630:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8005634:	4953      	ldr	r1, [pc, #332]	@ (8005784 <mem_trim+0x1ec>)
 8005636:	4852      	ldr	r0, [pc, #328]	@ (8005780 <mem_trim+0x1e8>)
 8005638:	f009 fb6e 	bl	800ed18 <iprintf>
  if (newsize > size) {
 800563c:	8bfa      	ldrh	r2, [r7, #30]
 800563e:	8abb      	ldrh	r3, [r7, #20]
 8005640:	429a      	cmp	r2, r3
 8005642:	d901      	bls.n	8005648 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005644:	2300      	movs	r3, #0
 8005646:	e08f      	b.n	8005768 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005648:	8bfa      	ldrh	r2, [r7, #30]
 800564a:	8abb      	ldrh	r3, [r7, #20]
 800564c:	429a      	cmp	r2, r3
 800564e:	d101      	bne.n	8005654 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	e089      	b.n	8005768 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fdf9 	bl	8005250 <ptr_to_mem>
 800565e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	791b      	ldrb	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d13f      	bne.n	80056e8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8005670:	d106      	bne.n	8005680 <mem_trim+0xe8>
 8005672:	4b41      	ldr	r3, [pc, #260]	@ (8005778 <mem_trim+0x1e0>)
 8005674:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005678:	4943      	ldr	r1, [pc, #268]	@ (8005788 <mem_trim+0x1f0>)
 800567a:	4841      	ldr	r0, [pc, #260]	@ (8005780 <mem_trim+0x1e8>)
 800567c:	f009 fb4c 	bl	800ed18 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005686:	8afa      	ldrh	r2, [r7, #22]
 8005688:	8bfb      	ldrh	r3, [r7, #30]
 800568a:	4413      	add	r3, r2
 800568c:	b29b      	uxth	r3, r3
 800568e:	3308      	adds	r3, #8
 8005690:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005692:	4b3e      	ldr	r3, [pc, #248]	@ (800578c <mem_trim+0x1f4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	429a      	cmp	r2, r3
 800569a:	d106      	bne.n	80056aa <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800569c:	89fb      	ldrh	r3, [r7, #14]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fdd6 	bl	8005250 <ptr_to_mem>
 80056a4:	4603      	mov	r3, r0
 80056a6:	4a39      	ldr	r2, [pc, #228]	@ (800578c <mem_trim+0x1f4>)
 80056a8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80056aa:	89fb      	ldrh	r3, [r7, #14]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff fdcf 	bl	8005250 <ptr_to_mem>
 80056b2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2200      	movs	r2, #0
 80056b8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	89ba      	ldrh	r2, [r7, #12]
 80056be:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	8afa      	ldrh	r2, [r7, #22]
 80056c4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	89fa      	ldrh	r2, [r7, #14]
 80056ca:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80056d4:	d047      	beq.n	8005766 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff fdb8 	bl	8005250 <ptr_to_mem>
 80056e0:	4602      	mov	r2, r0
 80056e2:	89fb      	ldrh	r3, [r7, #14]
 80056e4:	8053      	strh	r3, [r2, #2]
 80056e6:	e03e      	b.n	8005766 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80056e8:	8bfb      	ldrh	r3, [r7, #30]
 80056ea:	f103 0214 	add.w	r2, r3, #20
 80056ee:	8abb      	ldrh	r3, [r7, #20]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d838      	bhi.n	8005766 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80056f4:	8afa      	ldrh	r2, [r7, #22]
 80056f6:	8bfb      	ldrh	r3, [r7, #30]
 80056f8:	4413      	add	r3, r2
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3308      	adds	r3, #8
 80056fe:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8005708:	d106      	bne.n	8005718 <mem_trim+0x180>
 800570a:	4b1b      	ldr	r3, [pc, #108]	@ (8005778 <mem_trim+0x1e0>)
 800570c:	f240 3216 	movw	r2, #790	@ 0x316
 8005710:	491d      	ldr	r1, [pc, #116]	@ (8005788 <mem_trim+0x1f0>)
 8005712:	481b      	ldr	r0, [pc, #108]	@ (8005780 <mem_trim+0x1e8>)
 8005714:	f009 fb00 	bl	800ed18 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005718:	89fb      	ldrh	r3, [r7, #14]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fd98 	bl	8005250 <ptr_to_mem>
 8005720:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005722:	4b1a      	ldr	r3, [pc, #104]	@ (800578c <mem_trim+0x1f4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	429a      	cmp	r2, r3
 800572a:	d202      	bcs.n	8005732 <mem_trim+0x19a>
      lfree = mem2;
 800572c:	4a17      	ldr	r2, [pc, #92]	@ (800578c <mem_trim+0x1f4>)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2200      	movs	r2, #0
 8005736:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	881a      	ldrh	r2, [r3, #0]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	8afa      	ldrh	r2, [r7, #22]
 8005744:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	89fa      	ldrh	r2, [r7, #14]
 800574a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8005754:	d007      	beq.n	8005766 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff fd78 	bl	8005250 <ptr_to_mem>
 8005760:	4602      	mov	r2, r0
 8005762:	89fb      	ldrh	r3, [r7, #14]
 8005764:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005766:	687b      	ldr	r3, [r7, #4]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	20004d6c 	.word	0x20004d6c
 8005774:	20004d70 	.word	0x20004d70
 8005778:	0800fb98 	.word	0x0800fb98
 800577c:	0800fd08 	.word	0x0800fd08
 8005780:	0800fbe0 	.word	0x0800fbe0
 8005784:	0800fd20 	.word	0x0800fd20
 8005788:	0800fd40 	.word	0x0800fd40
 800578c:	20004d74 	.word	0x20004d74

08005790 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800579a:	88fb      	ldrh	r3, [r7, #6]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <mem_malloc+0x14>
    return NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	e0d9      	b.n	8005958 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80057a4:	88fb      	ldrh	r3, [r7, #6]
 80057a6:	3303      	adds	r3, #3
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80057b0:	8bbb      	ldrh	r3, [r7, #28]
 80057b2:	2b0b      	cmp	r3, #11
 80057b4:	d801      	bhi.n	80057ba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80057b6:	230c      	movs	r3, #12
 80057b8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80057ba:	8bbb      	ldrh	r3, [r7, #28]
 80057bc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80057c0:	d803      	bhi.n	80057ca <mem_malloc+0x3a>
 80057c2:	8bba      	ldrh	r2, [r7, #28]
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d201      	bcs.n	80057ce <mem_malloc+0x3e>
    return NULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e0c4      	b.n	8005958 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80057ce:	4b64      	ldr	r3, [pc, #400]	@ (8005960 <mem_malloc+0x1d0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff fd4e 	bl	8005274 <mem_to_ptr>
 80057d8:	4603      	mov	r3, r0
 80057da:	83fb      	strh	r3, [r7, #30]
 80057dc:	e0b4      	b.n	8005948 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80057de:	8bfb      	ldrh	r3, [r7, #30]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fd35 	bl	8005250 <ptr_to_mem>
 80057e6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	791b      	ldrb	r3, [r3, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f040 80a4 	bne.w	800593a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	8bfb      	ldrh	r3, [r7, #30]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	f1a3 0208 	sub.w	r2, r3, #8
 8005800:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005802:	429a      	cmp	r2, r3
 8005804:	f0c0 8099 	bcc.w	800593a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	8bfb      	ldrh	r3, [r7, #30]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	f1a3 0208 	sub.w	r2, r3, #8
 8005816:	8bbb      	ldrh	r3, [r7, #28]
 8005818:	3314      	adds	r3, #20
 800581a:	429a      	cmp	r2, r3
 800581c:	d333      	bcc.n	8005886 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800581e:	8bfa      	ldrh	r2, [r7, #30]
 8005820:	8bbb      	ldrh	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	b29b      	uxth	r3, r3
 8005826:	3308      	adds	r3, #8
 8005828:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800582a:	8a7b      	ldrh	r3, [r7, #18]
 800582c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8005830:	d106      	bne.n	8005840 <mem_malloc+0xb0>
 8005832:	4b4c      	ldr	r3, [pc, #304]	@ (8005964 <mem_malloc+0x1d4>)
 8005834:	f240 3287 	movw	r2, #903	@ 0x387
 8005838:	494b      	ldr	r1, [pc, #300]	@ (8005968 <mem_malloc+0x1d8>)
 800583a:	484c      	ldr	r0, [pc, #304]	@ (800596c <mem_malloc+0x1dc>)
 800583c:	f009 fa6c 	bl	800ed18 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005840:	8a7b      	ldrh	r3, [r7, #18]
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff fd04 	bl	8005250 <ptr_to_mem>
 8005848:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	881a      	ldrh	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8bfa      	ldrh	r2, [r7, #30]
 800585c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	8a7a      	ldrh	r2, [r7, #18]
 8005862:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2201      	movs	r2, #1
 8005868:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8005872:	d00b      	beq.n	800588c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff fce9 	bl	8005250 <ptr_to_mem>
 800587e:	4602      	mov	r2, r0
 8005880:	8a7b      	ldrh	r3, [r7, #18]
 8005882:	8053      	strh	r3, [r2, #2]
 8005884:	e002      	b.n	800588c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2201      	movs	r2, #1
 800588a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800588c:	4b34      	ldr	r3, [pc, #208]	@ (8005960 <mem_malloc+0x1d0>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	429a      	cmp	r2, r3
 8005894:	d127      	bne.n	80058e6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005896:	4b32      	ldr	r3, [pc, #200]	@ (8005960 <mem_malloc+0x1d0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800589c:	e005      	b.n	80058aa <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff fcd4 	bl	8005250 <ptr_to_mem>
 80058a8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	791b      	ldrb	r3, [r3, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d004      	beq.n	80058bc <mem_malloc+0x12c>
 80058b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005970 <mem_malloc+0x1e0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d1f0      	bne.n	800589e <mem_malloc+0x10e>
          }
          lfree = cur;
 80058bc:	4a28      	ldr	r2, [pc, #160]	@ (8005960 <mem_malloc+0x1d0>)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80058c2:	4b27      	ldr	r3, [pc, #156]	@ (8005960 <mem_malloc+0x1d0>)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005970 <mem_malloc+0x1e0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d00b      	beq.n	80058e6 <mem_malloc+0x156>
 80058ce:	4b24      	ldr	r3, [pc, #144]	@ (8005960 <mem_malloc+0x1d0>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	791b      	ldrb	r3, [r3, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d006      	beq.n	80058e6 <mem_malloc+0x156>
 80058d8:	4b22      	ldr	r3, [pc, #136]	@ (8005964 <mem_malloc+0x1d4>)
 80058da:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80058de:	4925      	ldr	r1, [pc, #148]	@ (8005974 <mem_malloc+0x1e4>)
 80058e0:	4822      	ldr	r0, [pc, #136]	@ (800596c <mem_malloc+0x1dc>)
 80058e2:	f009 fa19 	bl	800ed18 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80058e6:	8bba      	ldrh	r2, [r7, #28]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	4413      	add	r3, r2
 80058ec:	3308      	adds	r3, #8
 80058ee:	4a20      	ldr	r2, [pc, #128]	@ (8005970 <mem_malloc+0x1e0>)
 80058f0:	6812      	ldr	r2, [r2, #0]
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d906      	bls.n	8005904 <mem_malloc+0x174>
 80058f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005964 <mem_malloc+0x1d4>)
 80058f8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80058fc:	491e      	ldr	r1, [pc, #120]	@ (8005978 <mem_malloc+0x1e8>)
 80058fe:	481b      	ldr	r0, [pc, #108]	@ (800596c <mem_malloc+0x1dc>)
 8005900:	f009 fa0a 	bl	800ed18 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d006      	beq.n	800591c <mem_malloc+0x18c>
 800590e:	4b15      	ldr	r3, [pc, #84]	@ (8005964 <mem_malloc+0x1d4>)
 8005910:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8005914:	4919      	ldr	r1, [pc, #100]	@ (800597c <mem_malloc+0x1ec>)
 8005916:	4815      	ldr	r0, [pc, #84]	@ (800596c <mem_malloc+0x1dc>)
 8005918:	f009 f9fe 	bl	800ed18 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d006      	beq.n	8005934 <mem_malloc+0x1a4>
 8005926:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <mem_malloc+0x1d4>)
 8005928:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800592c:	4914      	ldr	r1, [pc, #80]	@ (8005980 <mem_malloc+0x1f0>)
 800592e:	480f      	ldr	r0, [pc, #60]	@ (800596c <mem_malloc+0x1dc>)
 8005930:	f009 f9f2 	bl	800ed18 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	3308      	adds	r3, #8
 8005938:	e00e      	b.n	8005958 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800593a:	8bfb      	ldrh	r3, [r7, #30]
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff fc87 	bl	8005250 <ptr_to_mem>
 8005942:	4603      	mov	r3, r0
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005948:	8bfa      	ldrh	r2, [r7, #30]
 800594a:	8bbb      	ldrh	r3, [r7, #28]
 800594c:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8005950:	429a      	cmp	r2, r3
 8005952:	f4ff af44 	bcc.w	80057de <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3720      	adds	r7, #32
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	20004d74 	.word	0x20004d74
 8005964:	0800fb98 	.word	0x0800fb98
 8005968:	0800fd40 	.word	0x0800fd40
 800596c:	0800fbe0 	.word	0x0800fbe0
 8005970:	20004d70 	.word	0x20004d70
 8005974:	0800fd54 	.word	0x0800fd54
 8005978:	0800fd70 	.word	0x0800fd70
 800597c:	0800fda0 	.word	0x0800fda0
 8005980:	0800fdd0 	.word	0x0800fdd0

08005984 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	3303      	adds	r3, #3
 800599a:	f023 0303 	bic.w	r3, r3, #3
 800599e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e011      	b.n	80059ca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	4413      	add	r3, r2
 80059c2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3301      	adds	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	885b      	ldrh	r3, [r3, #2]
 80059ce:	461a      	mov	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4293      	cmp	r3, r2
 80059d4:	dbe7      	blt.n	80059a6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80059d6:	bf00      	nop
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80059ea:	2300      	movs	r3, #0
 80059ec:	80fb      	strh	r3, [r7, #6]
 80059ee:	e009      	b.n	8005a04 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	4a08      	ldr	r2, [pc, #32]	@ (8005a14 <memp_init+0x30>)
 80059f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff ffc3 	bl	8005984 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80059fe:	88fb      	ldrh	r3, [r7, #6]
 8005a00:	3301      	adds	r3, #1
 8005a02:	80fb      	strh	r3, [r7, #6]
 8005a04:	88fb      	ldrh	r3, [r7, #6]
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d9f2      	bls.n	80059f0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005a0a:	bf00      	nop
 8005a0c:	bf00      	nop
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	080125b4 	.word	0x080125b4

08005a18 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d012      	beq.n	8005a54 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d006      	beq.n	8005a50 <do_memp_malloc_pool+0x38>
 8005a42:	4b07      	ldr	r3, [pc, #28]	@ (8005a60 <do_memp_malloc_pool+0x48>)
 8005a44:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8005a48:	4906      	ldr	r1, [pc, #24]	@ (8005a64 <do_memp_malloc_pool+0x4c>)
 8005a4a:	4807      	ldr	r0, [pc, #28]	@ (8005a68 <do_memp_malloc_pool+0x50>)
 8005a4c:	f009 f964 	bl	800ed18 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	e000      	b.n	8005a56 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	0800fdf4 	.word	0x0800fdf4
 8005a64:	0800fe24 	.word	0x0800fe24
 8005a68:	0800fe48 	.word	0x0800fe48

08005a6c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <memp_malloc_pool+0x1c>
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa4 <memp_malloc_pool+0x38>)
 8005a7c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8005a80:	4909      	ldr	r1, [pc, #36]	@ (8005aa8 <memp_malloc_pool+0x3c>)
 8005a82:	480a      	ldr	r0, [pc, #40]	@ (8005aac <memp_malloc_pool+0x40>)
 8005a84:	f009 f948 	bl	800ed18 <iprintf>
  if (desc == NULL) {
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <memp_malloc_pool+0x26>
    return NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e003      	b.n	8005a9a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff ffc0 	bl	8005a18 <do_memp_malloc_pool>
 8005a98:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	0800fdf4 	.word	0x0800fdf4
 8005aa8:	0800fe70 	.word	0x0800fe70
 8005aac:	0800fe48 	.word	0x0800fe48

08005ab0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d908      	bls.n	8005ad2 <memp_malloc+0x22>
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <memp_malloc+0x3c>)
 8005ac2:	f240 1257 	movw	r2, #343	@ 0x157
 8005ac6:	490a      	ldr	r1, [pc, #40]	@ (8005af0 <memp_malloc+0x40>)
 8005ac8:	480a      	ldr	r0, [pc, #40]	@ (8005af4 <memp_malloc+0x44>)
 8005aca:	f009 f925 	bl	800ed18 <iprintf>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e008      	b.n	8005ae4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	4a08      	ldr	r2, [pc, #32]	@ (8005af8 <memp_malloc+0x48>)
 8005ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff ff9c 	bl	8005a18 <do_memp_malloc_pool>
 8005ae0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	0800fdf4 	.word	0x0800fdf4
 8005af0:	0800fe84 	.word	0x0800fe84
 8005af4:	0800fe48 	.word	0x0800fe48
 8005af8:	080125b4 	.word	0x080125b4

08005afc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f003 0303 	and.w	r3, r3, #3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d006      	beq.n	8005b1e <do_memp_free_pool+0x22>
 8005b10:	4b0a      	ldr	r3, [pc, #40]	@ (8005b3c <do_memp_free_pool+0x40>)
 8005b12:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8005b16:	490a      	ldr	r1, [pc, #40]	@ (8005b40 <do_memp_free_pool+0x44>)
 8005b18:	480a      	ldr	r0, [pc, #40]	@ (8005b44 <do_memp_free_pool+0x48>)
 8005b1a:	f009 f8fd 	bl	800ed18 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	0800fdf4 	.word	0x0800fdf4
 8005b40:	0800fea4 	.word	0x0800fea4
 8005b44:	0800fe48 	.word	0x0800fe48

08005b48 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d106      	bne.n	8005b66 <memp_free_pool+0x1e>
 8005b58:	4b0a      	ldr	r3, [pc, #40]	@ (8005b84 <memp_free_pool+0x3c>)
 8005b5a:	f240 1295 	movw	r2, #405	@ 0x195
 8005b5e:	490a      	ldr	r1, [pc, #40]	@ (8005b88 <memp_free_pool+0x40>)
 8005b60:	480a      	ldr	r0, [pc, #40]	@ (8005b8c <memp_free_pool+0x44>)
 8005b62:	f009 f8d9 	bl	800ed18 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <memp_free_pool+0x34>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff ffc1 	bl	8005afc <do_memp_free_pool>
 8005b7a:	e000      	b.n	8005b7e <memp_free_pool+0x36>
    return;
 8005b7c:	bf00      	nop
}
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	0800fdf4 	.word	0x0800fdf4
 8005b88:	0800fe70 	.word	0x0800fe70
 8005b8c:	0800fe48 	.word	0x0800fe48

08005b90 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4603      	mov	r3, r0
 8005b98:	6039      	str	r1, [r7, #0]
 8005b9a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d907      	bls.n	8005bb2 <memp_free+0x22>
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd4 <memp_free+0x44>)
 8005ba4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8005ba8:	490b      	ldr	r1, [pc, #44]	@ (8005bd8 <memp_free+0x48>)
 8005baa:	480c      	ldr	r0, [pc, #48]	@ (8005bdc <memp_free+0x4c>)
 8005bac:	f009 f8b4 	bl	800ed18 <iprintf>
 8005bb0:	e00c      	b.n	8005bcc <memp_free+0x3c>

  if (mem == NULL) {
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	4a09      	ldr	r2, [pc, #36]	@ (8005be0 <memp_free+0x50>)
 8005bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff ff9a 	bl	8005afc <do_memp_free_pool>
 8005bc8:	e000      	b.n	8005bcc <memp_free+0x3c>
    return;
 8005bca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	0800fdf4 	.word	0x0800fdf4
 8005bd8:	0800fec4 	.word	0x0800fec4
 8005bdc:	0800fe48 	.word	0x0800fe48
 8005be0:	080125b4 	.word	0x080125b4

08005be4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005be8:	bf00      	nop
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d108      	bne.n	8005c1a <netif_add+0x26>
 8005c08:	4b57      	ldr	r3, [pc, #348]	@ (8005d68 <netif_add+0x174>)
 8005c0a:	f240 1227 	movw	r2, #295	@ 0x127
 8005c0e:	4957      	ldr	r1, [pc, #348]	@ (8005d6c <netif_add+0x178>)
 8005c10:	4857      	ldr	r0, [pc, #348]	@ (8005d70 <netif_add+0x17c>)
 8005c12:	f009 f881 	bl	800ed18 <iprintf>
 8005c16:	2300      	movs	r3, #0
 8005c18:	e0a2      	b.n	8005d60 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d108      	bne.n	8005c32 <netif_add+0x3e>
 8005c20:	4b51      	ldr	r3, [pc, #324]	@ (8005d68 <netif_add+0x174>)
 8005c22:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8005c26:	4953      	ldr	r1, [pc, #332]	@ (8005d74 <netif_add+0x180>)
 8005c28:	4851      	ldr	r0, [pc, #324]	@ (8005d70 <netif_add+0x17c>)
 8005c2a:	f009 f875 	bl	800ed18 <iprintf>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e096      	b.n	8005d60 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005c38:	4b4f      	ldr	r3, [pc, #316]	@ (8005d78 <netif_add+0x184>)
 8005c3a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005c42:	4b4d      	ldr	r3, [pc, #308]	@ (8005d78 <netif_add+0x184>)
 8005c44:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005c4c:	4b4a      	ldr	r3, [pc, #296]	@ (8005d78 <netif_add+0x184>)
 8005c4e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4a45      	ldr	r2, [pc, #276]	@ (8005d7c <netif_add+0x188>)
 8005c66:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a3a      	ldr	r2, [r7, #32]
 8005c80:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005c82:	4b3f      	ldr	r3, [pc, #252]	@ (8005d80 <netif_add+0x18c>)
 8005c84:	781a      	ldrb	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c90:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f913 	bl	8005ec4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	4798      	blx	r3
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <netif_add+0xba>
    return NULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e058      	b.n	8005d60 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005cb4:	2bff      	cmp	r3, #255	@ 0xff
 8005cb6:	d103      	bne.n	8005cc0 <netif_add+0xcc>
        netif->num = 0;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8005d84 <netif_add+0x190>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e02b      	b.n	8005d24 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d106      	bne.n	8005ce2 <netif_add+0xee>
 8005cd4:	4b24      	ldr	r3, [pc, #144]	@ (8005d68 <netif_add+0x174>)
 8005cd6:	f240 128b 	movw	r2, #395	@ 0x18b
 8005cda:	492b      	ldr	r1, [pc, #172]	@ (8005d88 <netif_add+0x194>)
 8005cdc:	4824      	ldr	r0, [pc, #144]	@ (8005d70 <netif_add+0x17c>)
 8005cde:	f009 f81b 	bl	800ed18 <iprintf>
        num_netifs++;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	2bff      	cmp	r3, #255	@ 0xff
 8005cec:	dd06      	ble.n	8005cfc <netif_add+0x108>
 8005cee:	4b1e      	ldr	r3, [pc, #120]	@ (8005d68 <netif_add+0x174>)
 8005cf0:	f240 128d 	movw	r2, #397	@ 0x18d
 8005cf4:	4925      	ldr	r1, [pc, #148]	@ (8005d8c <netif_add+0x198>)
 8005cf6:	481e      	ldr	r0, [pc, #120]	@ (8005d70 <netif_add+0x17c>)
 8005cf8:	f009 f80e 	bl	800ed18 <iprintf>
        if (netif2->num == netif->num) {
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d108      	bne.n	8005d1e <netif_add+0x12a>
          netif->num++;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d12:	3301      	adds	r3, #1
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8005d1c:	e005      	b.n	8005d2a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1d0      	bne.n	8005ccc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1be      	bne.n	8005cae <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d36:	2bfe      	cmp	r3, #254	@ 0xfe
 8005d38:	d103      	bne.n	8005d42 <netif_add+0x14e>
    netif_num = 0;
 8005d3a:	4b11      	ldr	r3, [pc, #68]	@ (8005d80 <netif_add+0x18c>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	e006      	b.n	8005d50 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d48:	3301      	adds	r3, #1
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d80 <netif_add+0x18c>)
 8005d4e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005d50:	4b0c      	ldr	r3, [pc, #48]	@ (8005d84 <netif_add+0x190>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005d58:	4a0a      	ldr	r2, [pc, #40]	@ (8005d84 <netif_add+0x190>)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	0800fee0 	.word	0x0800fee0
 8005d6c:	0800ff74 	.word	0x0800ff74
 8005d70:	0800ff30 	.word	0x0800ff30
 8005d74:	0800ff90 	.word	0x0800ff90
 8005d78:	08012618 	.word	0x08012618
 8005d7c:	0800619f 	.word	0x0800619f
 8005d80:	20007c6c 	.word	0x20007c6c
 8005d84:	20007c64 	.word	0x20007c64
 8005d88:	0800ffb4 	.word	0x0800ffb4
 8005d8c:	0800ffc8 	.word	0x0800ffc8

08005d90 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f002 fb25 	bl	80083ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f006 fbc1 	bl	800c52c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005daa:	bf00      	nop
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <netif_do_set_ipaddr+0x20>
 8005dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e3c <netif_do_set_ipaddr+0x88>)
 8005dc8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8005dcc:	491c      	ldr	r1, [pc, #112]	@ (8005e40 <netif_do_set_ipaddr+0x8c>)
 8005dce:	481d      	ldr	r0, [pc, #116]	@ (8005e44 <netif_do_set_ipaddr+0x90>)
 8005dd0:	f008 ffa2 	bl	800ed18 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <netif_do_set_ipaddr+0x34>
 8005dda:	4b18      	ldr	r3, [pc, #96]	@ (8005e3c <netif_do_set_ipaddr+0x88>)
 8005ddc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8005de0:	4917      	ldr	r1, [pc, #92]	@ (8005e40 <netif_do_set_ipaddr+0x8c>)
 8005de2:	4818      	ldr	r0, [pc, #96]	@ (8005e44 <netif_do_set_ipaddr+0x90>)
 8005de4:	f008 ff98 	bl	800ed18 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3304      	adds	r3, #4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d01c      	beq.n	8005e30 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005e06:	f107 0314 	add.w	r3, r7, #20
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff ffbf 	bl	8005d90 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <netif_do_set_ipaddr+0x6a>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	e000      	b.n	8005e20 <netif_do_set_ipaddr+0x6c>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005e24:	2101      	movs	r1, #1
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f8d2 	bl	8005fd0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	0800fee0 	.word	0x0800fee0
 8005e40:	0800fff8 	.word	0x0800fff8
 8005e44:	0800ff30 	.word	0x0800ff30

08005e48 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d00a      	beq.n	8005e78 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <netif_do_set_netmask+0x26>
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	e000      	b.n	8005e70 <netif_do_set_netmask+0x28>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	330c      	adds	r3, #12
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d00a      	beq.n	8005eb6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <netif_do_set_gw+0x26>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	e000      	b.n	8005eae <netif_do_set_gw+0x28>
 8005eac:	2300      	movs	r3, #0
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e000      	b.n	8005eb8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f54 <netif_set_addr+0x90>)
 8005ee2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005eea:	4b1a      	ldr	r3, [pc, #104]	@ (8005f54 <netif_set_addr+0x90>)
 8005eec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005ef4:	4b17      	ldr	r3, [pc, #92]	@ (8005f54 <netif_set_addr+0x90>)
 8005ef6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <netif_set_addr+0x42>
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <netif_set_addr+0x46>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e000      	b.n	8005f0c <netif_set_addr+0x48>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d006      	beq.n	8005f22 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005f14:	f107 0310 	add.w	r3, r7, #16
 8005f18:	461a      	mov	r2, r3
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f7ff ff49 	bl	8005db4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f7ff ff8e 	bl	8005e48 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7ff ffa8 	bl	8005e86 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d106      	bne.n	8005f4a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005f3c:	f107 0310 	add.w	r3, r7, #16
 8005f40:	461a      	mov	r2, r3
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7ff ff35 	bl	8005db4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005f4a:	bf00      	nop
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	08012618 	.word	0x08012618

08005f58 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005f60:	4a04      	ldr	r2, [pc, #16]	@ (8005f74 <netif_set_default+0x1c>)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	20007c68 	.word	0x20007c68

08005f78 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d107      	bne.n	8005f96 <netif_set_up+0x1e>
 8005f86:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc4 <netif_set_up+0x4c>)
 8005f88:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8005f8c:	490e      	ldr	r1, [pc, #56]	@ (8005fc8 <netif_set_up+0x50>)
 8005f8e:	480f      	ldr	r0, [pc, #60]	@ (8005fcc <netif_set_up+0x54>)
 8005f90:	f008 fec2 	bl	800ed18 <iprintf>
 8005f94:	e013      	b.n	8005fbe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10c      	bne.n	8005fbe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005fb6:	2103      	movs	r1, #3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f809 	bl	8005fd0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	0800fee0 	.word	0x0800fee0
 8005fc8:	08010068 	.word	0x08010068
 8005fcc:	0800ff30 	.word	0x0800ff30

08005fd0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <netif_issue_reports+0x20>
 8005fe2:	4b18      	ldr	r3, [pc, #96]	@ (8006044 <netif_issue_reports+0x74>)
 8005fe4:	f240 326d 	movw	r2, #877	@ 0x36d
 8005fe8:	4917      	ldr	r1, [pc, #92]	@ (8006048 <netif_issue_reports+0x78>)
 8005fea:	4818      	ldr	r0, [pc, #96]	@ (800604c <netif_issue_reports+0x7c>)
 8005fec:	f008 fe94 	bl	800ed18 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d01e      	beq.n	800603c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006004:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006008:	2b00      	cmp	r3, #0
 800600a:	d017      	beq.n	800603c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d013      	beq.n	800603e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3304      	adds	r3, #4
 800601a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00e      	beq.n	800603e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f007 f9e3 	bl	800d400 <etharp_request>
 800603a:	e000      	b.n	800603e <netif_issue_reports+0x6e>
    return;
 800603c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	0800fee0 	.word	0x0800fee0
 8006048:	08010084 	.word	0x08010084
 800604c:	0800ff30 	.word	0x0800ff30

08006050 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d107      	bne.n	800606e <netif_set_down+0x1e>
 800605e:	4b12      	ldr	r3, [pc, #72]	@ (80060a8 <netif_set_down+0x58>)
 8006060:	f240 329b 	movw	r2, #923	@ 0x39b
 8006064:	4911      	ldr	r1, [pc, #68]	@ (80060ac <netif_set_down+0x5c>)
 8006066:	4812      	ldr	r0, [pc, #72]	@ (80060b0 <netif_set_down+0x60>)
 8006068:	f008 fe56 	bl	800ed18 <iprintf>
 800606c:	e019      	b.n	80060a2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d012      	beq.n	80060a2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	b2da      	uxtb	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f006 fd6d 	bl	800cb7c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	0800fee0 	.word	0x0800fee0
 80060ac:	080100a8 	.word	0x080100a8
 80060b0:	0800ff30 	.word	0x0800ff30

080060b4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d107      	bne.n	80060d2 <netif_set_link_up+0x1e>
 80060c2:	4b13      	ldr	r3, [pc, #76]	@ (8006110 <netif_set_link_up+0x5c>)
 80060c4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80060c8:	4912      	ldr	r1, [pc, #72]	@ (8006114 <netif_set_link_up+0x60>)
 80060ca:	4813      	ldr	r0, [pc, #76]	@ (8006118 <netif_set_link_up+0x64>)
 80060cc:	f008 fe24 	bl	800ed18 <iprintf>
 80060d0:	e01b      	b.n	800610a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d114      	bne.n	800610a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80060e6:	f043 0304 	orr.w	r3, r3, #4
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80060f2:	2103      	movs	r1, #3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff ff6b 	bl	8005fd0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <netif_set_link_up+0x56>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	0800fee0 	.word	0x0800fee0
 8006114:	080100c8 	.word	0x080100c8
 8006118:	0800ff30 	.word	0x0800ff30

0800611c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d107      	bne.n	800613a <netif_set_link_down+0x1e>
 800612a:	4b11      	ldr	r3, [pc, #68]	@ (8006170 <netif_set_link_down+0x54>)
 800612c:	f240 4206 	movw	r2, #1030	@ 0x406
 8006130:	4910      	ldr	r1, [pc, #64]	@ (8006174 <netif_set_link_down+0x58>)
 8006132:	4811      	ldr	r0, [pc, #68]	@ (8006178 <netif_set_link_down+0x5c>)
 8006134:	f008 fdf0 	bl	800ed18 <iprintf>
 8006138:	e017      	b.n	800616a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d010      	beq.n	800616a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800614e:	f023 0304 	bic.w	r3, r3, #4
 8006152:	b2da      	uxtb	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <netif_set_link_down+0x4e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	0800fee0 	.word	0x0800fee0
 8006174:	080100ec 	.word	0x080100ec
 8006178:	0800ff30 	.word	0x0800ff30

0800617c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	61da      	str	r2, [r3, #28]
  }
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	60f8      	str	r0, [r7, #12]
 80061a6:	60b9      	str	r1, [r7, #8]
 80061a8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80061aa:	f06f 030b 	mvn.w	r3, #11
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
	...

080061bc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d013      	beq.n	80061f4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80061cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006204 <netif_get_by_index+0x48>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	e00c      	b.n	80061ee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80061da:	3301      	adds	r3, #1
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	79fa      	ldrb	r2, [r7, #7]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d101      	bne.n	80061e8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	e006      	b.n	80061f6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1ef      	bne.n	80061d4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	20007c64 	.word	0x20007c64

08006208 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800620c:	4b03      	ldr	r3, [pc, #12]	@ (800621c <pbuf_pool_is_empty+0x14>)
 800620e:	2201      	movs	r2, #1
 8006210:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006212:	bf00      	nop
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	20007c6d 	.word	0x20007c6d

08006220 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	4611      	mov	r1, r2
 800622c:	461a      	mov	r2, r3
 800622e:	460b      	mov	r3, r1
 8006230:	80fb      	strh	r3, [r7, #6]
 8006232:	4613      	mov	r3, r2
 8006234:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	88fa      	ldrh	r2, [r7, #6]
 8006246:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	88ba      	ldrh	r2, [r7, #4]
 800624c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800624e:	8b3b      	ldrh	r3, [r7, #24]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	7f3a      	ldrb	r2, [r7, #28]
 800625a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	73da      	strb	r2, [r3, #15]
}
 8006268:	bf00      	nop
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08c      	sub	sp, #48	@ 0x30
 8006278:	af02      	add	r7, sp, #8
 800627a:	4603      	mov	r3, r0
 800627c:	71fb      	strb	r3, [r7, #7]
 800627e:	460b      	mov	r3, r1
 8006280:	80bb      	strh	r3, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800628a:	887b      	ldrh	r3, [r7, #2]
 800628c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006290:	d07f      	beq.n	8006392 <pbuf_alloc+0x11e>
 8006292:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006296:	f300 80c8 	bgt.w	800642a <pbuf_alloc+0x1b6>
 800629a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800629e:	d010      	beq.n	80062c2 <pbuf_alloc+0x4e>
 80062a0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80062a4:	f300 80c1 	bgt.w	800642a <pbuf_alloc+0x1b6>
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d002      	beq.n	80062b2 <pbuf_alloc+0x3e>
 80062ac:	2b41      	cmp	r3, #65	@ 0x41
 80062ae:	f040 80bc 	bne.w	800642a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80062b2:	887a      	ldrh	r2, [r7, #2]
 80062b4:	88bb      	ldrh	r3, [r7, #4]
 80062b6:	4619      	mov	r1, r3
 80062b8:	2000      	movs	r0, #0
 80062ba:	f000 f8d1 	bl	8006460 <pbuf_alloc_reference>
 80062be:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80062c0:	e0bd      	b.n	800643e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80062ca:	88bb      	ldrh	r3, [r7, #4]
 80062cc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80062ce:	2008      	movs	r0, #8
 80062d0:	f7ff fbee 	bl	8005ab0 <memp_malloc>
 80062d4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80062dc:	f7ff ff94 	bl	8006208 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <pbuf_alloc+0x78>
            pbuf_free(p);
 80062e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062e8:	f000 faa8 	bl	800683c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	e0a7      	b.n	8006440 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80062f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062f2:	3303      	adds	r3, #3
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	f023 0303 	bic.w	r3, r3, #3
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8006300:	b29b      	uxth	r3, r3
 8006302:	8b7a      	ldrh	r2, [r7, #26]
 8006304:	4293      	cmp	r3, r2
 8006306:	bf28      	it	cs
 8006308:	4613      	movcs	r3, r2
 800630a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800630c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800630e:	3310      	adds	r3, #16
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4413      	add	r3, r2
 8006314:	3303      	adds	r3, #3
 8006316:	f023 0303 	bic.w	r3, r3, #3
 800631a:	4618      	mov	r0, r3
 800631c:	89f9      	ldrh	r1, [r7, #14]
 800631e:	8b7a      	ldrh	r2, [r7, #26]
 8006320:	2300      	movs	r3, #0
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	887b      	ldrh	r3, [r7, #2]
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	460b      	mov	r3, r1
 800632a:	4601      	mov	r1, r0
 800632c:	6938      	ldr	r0, [r7, #16]
 800632e:	f7ff ff77 	bl	8006220 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d006      	beq.n	800634c <pbuf_alloc+0xd8>
 800633e:	4b42      	ldr	r3, [pc, #264]	@ (8006448 <pbuf_alloc+0x1d4>)
 8006340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006344:	4941      	ldr	r1, [pc, #260]	@ (800644c <pbuf_alloc+0x1d8>)
 8006346:	4842      	ldr	r0, [pc, #264]	@ (8006450 <pbuf_alloc+0x1dc>)
 8006348:	f008 fce6 	bl	800ed18 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800634c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800634e:	3303      	adds	r3, #3
 8006350:	f023 0303 	bic.w	r3, r3, #3
 8006354:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8006358:	d106      	bne.n	8006368 <pbuf_alloc+0xf4>
 800635a:	4b3b      	ldr	r3, [pc, #236]	@ (8006448 <pbuf_alloc+0x1d4>)
 800635c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8006360:	493c      	ldr	r1, [pc, #240]	@ (8006454 <pbuf_alloc+0x1e0>)
 8006362:	483b      	ldr	r0, [pc, #236]	@ (8006450 <pbuf_alloc+0x1dc>)
 8006364:	f008 fcd8 	bl	800ed18 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	2b00      	cmp	r3, #0
 800636c:	d102      	bne.n	8006374 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	627b      	str	r3, [r7, #36]	@ 0x24
 8006372:	e002      	b.n	800637a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800637e:	8b7a      	ldrh	r2, [r7, #26]
 8006380:	89fb      	ldrh	r3, [r7, #14]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006386:	2300      	movs	r3, #0
 8006388:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800638a:	8b7b      	ldrh	r3, [r7, #26]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d19e      	bne.n	80062ce <pbuf_alloc+0x5a>
      break;
 8006390:	e055      	b.n	800643e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006392:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006394:	3303      	adds	r3, #3
 8006396:	b29b      	uxth	r3, r3
 8006398:	f023 0303 	bic.w	r3, r3, #3
 800639c:	b29a      	uxth	r2, r3
 800639e:	88bb      	ldrh	r3, [r7, #4]
 80063a0:	3303      	adds	r3, #3
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f023 0303 	bic.w	r3, r3, #3
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	4413      	add	r3, r2
 80063ac:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80063ae:	8b3b      	ldrh	r3, [r7, #24]
 80063b0:	3310      	adds	r3, #16
 80063b2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80063b4:	8b3a      	ldrh	r2, [r7, #24]
 80063b6:	88bb      	ldrh	r3, [r7, #4]
 80063b8:	3303      	adds	r3, #3
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	429a      	cmp	r2, r3
 80063c0:	d306      	bcc.n	80063d0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80063c2:	8afa      	ldrh	r2, [r7, #22]
 80063c4:	88bb      	ldrh	r3, [r7, #4]
 80063c6:	3303      	adds	r3, #3
 80063c8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d201      	bcs.n	80063d4 <pbuf_alloc+0x160>
        return NULL;
 80063d0:	2300      	movs	r3, #0
 80063d2:	e035      	b.n	8006440 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80063d4:	8afb      	ldrh	r3, [r7, #22]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff f9da 	bl	8005790 <mem_malloc>
 80063dc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <pbuf_alloc+0x174>
        return NULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	e02b      	b.n	8006440 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80063e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80063ea:	3310      	adds	r3, #16
 80063ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ee:	4413      	add	r3, r2
 80063f0:	3303      	adds	r3, #3
 80063f2:	f023 0303 	bic.w	r3, r3, #3
 80063f6:	4618      	mov	r0, r3
 80063f8:	88b9      	ldrh	r1, [r7, #4]
 80063fa:	88ba      	ldrh	r2, [r7, #4]
 80063fc:	2300      	movs	r3, #0
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	887b      	ldrh	r3, [r7, #2]
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	460b      	mov	r3, r1
 8006406:	4601      	mov	r1, r0
 8006408:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800640a:	f7ff ff09 	bl	8006220 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d010      	beq.n	800643c <pbuf_alloc+0x1c8>
 800641a:	4b0b      	ldr	r3, [pc, #44]	@ (8006448 <pbuf_alloc+0x1d4>)
 800641c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8006420:	490d      	ldr	r1, [pc, #52]	@ (8006458 <pbuf_alloc+0x1e4>)
 8006422:	480b      	ldr	r0, [pc, #44]	@ (8006450 <pbuf_alloc+0x1dc>)
 8006424:	f008 fc78 	bl	800ed18 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006428:	e008      	b.n	800643c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800642a:	4b07      	ldr	r3, [pc, #28]	@ (8006448 <pbuf_alloc+0x1d4>)
 800642c:	f240 1227 	movw	r2, #295	@ 0x127
 8006430:	490a      	ldr	r1, [pc, #40]	@ (800645c <pbuf_alloc+0x1e8>)
 8006432:	4807      	ldr	r0, [pc, #28]	@ (8006450 <pbuf_alloc+0x1dc>)
 8006434:	f008 fc70 	bl	800ed18 <iprintf>
      return NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	e001      	b.n	8006440 <pbuf_alloc+0x1cc>
      break;
 800643c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006440:	4618      	mov	r0, r3
 8006442:	3728      	adds	r7, #40	@ 0x28
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	08010110 	.word	0x08010110
 800644c:	08010140 	.word	0x08010140
 8006450:	08010170 	.word	0x08010170
 8006454:	08010198 	.word	0x08010198
 8006458:	080101cc 	.word	0x080101cc
 800645c:	080101f8 	.word	0x080101f8

08006460 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af02      	add	r7, sp, #8
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	807b      	strh	r3, [r7, #2]
 800646c:	4613      	mov	r3, r2
 800646e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006470:	883b      	ldrh	r3, [r7, #0]
 8006472:	2b41      	cmp	r3, #65	@ 0x41
 8006474:	d009      	beq.n	800648a <pbuf_alloc_reference+0x2a>
 8006476:	883b      	ldrh	r3, [r7, #0]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d006      	beq.n	800648a <pbuf_alloc_reference+0x2a>
 800647c:	4b0f      	ldr	r3, [pc, #60]	@ (80064bc <pbuf_alloc_reference+0x5c>)
 800647e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8006482:	490f      	ldr	r1, [pc, #60]	@ (80064c0 <pbuf_alloc_reference+0x60>)
 8006484:	480f      	ldr	r0, [pc, #60]	@ (80064c4 <pbuf_alloc_reference+0x64>)
 8006486:	f008 fc47 	bl	800ed18 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800648a:	2007      	movs	r0, #7
 800648c:	f7ff fb10 	bl	8005ab0 <memp_malloc>
 8006490:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006498:	2300      	movs	r3, #0
 800649a:	e00b      	b.n	80064b4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800649c:	8879      	ldrh	r1, [r7, #2]
 800649e:	887a      	ldrh	r2, [r7, #2]
 80064a0:	2300      	movs	r3, #0
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	883b      	ldrh	r3, [r7, #0]
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	460b      	mov	r3, r1
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f7ff feb7 	bl	8006220 <pbuf_init_alloced_pbuf>
  return p;
 80064b2:	68fb      	ldr	r3, [r7, #12]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	08010110 	.word	0x08010110
 80064c0:	08010214 	.word	0x08010214
 80064c4:	08010170 	.word	0x08010170

080064c8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	607b      	str	r3, [r7, #4]
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
 80064d4:	460b      	mov	r3, r1
 80064d6:	81bb      	strh	r3, [r7, #12]
 80064d8:	4613      	mov	r3, r2
 80064da:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80064e0:	8a7b      	ldrh	r3, [r7, #18]
 80064e2:	3303      	adds	r3, #3
 80064e4:	f023 0203 	bic.w	r2, r3, #3
 80064e8:	89bb      	ldrh	r3, [r7, #12]
 80064ea:	441a      	add	r2, r3
 80064ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d901      	bls.n	80064f6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e018      	b.n	8006528 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d007      	beq.n	800650c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80064fc:	8a7b      	ldrh	r3, [r7, #18]
 80064fe:	3303      	adds	r3, #3
 8006500:	f023 0303 	bic.w	r3, r3, #3
 8006504:	6a3a      	ldr	r2, [r7, #32]
 8006506:	4413      	add	r3, r2
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	e001      	b.n	8006510 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	89b9      	ldrh	r1, [r7, #12]
 8006514:	89ba      	ldrh	r2, [r7, #12]
 8006516:	2302      	movs	r3, #2
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	897b      	ldrh	r3, [r7, #10]
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	460b      	mov	r3, r1
 8006520:	6979      	ldr	r1, [r7, #20]
 8006522:	f7ff fe7d 	bl	8006220 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006526:	687b      	ldr	r3, [r7, #4]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <pbuf_realloc+0x20>
 8006542:	4b3a      	ldr	r3, [pc, #232]	@ (800662c <pbuf_realloc+0xfc>)
 8006544:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8006548:	4939      	ldr	r1, [pc, #228]	@ (8006630 <pbuf_realloc+0x100>)
 800654a:	483a      	ldr	r0, [pc, #232]	@ (8006634 <pbuf_realloc+0x104>)
 800654c:	f008 fbe4 	bl	800ed18 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	891b      	ldrh	r3, [r3, #8]
 8006554:	887a      	ldrh	r2, [r7, #2]
 8006556:	429a      	cmp	r2, r3
 8006558:	d263      	bcs.n	8006622 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	891a      	ldrh	r2, [r3, #8]
 800655e:	887b      	ldrh	r3, [r7, #2]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006564:	887b      	ldrh	r3, [r7, #2]
 8006566:	817b      	strh	r3, [r7, #10]
  q = p;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800656c:	e018      	b.n	80065a0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	895b      	ldrh	r3, [r3, #10]
 8006572:	897a      	ldrh	r2, [r7, #10]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	891a      	ldrh	r2, [r3, #8]
 800657c:	893b      	ldrh	r3, [r7, #8]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <pbuf_realloc+0x70>
 8006592:	4b26      	ldr	r3, [pc, #152]	@ (800662c <pbuf_realloc+0xfc>)
 8006594:	f240 12af 	movw	r2, #431	@ 0x1af
 8006598:	4927      	ldr	r1, [pc, #156]	@ (8006638 <pbuf_realloc+0x108>)
 800659a:	4826      	ldr	r0, [pc, #152]	@ (8006634 <pbuf_realloc+0x104>)
 800659c:	f008 fbbc 	bl	800ed18 <iprintf>
  while (rem_len > q->len) {
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	895b      	ldrh	r3, [r3, #10]
 80065a4:	897a      	ldrh	r2, [r7, #10]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d8e1      	bhi.n	800656e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	7b1b      	ldrb	r3, [r3, #12]
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d121      	bne.n	80065fa <pbuf_realloc+0xca>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	895b      	ldrh	r3, [r3, #10]
 80065ba:	897a      	ldrh	r2, [r7, #10]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d01c      	beq.n	80065fa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	7b5b      	ldrb	r3, [r3, #13]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d116      	bne.n	80065fa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	897b      	ldrh	r3, [r7, #10]
 80065d8:	4413      	add	r3, r2
 80065da:	b29b      	uxth	r3, r3
 80065dc:	4619      	mov	r1, r3
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f7fe ffda 	bl	8005598 <mem_trim>
 80065e4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d106      	bne.n	80065fa <pbuf_realloc+0xca>
 80065ec:	4b0f      	ldr	r3, [pc, #60]	@ (800662c <pbuf_realloc+0xfc>)
 80065ee:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80065f2:	4912      	ldr	r1, [pc, #72]	@ (800663c <pbuf_realloc+0x10c>)
 80065f4:	480f      	ldr	r0, [pc, #60]	@ (8006634 <pbuf_realloc+0x104>)
 80065f6:	f008 fb8f 	bl	800ed18 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	897a      	ldrh	r2, [r7, #10]
 80065fe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	895a      	ldrh	r2, [r3, #10]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d004      	beq.n	800661a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4618      	mov	r0, r3
 8006616:	f000 f911 	bl	800683c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	e000      	b.n	8006624 <pbuf_realloc+0xf4>
    return;
 8006622:	bf00      	nop

}
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	08010110 	.word	0x08010110
 8006630:	08010228 	.word	0x08010228
 8006634:	08010170 	.word	0x08010170
 8006638:	08010240 	.word	0x08010240
 800663c:	08010258 	.word	0x08010258

08006640 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	4613      	mov	r3, r2
 800664c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d106      	bne.n	8006662 <pbuf_add_header_impl+0x22>
 8006654:	4b2b      	ldr	r3, [pc, #172]	@ (8006704 <pbuf_add_header_impl+0xc4>)
 8006656:	f240 12df 	movw	r2, #479	@ 0x1df
 800665a:	492b      	ldr	r1, [pc, #172]	@ (8006708 <pbuf_add_header_impl+0xc8>)
 800665c:	482b      	ldr	r0, [pc, #172]	@ (800670c <pbuf_add_header_impl+0xcc>)
 800665e:	f008 fb5b 	bl	800ed18 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <pbuf_add_header_impl+0x30>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800666e:	d301      	bcc.n	8006674 <pbuf_add_header_impl+0x34>
    return 1;
 8006670:	2301      	movs	r3, #1
 8006672:	e043      	b.n	80066fc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <pbuf_add_header_impl+0x3e>
    return 0;
 800667a:	2300      	movs	r3, #0
 800667c:	e03e      	b.n	80066fc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	891a      	ldrh	r2, [r3, #8]
 8006686:	8a7b      	ldrh	r3, [r7, #18]
 8006688:	4413      	add	r3, r2
 800668a:	b29b      	uxth	r3, r3
 800668c:	8a7a      	ldrh	r2, [r7, #18]
 800668e:	429a      	cmp	r2, r3
 8006690:	d901      	bls.n	8006696 <pbuf_add_header_impl+0x56>
    return 1;
 8006692:	2301      	movs	r3, #1
 8006694:	e032      	b.n	80066fc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	7b1b      	ldrb	r3, [r3, #12]
 800669a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800669c:	8a3b      	ldrh	r3, [r7, #16]
 800669e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00c      	beq.n	80066c0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	425b      	negs	r3, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3310      	adds	r3, #16
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d20d      	bcs.n	80066d8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80066bc:	2301      	movs	r3, #1
 80066be:	e01d      	b.n	80066fc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d006      	beq.n	80066d4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	425b      	negs	r3, r3
 80066ce:	4413      	add	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e001      	b.n	80066d8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e011      	b.n	80066fc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	895a      	ldrh	r2, [r3, #10]
 80066e2:	8a7b      	ldrh	r3, [r7, #18]
 80066e4:	4413      	add	r3, r2
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	891a      	ldrh	r2, [r3, #8]
 80066f0:	8a7b      	ldrh	r3, [r7, #18]
 80066f2:	4413      	add	r3, r2
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	811a      	strh	r2, [r3, #8]


  return 0;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	08010110 	.word	0x08010110
 8006708:	08010274 	.word	0x08010274
 800670c:	08010170 	.word	0x08010170

08006710 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800671a:	2200      	movs	r2, #0
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7ff ff8e 	bl	8006640 <pbuf_add_header_impl>
 8006724:	4603      	mov	r3, r0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d106      	bne.n	800674e <pbuf_remove_header+0x1e>
 8006740:	4b20      	ldr	r3, [pc, #128]	@ (80067c4 <pbuf_remove_header+0x94>)
 8006742:	f240 224b 	movw	r2, #587	@ 0x24b
 8006746:	4920      	ldr	r1, [pc, #128]	@ (80067c8 <pbuf_remove_header+0x98>)
 8006748:	4820      	ldr	r0, [pc, #128]	@ (80067cc <pbuf_remove_header+0x9c>)
 800674a:	f008 fae5 	bl	800ed18 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <pbuf_remove_header+0x2c>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800675a:	d301      	bcc.n	8006760 <pbuf_remove_header+0x30>
    return 1;
 800675c:	2301      	movs	r3, #1
 800675e:	e02c      	b.n	80067ba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <pbuf_remove_header+0x3a>
    return 0;
 8006766:	2300      	movs	r3, #0
 8006768:	e027      	b.n	80067ba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	895b      	ldrh	r3, [r3, #10]
 8006772:	89fa      	ldrh	r2, [r7, #14]
 8006774:	429a      	cmp	r2, r3
 8006776:	d908      	bls.n	800678a <pbuf_remove_header+0x5a>
 8006778:	4b12      	ldr	r3, [pc, #72]	@ (80067c4 <pbuf_remove_header+0x94>)
 800677a:	f240 2255 	movw	r2, #597	@ 0x255
 800677e:	4914      	ldr	r1, [pc, #80]	@ (80067d0 <pbuf_remove_header+0xa0>)
 8006780:	4812      	ldr	r0, [pc, #72]	@ (80067cc <pbuf_remove_header+0x9c>)
 8006782:	f008 fac9 	bl	800ed18 <iprintf>
 8006786:	2301      	movs	r3, #1
 8006788:	e017      	b.n	80067ba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	441a      	add	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	895a      	ldrh	r2, [r3, #10]
 80067a0:	89fb      	ldrh	r3, [r7, #14]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	891a      	ldrh	r2, [r3, #8]
 80067ae:	89fb      	ldrh	r3, [r7, #14]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	08010110 	.word	0x08010110
 80067c8:	08010274 	.word	0x08010274
 80067cc:	08010170 	.word	0x08010170
 80067d0:	08010280 	.word	0x08010280

080067d4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	807b      	strh	r3, [r7, #2]
 80067e0:	4613      	mov	r3, r2
 80067e2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80067e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	da08      	bge.n	80067fe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80067ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067f0:	425b      	negs	r3, r3
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ff9b 	bl	8006730 <pbuf_remove_header>
 80067fa:	4603      	mov	r3, r0
 80067fc:	e007      	b.n	800680e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80067fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006802:	787a      	ldrb	r2, [r7, #1]
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff ff1a 	bl	8006640 <pbuf_add_header_impl>
 800680c:	4603      	mov	r3, r0
  }
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006822:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006826:	2201      	movs	r2, #1
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff ffd2 	bl	80067d4 <pbuf_header_impl>
 8006830:	4603      	mov	r3, r0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10b      	bne.n	8006862 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d106      	bne.n	800685e <pbuf_free+0x22>
 8006850:	4b38      	ldr	r3, [pc, #224]	@ (8006934 <pbuf_free+0xf8>)
 8006852:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8006856:	4938      	ldr	r1, [pc, #224]	@ (8006938 <pbuf_free+0xfc>)
 8006858:	4838      	ldr	r0, [pc, #224]	@ (800693c <pbuf_free+0x100>)
 800685a:	f008 fa5d 	bl	800ed18 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800685e:	2300      	movs	r3, #0
 8006860:	e063      	b.n	800692a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006862:	2300      	movs	r3, #0
 8006864:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006866:	e05c      	b.n	8006922 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	7b9b      	ldrb	r3, [r3, #14]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d106      	bne.n	800687e <pbuf_free+0x42>
 8006870:	4b30      	ldr	r3, [pc, #192]	@ (8006934 <pbuf_free+0xf8>)
 8006872:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8006876:	4932      	ldr	r1, [pc, #200]	@ (8006940 <pbuf_free+0x104>)
 8006878:	4830      	ldr	r0, [pc, #192]	@ (800693c <pbuf_free+0x100>)
 800687a:	f008 fa4d 	bl	800ed18 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	7b9b      	ldrb	r3, [r3, #14]
 8006882:	3b01      	subs	r3, #1
 8006884:	b2da      	uxtb	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	739a      	strb	r2, [r3, #14]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	7b9b      	ldrb	r3, [r3, #14]
 800688e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006890:	7dbb      	ldrb	r3, [r7, #22]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d143      	bne.n	800691e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	7b1b      	ldrb	r3, [r3, #12]
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	7b5b      	ldrb	r3, [r3, #13]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d011      	beq.n	80068d6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <pbuf_free+0x90>
 80068be:	4b1d      	ldr	r3, [pc, #116]	@ (8006934 <pbuf_free+0xf8>)
 80068c0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80068c4:	491f      	ldr	r1, [pc, #124]	@ (8006944 <pbuf_free+0x108>)
 80068c6:	481d      	ldr	r0, [pc, #116]	@ (800693c <pbuf_free+0x100>)
 80068c8:	f008 fa26 	bl	800ed18 <iprintf>
        pc->custom_free_function(p);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	4798      	blx	r3
 80068d4:	e01d      	b.n	8006912 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d104      	bne.n	80068e6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	2008      	movs	r0, #8
 80068e0:	f7ff f956 	bl	8005b90 <memp_free>
 80068e4:	e015      	b.n	8006912 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d104      	bne.n	80068f6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	2007      	movs	r0, #7
 80068f0:	f7ff f94e 	bl	8005b90 <memp_free>
 80068f4:	e00d      	b.n	8006912 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d103      	bne.n	8006904 <pbuf_free+0xc8>
          mem_free(p);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7fe fde1 	bl	80054c4 <mem_free>
 8006902:	e006      	b.n	8006912 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006904:	4b0b      	ldr	r3, [pc, #44]	@ (8006934 <pbuf_free+0xf8>)
 8006906:	f240 320f 	movw	r2, #783	@ 0x30f
 800690a:	490f      	ldr	r1, [pc, #60]	@ (8006948 <pbuf_free+0x10c>)
 800690c:	480b      	ldr	r0, [pc, #44]	@ (800693c <pbuf_free+0x100>)
 800690e:	f008 fa03 	bl	800ed18 <iprintf>
        }
      }
      count++;
 8006912:	7dfb      	ldrb	r3, [r7, #23]
 8006914:	3301      	adds	r3, #1
 8006916:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	607b      	str	r3, [r7, #4]
 800691c:	e001      	b.n	8006922 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d19f      	bne.n	8006868 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	08010110 	.word	0x08010110
 8006938:	08010274 	.word	0x08010274
 800693c:	08010170 	.word	0x08010170
 8006940:	080102a0 	.word	0x080102a0
 8006944:	080102b8 	.word	0x080102b8
 8006948:	080102dc 	.word	0x080102dc

0800694c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006958:	e005      	b.n	8006966 <pbuf_clen+0x1a>
    ++len;
 800695a:	89fb      	ldrh	r3, [r7, #14]
 800695c:	3301      	adds	r3, #1
 800695e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1f6      	bne.n	800695a <pbuf_clen+0xe>
  }
  return len;
 800696c:	89fb      	ldrh	r3, [r7, #14]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
	...

0800697c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d010      	beq.n	80069ac <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	7b9b      	ldrb	r3, [r3, #14]
 800698e:	3301      	adds	r3, #1
 8006990:	b2da      	uxtb	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	7b9b      	ldrb	r3, [r3, #14]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <pbuf_ref+0x30>
 800699e:	4b05      	ldr	r3, [pc, #20]	@ (80069b4 <pbuf_ref+0x38>)
 80069a0:	f240 3242 	movw	r2, #834	@ 0x342
 80069a4:	4904      	ldr	r1, [pc, #16]	@ (80069b8 <pbuf_ref+0x3c>)
 80069a6:	4805      	ldr	r0, [pc, #20]	@ (80069bc <pbuf_ref+0x40>)
 80069a8:	f008 f9b6 	bl	800ed18 <iprintf>
  }
}
 80069ac:	bf00      	nop
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	08010110 	.word	0x08010110
 80069b8:	080102f0 	.word	0x080102f0
 80069bc:	08010170 	.word	0x08010170

080069c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <pbuf_cat+0x16>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d107      	bne.n	80069e6 <pbuf_cat+0x26>
 80069d6:	4b20      	ldr	r3, [pc, #128]	@ (8006a58 <pbuf_cat+0x98>)
 80069d8:	f240 3259 	movw	r2, #857	@ 0x359
 80069dc:	491f      	ldr	r1, [pc, #124]	@ (8006a5c <pbuf_cat+0x9c>)
 80069de:	4820      	ldr	r0, [pc, #128]	@ (8006a60 <pbuf_cat+0xa0>)
 80069e0:	f008 f99a 	bl	800ed18 <iprintf>
 80069e4:	e034      	b.n	8006a50 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	e00a      	b.n	8006a02 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	891a      	ldrh	r2, [r3, #8]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	891b      	ldrh	r3, [r3, #8]
 80069f4:	4413      	add	r3, r2
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1f0      	bne.n	80069ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	891a      	ldrh	r2, [r3, #8]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	895b      	ldrh	r3, [r3, #10]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d006      	beq.n	8006a24 <pbuf_cat+0x64>
 8006a16:	4b10      	ldr	r3, [pc, #64]	@ (8006a58 <pbuf_cat+0x98>)
 8006a18:	f240 3262 	movw	r2, #866	@ 0x362
 8006a1c:	4911      	ldr	r1, [pc, #68]	@ (8006a64 <pbuf_cat+0xa4>)
 8006a1e:	4810      	ldr	r0, [pc, #64]	@ (8006a60 <pbuf_cat+0xa0>)
 8006a20:	f008 f97a 	bl	800ed18 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d006      	beq.n	8006a3a <pbuf_cat+0x7a>
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a58 <pbuf_cat+0x98>)
 8006a2e:	f240 3263 	movw	r2, #867	@ 0x363
 8006a32:	490d      	ldr	r1, [pc, #52]	@ (8006a68 <pbuf_cat+0xa8>)
 8006a34:	480a      	ldr	r0, [pc, #40]	@ (8006a60 <pbuf_cat+0xa0>)
 8006a36:	f008 f96f 	bl	800ed18 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	891a      	ldrh	r2, [r3, #8]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	891b      	ldrh	r3, [r3, #8]
 8006a42:	4413      	add	r3, r2
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	08010110 	.word	0x08010110
 8006a5c:	08010304 	.word	0x08010304
 8006a60:	08010170 	.word	0x08010170
 8006a64:	0801033c 	.word	0x0801033c
 8006a68:	0801036c 	.word	0x0801036c

08006a6c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d008      	beq.n	8006a96 <pbuf_copy+0x2a>
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <pbuf_copy+0x2a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	891a      	ldrh	r2, [r3, #8]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	891b      	ldrh	r3, [r3, #8]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d209      	bcs.n	8006aaa <pbuf_copy+0x3e>
 8006a96:	4b57      	ldr	r3, [pc, #348]	@ (8006bf4 <pbuf_copy+0x188>)
 8006a98:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8006a9c:	4956      	ldr	r1, [pc, #344]	@ (8006bf8 <pbuf_copy+0x18c>)
 8006a9e:	4857      	ldr	r0, [pc, #348]	@ (8006bfc <pbuf_copy+0x190>)
 8006aa0:	f008 f93a 	bl	800ed18 <iprintf>
 8006aa4:	f06f 030f 	mvn.w	r3, #15
 8006aa8:	e09f      	b.n	8006bea <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	895b      	ldrh	r3, [r3, #10]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	1ad2      	subs	r2, r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	895b      	ldrh	r3, [r3, #10]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1acb      	subs	r3, r1, r3
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d306      	bcc.n	8006ad0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	895b      	ldrh	r3, [r3, #10]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	e005      	b.n	8006adc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	895b      	ldrh	r3, [r3, #10]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	18d0      	adds	r0, r2, r3
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	4413      	add	r3, r2
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4619      	mov	r1, r3
 8006af0:	f008 f9ed 	bl	800eece <memcpy>
    offset_to += len;
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4413      	add	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4413      	add	r3, r2
 8006b02:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	895b      	ldrh	r3, [r3, #10]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d906      	bls.n	8006b1e <pbuf_copy+0xb2>
 8006b10:	4b38      	ldr	r3, [pc, #224]	@ (8006bf4 <pbuf_copy+0x188>)
 8006b12:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8006b16:	493a      	ldr	r1, [pc, #232]	@ (8006c00 <pbuf_copy+0x194>)
 8006b18:	4838      	ldr	r0, [pc, #224]	@ (8006bfc <pbuf_copy+0x190>)
 8006b1a:	f008 f8fd 	bl	800ed18 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	895b      	ldrh	r3, [r3, #10]
 8006b22:	461a      	mov	r2, r3
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d906      	bls.n	8006b38 <pbuf_copy+0xcc>
 8006b2a:	4b32      	ldr	r3, [pc, #200]	@ (8006bf4 <pbuf_copy+0x188>)
 8006b2c:	f240 32da 	movw	r2, #986	@ 0x3da
 8006b30:	4934      	ldr	r1, [pc, #208]	@ (8006c04 <pbuf_copy+0x198>)
 8006b32:	4832      	ldr	r0, [pc, #200]	@ (8006bfc <pbuf_copy+0x190>)
 8006b34:	f008 f8f0 	bl	800ed18 <iprintf>
    if (offset_from >= p_from->len) {
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	895b      	ldrh	r3, [r3, #10]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d304      	bcc.n	8006b4e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	895b      	ldrh	r3, [r3, #10]
 8006b52:	461a      	mov	r2, r3
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d114      	bne.n	8006b84 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10c      	bne.n	8006b84 <pbuf_copy+0x118>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d009      	beq.n	8006b84 <pbuf_copy+0x118>
 8006b70:	4b20      	ldr	r3, [pc, #128]	@ (8006bf4 <pbuf_copy+0x188>)
 8006b72:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8006b76:	4924      	ldr	r1, [pc, #144]	@ (8006c08 <pbuf_copy+0x19c>)
 8006b78:	4820      	ldr	r0, [pc, #128]	@ (8006bfc <pbuf_copy+0x190>)
 8006b7a:	f008 f8cd 	bl	800ed18 <iprintf>
 8006b7e:	f06f 030f 	mvn.w	r3, #15
 8006b82:	e032      	b.n	8006bea <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d013      	beq.n	8006bb2 <pbuf_copy+0x146>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	895a      	ldrh	r2, [r3, #10]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	891b      	ldrh	r3, [r3, #8]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d10d      	bne.n	8006bb2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d009      	beq.n	8006bb2 <pbuf_copy+0x146>
 8006b9e:	4b15      	ldr	r3, [pc, #84]	@ (8006bf4 <pbuf_copy+0x188>)
 8006ba0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8006ba4:	4919      	ldr	r1, [pc, #100]	@ (8006c0c <pbuf_copy+0x1a0>)
 8006ba6:	4815      	ldr	r0, [pc, #84]	@ (8006bfc <pbuf_copy+0x190>)
 8006ba8:	f008 f8b6 	bl	800ed18 <iprintf>
 8006bac:	f06f 0305 	mvn.w	r3, #5
 8006bb0:	e01b      	b.n	8006bea <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d013      	beq.n	8006be0 <pbuf_copy+0x174>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	895a      	ldrh	r2, [r3, #10]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	891b      	ldrh	r3, [r3, #8]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d10d      	bne.n	8006be0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d009      	beq.n	8006be0 <pbuf_copy+0x174>
 8006bcc:	4b09      	ldr	r3, [pc, #36]	@ (8006bf4 <pbuf_copy+0x188>)
 8006bce:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8006bd2:	490e      	ldr	r1, [pc, #56]	@ (8006c0c <pbuf_copy+0x1a0>)
 8006bd4:	4809      	ldr	r0, [pc, #36]	@ (8006bfc <pbuf_copy+0x190>)
 8006bd6:	f008 f89f 	bl	800ed18 <iprintf>
 8006bda:	f06f 0305 	mvn.w	r3, #5
 8006bde:	e004      	b.n	8006bea <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f47f af61 	bne.w	8006aaa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	08010110 	.word	0x08010110
 8006bf8:	080103b8 	.word	0x080103b8
 8006bfc:	08010170 	.word	0x08010170
 8006c00:	080103e8 	.word	0x080103e8
 8006c04:	08010400 	.word	0x08010400
 8006c08:	0801041c 	.word	0x0801041c
 8006c0c:	0801042c 	.word	0x0801042c

08006c10 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	460b      	mov	r3, r1
 8006c20:	80fb      	strh	r3, [r7, #6]
 8006c22:	4613      	mov	r3, r2
 8006c24:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d108      	bne.n	8006c46 <pbuf_copy_partial+0x36>
 8006c34:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce4 <pbuf_copy_partial+0xd4>)
 8006c36:	f240 420a 	movw	r2, #1034	@ 0x40a
 8006c3a:	492b      	ldr	r1, [pc, #172]	@ (8006ce8 <pbuf_copy_partial+0xd8>)
 8006c3c:	482b      	ldr	r0, [pc, #172]	@ (8006cec <pbuf_copy_partial+0xdc>)
 8006c3e:	f008 f86b 	bl	800ed18 <iprintf>
 8006c42:	2300      	movs	r3, #0
 8006c44:	e04a      	b.n	8006cdc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d108      	bne.n	8006c5e <pbuf_copy_partial+0x4e>
 8006c4c:	4b25      	ldr	r3, [pc, #148]	@ (8006ce4 <pbuf_copy_partial+0xd4>)
 8006c4e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8006c52:	4927      	ldr	r1, [pc, #156]	@ (8006cf0 <pbuf_copy_partial+0xe0>)
 8006c54:	4825      	ldr	r0, [pc, #148]	@ (8006cec <pbuf_copy_partial+0xdc>)
 8006c56:	f008 f85f 	bl	800ed18 <iprintf>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e03e      	b.n	8006cdc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	e034      	b.n	8006cce <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006c64:	88bb      	ldrh	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <pbuf_copy_partial+0x70>
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	895b      	ldrh	r3, [r3, #10]
 8006c6e:	88ba      	ldrh	r2, [r7, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d305      	bcc.n	8006c80 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	895b      	ldrh	r3, [r3, #10]
 8006c78:	88ba      	ldrh	r2, [r7, #4]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	80bb      	strh	r3, [r7, #4]
 8006c7e:	e023      	b.n	8006cc8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	895a      	ldrh	r2, [r3, #10]
 8006c84:	88bb      	ldrh	r3, [r7, #4]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006c8a:	8b3a      	ldrh	r2, [r7, #24]
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d901      	bls.n	8006c96 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006c96:	8b7b      	ldrh	r3, [r7, #26]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	18d0      	adds	r0, r2, r3
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	88bb      	ldrh	r3, [r7, #4]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	8b3a      	ldrh	r2, [r7, #24]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	f008 f911 	bl	800eece <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006cac:	8afa      	ldrh	r2, [r7, #22]
 8006cae:	8b3b      	ldrh	r3, [r7, #24]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006cb4:	8b7a      	ldrh	r2, [r7, #26]
 8006cb6:	8b3b      	ldrh	r3, [r7, #24]
 8006cb8:	4413      	add	r3, r2
 8006cba:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006cbc:	88fa      	ldrh	r2, [r7, #6]
 8006cbe:	8b3b      	ldrh	r3, [r7, #24]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	61fb      	str	r3, [r7, #28]
 8006cce:	88fb      	ldrh	r3, [r7, #6]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <pbuf_copy_partial+0xca>
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1c4      	bne.n	8006c64 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006cda:	8afb      	ldrh	r3, [r7, #22]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3720      	adds	r7, #32
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	08010110 	.word	0x08010110
 8006ce8:	08010458 	.word	0x08010458
 8006cec:	08010170 	.word	0x08010170
 8006cf0:	08010478 	.word	0x08010478

08006cf4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	603a      	str	r2, [r7, #0]
 8006cfe:	71fb      	strb	r3, [r7, #7]
 8006d00:	460b      	mov	r3, r1
 8006d02:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	8919      	ldrh	r1, [r3, #8]
 8006d08:	88ba      	ldrh	r2, [r7, #4]
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff fab1 	bl	8006274 <pbuf_alloc>
 8006d12:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <pbuf_clone+0x2a>
    return NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e011      	b.n	8006d42 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f7ff fea3 	bl	8006a6c <pbuf_copy>
 8006d26:	4603      	mov	r3, r0
 8006d28:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006d2a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d006      	beq.n	8006d40 <pbuf_clone+0x4c>
 8006d32:	4b06      	ldr	r3, [pc, #24]	@ (8006d4c <pbuf_clone+0x58>)
 8006d34:	f240 5224 	movw	r2, #1316	@ 0x524
 8006d38:	4905      	ldr	r1, [pc, #20]	@ (8006d50 <pbuf_clone+0x5c>)
 8006d3a:	4806      	ldr	r0, [pc, #24]	@ (8006d54 <pbuf_clone+0x60>)
 8006d3c:	f007 ffec 	bl	800ed18 <iprintf>
  return q;
 8006d40:	68fb      	ldr	r3, [r7, #12]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	08010110 	.word	0x08010110
 8006d50:	08010584 	.word	0x08010584
 8006d54:	08010170 	.word	0x08010170

08006d58 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006d5c:	f007 fedc 	bl	800eb18 <rand>
 8006d60:	4603      	mov	r3, r0
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	4b01      	ldr	r3, [pc, #4]	@ (8006d78 <tcp_init+0x20>)
 8006d72:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006d74:	bf00      	nop
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20000020 	.word	0x20000020

08006d7c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	7d1b      	ldrb	r3, [r3, #20]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d105      	bne.n	8006d98 <tcp_free+0x1c>
 8006d8c:	4b06      	ldr	r3, [pc, #24]	@ (8006da8 <tcp_free+0x2c>)
 8006d8e:	22d4      	movs	r2, #212	@ 0xd4
 8006d90:	4906      	ldr	r1, [pc, #24]	@ (8006dac <tcp_free+0x30>)
 8006d92:	4807      	ldr	r0, [pc, #28]	@ (8006db0 <tcp_free+0x34>)
 8006d94:	f007 ffc0 	bl	800ed18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	f7fe fef8 	bl	8005b90 <memp_free>
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	08010610 	.word	0x08010610
 8006dac:	08010640 	.word	0x08010640
 8006db0:	08010654 	.word	0x08010654

08006db4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	7d1b      	ldrb	r3, [r3, #20]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d105      	bne.n	8006dd0 <tcp_free_listen+0x1c>
 8006dc4:	4b06      	ldr	r3, [pc, #24]	@ (8006de0 <tcp_free_listen+0x2c>)
 8006dc6:	22df      	movs	r2, #223	@ 0xdf
 8006dc8:	4906      	ldr	r1, [pc, #24]	@ (8006de4 <tcp_free_listen+0x30>)
 8006dca:	4807      	ldr	r0, [pc, #28]	@ (8006de8 <tcp_free_listen+0x34>)
 8006dcc:	f007 ffa4 	bl	800ed18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	2002      	movs	r0, #2
 8006dd4:	f7fe fedc 	bl	8005b90 <memp_free>
}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	08010610 	.word	0x08010610
 8006de4:	0801067c 	.word	0x0801067c
 8006de8:	08010654 	.word	0x08010654

08006dec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006df0:	f000 fea4 	bl	8007b3c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006df4:	4b07      	ldr	r3, [pc, #28]	@ (8006e14 <tcp_tmr+0x28>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <tcp_tmr+0x28>)
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	4b04      	ldr	r3, [pc, #16]	@ (8006e14 <tcp_tmr+0x28>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006e0c:	f000 fb54 	bl	80074b8 <tcp_slowtmr>
  }
}
 8006e10:	bf00      	nop
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20007c85 	.word	0x20007c85

08006e18 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d105      	bne.n	8006e34 <tcp_remove_listener+0x1c>
 8006e28:	4b0d      	ldr	r3, [pc, #52]	@ (8006e60 <tcp_remove_listener+0x48>)
 8006e2a:	22ff      	movs	r2, #255	@ 0xff
 8006e2c:	490d      	ldr	r1, [pc, #52]	@ (8006e64 <tcp_remove_listener+0x4c>)
 8006e2e:	480e      	ldr	r0, [pc, #56]	@ (8006e68 <tcp_remove_listener+0x50>)
 8006e30:	f007 ff72 	bl	800ed18 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	e00a      	b.n	8006e50 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d102      	bne.n	8006e4a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1f1      	bne.n	8006e3a <tcp_remove_listener+0x22>
    }
  }
}
 8006e56:	bf00      	nop
 8006e58:	bf00      	nop
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	08010610 	.word	0x08010610
 8006e64:	08010698 	.word	0x08010698
 8006e68:	08010654 	.word	0x08010654

08006e6c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <tcp_listen_closed+0x1c>
 8006e7a:	4b14      	ldr	r3, [pc, #80]	@ (8006ecc <tcp_listen_closed+0x60>)
 8006e7c:	f240 1211 	movw	r2, #273	@ 0x111
 8006e80:	4913      	ldr	r1, [pc, #76]	@ (8006ed0 <tcp_listen_closed+0x64>)
 8006e82:	4814      	ldr	r0, [pc, #80]	@ (8006ed4 <tcp_listen_closed+0x68>)
 8006e84:	f007 ff48 	bl	800ed18 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	7d1b      	ldrb	r3, [r3, #20]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d006      	beq.n	8006e9e <tcp_listen_closed+0x32>
 8006e90:	4b0e      	ldr	r3, [pc, #56]	@ (8006ecc <tcp_listen_closed+0x60>)
 8006e92:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8006e96:	4910      	ldr	r1, [pc, #64]	@ (8006ed8 <tcp_listen_closed+0x6c>)
 8006e98:	480e      	ldr	r0, [pc, #56]	@ (8006ed4 <tcp_listen_closed+0x68>)
 8006e9a:	f007 ff3d 	bl	800ed18 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	e00b      	b.n	8006ebc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8006edc <tcp_listen_closed+0x70>)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff ffb1 	bl	8006e18 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d9f0      	bls.n	8006ea4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	08010610 	.word	0x08010610
 8006ed0:	080106c0 	.word	0x080106c0
 8006ed4:	08010654 	.word	0x08010654
 8006ed8:	080106cc 	.word	0x080106cc
 8006edc:	080125f0 	.word	0x080125f0

08006ee0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006ee0:	b5b0      	push	{r4, r5, r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af04      	add	r7, sp, #16
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <tcp_close_shutdown+0x20>
 8006ef2:	4b63      	ldr	r3, [pc, #396]	@ (8007080 <tcp_close_shutdown+0x1a0>)
 8006ef4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8006ef8:	4962      	ldr	r1, [pc, #392]	@ (8007084 <tcp_close_shutdown+0x1a4>)
 8006efa:	4863      	ldr	r0, [pc, #396]	@ (8007088 <tcp_close_shutdown+0x1a8>)
 8006efc:	f007 ff0c 	bl	800ed18 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d066      	beq.n	8006fd4 <tcp_close_shutdown+0xf4>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	7d1b      	ldrb	r3, [r3, #20]
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d003      	beq.n	8006f16 <tcp_close_shutdown+0x36>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	7d1b      	ldrb	r3, [r3, #20]
 8006f12:	2b07      	cmp	r3, #7
 8006f14:	d15e      	bne.n	8006fd4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d104      	bne.n	8006f28 <tcp_close_shutdown+0x48>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f22:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006f26:	d055      	beq.n	8006fd4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	8b5b      	ldrh	r3, [r3, #26]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d106      	bne.n	8006f42 <tcp_close_shutdown+0x62>
 8006f34:	4b52      	ldr	r3, [pc, #328]	@ (8007080 <tcp_close_shutdown+0x1a0>)
 8006f36:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8006f3a:	4954      	ldr	r1, [pc, #336]	@ (800708c <tcp_close_shutdown+0x1ac>)
 8006f3c:	4852      	ldr	r0, [pc, #328]	@ (8007088 <tcp_close_shutdown+0x1a8>)
 8006f3e:	f007 feeb 	bl	800ed18 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006f4a:	687d      	ldr	r5, [r7, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3304      	adds	r3, #4
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	8ad2      	ldrh	r2, [r2, #22]
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	8b09      	ldrh	r1, [r1, #24]
 8006f58:	9102      	str	r1, [sp, #8]
 8006f5a:	9201      	str	r2, [sp, #4]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	462b      	mov	r3, r5
 8006f60:	4622      	mov	r2, r4
 8006f62:	4601      	mov	r1, r0
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f004 fe8d 	bl	800bc84 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 f8c8 	bl	8008100 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006f70:	4b47      	ldr	r3, [pc, #284]	@ (8007090 <tcp_close_shutdown+0x1b0>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d105      	bne.n	8006f86 <tcp_close_shutdown+0xa6>
 8006f7a:	4b45      	ldr	r3, [pc, #276]	@ (8007090 <tcp_close_shutdown+0x1b0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	4a43      	ldr	r2, [pc, #268]	@ (8007090 <tcp_close_shutdown+0x1b0>)
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	e013      	b.n	8006fae <tcp_close_shutdown+0xce>
 8006f86:	4b42      	ldr	r3, [pc, #264]	@ (8007090 <tcp_close_shutdown+0x1b0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	e00c      	b.n	8006fa8 <tcp_close_shutdown+0xc8>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d104      	bne.n	8006fa2 <tcp_close_shutdown+0xc2>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	60da      	str	r2, [r3, #12]
 8006fa0:	e005      	b.n	8006fae <tcp_close_shutdown+0xce>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1ef      	bne.n	8006f8e <tcp_close_shutdown+0xae>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	60da      	str	r2, [r3, #12]
 8006fb4:	4b37      	ldr	r3, [pc, #220]	@ (8007094 <tcp_close_shutdown+0x1b4>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006fba:	4b37      	ldr	r3, [pc, #220]	@ (8007098 <tcp_close_shutdown+0x1b8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d102      	bne.n	8006fca <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006fc4:	f003 fd5c 	bl	800aa80 <tcp_trigger_input_pcb_close>
 8006fc8:	e002      	b.n	8006fd0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff fed6 	bl	8006d7c <tcp_free>
      }
      return ERR_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e050      	b.n	8007076 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	7d1b      	ldrb	r3, [r3, #20]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d03b      	beq.n	8007054 <tcp_close_shutdown+0x174>
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	dc44      	bgt.n	800706a <tcp_close_shutdown+0x18a>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <tcp_close_shutdown+0x10a>
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d02a      	beq.n	800703e <tcp_close_shutdown+0x15e>
 8006fe8:	e03f      	b.n	800706a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	8adb      	ldrh	r3, [r3, #22]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d021      	beq.n	8007036 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800709c <tcp_close_shutdown+0x1bc>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d105      	bne.n	8007008 <tcp_close_shutdown+0x128>
 8006ffc:	4b27      	ldr	r3, [pc, #156]	@ (800709c <tcp_close_shutdown+0x1bc>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	4a26      	ldr	r2, [pc, #152]	@ (800709c <tcp_close_shutdown+0x1bc>)
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	e013      	b.n	8007030 <tcp_close_shutdown+0x150>
 8007008:	4b24      	ldr	r3, [pc, #144]	@ (800709c <tcp_close_shutdown+0x1bc>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60bb      	str	r3, [r7, #8]
 800700e:	e00c      	b.n	800702a <tcp_close_shutdown+0x14a>
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	429a      	cmp	r2, r3
 8007018:	d104      	bne.n	8007024 <tcp_close_shutdown+0x144>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	60da      	str	r2, [r3, #12]
 8007022:	e005      	b.n	8007030 <tcp_close_shutdown+0x150>
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	60bb      	str	r3, [r7, #8]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1ef      	bne.n	8007010 <tcp_close_shutdown+0x130>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff fea0 	bl	8006d7c <tcp_free>
      break;
 800703c:	e01a      	b.n	8007074 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff ff14 	bl	8006e6c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	4816      	ldr	r0, [pc, #88]	@ (80070a0 <tcp_close_shutdown+0x1c0>)
 8007048:	f001 f8aa 	bl	80081a0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff feb1 	bl	8006db4 <tcp_free_listen>
      break;
 8007052:	e00f      	b.n	8007074 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	480e      	ldr	r0, [pc, #56]	@ (8007090 <tcp_close_shutdown+0x1b0>)
 8007058:	f001 f8a2 	bl	80081a0 <tcp_pcb_remove>
 800705c:	4b0d      	ldr	r3, [pc, #52]	@ (8007094 <tcp_close_shutdown+0x1b4>)
 800705e:	2201      	movs	r2, #1
 8007060:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fe8a 	bl	8006d7c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007068:	e004      	b.n	8007074 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f81a 	bl	80070a4 <tcp_close_shutdown_fin>
 8007070:	4603      	mov	r3, r0
 8007072:	e000      	b.n	8007076 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bdb0      	pop	{r4, r5, r7, pc}
 800707e:	bf00      	nop
 8007080:	08010610 	.word	0x08010610
 8007084:	080106e4 	.word	0x080106e4
 8007088:	08010654 	.word	0x08010654
 800708c:	08010704 	.word	0x08010704
 8007090:	20007c7c 	.word	0x20007c7c
 8007094:	20007c84 	.word	0x20007c84
 8007098:	20007cbc 	.word	0x20007cbc
 800709c:	20007c74 	.word	0x20007c74
 80070a0:	20007c78 	.word	0x20007c78

080070a4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d106      	bne.n	80070c0 <tcp_close_shutdown_fin+0x1c>
 80070b2:	4b2e      	ldr	r3, [pc, #184]	@ (800716c <tcp_close_shutdown_fin+0xc8>)
 80070b4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80070b8:	492d      	ldr	r1, [pc, #180]	@ (8007170 <tcp_close_shutdown_fin+0xcc>)
 80070ba:	482e      	ldr	r0, [pc, #184]	@ (8007174 <tcp_close_shutdown_fin+0xd0>)
 80070bc:	f007 fe2c 	bl	800ed18 <iprintf>

  switch (pcb->state) {
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	7d1b      	ldrb	r3, [r3, #20]
 80070c4:	2b07      	cmp	r3, #7
 80070c6:	d020      	beq.n	800710a <tcp_close_shutdown_fin+0x66>
 80070c8:	2b07      	cmp	r3, #7
 80070ca:	dc2b      	bgt.n	8007124 <tcp_close_shutdown_fin+0x80>
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d002      	beq.n	80070d6 <tcp_close_shutdown_fin+0x32>
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d00d      	beq.n	80070f0 <tcp_close_shutdown_fin+0x4c>
 80070d4:	e026      	b.n	8007124 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f003 fee2 	bl	800aea0 <tcp_send_fin>
 80070dc:	4603      	mov	r3, r0
 80070de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d11f      	bne.n	8007128 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2205      	movs	r2, #5
 80070ec:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070ee:	e01b      	b.n	8007128 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f003 fed5 	bl	800aea0 <tcp_send_fin>
 80070f6:	4603      	mov	r3, r0
 80070f8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d114      	bne.n	800712c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2205      	movs	r2, #5
 8007106:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007108:	e010      	b.n	800712c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f003 fec8 	bl	800aea0 <tcp_send_fin>
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d109      	bne.n	8007130 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2209      	movs	r2, #9
 8007120:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007122:	e005      	b.n	8007130 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	e01c      	b.n	8007162 <tcp_close_shutdown_fin+0xbe>
      break;
 8007128:	bf00      	nop
 800712a:	e002      	b.n	8007132 <tcp_close_shutdown_fin+0x8e>
      break;
 800712c:	bf00      	nop
 800712e:	e000      	b.n	8007132 <tcp_close_shutdown_fin+0x8e>
      break;
 8007130:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d103      	bne.n	8007142 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f003 ffee 	bl	800b11c <tcp_output>
 8007140:	e00d      	b.n	800715e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800714a:	d108      	bne.n	800715e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8b5b      	ldrh	r3, [r3, #26]
 8007150:	f043 0308 	orr.w	r3, r3, #8
 8007154:	b29a      	uxth	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	e001      	b.n	8007162 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800715e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	08010610 	.word	0x08010610
 8007170:	080106c0 	.word	0x080106c0
 8007174:	08010654 	.word	0x08010654

08007178 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <tcp_close+0x22>
 8007186:	4b0f      	ldr	r3, [pc, #60]	@ (80071c4 <tcp_close+0x4c>)
 8007188:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800718c:	490e      	ldr	r1, [pc, #56]	@ (80071c8 <tcp_close+0x50>)
 800718e:	480f      	ldr	r0, [pc, #60]	@ (80071cc <tcp_close+0x54>)
 8007190:	f007 fdc2 	bl	800ed18 <iprintf>
 8007194:	f06f 030f 	mvn.w	r3, #15
 8007198:	e00f      	b.n	80071ba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	7d1b      	ldrb	r3, [r3, #20]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d006      	beq.n	80071b0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	8b5b      	ldrh	r3, [r3, #26]
 80071a6:	f043 0310 	orr.w	r3, r3, #16
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80071b0:	2101      	movs	r1, #1
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff fe94 	bl	8006ee0 <tcp_close_shutdown>
 80071b8:	4603      	mov	r3, r0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	08010610 	.word	0x08010610
 80071c8:	08010720 	.word	0x08010720
 80071cc:	08010654 	.word	0x08010654

080071d0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08e      	sub	sp, #56	@ 0x38
 80071d4:	af04      	add	r7, sp, #16
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d107      	bne.n	80071f0 <tcp_abandon+0x20>
 80071e0:	4b52      	ldr	r3, [pc, #328]	@ (800732c <tcp_abandon+0x15c>)
 80071e2:	f240 223d 	movw	r2, #573	@ 0x23d
 80071e6:	4952      	ldr	r1, [pc, #328]	@ (8007330 <tcp_abandon+0x160>)
 80071e8:	4852      	ldr	r0, [pc, #328]	@ (8007334 <tcp_abandon+0x164>)
 80071ea:	f007 fd95 	bl	800ed18 <iprintf>
 80071ee:	e099      	b.n	8007324 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	7d1b      	ldrb	r3, [r3, #20]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d106      	bne.n	8007206 <tcp_abandon+0x36>
 80071f8:	4b4c      	ldr	r3, [pc, #304]	@ (800732c <tcp_abandon+0x15c>)
 80071fa:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80071fe:	494e      	ldr	r1, [pc, #312]	@ (8007338 <tcp_abandon+0x168>)
 8007200:	484c      	ldr	r0, [pc, #304]	@ (8007334 <tcp_abandon+0x164>)
 8007202:	f007 fd89 	bl	800ed18 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	7d1b      	ldrb	r3, [r3, #20]
 800720a:	2b0a      	cmp	r3, #10
 800720c:	d107      	bne.n	800721e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	484a      	ldr	r0, [pc, #296]	@ (800733c <tcp_abandon+0x16c>)
 8007212:	f000 ffc5 	bl	80081a0 <tcp_pcb_remove>
    tcp_free(pcb);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff fdb0 	bl	8006d7c <tcp_free>
 800721c:	e082      	b.n	8007324 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800721e:	2300      	movs	r3, #0
 8007220:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800722a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007230:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007238:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	7d1b      	ldrb	r3, [r3, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d126      	bne.n	8007296 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8adb      	ldrh	r3, [r3, #22]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d02e      	beq.n	80072ae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007250:	4b3b      	ldr	r3, [pc, #236]	@ (8007340 <tcp_abandon+0x170>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	429a      	cmp	r2, r3
 8007258:	d105      	bne.n	8007266 <tcp_abandon+0x96>
 800725a:	4b39      	ldr	r3, [pc, #228]	@ (8007340 <tcp_abandon+0x170>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	4a37      	ldr	r2, [pc, #220]	@ (8007340 <tcp_abandon+0x170>)
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	e013      	b.n	800728e <tcp_abandon+0xbe>
 8007266:	4b36      	ldr	r3, [pc, #216]	@ (8007340 <tcp_abandon+0x170>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	61fb      	str	r3, [r7, #28]
 800726c:	e00c      	b.n	8007288 <tcp_abandon+0xb8>
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	429a      	cmp	r2, r3
 8007276:	d104      	bne.n	8007282 <tcp_abandon+0xb2>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	60da      	str	r2, [r3, #12]
 8007280:	e005      	b.n	800728e <tcp_abandon+0xbe>
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	61fb      	str	r3, [r7, #28]
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1ef      	bne.n	800726e <tcp_abandon+0x9e>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	60da      	str	r2, [r3, #12]
 8007294:	e00b      	b.n	80072ae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	8adb      	ldrh	r3, [r3, #22]
 800729e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80072a0:	6879      	ldr	r1, [r7, #4]
 80072a2:	4828      	ldr	r0, [pc, #160]	@ (8007344 <tcp_abandon+0x174>)
 80072a4:	f000 ff7c 	bl	80081a0 <tcp_pcb_remove>
 80072a8:	4b27      	ldr	r3, [pc, #156]	@ (8007348 <tcp_abandon+0x178>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d004      	beq.n	80072c0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 fd1e 	bl	8007cfc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fd15 	bl	8007cfc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d004      	beq.n	80072e4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 fd0c 	bl	8007cfc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80072e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00e      	beq.n	8007308 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	8b12      	ldrh	r2, [r2, #24]
 80072f4:	9202      	str	r2, [sp, #8]
 80072f6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80072f8:	9201      	str	r2, [sp, #4]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	460b      	mov	r3, r1
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	69b9      	ldr	r1, [r7, #24]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f004 fcbe 	bl	800bc84 <tcp_rst>
    }
    last_state = pcb->state;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	7d1b      	ldrb	r3, [r3, #20]
 800730c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fd34 	bl	8006d7c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <tcp_abandon+0x154>
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f06f 010c 	mvn.w	r1, #12
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	4798      	blx	r3
  }
}
 8007324:	3728      	adds	r7, #40	@ 0x28
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	08010610 	.word	0x08010610
 8007330:	08010754 	.word	0x08010754
 8007334:	08010654 	.word	0x08010654
 8007338:	08010770 	.word	0x08010770
 800733c:	20007c80 	.word	0x20007c80
 8007340:	20007c74 	.word	0x20007c74
 8007344:	20007c7c 	.word	0x20007c7c
 8007348:	20007c84 	.word	0x20007c84

0800734c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007354:	2101      	movs	r1, #1
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7ff ff3a 	bl	80071d0 <tcp_abandon>
}
 800735c:	bf00      	nop
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <tcp_update_rcv_ann_wnd+0x1c>
 8007372:	4b25      	ldr	r3, [pc, #148]	@ (8007408 <tcp_update_rcv_ann_wnd+0xa4>)
 8007374:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8007378:	4924      	ldr	r1, [pc, #144]	@ (800740c <tcp_update_rcv_ann_wnd+0xa8>)
 800737a:	4825      	ldr	r0, [pc, #148]	@ (8007410 <tcp_update_rcv_ann_wnd+0xac>)
 800737c:	f007 fccc 	bl	800ed18 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007388:	4413      	add	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8007394:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8007398:	bf28      	it	cs
 800739a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800739e:	b292      	uxth	r2, r2
 80073a0:	4413      	add	r3, r2
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	db08      	blt.n	80073bc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	e020      	b.n	80073fe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	dd03      	ble.n	80073d2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80073d0:	e014      	b.n	80073fc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073e4:	d306      	bcc.n	80073f4 <tcp_update_rcv_ann_wnd+0x90>
 80073e6:	4b08      	ldr	r3, [pc, #32]	@ (8007408 <tcp_update_rcv_ann_wnd+0xa4>)
 80073e8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80073ec:	4909      	ldr	r1, [pc, #36]	@ (8007414 <tcp_update_rcv_ann_wnd+0xb0>)
 80073ee:	4808      	ldr	r0, [pc, #32]	@ (8007410 <tcp_update_rcv_ann_wnd+0xac>)
 80073f0:	f007 fc92 	bl	800ed18 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80073fc:	2300      	movs	r3, #0
  }
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	08010610 	.word	0x08010610
 800740c:	0801086c 	.word	0x0801086c
 8007410:	08010654 	.word	0x08010654
 8007414:	08010890 	.word	0x08010890

08007418 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d107      	bne.n	800743a <tcp_recved+0x22>
 800742a:	4b1f      	ldr	r3, [pc, #124]	@ (80074a8 <tcp_recved+0x90>)
 800742c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8007430:	491e      	ldr	r1, [pc, #120]	@ (80074ac <tcp_recved+0x94>)
 8007432:	481f      	ldr	r0, [pc, #124]	@ (80074b0 <tcp_recved+0x98>)
 8007434:	f007 fc70 	bl	800ed18 <iprintf>
 8007438:	e032      	b.n	80074a0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	7d1b      	ldrb	r3, [r3, #20]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d106      	bne.n	8007450 <tcp_recved+0x38>
 8007442:	4b19      	ldr	r3, [pc, #100]	@ (80074a8 <tcp_recved+0x90>)
 8007444:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8007448:	491a      	ldr	r1, [pc, #104]	@ (80074b4 <tcp_recved+0x9c>)
 800744a:	4819      	ldr	r0, [pc, #100]	@ (80074b0 <tcp_recved+0x98>)
 800744c:	f007 fc64 	bl	800ed18 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007454:	887b      	ldrh	r3, [r7, #2]
 8007456:	4413      	add	r3, r2
 8007458:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800745a:	89fb      	ldrh	r3, [r7, #14]
 800745c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007460:	d804      	bhi.n	800746c <tcp_recved+0x54>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007466:	89fa      	ldrh	r2, [r7, #14]
 8007468:	429a      	cmp	r2, r3
 800746a:	d204      	bcs.n	8007476 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007472:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007474:	e002      	b.n	800747c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	89fa      	ldrh	r2, [r7, #14]
 800747a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7ff ff71 	bl	8007364 <tcp_update_rcv_ann_wnd>
 8007482:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800748a:	d309      	bcc.n	80074a0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	8b5b      	ldrh	r3, [r3, #26]
 8007490:	f043 0302 	orr.w	r3, r3, #2
 8007494:	b29a      	uxth	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f003 fe3e 	bl	800b11c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	08010610 	.word	0x08010610
 80074ac:	080108ac 	.word	0x080108ac
 80074b0:	08010654 	.word	0x08010654
 80074b4:	080108c4 	.word	0x080108c4

080074b8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80074b8:	b5b0      	push	{r4, r5, r7, lr}
 80074ba:	b090      	sub	sp, #64	@ 0x40
 80074bc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80074c4:	4b95      	ldr	r3, [pc, #596]	@ (800771c <tcp_slowtmr+0x264>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3301      	adds	r3, #1
 80074ca:	4a94      	ldr	r2, [pc, #592]	@ (800771c <tcp_slowtmr+0x264>)
 80074cc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80074ce:	4b94      	ldr	r3, [pc, #592]	@ (8007720 <tcp_slowtmr+0x268>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	3301      	adds	r3, #1
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	4b92      	ldr	r3, [pc, #584]	@ (8007720 <tcp_slowtmr+0x268>)
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	e000      	b.n	80074de <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80074dc:	bf00      	nop
  prev = NULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80074e2:	4b90      	ldr	r3, [pc, #576]	@ (8007724 <tcp_slowtmr+0x26c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80074e8:	e29d      	b.n	8007a26 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80074ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ec:	7d1b      	ldrb	r3, [r3, #20]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d106      	bne.n	8007500 <tcp_slowtmr+0x48>
 80074f2:	4b8d      	ldr	r3, [pc, #564]	@ (8007728 <tcp_slowtmr+0x270>)
 80074f4:	f240 42be 	movw	r2, #1214	@ 0x4be
 80074f8:	498c      	ldr	r1, [pc, #560]	@ (800772c <tcp_slowtmr+0x274>)
 80074fa:	488d      	ldr	r0, [pc, #564]	@ (8007730 <tcp_slowtmr+0x278>)
 80074fc:	f007 fc0c 	bl	800ed18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007502:	7d1b      	ldrb	r3, [r3, #20]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d106      	bne.n	8007516 <tcp_slowtmr+0x5e>
 8007508:	4b87      	ldr	r3, [pc, #540]	@ (8007728 <tcp_slowtmr+0x270>)
 800750a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800750e:	4989      	ldr	r1, [pc, #548]	@ (8007734 <tcp_slowtmr+0x27c>)
 8007510:	4887      	ldr	r0, [pc, #540]	@ (8007730 <tcp_slowtmr+0x278>)
 8007512:	f007 fc01 	bl	800ed18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007518:	7d1b      	ldrb	r3, [r3, #20]
 800751a:	2b0a      	cmp	r3, #10
 800751c:	d106      	bne.n	800752c <tcp_slowtmr+0x74>
 800751e:	4b82      	ldr	r3, [pc, #520]	@ (8007728 <tcp_slowtmr+0x270>)
 8007520:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8007524:	4984      	ldr	r1, [pc, #528]	@ (8007738 <tcp_slowtmr+0x280>)
 8007526:	4882      	ldr	r0, [pc, #520]	@ (8007730 <tcp_slowtmr+0x278>)
 8007528:	f007 fbf6 	bl	800ed18 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800752c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800752e:	7f9a      	ldrb	r2, [r3, #30]
 8007530:	4b7b      	ldr	r3, [pc, #492]	@ (8007720 <tcp_slowtmr+0x268>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d105      	bne.n	8007544 <tcp_slowtmr+0x8c>
      prev = pcb;
 8007538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800753c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8007542:	e270      	b.n	8007a26 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8007544:	4b76      	ldr	r3, [pc, #472]	@ (8007720 <tcp_slowtmr+0x268>)
 8007546:	781a      	ldrb	r2, [r3, #0]
 8007548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800754c:	2300      	movs	r3, #0
 800754e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755a:	7d1b      	ldrb	r3, [r3, #20]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d10a      	bne.n	8007576 <tcp_slowtmr+0xbe>
 8007560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007562:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007566:	2b05      	cmp	r3, #5
 8007568:	d905      	bls.n	8007576 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800756a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800756e:	3301      	adds	r3, #1
 8007570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007574:	e11e      	b.n	80077b4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007578:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800757c:	2b0b      	cmp	r3, #11
 800757e:	d905      	bls.n	800758c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8007580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007584:	3301      	adds	r3, #1
 8007586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800758a:	e113      	b.n	80077b4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800758c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007592:	2b00      	cmp	r3, #0
 8007594:	d075      	beq.n	8007682 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800759a:	2b00      	cmp	r3, #0
 800759c:	d006      	beq.n	80075ac <tcp_slowtmr+0xf4>
 800759e:	4b62      	ldr	r3, [pc, #392]	@ (8007728 <tcp_slowtmr+0x270>)
 80075a0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80075a4:	4965      	ldr	r1, [pc, #404]	@ (800773c <tcp_slowtmr+0x284>)
 80075a6:	4862      	ldr	r0, [pc, #392]	@ (8007730 <tcp_slowtmr+0x278>)
 80075a8:	f007 fbb6 	bl	800ed18 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80075ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d106      	bne.n	80075c2 <tcp_slowtmr+0x10a>
 80075b4:	4b5c      	ldr	r3, [pc, #368]	@ (8007728 <tcp_slowtmr+0x270>)
 80075b6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80075ba:	4961      	ldr	r1, [pc, #388]	@ (8007740 <tcp_slowtmr+0x288>)
 80075bc:	485c      	ldr	r0, [pc, #368]	@ (8007730 <tcp_slowtmr+0x278>)
 80075be:	f007 fbab 	bl	800ed18 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80075c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80075c8:	2b0b      	cmp	r3, #11
 80075ca:	d905      	bls.n	80075d8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80075cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075d0:	3301      	adds	r3, #1
 80075d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80075d6:	e0ed      	b.n	80077b4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80075d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80075de:	3b01      	subs	r3, #1
 80075e0:	4a58      	ldr	r2, [pc, #352]	@ (8007744 <tcp_slowtmr+0x28c>)
 80075e2:	5cd3      	ldrb	r3, [r2, r3]
 80075e4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80075e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80075ec:	7c7a      	ldrb	r2, [r7, #17]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d907      	bls.n	8007602 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80075f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80075f8:	3301      	adds	r3, #1
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fe:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8007602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007604:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007608:	7c7a      	ldrb	r2, [r7, #17]
 800760a:	429a      	cmp	r2, r3
 800760c:	f200 80d2 	bhi.w	80077b4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8007610:	2301      	movs	r3, #1
 8007612:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8007614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007616:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800761a:	2b00      	cmp	r3, #0
 800761c:	d108      	bne.n	8007630 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800761e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007620:	f004 fc24 	bl	800be6c <tcp_zero_window_probe>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d014      	beq.n	8007654 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800762a:	2300      	movs	r3, #0
 800762c:	623b      	str	r3, [r7, #32]
 800762e:	e011      	b.n	8007654 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007636:	4619      	mov	r1, r3
 8007638:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800763a:	f003 fae9 	bl	800ac10 <tcp_split_unsent_seg>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d107      	bne.n	8007654 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8007644:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007646:	f003 fd69 	bl	800b11c <tcp_output>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 80ac 	beq.w	80077b4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800765c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007666:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800766a:	2b06      	cmp	r3, #6
 800766c:	f200 80a2 	bhi.w	80077b4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8007670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007672:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007676:	3301      	adds	r3, #1
 8007678:	b2da      	uxtb	r2, r3
 800767a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8007680:	e098      	b.n	80077b4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007684:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007688:	2b00      	cmp	r3, #0
 800768a:	db0f      	blt.n	80076ac <tcp_slowtmr+0x1f4>
 800768c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007692:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007696:	4293      	cmp	r3, r2
 8007698:	d008      	beq.n	80076ac <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800769a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3301      	adds	r3, #1
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	b21a      	sxth	r2, r3
 80076a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076aa:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80076ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80076b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80076b8:	429a      	cmp	r2, r3
 80076ba:	db7b      	blt.n	80077b4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80076bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076be:	f004 f821 	bl	800b704 <tcp_rexmit_rto_prepare>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d007      	beq.n	80076d8 <tcp_slowtmr+0x220>
 80076c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d171      	bne.n	80077b4 <tcp_slowtmr+0x2fc>
 80076d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d06d      	beq.n	80077b4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80076d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076da:	7d1b      	ldrb	r3, [r3, #20]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d03a      	beq.n	8007756 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80076e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076e6:	2b0c      	cmp	r3, #12
 80076e8:	bf28      	it	cs
 80076ea:	230c      	movcs	r3, #12
 80076ec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80076ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80076f4:	10db      	asrs	r3, r3, #3
 80076f6:	b21b      	sxth	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007700:	4413      	add	r3, r2
 8007702:	7efa      	ldrb	r2, [r7, #27]
 8007704:	4910      	ldr	r1, [pc, #64]	@ (8007748 <tcp_slowtmr+0x290>)
 8007706:	5c8a      	ldrb	r2, [r1, r2]
 8007708:	4093      	lsls	r3, r2
 800770a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8007712:	4293      	cmp	r3, r2
 8007714:	dc1a      	bgt.n	800774c <tcp_slowtmr+0x294>
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	b21a      	sxth	r2, r3
 800771a:	e019      	b.n	8007750 <tcp_slowtmr+0x298>
 800771c:	20007c70 	.word	0x20007c70
 8007720:	20007c86 	.word	0x20007c86
 8007724:	20007c7c 	.word	0x20007c7c
 8007728:	08010610 	.word	0x08010610
 800772c:	08010954 	.word	0x08010954
 8007730:	08010654 	.word	0x08010654
 8007734:	08010980 	.word	0x08010980
 8007738:	080109ac 	.word	0x080109ac
 800773c:	080109dc 	.word	0x080109dc
 8007740:	08010a10 	.word	0x08010a10
 8007744:	080125e8 	.word	0x080125e8
 8007748:	080125d8 	.word	0x080125d8
 800774c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007752:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8007756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007758:	2200      	movs	r2, #0
 800775a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800775c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007764:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007768:	4293      	cmp	r3, r2
 800776a:	bf28      	it	cs
 800776c:	4613      	movcs	r3, r2
 800776e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007770:	8a7b      	ldrh	r3, [r7, #18]
 8007772:	085b      	lsrs	r3, r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007778:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800777c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800777e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8007782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007784:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	b29b      	uxth	r3, r3
 800778a:	429a      	cmp	r2, r3
 800778c:	d206      	bcs.n	800779c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800778e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007790:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007798:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800779c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80077a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80077a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80077ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077b0:	f004 f818 	bl	800b7e4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80077b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b6:	7d1b      	ldrb	r3, [r3, #20]
 80077b8:	2b06      	cmp	r3, #6
 80077ba:	d111      	bne.n	80077e0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80077bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077be:	8b5b      	ldrh	r3, [r3, #26]
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077c8:	4b9c      	ldr	r3, [pc, #624]	@ (8007a3c <tcp_slowtmr+0x584>)
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b28      	cmp	r3, #40	@ 0x28
 80077d4:	d904      	bls.n	80077e0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80077d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077da:	3301      	adds	r3, #1
 80077dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80077e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e2:	7a5b      	ldrb	r3, [r3, #9]
 80077e4:	f003 0308 	and.w	r3, r3, #8
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d04a      	beq.n	8007882 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80077ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	d003      	beq.n	80077fc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80077f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80077f8:	2b07      	cmp	r3, #7
 80077fa:	d142      	bne.n	8007882 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077fc:	4b8f      	ldr	r3, [pc, #572]	@ (8007a3c <tcp_slowtmr+0x584>)
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007808:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800780c:	4b8c      	ldr	r3, [pc, #560]	@ (8007a40 <tcp_slowtmr+0x588>)
 800780e:	440b      	add	r3, r1
 8007810:	498c      	ldr	r1, [pc, #560]	@ (8007a44 <tcp_slowtmr+0x58c>)
 8007812:	fba1 1303 	umull	r1, r3, r1, r3
 8007816:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007818:	429a      	cmp	r2, r3
 800781a:	d90a      	bls.n	8007832 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800781c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007820:	3301      	adds	r3, #1
 8007822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8007826:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800782a:	3301      	adds	r3, #1
 800782c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007830:	e027      	b.n	8007882 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007832:	4b82      	ldr	r3, [pc, #520]	@ (8007a3c <tcp_slowtmr+0x584>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800783c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007844:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007848:	4618      	mov	r0, r3
 800784a:	4b7f      	ldr	r3, [pc, #508]	@ (8007a48 <tcp_slowtmr+0x590>)
 800784c:	fb00 f303 	mul.w	r3, r0, r3
 8007850:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007852:	497c      	ldr	r1, [pc, #496]	@ (8007a44 <tcp_slowtmr+0x58c>)
 8007854:	fba1 1303 	umull	r1, r3, r1, r3
 8007858:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800785a:	429a      	cmp	r2, r3
 800785c:	d911      	bls.n	8007882 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800785e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007860:	f004 fac4 	bl	800bdec <tcp_keepalive>
 8007864:	4603      	mov	r3, r0
 8007866:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800786a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800786e:	2b00      	cmp	r3, #0
 8007870:	d107      	bne.n	8007882 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007874:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007878:	3301      	adds	r3, #1
 800787a:	b2da      	uxtb	r2, r3
 800787c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8007882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007886:	2b00      	cmp	r3, #0
 8007888:	d011      	beq.n	80078ae <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800788a:	4b6c      	ldr	r3, [pc, #432]	@ (8007a3c <tcp_slowtmr+0x584>)
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	1ad2      	subs	r2, r2, r3
 8007894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007896:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800789a:	4619      	mov	r1, r3
 800789c:	460b      	mov	r3, r1
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	440b      	add	r3, r1
 80078a2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d302      	bcc.n	80078ae <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80078a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078aa:	f000 fddd 	bl	8008468 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80078ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b0:	7d1b      	ldrb	r3, [r3, #20]
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d10b      	bne.n	80078ce <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80078b6:	4b61      	ldr	r3, [pc, #388]	@ (8007a3c <tcp_slowtmr+0x584>)
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b28      	cmp	r3, #40	@ 0x28
 80078c2:	d904      	bls.n	80078ce <tcp_slowtmr+0x416>
        ++pcb_remove;
 80078c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078c8:	3301      	adds	r3, #1
 80078ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80078ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d0:	7d1b      	ldrb	r3, [r3, #20]
 80078d2:	2b09      	cmp	r3, #9
 80078d4:	d10b      	bne.n	80078ee <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80078d6:	4b59      	ldr	r3, [pc, #356]	@ (8007a3c <tcp_slowtmr+0x584>)
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	2bf0      	cmp	r3, #240	@ 0xf0
 80078e2:	d904      	bls.n	80078ee <tcp_slowtmr+0x436>
        ++pcb_remove;
 80078e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078e8:	3301      	adds	r3, #1
 80078ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80078ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d060      	beq.n	80079b8 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80078f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078fc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80078fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007900:	f000 fbfe 	bl	8008100 <tcp_pcb_purge>
      if (prev != NULL) {
 8007904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007906:	2b00      	cmp	r3, #0
 8007908:	d010      	beq.n	800792c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800790a:	4b50      	ldr	r3, [pc, #320]	@ (8007a4c <tcp_slowtmr+0x594>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007910:	429a      	cmp	r2, r3
 8007912:	d106      	bne.n	8007922 <tcp_slowtmr+0x46a>
 8007914:	4b4e      	ldr	r3, [pc, #312]	@ (8007a50 <tcp_slowtmr+0x598>)
 8007916:	f240 526d 	movw	r2, #1389	@ 0x56d
 800791a:	494e      	ldr	r1, [pc, #312]	@ (8007a54 <tcp_slowtmr+0x59c>)
 800791c:	484e      	ldr	r0, [pc, #312]	@ (8007a58 <tcp_slowtmr+0x5a0>)
 800791e:	f007 f9fb 	bl	800ed18 <iprintf>
        prev->next = pcb->next;
 8007922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007928:	60da      	str	r2, [r3, #12]
 800792a:	e00f      	b.n	800794c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800792c:	4b47      	ldr	r3, [pc, #284]	@ (8007a4c <tcp_slowtmr+0x594>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007932:	429a      	cmp	r2, r3
 8007934:	d006      	beq.n	8007944 <tcp_slowtmr+0x48c>
 8007936:	4b46      	ldr	r3, [pc, #280]	@ (8007a50 <tcp_slowtmr+0x598>)
 8007938:	f240 5271 	movw	r2, #1393	@ 0x571
 800793c:	4947      	ldr	r1, [pc, #284]	@ (8007a5c <tcp_slowtmr+0x5a4>)
 800793e:	4846      	ldr	r0, [pc, #280]	@ (8007a58 <tcp_slowtmr+0x5a0>)
 8007940:	f007 f9ea 	bl	800ed18 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	4a40      	ldr	r2, [pc, #256]	@ (8007a4c <tcp_slowtmr+0x594>)
 800794a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800794c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007950:	2b00      	cmp	r3, #0
 8007952:	d013      	beq.n	800797c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007956:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800795c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800795e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007960:	3304      	adds	r3, #4
 8007962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007964:	8ad2      	ldrh	r2, [r2, #22]
 8007966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007968:	8b09      	ldrh	r1, [r1, #24]
 800796a:	9102      	str	r1, [sp, #8]
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	462b      	mov	r3, r5
 8007972:	4622      	mov	r2, r4
 8007974:	4601      	mov	r1, r0
 8007976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007978:	f004 f984 	bl	800bc84 <tcp_rst>
      err_arg = pcb->callback_arg;
 800797c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007984:	7d1b      	ldrb	r3, [r3, #20]
 8007986:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800798c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007992:	6838      	ldr	r0, [r7, #0]
 8007994:	f7ff f9f2 	bl	8006d7c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007998:	4b31      	ldr	r3, [pc, #196]	@ (8007a60 <tcp_slowtmr+0x5a8>)
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <tcp_slowtmr+0x4f6>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f06f 010c 	mvn.w	r1, #12
 80079aa:	68b8      	ldr	r0, [r7, #8]
 80079ac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80079ae:	4b2c      	ldr	r3, [pc, #176]	@ (8007a60 <tcp_slowtmr+0x5a8>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d037      	beq.n	8007a26 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80079b6:	e592      	b.n	80074de <tcp_slowtmr+0x26>
      prev = pcb;
 80079b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80079bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80079c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c4:	7f1b      	ldrb	r3, [r3, #28]
 80079c6:	3301      	adds	r3, #1
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079cc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80079ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d0:	7f1a      	ldrb	r2, [r3, #28]
 80079d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d4:	7f5b      	ldrb	r3, [r3, #29]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d325      	bcc.n	8007a26 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80079da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079dc:	2200      	movs	r2, #0
 80079de:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80079e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007a60 <tcp_slowtmr+0x5a8>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80079e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00b      	beq.n	8007a08 <tcp_slowtmr+0x550>
 80079f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079f8:	6912      	ldr	r2, [r2, #16]
 80079fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079fc:	4610      	mov	r0, r2
 80079fe:	4798      	blx	r3
 8007a00:	4603      	mov	r3, r0
 8007a02:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007a06:	e002      	b.n	8007a0e <tcp_slowtmr+0x556>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8007a0e:	4b14      	ldr	r3, [pc, #80]	@ (8007a60 <tcp_slowtmr+0x5a8>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f47f ad62 	bne.w	80074dc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007a18:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d102      	bne.n	8007a26 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007a20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a22:	f003 fb7b 	bl	800b11c <tcp_output>
  while (pcb != NULL) {
 8007a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f47f ad5e 	bne.w	80074ea <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8007a32:	4b0c      	ldr	r3, [pc, #48]	@ (8007a64 <tcp_slowtmr+0x5ac>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007a38:	e069      	b.n	8007b0e <tcp_slowtmr+0x656>
 8007a3a:	bf00      	nop
 8007a3c:	20007c70 	.word	0x20007c70
 8007a40:	000a4cb8 	.word	0x000a4cb8
 8007a44:	10624dd3 	.word	0x10624dd3
 8007a48:	000124f8 	.word	0x000124f8
 8007a4c:	20007c7c 	.word	0x20007c7c
 8007a50:	08010610 	.word	0x08010610
 8007a54:	08010a48 	.word	0x08010a48
 8007a58:	08010654 	.word	0x08010654
 8007a5c:	08010a74 	.word	0x08010a74
 8007a60:	20007c84 	.word	0x20007c84
 8007a64:	20007c80 	.word	0x20007c80
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6a:	7d1b      	ldrb	r3, [r3, #20]
 8007a6c:	2b0a      	cmp	r3, #10
 8007a6e:	d006      	beq.n	8007a7e <tcp_slowtmr+0x5c6>
 8007a70:	4b2b      	ldr	r3, [pc, #172]	@ (8007b20 <tcp_slowtmr+0x668>)
 8007a72:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8007a76:	492b      	ldr	r1, [pc, #172]	@ (8007b24 <tcp_slowtmr+0x66c>)
 8007a78:	482b      	ldr	r0, [pc, #172]	@ (8007b28 <tcp_slowtmr+0x670>)
 8007a7a:	f007 f94d 	bl	800ed18 <iprintf>
    pcb_remove = 0;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007a84:	4b29      	ldr	r3, [pc, #164]	@ (8007b2c <tcp_slowtmr+0x674>)
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2bf0      	cmp	r3, #240	@ 0xf0
 8007a90:	d904      	bls.n	8007a9c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8007a92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a96:	3301      	adds	r3, #1
 8007a98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d02f      	beq.n	8007b04 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007aa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007aa6:	f000 fb2b 	bl	8008100 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d010      	beq.n	8007ad2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8007b30 <tcp_slowtmr+0x678>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d106      	bne.n	8007ac8 <tcp_slowtmr+0x610>
 8007aba:	4b19      	ldr	r3, [pc, #100]	@ (8007b20 <tcp_slowtmr+0x668>)
 8007abc:	f240 52af 	movw	r2, #1455	@ 0x5af
 8007ac0:	491c      	ldr	r1, [pc, #112]	@ (8007b34 <tcp_slowtmr+0x67c>)
 8007ac2:	4819      	ldr	r0, [pc, #100]	@ (8007b28 <tcp_slowtmr+0x670>)
 8007ac4:	f007 f928 	bl	800ed18 <iprintf>
        prev->next = pcb->next;
 8007ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ace:	60da      	str	r2, [r3, #12]
 8007ad0:	e00f      	b.n	8007af2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007ad2:	4b17      	ldr	r3, [pc, #92]	@ (8007b30 <tcp_slowtmr+0x678>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d006      	beq.n	8007aea <tcp_slowtmr+0x632>
 8007adc:	4b10      	ldr	r3, [pc, #64]	@ (8007b20 <tcp_slowtmr+0x668>)
 8007ade:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8007ae2:	4915      	ldr	r1, [pc, #84]	@ (8007b38 <tcp_slowtmr+0x680>)
 8007ae4:	4810      	ldr	r0, [pc, #64]	@ (8007b28 <tcp_slowtmr+0x670>)
 8007ae6:	f007 f917 	bl	800ed18 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	4a10      	ldr	r2, [pc, #64]	@ (8007b30 <tcp_slowtmr+0x678>)
 8007af0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007afc:	69f8      	ldr	r0, [r7, #28]
 8007afe:	f7ff f93d 	bl	8006d7c <tcp_free>
 8007b02:	e004      	b.n	8007b0e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8007b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b06:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1a9      	bne.n	8007a68 <tcp_slowtmr+0x5b0>
    }
  }
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	3730      	adds	r7, #48	@ 0x30
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	08010610 	.word	0x08010610
 8007b24:	08010aa0 	.word	0x08010aa0
 8007b28:	08010654 	.word	0x08010654
 8007b2c:	20007c70 	.word	0x20007c70
 8007b30:	20007c80 	.word	0x20007c80
 8007b34:	08010ad0 	.word	0x08010ad0
 8007b38:	08010af8 	.word	0x08010af8

08007b3c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007b42:	4b2d      	ldr	r3, [pc, #180]	@ (8007bf8 <tcp_fasttmr+0xbc>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	3301      	adds	r3, #1
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8007bf8 <tcp_fasttmr+0xbc>)
 8007b4c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8007bfc <tcp_fasttmr+0xc0>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007b54:	e048      	b.n	8007be8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	7f9a      	ldrb	r2, [r3, #30]
 8007b5a:	4b27      	ldr	r3, [pc, #156]	@ (8007bf8 <tcp_fasttmr+0xbc>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d03f      	beq.n	8007be2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007b62:	4b25      	ldr	r3, [pc, #148]	@ (8007bf8 <tcp_fasttmr+0xbc>)
 8007b64:	781a      	ldrb	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	8b5b      	ldrh	r3, [r3, #26]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d010      	beq.n	8007b98 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	8b5b      	ldrh	r3, [r3, #26]
 8007b7a:	f043 0302 	orr.w	r3, r3, #2
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f003 fac9 	bl	800b11c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	8b5b      	ldrh	r3, [r3, #26]
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	8b5b      	ldrh	r3, [r3, #26]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d009      	beq.n	8007bb8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	8b5b      	ldrh	r3, [r3, #26]
 8007ba8:	f023 0308 	bic.w	r3, r3, #8
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff fa76 	bl	80070a4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8007c00 <tcp_fasttmr+0xc4>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f819 	bl	8007c04 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007c00 <tcp_fasttmr+0xc4>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d000      	beq.n	8007bdc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007bda:	e7b8      	b.n	8007b4e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	607b      	str	r3, [r7, #4]
 8007be0:	e002      	b.n	8007be8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1b3      	bne.n	8007b56 <tcp_fasttmr+0x1a>
    }
  }
}
 8007bee:	bf00      	nop
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20007c86 	.word	0x20007c86
 8007bfc:	20007c7c 	.word	0x20007c7c
 8007c00:	20007c84 	.word	0x20007c84

08007c04 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007c04:	b590      	push	{r4, r7, lr}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d109      	bne.n	8007c26 <tcp_process_refused_data+0x22>
 8007c12:	4b37      	ldr	r3, [pc, #220]	@ (8007cf0 <tcp_process_refused_data+0xec>)
 8007c14:	f240 6209 	movw	r2, #1545	@ 0x609
 8007c18:	4936      	ldr	r1, [pc, #216]	@ (8007cf4 <tcp_process_refused_data+0xf0>)
 8007c1a:	4837      	ldr	r0, [pc, #220]	@ (8007cf8 <tcp_process_refused_data+0xf4>)
 8007c1c:	f007 f87c 	bl	800ed18 <iprintf>
 8007c20:	f06f 030f 	mvn.w	r3, #15
 8007c24:	e060      	b.n	8007ce8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c2a:	7b5b      	ldrb	r3, [r3, #13]
 8007c2c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c32:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <tcp_process_refused_data+0x58>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6918      	ldr	r0, [r3, #16]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	6879      	ldr	r1, [r7, #4]
 8007c54:	47a0      	blx	r4
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]
 8007c5a:	e007      	b.n	8007c6c <tcp_process_refused_data+0x68>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	2000      	movs	r0, #0
 8007c64:	f000 f8a4 	bl	8007db0 <tcp_recv_null>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d12a      	bne.n	8007cca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d033      	beq.n	8007ce6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c82:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007c86:	d005      	beq.n	8007c94 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00b      	beq.n	8007cb6 <tcp_process_refused_data+0xb2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6918      	ldr	r0, [r3, #16]
 8007ca8:	2300      	movs	r3, #0
 8007caa:	2200      	movs	r2, #0
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	47a0      	blx	r4
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]
 8007cb4:	e001      	b.n	8007cba <tcp_process_refused_data+0xb6>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cbe:	f113 0f0d 	cmn.w	r3, #13
 8007cc2:	d110      	bne.n	8007ce6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007cc4:	f06f 030c 	mvn.w	r3, #12
 8007cc8:	e00e      	b.n	8007ce8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cce:	f113 0f0d 	cmn.w	r3, #13
 8007cd2:	d102      	bne.n	8007cda <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007cd4:	f06f 030c 	mvn.w	r3, #12
 8007cd8:	e006      	b.n	8007ce8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8007ce0:	f06f 0304 	mvn.w	r3, #4
 8007ce4:	e000      	b.n	8007ce8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd90      	pop	{r4, r7, pc}
 8007cf0:	08010610 	.word	0x08010610
 8007cf4:	08010b20 	.word	0x08010b20
 8007cf8:	08010654 	.word	0x08010654

08007cfc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007d04:	e007      	b.n	8007d16 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f80a 	bl	8007d26 <tcp_seg_free>
    seg = next;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1f4      	bne.n	8007d06 <tcp_segs_free+0xa>
  }
}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00c      	beq.n	8007d4e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe fd7b 	bl	800683c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	2003      	movs	r0, #3
 8007d4a:	f7fd ff21 	bl	8005b90 <memp_free>
  }
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d106      	bne.n	8007d74 <tcp_seg_copy+0x1c>
 8007d66:	4b0f      	ldr	r3, [pc, #60]	@ (8007da4 <tcp_seg_copy+0x4c>)
 8007d68:	f240 6282 	movw	r2, #1666	@ 0x682
 8007d6c:	490e      	ldr	r1, [pc, #56]	@ (8007da8 <tcp_seg_copy+0x50>)
 8007d6e:	480f      	ldr	r0, [pc, #60]	@ (8007dac <tcp_seg_copy+0x54>)
 8007d70:	f006 ffd2 	bl	800ed18 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007d74:	2003      	movs	r0, #3
 8007d76:	f7fd fe9b 	bl	8005ab0 <memp_malloc>
 8007d7a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <tcp_seg_copy+0x2e>
    return NULL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	e00a      	b.n	8007d9c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007d86:	2210      	movs	r2, #16
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f007 f89f 	bl	800eece <memcpy>
  pbuf_ref(cseg->p);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fe fdf1 	bl	800697c <pbuf_ref>
  return cseg;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	08010610 	.word	0x08010610
 8007da8:	08010b64 	.word	0x08010b64
 8007dac:	08010654 	.word	0x08010654

08007db0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d109      	bne.n	8007dd8 <tcp_recv_null+0x28>
 8007dc4:	4b12      	ldr	r3, [pc, #72]	@ (8007e10 <tcp_recv_null+0x60>)
 8007dc6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8007dca:	4912      	ldr	r1, [pc, #72]	@ (8007e14 <tcp_recv_null+0x64>)
 8007dcc:	4812      	ldr	r0, [pc, #72]	@ (8007e18 <tcp_recv_null+0x68>)
 8007dce:	f006 ffa3 	bl	800ed18 <iprintf>
 8007dd2:	f06f 030f 	mvn.w	r3, #15
 8007dd6:	e016      	b.n	8007e06 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d009      	beq.n	8007df2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	891b      	ldrh	r3, [r3, #8]
 8007de2:	4619      	mov	r1, r3
 8007de4:	68b8      	ldr	r0, [r7, #8]
 8007de6:	f7ff fb17 	bl	8007418 <tcp_recved>
    pbuf_free(p);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7fe fd26 	bl	800683c <pbuf_free>
 8007df0:	e008      	b.n	8007e04 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d104      	bne.n	8007e04 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007dfa:	68b8      	ldr	r0, [r7, #8]
 8007dfc:	f7ff f9bc 	bl	8007178 <tcp_close>
 8007e00:	4603      	mov	r3, r0
 8007e02:	e000      	b.n	8007e06 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	08010610 	.word	0x08010610
 8007e14:	08010b80 	.word	0x08010b80
 8007e18:	08010654 	.word	0x08010654

08007e1c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	db01      	blt.n	8007e32 <tcp_kill_prio+0x16>
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	e000      	b.n	8007e34 <tcp_kill_prio+0x18>
 8007e32:	237f      	movs	r3, #127	@ 0x7f
 8007e34:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007e36:	7afb      	ldrb	r3, [r7, #11]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d034      	beq.n	8007ea6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e4a:	4b19      	ldr	r3, [pc, #100]	@ (8007eb0 <tcp_kill_prio+0x94>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	e01f      	b.n	8007e92 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	7d5b      	ldrb	r3, [r3, #21]
 8007e56:	7afa      	ldrb	r2, [r7, #11]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d80c      	bhi.n	8007e76 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007e60:	7afa      	ldrb	r2, [r7, #11]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d112      	bne.n	8007e8c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007e66:	4b13      	ldr	r3, [pc, #76]	@ (8007eb4 <tcp_kill_prio+0x98>)
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d80a      	bhi.n	8007e8c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007e76:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb4 <tcp_kill_prio+0x98>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	7d5b      	ldrb	r3, [r3, #21]
 8007e8a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	617b      	str	r3, [r7, #20]
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1dc      	bne.n	8007e52 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007e9e:	6938      	ldr	r0, [r7, #16]
 8007ea0:	f7ff fa54 	bl	800734c <tcp_abort>
 8007ea4:	e000      	b.n	8007ea8 <tcp_kill_prio+0x8c>
    return;
 8007ea6:	bf00      	nop
  }
}
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20007c7c 	.word	0x20007c7c
 8007eb4:	20007c70 	.word	0x20007c70

08007eb8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	2b08      	cmp	r3, #8
 8007ec6:	d009      	beq.n	8007edc <tcp_kill_state+0x24>
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	2b09      	cmp	r3, #9
 8007ecc:	d006      	beq.n	8007edc <tcp_kill_state+0x24>
 8007ece:	4b1a      	ldr	r3, [pc, #104]	@ (8007f38 <tcp_kill_state+0x80>)
 8007ed0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8007ed4:	4919      	ldr	r1, [pc, #100]	@ (8007f3c <tcp_kill_state+0x84>)
 8007ed6:	481a      	ldr	r0, [pc, #104]	@ (8007f40 <tcp_kill_state+0x88>)
 8007ed8:	f006 ff1e 	bl	800ed18 <iprintf>

  inactivity = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ee4:	4b17      	ldr	r3, [pc, #92]	@ (8007f44 <tcp_kill_state+0x8c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	e017      	b.n	8007f1c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	7d1b      	ldrb	r3, [r3, #20]
 8007ef0:	79fa      	ldrb	r2, [r7, #7]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d10f      	bne.n	8007f16 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007ef6:	4b14      	ldr	r3, [pc, #80]	@ (8007f48 <tcp_kill_state+0x90>)
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d807      	bhi.n	8007f16 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007f06:	4b10      	ldr	r3, [pc, #64]	@ (8007f48 <tcp_kill_state+0x90>)
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e4      	bne.n	8007eec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007f28:	2100      	movs	r1, #0
 8007f2a:	6938      	ldr	r0, [r7, #16]
 8007f2c:	f7ff f950 	bl	80071d0 <tcp_abandon>
  }
}
 8007f30:	bf00      	nop
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	08010610 	.word	0x08010610
 8007f3c:	08010b9c 	.word	0x08010b9c
 8007f40:	08010654 	.word	0x08010654
 8007f44:	20007c7c 	.word	0x20007c7c
 8007f48:	20007c70 	.word	0x20007c70

08007f4c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f5a:	4b12      	ldr	r3, [pc, #72]	@ (8007fa4 <tcp_kill_timewait+0x58>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	e012      	b.n	8007f88 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f62:	4b11      	ldr	r3, [pc, #68]	@ (8007fa8 <tcp_kill_timewait+0x5c>)
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d807      	bhi.n	8007f82 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007f72:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa8 <tcp_kill_timewait+0x5c>)
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1e9      	bne.n	8007f62 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007f94:	68b8      	ldr	r0, [r7, #8]
 8007f96:	f7ff f9d9 	bl	800734c <tcp_abort>
  }
}
 8007f9a:	bf00      	nop
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20007c80 	.word	0x20007c80
 8007fa8:	20007c70 	.word	0x20007c70

08007fac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007fb2:	4b10      	ldr	r3, [pc, #64]	@ (8007ff4 <tcp_handle_closepend+0x48>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007fb8:	e014      	b.n	8007fe4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	8b5b      	ldrh	r3, [r3, #26]
 8007fc4:	f003 0308 	and.w	r3, r3, #8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d009      	beq.n	8007fe0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	8b5b      	ldrh	r3, [r3, #26]
 8007fd0:	f023 0308 	bic.w	r3, r3, #8
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7ff f862 	bl	80070a4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e7      	bne.n	8007fba <tcp_handle_closepend+0xe>
  }
}
 8007fea:	bf00      	nop
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	20007c7c 	.word	0x20007c7c

08007ff8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008002:	2001      	movs	r0, #1
 8008004:	f7fd fd54 	bl	8005ab0 <memp_malloc>
 8008008:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d126      	bne.n	800805e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008010:	f7ff ffcc 	bl	8007fac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008014:	f7ff ff9a 	bl	8007f4c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008018:	2001      	movs	r0, #1
 800801a:	f7fd fd49 	bl	8005ab0 <memp_malloc>
 800801e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d11b      	bne.n	800805e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008026:	2009      	movs	r0, #9
 8008028:	f7ff ff46 	bl	8007eb8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800802c:	2001      	movs	r0, #1
 800802e:	f7fd fd3f 	bl	8005ab0 <memp_malloc>
 8008032:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d111      	bne.n	800805e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800803a:	2008      	movs	r0, #8
 800803c:	f7ff ff3c 	bl	8007eb8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008040:	2001      	movs	r0, #1
 8008042:	f7fd fd35 	bl	8005ab0 <memp_malloc>
 8008046:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d107      	bne.n	800805e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff fee3 	bl	8007e1c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008056:	2001      	movs	r0, #1
 8008058:	f7fd fd2a 	bl	8005ab0 <memp_malloc>
 800805c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d03f      	beq.n	80080e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008064:	229c      	movs	r2, #156	@ 0x9c
 8008066:	2100      	movs	r1, #0
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f006 feba 	bl	800ede2 <memset>
    pcb->prio = prio;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	79fa      	ldrb	r2, [r7, #7]
 8008072:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800807a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8008084:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	22ff      	movs	r2, #255	@ 0xff
 8008092:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800809a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2206      	movs	r2, #6
 80080a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2206      	movs	r2, #6
 80080a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080b0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80080ba:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <tcp_alloc+0xf8>)
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80080c2:	4b0c      	ldr	r3, [pc, #48]	@ (80080f4 <tcp_alloc+0xfc>)
 80080c4:	781a      	ldrb	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80080d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4a08      	ldr	r2, [pc, #32]	@ (80080f8 <tcp_alloc+0x100>)
 80080d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4a07      	ldr	r2, [pc, #28]	@ (80080fc <tcp_alloc+0x104>)
 80080e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80080e4:	68fb      	ldr	r3, [r7, #12]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	20007c70 	.word	0x20007c70
 80080f4:	20007c86 	.word	0x20007c86
 80080f8:	08007db1 	.word	0x08007db1
 80080fc:	006ddd00 	.word	0x006ddd00

08008100 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d107      	bne.n	800811e <tcp_pcb_purge+0x1e>
 800810e:	4b21      	ldr	r3, [pc, #132]	@ (8008194 <tcp_pcb_purge+0x94>)
 8008110:	f640 0251 	movw	r2, #2129	@ 0x851
 8008114:	4920      	ldr	r1, [pc, #128]	@ (8008198 <tcp_pcb_purge+0x98>)
 8008116:	4821      	ldr	r0, [pc, #132]	@ (800819c <tcp_pcb_purge+0x9c>)
 8008118:	f006 fdfe 	bl	800ed18 <iprintf>
 800811c:	e037      	b.n	800818e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	7d1b      	ldrb	r3, [r3, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d033      	beq.n	800818e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800812a:	2b0a      	cmp	r3, #10
 800812c:	d02f      	beq.n	800818e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008132:	2b01      	cmp	r3, #1
 8008134:	d02b      	beq.n	800818e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800813a:	2b00      	cmp	r3, #0
 800813c:	d007      	beq.n	800814e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fb7a 	bl	800683c <pbuf_free>
      pcb->refused_data = NULL;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f986 	bl	8008468 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008162:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff fdc7 	bl	8007cfc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff fdc2 	bl	8007cfc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	08010610 	.word	0x08010610
 8008198:	08010c5c 	.word	0x08010c5c
 800819c:	08010654 	.word	0x08010654

080081a0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d106      	bne.n	80081be <tcp_pcb_remove+0x1e>
 80081b0:	4b3e      	ldr	r3, [pc, #248]	@ (80082ac <tcp_pcb_remove+0x10c>)
 80081b2:	f640 0283 	movw	r2, #2179	@ 0x883
 80081b6:	493e      	ldr	r1, [pc, #248]	@ (80082b0 <tcp_pcb_remove+0x110>)
 80081b8:	483e      	ldr	r0, [pc, #248]	@ (80082b4 <tcp_pcb_remove+0x114>)
 80081ba:	f006 fdad 	bl	800ed18 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d106      	bne.n	80081d2 <tcp_pcb_remove+0x32>
 80081c4:	4b39      	ldr	r3, [pc, #228]	@ (80082ac <tcp_pcb_remove+0x10c>)
 80081c6:	f640 0284 	movw	r2, #2180	@ 0x884
 80081ca:	493b      	ldr	r1, [pc, #236]	@ (80082b8 <tcp_pcb_remove+0x118>)
 80081cc:	4839      	ldr	r0, [pc, #228]	@ (80082b4 <tcp_pcb_remove+0x114>)
 80081ce:	f006 fda3 	bl	800ed18 <iprintf>

  TCP_RMV(pcblist, pcb);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d105      	bne.n	80081e8 <tcp_pcb_remove+0x48>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e013      	b.n	8008210 <tcp_pcb_remove+0x70>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	e00c      	b.n	800820a <tcp_pcb_remove+0x6a>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d104      	bne.n	8008204 <tcp_pcb_remove+0x64>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	60da      	str	r2, [r3, #12]
 8008202:	e005      	b.n	8008210 <tcp_pcb_remove+0x70>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1ef      	bne.n	80081f0 <tcp_pcb_remove+0x50>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2200      	movs	r2, #0
 8008214:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008216:	6838      	ldr	r0, [r7, #0]
 8008218:	f7ff ff72 	bl	8008100 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	7d1b      	ldrb	r3, [r3, #20]
 8008220:	2b0a      	cmp	r3, #10
 8008222:	d013      	beq.n	800824c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008228:	2b01      	cmp	r3, #1
 800822a:	d00f      	beq.n	800824c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	8b5b      	ldrh	r3, [r3, #26]
 8008230:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008234:	2b00      	cmp	r3, #0
 8008236:	d009      	beq.n	800824c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	8b5b      	ldrh	r3, [r3, #26]
 800823c:	f043 0302 	orr.w	r3, r3, #2
 8008240:	b29a      	uxth	r2, r3
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008246:	6838      	ldr	r0, [r7, #0]
 8008248:	f002 ff68 	bl	800b11c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	7d1b      	ldrb	r3, [r3, #20]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d020      	beq.n	8008296 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d006      	beq.n	800826a <tcp_pcb_remove+0xca>
 800825c:	4b13      	ldr	r3, [pc, #76]	@ (80082ac <tcp_pcb_remove+0x10c>)
 800825e:	f640 0293 	movw	r2, #2195	@ 0x893
 8008262:	4916      	ldr	r1, [pc, #88]	@ (80082bc <tcp_pcb_remove+0x11c>)
 8008264:	4813      	ldr	r0, [pc, #76]	@ (80082b4 <tcp_pcb_remove+0x114>)
 8008266:	f006 fd57 	bl	800ed18 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800826e:	2b00      	cmp	r3, #0
 8008270:	d006      	beq.n	8008280 <tcp_pcb_remove+0xe0>
 8008272:	4b0e      	ldr	r3, [pc, #56]	@ (80082ac <tcp_pcb_remove+0x10c>)
 8008274:	f640 0294 	movw	r2, #2196	@ 0x894
 8008278:	4911      	ldr	r1, [pc, #68]	@ (80082c0 <tcp_pcb_remove+0x120>)
 800827a:	480e      	ldr	r0, [pc, #56]	@ (80082b4 <tcp_pcb_remove+0x114>)
 800827c:	f006 fd4c 	bl	800ed18 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008284:	2b00      	cmp	r3, #0
 8008286:	d006      	beq.n	8008296 <tcp_pcb_remove+0xf6>
 8008288:	4b08      	ldr	r3, [pc, #32]	@ (80082ac <tcp_pcb_remove+0x10c>)
 800828a:	f640 0296 	movw	r2, #2198	@ 0x896
 800828e:	490d      	ldr	r1, [pc, #52]	@ (80082c4 <tcp_pcb_remove+0x124>)
 8008290:	4808      	ldr	r0, [pc, #32]	@ (80082b4 <tcp_pcb_remove+0x114>)
 8008292:	f006 fd41 	bl	800ed18 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2200      	movs	r2, #0
 800829a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2200      	movs	r2, #0
 80082a0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80082a2:	bf00      	nop
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	08010610 	.word	0x08010610
 80082b0:	08010c78 	.word	0x08010c78
 80082b4:	08010654 	.word	0x08010654
 80082b8:	08010c94 	.word	0x08010c94
 80082bc:	08010cb4 	.word	0x08010cb4
 80082c0:	08010ccc 	.word	0x08010ccc
 80082c4:	08010ce8 	.word	0x08010ce8

080082c8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <tcp_next_iss+0x1c>
 80082d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008300 <tcp_next_iss+0x38>)
 80082d8:	f640 02af 	movw	r2, #2223	@ 0x8af
 80082dc:	4909      	ldr	r1, [pc, #36]	@ (8008304 <tcp_next_iss+0x3c>)
 80082de:	480a      	ldr	r0, [pc, #40]	@ (8008308 <tcp_next_iss+0x40>)
 80082e0:	f006 fd1a 	bl	800ed18 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80082e4:	4b09      	ldr	r3, [pc, #36]	@ (800830c <tcp_next_iss+0x44>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	4b09      	ldr	r3, [pc, #36]	@ (8008310 <tcp_next_iss+0x48>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4413      	add	r3, r2
 80082ee:	4a07      	ldr	r2, [pc, #28]	@ (800830c <tcp_next_iss+0x44>)
 80082f0:	6013      	str	r3, [r2, #0]
  return iss;
 80082f2:	4b06      	ldr	r3, [pc, #24]	@ (800830c <tcp_next_iss+0x44>)
 80082f4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	08010610 	.word	0x08010610
 8008304:	08010d00 	.word	0x08010d00
 8008308:	08010654 	.word	0x08010654
 800830c:	20000024 	.word	0x20000024
 8008310:	20007c70 	.word	0x20007c70

08008314 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d106      	bne.n	8008336 <tcp_eff_send_mss_netif+0x22>
 8008328:	4b14      	ldr	r3, [pc, #80]	@ (800837c <tcp_eff_send_mss_netif+0x68>)
 800832a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800832e:	4914      	ldr	r1, [pc, #80]	@ (8008380 <tcp_eff_send_mss_netif+0x6c>)
 8008330:	4814      	ldr	r0, [pc, #80]	@ (8008384 <tcp_eff_send_mss_netif+0x70>)
 8008332:	f006 fcf1 	bl	800ed18 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800833c:	89fb      	ldrh	r3, [r7, #14]
 800833e:	e019      	b.n	8008374 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008344:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008346:	8afb      	ldrh	r3, [r7, #22]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d012      	beq.n	8008372 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800834c:	2328      	movs	r3, #40	@ 0x28
 800834e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008350:	8afa      	ldrh	r2, [r7, #22]
 8008352:	8abb      	ldrh	r3, [r7, #20]
 8008354:	429a      	cmp	r2, r3
 8008356:	d904      	bls.n	8008362 <tcp_eff_send_mss_netif+0x4e>
 8008358:	8afa      	ldrh	r2, [r7, #22]
 800835a:	8abb      	ldrh	r3, [r7, #20]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	b29b      	uxth	r3, r3
 8008360:	e000      	b.n	8008364 <tcp_eff_send_mss_netif+0x50>
 8008362:	2300      	movs	r3, #0
 8008364:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008366:	8a7a      	ldrh	r2, [r7, #18]
 8008368:	89fb      	ldrh	r3, [r7, #14]
 800836a:	4293      	cmp	r3, r2
 800836c:	bf28      	it	cs
 800836e:	4613      	movcs	r3, r2
 8008370:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008372:	89fb      	ldrh	r3, [r7, #14]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3718      	adds	r7, #24
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	08010610 	.word	0x08010610
 8008380:	08010d1c 	.word	0x08010d1c
 8008384:	08010654 	.word	0x08010654

08008388 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d119      	bne.n	80083d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800839c:	4b10      	ldr	r3, [pc, #64]	@ (80083e0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800839e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80083a2:	4910      	ldr	r1, [pc, #64]	@ (80083e4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80083a4:	4810      	ldr	r0, [pc, #64]	@ (80083e8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80083a6:	f006 fcb7 	bl	800ed18 <iprintf>

  while (pcb != NULL) {
 80083aa:	e011      	b.n	80083d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d108      	bne.n	80083ca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f7fe ffc4 	bl	800734c <tcp_abort>
      pcb = next;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	e002      	b.n	80083d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1ea      	bne.n	80083ac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80083d6:	bf00      	nop
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	08010610 	.word	0x08010610
 80083e4:	08010d44 	.word	0x08010d44
 80083e8:	08010654 	.word	0x08010654

080083ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d02a      	beq.n	8008452 <tcp_netif_ip_addr_changed+0x66>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d026      	beq.n	8008452 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008404:	4b15      	ldr	r3, [pc, #84]	@ (800845c <tcp_netif_ip_addr_changed+0x70>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7ff ffbc 	bl	8008388 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008410:	4b13      	ldr	r3, [pc, #76]	@ (8008460 <tcp_netif_ip_addr_changed+0x74>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff ffb6 	bl	8008388 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d017      	beq.n	8008452 <tcp_netif_ip_addr_changed+0x66>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d013      	beq.n	8008452 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800842a:	4b0e      	ldr	r3, [pc, #56]	@ (8008464 <tcp_netif_ip_addr_changed+0x78>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	e00c      	b.n	800844c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	429a      	cmp	r2, r3
 800843c:	d103      	bne.n	8008446 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1ef      	bne.n	8008432 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008452:	bf00      	nop
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20007c7c 	.word	0x20007c7c
 8008460:	20007c74 	.word	0x20007c74
 8008464:	20007c78 	.word	0x20007c78

08008468 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008474:	2b00      	cmp	r3, #0
 8008476:	d007      	beq.n	8008488 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff fc3d 	bl	8007cfc <tcp_segs_free>
    pcb->ooseq = NULL;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008490:	b590      	push	{r4, r7, lr}
 8008492:	b08d      	sub	sp, #52	@ 0x34
 8008494:	af04      	add	r7, sp, #16
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d105      	bne.n	80084ac <tcp_input+0x1c>
 80084a0:	4b9b      	ldr	r3, [pc, #620]	@ (8008710 <tcp_input+0x280>)
 80084a2:	2283      	movs	r2, #131	@ 0x83
 80084a4:	499b      	ldr	r1, [pc, #620]	@ (8008714 <tcp_input+0x284>)
 80084a6:	489c      	ldr	r0, [pc, #624]	@ (8008718 <tcp_input+0x288>)
 80084a8:	f006 fc36 	bl	800ed18 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	4a9a      	ldr	r2, [pc, #616]	@ (800871c <tcp_input+0x28c>)
 80084b2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	895b      	ldrh	r3, [r3, #10]
 80084b8:	2b13      	cmp	r3, #19
 80084ba:	f240 83d1 	bls.w	8008c60 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80084be:	4b98      	ldr	r3, [pc, #608]	@ (8008720 <tcp_input+0x290>)
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	4a97      	ldr	r2, [pc, #604]	@ (8008720 <tcp_input+0x290>)
 80084c4:	6812      	ldr	r2, [r2, #0]
 80084c6:	4611      	mov	r1, r2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f005 fbcf 	bl	800dc6c <ip4_addr_isbroadcast_u32>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f040 83c7 	bne.w	8008c64 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80084d6:	4b92      	ldr	r3, [pc, #584]	@ (8008720 <tcp_input+0x290>)
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80084de:	2be0      	cmp	r3, #224	@ 0xe0
 80084e0:	f000 83c0 	beq.w	8008c64 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80084e4:	4b8d      	ldr	r3, [pc, #564]	@ (800871c <tcp_input+0x28c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	899b      	ldrh	r3, [r3, #12]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fc fe6b 	bl	80051c8 <lwip_htons>
 80084f2:	4603      	mov	r3, r0
 80084f4:	0b1b      	lsrs	r3, r3, #12
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80084fe:	7cbb      	ldrb	r3, [r7, #18]
 8008500:	2b13      	cmp	r3, #19
 8008502:	f240 83b1 	bls.w	8008c68 <tcp_input+0x7d8>
 8008506:	7cbb      	ldrb	r3, [r7, #18]
 8008508:	b29a      	uxth	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	891b      	ldrh	r3, [r3, #8]
 800850e:	429a      	cmp	r2, r3
 8008510:	f200 83aa 	bhi.w	8008c68 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008514:	7cbb      	ldrb	r3, [r7, #18]
 8008516:	b29b      	uxth	r3, r3
 8008518:	3b14      	subs	r3, #20
 800851a:	b29a      	uxth	r2, r3
 800851c:	4b81      	ldr	r3, [pc, #516]	@ (8008724 <tcp_input+0x294>)
 800851e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008520:	4b81      	ldr	r3, [pc, #516]	@ (8008728 <tcp_input+0x298>)
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	895a      	ldrh	r2, [r3, #10]
 800852a:	7cbb      	ldrb	r3, [r7, #18]
 800852c:	b29b      	uxth	r3, r3
 800852e:	429a      	cmp	r2, r3
 8008530:	d309      	bcc.n	8008546 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008532:	4b7c      	ldr	r3, [pc, #496]	@ (8008724 <tcp_input+0x294>)
 8008534:	881a      	ldrh	r2, [r3, #0]
 8008536:	4b7d      	ldr	r3, [pc, #500]	@ (800872c <tcp_input+0x29c>)
 8008538:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800853a:	7cbb      	ldrb	r3, [r7, #18]
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7fe f8f6 	bl	8006730 <pbuf_remove_header>
 8008544:	e04e      	b.n	80085e4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d105      	bne.n	800855a <tcp_input+0xca>
 800854e:	4b70      	ldr	r3, [pc, #448]	@ (8008710 <tcp_input+0x280>)
 8008550:	22c2      	movs	r2, #194	@ 0xc2
 8008552:	4977      	ldr	r1, [pc, #476]	@ (8008730 <tcp_input+0x2a0>)
 8008554:	4870      	ldr	r0, [pc, #448]	@ (8008718 <tcp_input+0x288>)
 8008556:	f006 fbdf 	bl	800ed18 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800855a:	2114      	movs	r1, #20
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7fe f8e7 	bl	8006730 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	895a      	ldrh	r2, [r3, #10]
 8008566:	4b71      	ldr	r3, [pc, #452]	@ (800872c <tcp_input+0x29c>)
 8008568:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800856a:	4b6e      	ldr	r3, [pc, #440]	@ (8008724 <tcp_input+0x294>)
 800856c:	881a      	ldrh	r2, [r3, #0]
 800856e:	4b6f      	ldr	r3, [pc, #444]	@ (800872c <tcp_input+0x29c>)
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008576:	4b6d      	ldr	r3, [pc, #436]	@ (800872c <tcp_input+0x29c>)
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7fe f8d7 	bl	8006730 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	895b      	ldrh	r3, [r3, #10]
 8008588:	8a3a      	ldrh	r2, [r7, #16]
 800858a:	429a      	cmp	r2, r3
 800858c:	f200 836e 	bhi.w	8008c6c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	4a64      	ldr	r2, [pc, #400]	@ (8008728 <tcp_input+0x298>)
 8008598:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	8a3a      	ldrh	r2, [r7, #16]
 80085a0:	4611      	mov	r1, r2
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe f8c4 	bl	8006730 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	891a      	ldrh	r2, [r3, #8]
 80085ac:	8a3b      	ldrh	r3, [r7, #16]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	895b      	ldrh	r3, [r3, #10]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d005      	beq.n	80085ca <tcp_input+0x13a>
 80085be:	4b54      	ldr	r3, [pc, #336]	@ (8008710 <tcp_input+0x280>)
 80085c0:	22df      	movs	r2, #223	@ 0xdf
 80085c2:	495c      	ldr	r1, [pc, #368]	@ (8008734 <tcp_input+0x2a4>)
 80085c4:	4854      	ldr	r0, [pc, #336]	@ (8008718 <tcp_input+0x288>)
 80085c6:	f006 fba7 	bl	800ed18 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	891a      	ldrh	r2, [r3, #8]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	891b      	ldrh	r3, [r3, #8]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d005      	beq.n	80085e4 <tcp_input+0x154>
 80085d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008710 <tcp_input+0x280>)
 80085da:	22e0      	movs	r2, #224	@ 0xe0
 80085dc:	4956      	ldr	r1, [pc, #344]	@ (8008738 <tcp_input+0x2a8>)
 80085de:	484e      	ldr	r0, [pc, #312]	@ (8008718 <tcp_input+0x288>)
 80085e0:	f006 fb9a 	bl	800ed18 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80085e4:	4b4d      	ldr	r3, [pc, #308]	@ (800871c <tcp_input+0x28c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	4a4b      	ldr	r2, [pc, #300]	@ (800871c <tcp_input+0x28c>)
 80085ee:	6814      	ldr	r4, [r2, #0]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fc fde9 	bl	80051c8 <lwip_htons>
 80085f6:	4603      	mov	r3, r0
 80085f8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80085fa:	4b48      	ldr	r3, [pc, #288]	@ (800871c <tcp_input+0x28c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	885b      	ldrh	r3, [r3, #2]
 8008600:	b29b      	uxth	r3, r3
 8008602:	4a46      	ldr	r2, [pc, #280]	@ (800871c <tcp_input+0x28c>)
 8008604:	6814      	ldr	r4, [r2, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f7fc fdde 	bl	80051c8 <lwip_htons>
 800860c:	4603      	mov	r3, r0
 800860e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008610:	4b42      	ldr	r3, [pc, #264]	@ (800871c <tcp_input+0x28c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	4a41      	ldr	r2, [pc, #260]	@ (800871c <tcp_input+0x28c>)
 8008618:	6814      	ldr	r4, [r2, #0]
 800861a:	4618      	mov	r0, r3
 800861c:	f7fc fde9 	bl	80051f2 <lwip_htonl>
 8008620:	4603      	mov	r3, r0
 8008622:	6063      	str	r3, [r4, #4]
 8008624:	6863      	ldr	r3, [r4, #4]
 8008626:	4a45      	ldr	r2, [pc, #276]	@ (800873c <tcp_input+0x2ac>)
 8008628:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800862a:	4b3c      	ldr	r3, [pc, #240]	@ (800871c <tcp_input+0x28c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	4a3a      	ldr	r2, [pc, #232]	@ (800871c <tcp_input+0x28c>)
 8008632:	6814      	ldr	r4, [r2, #0]
 8008634:	4618      	mov	r0, r3
 8008636:	f7fc fddc 	bl	80051f2 <lwip_htonl>
 800863a:	4603      	mov	r3, r0
 800863c:	60a3      	str	r3, [r4, #8]
 800863e:	68a3      	ldr	r3, [r4, #8]
 8008640:	4a3f      	ldr	r2, [pc, #252]	@ (8008740 <tcp_input+0x2b0>)
 8008642:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008644:	4b35      	ldr	r3, [pc, #212]	@ (800871c <tcp_input+0x28c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	89db      	ldrh	r3, [r3, #14]
 800864a:	b29b      	uxth	r3, r3
 800864c:	4a33      	ldr	r2, [pc, #204]	@ (800871c <tcp_input+0x28c>)
 800864e:	6814      	ldr	r4, [r2, #0]
 8008650:	4618      	mov	r0, r3
 8008652:	f7fc fdb9 	bl	80051c8 <lwip_htons>
 8008656:	4603      	mov	r3, r0
 8008658:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800865a:	4b30      	ldr	r3, [pc, #192]	@ (800871c <tcp_input+0x28c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	899b      	ldrh	r3, [r3, #12]
 8008660:	b29b      	uxth	r3, r3
 8008662:	4618      	mov	r0, r3
 8008664:	f7fc fdb0 	bl	80051c8 <lwip_htons>
 8008668:	4603      	mov	r3, r0
 800866a:	b2db      	uxtb	r3, r3
 800866c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008670:	b2da      	uxtb	r2, r3
 8008672:	4b34      	ldr	r3, [pc, #208]	@ (8008744 <tcp_input+0x2b4>)
 8008674:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	891a      	ldrh	r2, [r3, #8]
 800867a:	4b33      	ldr	r3, [pc, #204]	@ (8008748 <tcp_input+0x2b8>)
 800867c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800867e:	4b31      	ldr	r3, [pc, #196]	@ (8008744 <tcp_input+0x2b4>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00c      	beq.n	80086a4 <tcp_input+0x214>
    tcplen++;
 800868a:	4b2f      	ldr	r3, [pc, #188]	@ (8008748 <tcp_input+0x2b8>)
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	3301      	adds	r3, #1
 8008690:	b29a      	uxth	r2, r3
 8008692:	4b2d      	ldr	r3, [pc, #180]	@ (8008748 <tcp_input+0x2b8>)
 8008694:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	891a      	ldrh	r2, [r3, #8]
 800869a:	4b2b      	ldr	r3, [pc, #172]	@ (8008748 <tcp_input+0x2b8>)
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	429a      	cmp	r2, r3
 80086a0:	f200 82e6 	bhi.w	8008c70 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80086a4:	2300      	movs	r3, #0
 80086a6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086a8:	4b28      	ldr	r3, [pc, #160]	@ (800874c <tcp_input+0x2bc>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	61fb      	str	r3, [r7, #28]
 80086ae:	e09d      	b.n	80087ec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	7d1b      	ldrb	r3, [r3, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d105      	bne.n	80086c4 <tcp_input+0x234>
 80086b8:	4b15      	ldr	r3, [pc, #84]	@ (8008710 <tcp_input+0x280>)
 80086ba:	22fb      	movs	r2, #251	@ 0xfb
 80086bc:	4924      	ldr	r1, [pc, #144]	@ (8008750 <tcp_input+0x2c0>)
 80086be:	4816      	ldr	r0, [pc, #88]	@ (8008718 <tcp_input+0x288>)
 80086c0:	f006 fb2a 	bl	800ed18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	7d1b      	ldrb	r3, [r3, #20]
 80086c8:	2b0a      	cmp	r3, #10
 80086ca:	d105      	bne.n	80086d8 <tcp_input+0x248>
 80086cc:	4b10      	ldr	r3, [pc, #64]	@ (8008710 <tcp_input+0x280>)
 80086ce:	22fc      	movs	r2, #252	@ 0xfc
 80086d0:	4920      	ldr	r1, [pc, #128]	@ (8008754 <tcp_input+0x2c4>)
 80086d2:	4811      	ldr	r0, [pc, #68]	@ (8008718 <tcp_input+0x288>)
 80086d4:	f006 fb20 	bl	800ed18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	7d1b      	ldrb	r3, [r3, #20]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d105      	bne.n	80086ec <tcp_input+0x25c>
 80086e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008710 <tcp_input+0x280>)
 80086e2:	22fd      	movs	r2, #253	@ 0xfd
 80086e4:	491c      	ldr	r1, [pc, #112]	@ (8008758 <tcp_input+0x2c8>)
 80086e6:	480c      	ldr	r0, [pc, #48]	@ (8008718 <tcp_input+0x288>)
 80086e8:	f006 fb16 	bl	800ed18 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	7a1b      	ldrb	r3, [r3, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d033      	beq.n	800875c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	7a1a      	ldrb	r2, [r3, #8]
 80086f8:	4b09      	ldr	r3, [pc, #36]	@ (8008720 <tcp_input+0x290>)
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008700:	3301      	adds	r3, #1
 8008702:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008704:	429a      	cmp	r2, r3
 8008706:	d029      	beq.n	800875c <tcp_input+0x2cc>
      prev = pcb;
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	61bb      	str	r3, [r7, #24]
      continue;
 800870c:	e06b      	b.n	80087e6 <tcp_input+0x356>
 800870e:	bf00      	nop
 8008710:	08010d78 	.word	0x08010d78
 8008714:	08010dac 	.word	0x08010dac
 8008718:	08010dc4 	.word	0x08010dc4
 800871c:	20007c98 	.word	0x20007c98
 8008720:	20004d54 	.word	0x20004d54
 8008724:	20007c9c 	.word	0x20007c9c
 8008728:	20007ca0 	.word	0x20007ca0
 800872c:	20007c9e 	.word	0x20007c9e
 8008730:	08010dec 	.word	0x08010dec
 8008734:	08010dfc 	.word	0x08010dfc
 8008738:	08010e08 	.word	0x08010e08
 800873c:	20007ca8 	.word	0x20007ca8
 8008740:	20007cac 	.word	0x20007cac
 8008744:	20007cb4 	.word	0x20007cb4
 8008748:	20007cb2 	.word	0x20007cb2
 800874c:	20007c7c 	.word	0x20007c7c
 8008750:	08010e28 	.word	0x08010e28
 8008754:	08010e50 	.word	0x08010e50
 8008758:	08010e7c 	.word	0x08010e7c
    }

    if (pcb->remote_port == tcphdr->src &&
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	8b1a      	ldrh	r2, [r3, #24]
 8008760:	4b72      	ldr	r3, [pc, #456]	@ (800892c <tcp_input+0x49c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	429a      	cmp	r2, r3
 800876a:	d13a      	bne.n	80087e2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	8ada      	ldrh	r2, [r3, #22]
 8008770:	4b6e      	ldr	r3, [pc, #440]	@ (800892c <tcp_input+0x49c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	885b      	ldrh	r3, [r3, #2]
 8008776:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008778:	429a      	cmp	r2, r3
 800877a:	d132      	bne.n	80087e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	4b6b      	ldr	r3, [pc, #428]	@ (8008930 <tcp_input+0x4a0>)
 8008782:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008784:	429a      	cmp	r2, r3
 8008786:	d12c      	bne.n	80087e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	4b68      	ldr	r3, [pc, #416]	@ (8008930 <tcp_input+0x4a0>)
 800878e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008790:	429a      	cmp	r2, r3
 8008792:	d126      	bne.n	80087e2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	69fa      	ldr	r2, [r7, #28]
 800879a:	429a      	cmp	r2, r3
 800879c:	d106      	bne.n	80087ac <tcp_input+0x31c>
 800879e:	4b65      	ldr	r3, [pc, #404]	@ (8008934 <tcp_input+0x4a4>)
 80087a0:	f240 120d 	movw	r2, #269	@ 0x10d
 80087a4:	4964      	ldr	r1, [pc, #400]	@ (8008938 <tcp_input+0x4a8>)
 80087a6:	4865      	ldr	r0, [pc, #404]	@ (800893c <tcp_input+0x4ac>)
 80087a8:	f006 fab6 	bl	800ed18 <iprintf>
      if (prev != NULL) {
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00a      	beq.n	80087c8 <tcp_input+0x338>
        prev->next = pcb->next;
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80087ba:	4b61      	ldr	r3, [pc, #388]	@ (8008940 <tcp_input+0x4b0>)
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80087c2:	4a5f      	ldr	r2, [pc, #380]	@ (8008940 <tcp_input+0x4b0>)
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	69fa      	ldr	r2, [r7, #28]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d111      	bne.n	80087f6 <tcp_input+0x366>
 80087d2:	4b58      	ldr	r3, [pc, #352]	@ (8008934 <tcp_input+0x4a4>)
 80087d4:	f240 1215 	movw	r2, #277	@ 0x115
 80087d8:	495a      	ldr	r1, [pc, #360]	@ (8008944 <tcp_input+0x4b4>)
 80087da:	4858      	ldr	r0, [pc, #352]	@ (800893c <tcp_input+0x4ac>)
 80087dc:	f006 fa9c 	bl	800ed18 <iprintf>
      break;
 80087e0:	e009      	b.n	80087f6 <tcp_input+0x366>
    }
    prev = pcb;
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f47f af5e 	bne.w	80086b0 <tcp_input+0x220>
 80087f4:	e000      	b.n	80087f8 <tcp_input+0x368>
      break;
 80087f6:	bf00      	nop
  }

  if (pcb == NULL) {
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f040 80aa 	bne.w	8008954 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008800:	4b51      	ldr	r3, [pc, #324]	@ (8008948 <tcp_input+0x4b8>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	61fb      	str	r3, [r7, #28]
 8008806:	e03f      	b.n	8008888 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	7d1b      	ldrb	r3, [r3, #20]
 800880c:	2b0a      	cmp	r3, #10
 800880e:	d006      	beq.n	800881e <tcp_input+0x38e>
 8008810:	4b48      	ldr	r3, [pc, #288]	@ (8008934 <tcp_input+0x4a4>)
 8008812:	f240 121f 	movw	r2, #287	@ 0x11f
 8008816:	494d      	ldr	r1, [pc, #308]	@ (800894c <tcp_input+0x4bc>)
 8008818:	4848      	ldr	r0, [pc, #288]	@ (800893c <tcp_input+0x4ac>)
 800881a:	f006 fa7d 	bl	800ed18 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	7a1b      	ldrb	r3, [r3, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d009      	beq.n	800883a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	7a1a      	ldrb	r2, [r3, #8]
 800882a:	4b41      	ldr	r3, [pc, #260]	@ (8008930 <tcp_input+0x4a0>)
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008832:	3301      	adds	r3, #1
 8008834:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008836:	429a      	cmp	r2, r3
 8008838:	d122      	bne.n	8008880 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	8b1a      	ldrh	r2, [r3, #24]
 800883e:	4b3b      	ldr	r3, [pc, #236]	@ (800892c <tcp_input+0x49c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	429a      	cmp	r2, r3
 8008848:	d11b      	bne.n	8008882 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	8ada      	ldrh	r2, [r3, #22]
 800884e:	4b37      	ldr	r3, [pc, #220]	@ (800892c <tcp_input+0x49c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	885b      	ldrh	r3, [r3, #2]
 8008854:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008856:	429a      	cmp	r2, r3
 8008858:	d113      	bne.n	8008882 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	4b34      	ldr	r3, [pc, #208]	@ (8008930 <tcp_input+0x4a0>)
 8008860:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008862:	429a      	cmp	r2, r3
 8008864:	d10d      	bne.n	8008882 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	4b31      	ldr	r3, [pc, #196]	@ (8008930 <tcp_input+0x4a0>)
 800886c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800886e:	429a      	cmp	r2, r3
 8008870:	d107      	bne.n	8008882 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008872:	69f8      	ldr	r0, [r7, #28]
 8008874:	f000 fb56 	bl	8008f24 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7fd ffdf 	bl	800683c <pbuf_free>
        return;
 800887e:	e1fd      	b.n	8008c7c <tcp_input+0x7ec>
        continue;
 8008880:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	61fb      	str	r3, [r7, #28]
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1bc      	bne.n	8008808 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800888e:	2300      	movs	r3, #0
 8008890:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008892:	4b2f      	ldr	r3, [pc, #188]	@ (8008950 <tcp_input+0x4c0>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	617b      	str	r3, [r7, #20]
 8008898:	e02a      	b.n	80088f0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	7a1b      	ldrb	r3, [r3, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00c      	beq.n	80088bc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	7a1a      	ldrb	r2, [r3, #8]
 80088a6:	4b22      	ldr	r3, [pc, #136]	@ (8008930 <tcp_input+0x4a0>)
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80088ae:	3301      	adds	r3, #1
 80088b0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d002      	beq.n	80088bc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	61bb      	str	r3, [r7, #24]
        continue;
 80088ba:	e016      	b.n	80088ea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	8ada      	ldrh	r2, [r3, #22]
 80088c0:	4b1a      	ldr	r3, [pc, #104]	@ (800892c <tcp_input+0x49c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	885b      	ldrh	r3, [r3, #2]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d10c      	bne.n	80088e6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b17      	ldr	r3, [pc, #92]	@ (8008930 <tcp_input+0x4a0>)
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d00f      	beq.n	80088f8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00d      	beq.n	80088fa <tcp_input+0x46a>
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d009      	beq.n	80088fa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	617b      	str	r3, [r7, #20]
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1d1      	bne.n	800889a <tcp_input+0x40a>
 80088f6:	e000      	b.n	80088fa <tcp_input+0x46a>
            break;
 80088f8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d029      	beq.n	8008954 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800890e:	4b10      	ldr	r3, [pc, #64]	@ (8008950 <tcp_input+0x4c0>)
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008916:	4a0e      	ldr	r2, [pc, #56]	@ (8008950 <tcp_input+0x4c0>)
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800891c:	6978      	ldr	r0, [r7, #20]
 800891e:	f000 fa03 	bl	8008d28 <tcp_listen_input>
      }
      pbuf_free(p);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7fd ff8a 	bl	800683c <pbuf_free>
      return;
 8008928:	e1a8      	b.n	8008c7c <tcp_input+0x7ec>
 800892a:	bf00      	nop
 800892c:	20007c98 	.word	0x20007c98
 8008930:	20004d54 	.word	0x20004d54
 8008934:	08010d78 	.word	0x08010d78
 8008938:	08010ea4 	.word	0x08010ea4
 800893c:	08010dc4 	.word	0x08010dc4
 8008940:	20007c7c 	.word	0x20007c7c
 8008944:	08010ed0 	.word	0x08010ed0
 8008948:	20007c80 	.word	0x20007c80
 800894c:	08010efc 	.word	0x08010efc
 8008950:	20007c78 	.word	0x20007c78
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 8158 	beq.w	8008c0c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800895c:	4b95      	ldr	r3, [pc, #596]	@ (8008bb4 <tcp_input+0x724>)
 800895e:	2200      	movs	r2, #0
 8008960:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	891a      	ldrh	r2, [r3, #8]
 8008966:	4b93      	ldr	r3, [pc, #588]	@ (8008bb4 <tcp_input+0x724>)
 8008968:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800896a:	4a92      	ldr	r2, [pc, #584]	@ (8008bb4 <tcp_input+0x724>)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008970:	4b91      	ldr	r3, [pc, #580]	@ (8008bb8 <tcp_input+0x728>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a8f      	ldr	r2, [pc, #572]	@ (8008bb4 <tcp_input+0x724>)
 8008976:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008978:	4b90      	ldr	r3, [pc, #576]	@ (8008bbc <tcp_input+0x72c>)
 800897a:	2200      	movs	r2, #0
 800897c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800897e:	4b90      	ldr	r3, [pc, #576]	@ (8008bc0 <tcp_input+0x730>)
 8008980:	2200      	movs	r2, #0
 8008982:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008984:	4b8f      	ldr	r3, [pc, #572]	@ (8008bc4 <tcp_input+0x734>)
 8008986:	2200      	movs	r2, #0
 8008988:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800898a:	4b8f      	ldr	r3, [pc, #572]	@ (8008bc8 <tcp_input+0x738>)
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	f003 0308 	and.w	r3, r3, #8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d006      	beq.n	80089a4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	7b5b      	ldrb	r3, [r3, #13]
 800899a:	f043 0301 	orr.w	r3, r3, #1
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d017      	beq.n	80089dc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80089ac:	69f8      	ldr	r0, [r7, #28]
 80089ae:	f7ff f929 	bl	8007c04 <tcp_process_refused_data>
 80089b2:	4603      	mov	r3, r0
 80089b4:	f113 0f0d 	cmn.w	r3, #13
 80089b8:	d007      	beq.n	80089ca <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00c      	beq.n	80089dc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80089c2:	4b82      	ldr	r3, [pc, #520]	@ (8008bcc <tcp_input+0x73c>)
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d008      	beq.n	80089dc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f040 80e3 	bne.w	8008b9a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80089d4:	69f8      	ldr	r0, [r7, #28]
 80089d6:	f003 f9a7 	bl	800bd28 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80089da:	e0de      	b.n	8008b9a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80089dc:	4a7c      	ldr	r2, [pc, #496]	@ (8008bd0 <tcp_input+0x740>)
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80089e2:	69f8      	ldr	r0, [r7, #28]
 80089e4:	f000 fb18 	bl	8009018 <tcp_process>
 80089e8:	4603      	mov	r3, r0
 80089ea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80089ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089f0:	f113 0f0d 	cmn.w	r3, #13
 80089f4:	f000 80d3 	beq.w	8008b9e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80089f8:	4b71      	ldr	r3, [pc, #452]	@ (8008bc0 <tcp_input+0x730>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	f003 0308 	and.w	r3, r3, #8
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d015      	beq.n	8008a30 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d008      	beq.n	8008a20 <tcp_input+0x590>
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a14:	69fa      	ldr	r2, [r7, #28]
 8008a16:	6912      	ldr	r2, [r2, #16]
 8008a18:	f06f 010d 	mvn.w	r1, #13
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008a20:	69f9      	ldr	r1, [r7, #28]
 8008a22:	486c      	ldr	r0, [pc, #432]	@ (8008bd4 <tcp_input+0x744>)
 8008a24:	f7ff fbbc 	bl	80081a0 <tcp_pcb_remove>
        tcp_free(pcb);
 8008a28:	69f8      	ldr	r0, [r7, #28]
 8008a2a:	f7fe f9a7 	bl	8006d7c <tcp_free>
 8008a2e:	e0da      	b.n	8008be6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008a34:	4b63      	ldr	r3, [pc, #396]	@ (8008bc4 <tcp_input+0x734>)
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d01d      	beq.n	8008a78 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008a3c:	4b61      	ldr	r3, [pc, #388]	@ (8008bc4 <tcp_input+0x734>)
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00a      	beq.n	8008a62 <tcp_input+0x5d2>
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	6910      	ldr	r0, [r2, #16]
 8008a56:	89fa      	ldrh	r2, [r7, #14]
 8008a58:	69f9      	ldr	r1, [r7, #28]
 8008a5a:	4798      	blx	r3
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	74fb      	strb	r3, [r7, #19]
 8008a60:	e001      	b.n	8008a66 <tcp_input+0x5d6>
 8008a62:	2300      	movs	r3, #0
 8008a64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008a66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a6a:	f113 0f0d 	cmn.w	r3, #13
 8008a6e:	f000 8098 	beq.w	8008ba2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008a72:	4b54      	ldr	r3, [pc, #336]	@ (8008bc4 <tcp_input+0x734>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008a78:	69f8      	ldr	r0, [r7, #28]
 8008a7a:	f000 f915 	bl	8008ca8 <tcp_input_delayed_close>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f040 8090 	bne.w	8008ba6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008a86:	4b4d      	ldr	r3, [pc, #308]	@ (8008bbc <tcp_input+0x72c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d041      	beq.n	8008b12 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d006      	beq.n	8008aa4 <tcp_input+0x614>
 8008a96:	4b50      	ldr	r3, [pc, #320]	@ (8008bd8 <tcp_input+0x748>)
 8008a98:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008a9c:	494f      	ldr	r1, [pc, #316]	@ (8008bdc <tcp_input+0x74c>)
 8008a9e:	4850      	ldr	r0, [pc, #320]	@ (8008be0 <tcp_input+0x750>)
 8008aa0:	f006 f93a 	bl	800ed18 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	8b5b      	ldrh	r3, [r3, #26]
 8008aa8:	f003 0310 	and.w	r3, r3, #16
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d008      	beq.n	8008ac2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008ab0:	4b42      	ldr	r3, [pc, #264]	@ (8008bbc <tcp_input+0x72c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fd fec1 	bl	800683c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008aba:	69f8      	ldr	r0, [r7, #28]
 8008abc:	f7fe fc46 	bl	800734c <tcp_abort>
            goto aborted;
 8008ac0:	e091      	b.n	8008be6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00c      	beq.n	8008ae6 <tcp_input+0x656>
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	6918      	ldr	r0, [r3, #16]
 8008ad6:	4b39      	ldr	r3, [pc, #228]	@ (8008bbc <tcp_input+0x72c>)
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	2300      	movs	r3, #0
 8008adc:	69f9      	ldr	r1, [r7, #28]
 8008ade:	47a0      	blx	r4
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	74fb      	strb	r3, [r7, #19]
 8008ae4:	e008      	b.n	8008af8 <tcp_input+0x668>
 8008ae6:	4b35      	ldr	r3, [pc, #212]	@ (8008bbc <tcp_input+0x72c>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	2300      	movs	r3, #0
 8008aec:	69f9      	ldr	r1, [r7, #28]
 8008aee:	2000      	movs	r0, #0
 8008af0:	f7ff f95e 	bl	8007db0 <tcp_recv_null>
 8008af4:	4603      	mov	r3, r0
 8008af6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008af8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008afc:	f113 0f0d 	cmn.w	r3, #13
 8008b00:	d053      	beq.n	8008baa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008b02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8008bbc <tcp_input+0x72c>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008b12:	4b2b      	ldr	r3, [pc, #172]	@ (8008bc0 <tcp_input+0x730>)
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	f003 0320 	and.w	r3, r3, #32
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d030      	beq.n	8008b80 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b2a:	7b5a      	ldrb	r2, [r3, #13]
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b30:	f042 0220 	orr.w	r2, r2, #32
 8008b34:	b2d2      	uxtb	r2, r2
 8008b36:	735a      	strb	r2, [r3, #13]
 8008b38:	e022      	b.n	8008b80 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b3e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008b42:	d005      	beq.n	8008b50 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b48:	3301      	adds	r3, #1
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00b      	beq.n	8008b72 <tcp_input+0x6e2>
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	6918      	ldr	r0, [r3, #16]
 8008b64:	2300      	movs	r3, #0
 8008b66:	2200      	movs	r2, #0
 8008b68:	69f9      	ldr	r1, [r7, #28]
 8008b6a:	47a0      	blx	r4
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	74fb      	strb	r3, [r7, #19]
 8008b70:	e001      	b.n	8008b76 <tcp_input+0x6e6>
 8008b72:	2300      	movs	r3, #0
 8008b74:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008b76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b7a:	f113 0f0d 	cmn.w	r3, #13
 8008b7e:	d016      	beq.n	8008bae <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008b80:	4b13      	ldr	r3, [pc, #76]	@ (8008bd0 <tcp_input+0x740>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008b86:	69f8      	ldr	r0, [r7, #28]
 8008b88:	f000 f88e 	bl	8008ca8 <tcp_input_delayed_close>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d128      	bne.n	8008be4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008b92:	69f8      	ldr	r0, [r7, #28]
 8008b94:	f002 fac2 	bl	800b11c <tcp_output>
 8008b98:	e025      	b.n	8008be6 <tcp_input+0x756>
        goto aborted;
 8008b9a:	bf00      	nop
 8008b9c:	e023      	b.n	8008be6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008b9e:	bf00      	nop
 8008ba0:	e021      	b.n	8008be6 <tcp_input+0x756>
              goto aborted;
 8008ba2:	bf00      	nop
 8008ba4:	e01f      	b.n	8008be6 <tcp_input+0x756>
          goto aborted;
 8008ba6:	bf00      	nop
 8008ba8:	e01d      	b.n	8008be6 <tcp_input+0x756>
            goto aborted;
 8008baa:	bf00      	nop
 8008bac:	e01b      	b.n	8008be6 <tcp_input+0x756>
              goto aborted;
 8008bae:	bf00      	nop
 8008bb0:	e019      	b.n	8008be6 <tcp_input+0x756>
 8008bb2:	bf00      	nop
 8008bb4:	20007c88 	.word	0x20007c88
 8008bb8:	20007c98 	.word	0x20007c98
 8008bbc:	20007cb8 	.word	0x20007cb8
 8008bc0:	20007cb5 	.word	0x20007cb5
 8008bc4:	20007cb0 	.word	0x20007cb0
 8008bc8:	20007cb4 	.word	0x20007cb4
 8008bcc:	20007cb2 	.word	0x20007cb2
 8008bd0:	20007cbc 	.word	0x20007cbc
 8008bd4:	20007c7c 	.word	0x20007c7c
 8008bd8:	08010d78 	.word	0x08010d78
 8008bdc:	08010f2c 	.word	0x08010f2c
 8008be0:	08010dc4 	.word	0x08010dc4
          goto aborted;
 8008be4:	bf00      	nop
    tcp_input_pcb = NULL;
 8008be6:	4b27      	ldr	r3, [pc, #156]	@ (8008c84 <tcp_input+0x7f4>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008bec:	4b26      	ldr	r3, [pc, #152]	@ (8008c88 <tcp_input+0x7f8>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008bf2:	4b26      	ldr	r3, [pc, #152]	@ (8008c8c <tcp_input+0x7fc>)
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d03f      	beq.n	8008c7a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008bfa:	4b24      	ldr	r3, [pc, #144]	@ (8008c8c <tcp_input+0x7fc>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fd fe1c 	bl	800683c <pbuf_free>
      inseg.p = NULL;
 8008c04:	4b21      	ldr	r3, [pc, #132]	@ (8008c8c <tcp_input+0x7fc>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008c0a:	e036      	b.n	8008c7a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008c0c:	4b20      	ldr	r3, [pc, #128]	@ (8008c90 <tcp_input+0x800>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	899b      	ldrh	r3, [r3, #12]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fc fad7 	bl	80051c8 <lwip_htons>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d118      	bne.n	8008c58 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c26:	4b1b      	ldr	r3, [pc, #108]	@ (8008c94 <tcp_input+0x804>)
 8008c28:	6819      	ldr	r1, [r3, #0]
 8008c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8008c98 <tcp_input+0x808>)
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	4b1a      	ldr	r3, [pc, #104]	@ (8008c9c <tcp_input+0x80c>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c36:	4b16      	ldr	r3, [pc, #88]	@ (8008c90 <tcp_input+0x800>)
 8008c38:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c3a:	885b      	ldrh	r3, [r3, #2]
 8008c3c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c3e:	4a14      	ldr	r2, [pc, #80]	@ (8008c90 <tcp_input+0x800>)
 8008c40:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c42:	8812      	ldrh	r2, [r2, #0]
 8008c44:	b292      	uxth	r2, r2
 8008c46:	9202      	str	r2, [sp, #8]
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	4b15      	ldr	r3, [pc, #84]	@ (8008ca0 <tcp_input+0x810>)
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	4b15      	ldr	r3, [pc, #84]	@ (8008ca4 <tcp_input+0x814>)
 8008c50:	4602      	mov	r2, r0
 8008c52:	2000      	movs	r0, #0
 8008c54:	f003 f816 	bl	800bc84 <tcp_rst>
    pbuf_free(p);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7fd fdef 	bl	800683c <pbuf_free>
  return;
 8008c5e:	e00c      	b.n	8008c7a <tcp_input+0x7ea>
    goto dropped;
 8008c60:	bf00      	nop
 8008c62:	e006      	b.n	8008c72 <tcp_input+0x7e2>
    goto dropped;
 8008c64:	bf00      	nop
 8008c66:	e004      	b.n	8008c72 <tcp_input+0x7e2>
    goto dropped;
 8008c68:	bf00      	nop
 8008c6a:	e002      	b.n	8008c72 <tcp_input+0x7e2>
      goto dropped;
 8008c6c:	bf00      	nop
 8008c6e:	e000      	b.n	8008c72 <tcp_input+0x7e2>
      goto dropped;
 8008c70:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7fd fde2 	bl	800683c <pbuf_free>
 8008c78:	e000      	b.n	8008c7c <tcp_input+0x7ec>
  return;
 8008c7a:	bf00      	nop
}
 8008c7c:	3724      	adds	r7, #36	@ 0x24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd90      	pop	{r4, r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20007cbc 	.word	0x20007cbc
 8008c88:	20007cb8 	.word	0x20007cb8
 8008c8c:	20007c88 	.word	0x20007c88
 8008c90:	20007c98 	.word	0x20007c98
 8008c94:	20007cac 	.word	0x20007cac
 8008c98:	20007cb2 	.word	0x20007cb2
 8008c9c:	20007ca8 	.word	0x20007ca8
 8008ca0:	20004d64 	.word	0x20004d64
 8008ca4:	20004d68 	.word	0x20004d68

08008ca8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d106      	bne.n	8008cc4 <tcp_input_delayed_close+0x1c>
 8008cb6:	4b17      	ldr	r3, [pc, #92]	@ (8008d14 <tcp_input_delayed_close+0x6c>)
 8008cb8:	f240 225a 	movw	r2, #602	@ 0x25a
 8008cbc:	4916      	ldr	r1, [pc, #88]	@ (8008d18 <tcp_input_delayed_close+0x70>)
 8008cbe:	4817      	ldr	r0, [pc, #92]	@ (8008d1c <tcp_input_delayed_close+0x74>)
 8008cc0:	f006 f82a 	bl	800ed18 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008cc4:	4b16      	ldr	r3, [pc, #88]	@ (8008d20 <tcp_input_delayed_close+0x78>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	f003 0310 	and.w	r3, r3, #16
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01c      	beq.n	8008d0a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8b5b      	ldrh	r3, [r3, #26]
 8008cd4:	f003 0310 	and.w	r3, r3, #16
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10d      	bne.n	8008cf8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d008      	beq.n	8008cf8 <tcp_input_delayed_close+0x50>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	6912      	ldr	r2, [r2, #16]
 8008cf0:	f06f 010e 	mvn.w	r1, #14
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008cf8:	6879      	ldr	r1, [r7, #4]
 8008cfa:	480a      	ldr	r0, [pc, #40]	@ (8008d24 <tcp_input_delayed_close+0x7c>)
 8008cfc:	f7ff fa50 	bl	80081a0 <tcp_pcb_remove>
    tcp_free(pcb);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7fe f83b 	bl	8006d7c <tcp_free>
    return 1;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	08010d78 	.word	0x08010d78
 8008d18:	08010f48 	.word	0x08010f48
 8008d1c:	08010dc4 	.word	0x08010dc4
 8008d20:	20007cb5 	.word	0x20007cb5
 8008d24:	20007c7c 	.word	0x20007c7c

08008d28 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008d28:	b590      	push	{r4, r7, lr}
 8008d2a:	b08b      	sub	sp, #44	@ 0x2c
 8008d2c:	af04      	add	r7, sp, #16
 8008d2e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008d30:	4b6f      	ldr	r3, [pc, #444]	@ (8008ef0 <tcp_listen_input+0x1c8>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	f003 0304 	and.w	r3, r3, #4
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f040 80d2 	bne.w	8008ee2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d106      	bne.n	8008d52 <tcp_listen_input+0x2a>
 8008d44:	4b6b      	ldr	r3, [pc, #428]	@ (8008ef4 <tcp_listen_input+0x1cc>)
 8008d46:	f240 2281 	movw	r2, #641	@ 0x281
 8008d4a:	496b      	ldr	r1, [pc, #428]	@ (8008ef8 <tcp_listen_input+0x1d0>)
 8008d4c:	486b      	ldr	r0, [pc, #428]	@ (8008efc <tcp_listen_input+0x1d4>)
 8008d4e:	f005 ffe3 	bl	800ed18 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008d52:	4b67      	ldr	r3, [pc, #412]	@ (8008ef0 <tcp_listen_input+0x1c8>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	f003 0310 	and.w	r3, r3, #16
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d019      	beq.n	8008d92 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d5e:	4b68      	ldr	r3, [pc, #416]	@ (8008f00 <tcp_listen_input+0x1d8>)
 8008d60:	6819      	ldr	r1, [r3, #0]
 8008d62:	4b68      	ldr	r3, [pc, #416]	@ (8008f04 <tcp_listen_input+0x1dc>)
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	4b67      	ldr	r3, [pc, #412]	@ (8008f08 <tcp_listen_input+0x1e0>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d6e:	4b67      	ldr	r3, [pc, #412]	@ (8008f0c <tcp_listen_input+0x1e4>)
 8008d70:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d72:	885b      	ldrh	r3, [r3, #2]
 8008d74:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d76:	4a65      	ldr	r2, [pc, #404]	@ (8008f0c <tcp_listen_input+0x1e4>)
 8008d78:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d7a:	8812      	ldrh	r2, [r2, #0]
 8008d7c:	b292      	uxth	r2, r2
 8008d7e:	9202      	str	r2, [sp, #8]
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	4b63      	ldr	r3, [pc, #396]	@ (8008f10 <tcp_listen_input+0x1e8>)
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	4b63      	ldr	r3, [pc, #396]	@ (8008f14 <tcp_listen_input+0x1ec>)
 8008d88:	4602      	mov	r2, r0
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f002 ff7a 	bl	800bc84 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008d90:	e0a9      	b.n	8008ee6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008d92:	4b57      	ldr	r3, [pc, #348]	@ (8008ef0 <tcp_listen_input+0x1c8>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 80a3 	beq.w	8008ee6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	7d5b      	ldrb	r3, [r3, #21]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff f927 	bl	8007ff8 <tcp_alloc>
 8008daa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d111      	bne.n	8008dd6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <tcp_listen_input+0xa8>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	6910      	ldr	r0, [r2, #16]
 8008dc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	4798      	blx	r3
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73bb      	strb	r3, [r7, #14]
      return;
 8008dce:	e08b      	b.n	8008ee8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008dd0:	23f0      	movs	r3, #240	@ 0xf0
 8008dd2:	73bb      	strb	r3, [r7, #14]
      return;
 8008dd4:	e088      	b.n	8008ee8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008dd6:	4b50      	ldr	r3, [pc, #320]	@ (8008f18 <tcp_listen_input+0x1f0>)
 8008dd8:	695a      	ldr	r2, [r3, #20]
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008dde:	4b4e      	ldr	r3, [pc, #312]	@ (8008f18 <tcp_listen_input+0x1f0>)
 8008de0:	691a      	ldr	r2, [r3, #16]
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	8ada      	ldrh	r2, [r3, #22]
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008dee:	4b47      	ldr	r3, [pc, #284]	@ (8008f0c <tcp_listen_input+0x1e4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2203      	movs	r2, #3
 8008dfe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008e00:	4b41      	ldr	r3, [pc, #260]	@ (8008f08 <tcp_listen_input+0x1e0>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	1c5a      	adds	r2, r3, #1
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8008e12:	6978      	ldr	r0, [r7, #20]
 8008e14:	f7ff fa58 	bl	80082c8 <tcp_next_iss>
 8008e18:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008e32:	4b35      	ldr	r3, [pc, #212]	@ (8008f08 <tcp_listen_input+0x1e0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	1e5a      	subs	r2, r3, #1
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	691a      	ldr	r2, [r3, #16]
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	7a5b      	ldrb	r3, [r3, #9]
 8008e4e:	f003 030c 	and.w	r3, r3, #12
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	7a1a      	ldrb	r2, [r3, #8]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008e60:	4b2e      	ldr	r3, [pc, #184]	@ (8008f1c <tcp_listen_input+0x1f4>)
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	60da      	str	r2, [r3, #12]
 8008e68:	4a2c      	ldr	r2, [pc, #176]	@ (8008f1c <tcp_listen_input+0x1f4>)
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	f003 f8cb 	bl	800c008 <tcp_timer_needed>
 8008e72:	4b2b      	ldr	r3, [pc, #172]	@ (8008f20 <tcp_listen_input+0x1f8>)
 8008e74:	2201      	movs	r2, #1
 8008e76:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008e78:	6978      	ldr	r0, [r7, #20]
 8008e7a:	f001 fd8b 	bl	800a994 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008e7e:	4b23      	ldr	r3, [pc, #140]	@ (8008f0c <tcp_listen_input+0x1e4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	89db      	ldrh	r3, [r3, #14]
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f004 fc4d 	bl	800d740 <ip4_route>
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	3304      	adds	r3, #4
 8008eac:	461a      	mov	r2, r3
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f7ff fa30 	bl	8008314 <tcp_eff_send_mss_netif>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008ebc:	2112      	movs	r1, #18
 8008ebe:	6978      	ldr	r0, [r7, #20]
 8008ec0:	f002 f83e 	bl	800af40 <tcp_enqueue_flags>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d004      	beq.n	8008eda <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	6978      	ldr	r0, [r7, #20]
 8008ed4:	f7fe f97c 	bl	80071d0 <tcp_abandon>
      return;
 8008ed8:	e006      	b.n	8008ee8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008eda:	6978      	ldr	r0, [r7, #20]
 8008edc:	f002 f91e 	bl	800b11c <tcp_output>
  return;
 8008ee0:	e001      	b.n	8008ee6 <tcp_listen_input+0x1be>
    return;
 8008ee2:	bf00      	nop
 8008ee4:	e000      	b.n	8008ee8 <tcp_listen_input+0x1c0>
  return;
 8008ee6:	bf00      	nop
}
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd90      	pop	{r4, r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20007cb4 	.word	0x20007cb4
 8008ef4:	08010d78 	.word	0x08010d78
 8008ef8:	08010f70 	.word	0x08010f70
 8008efc:	08010dc4 	.word	0x08010dc4
 8008f00:	20007cac 	.word	0x20007cac
 8008f04:	20007cb2 	.word	0x20007cb2
 8008f08:	20007ca8 	.word	0x20007ca8
 8008f0c:	20007c98 	.word	0x20007c98
 8008f10:	20004d64 	.word	0x20004d64
 8008f14:	20004d68 	.word	0x20004d68
 8008f18:	20004d54 	.word	0x20004d54
 8008f1c:	20007c7c 	.word	0x20007c7c
 8008f20:	20007c84 	.word	0x20007c84

08008f24 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af04      	add	r7, sp, #16
 8008f2a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8008fec <tcp_timewait_input+0xc8>)
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	f003 0304 	and.w	r3, r3, #4
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d153      	bne.n	8008fe0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d106      	bne.n	8008f4c <tcp_timewait_input+0x28>
 8008f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8008ff0 <tcp_timewait_input+0xcc>)
 8008f40:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8008f44:	492b      	ldr	r1, [pc, #172]	@ (8008ff4 <tcp_timewait_input+0xd0>)
 8008f46:	482c      	ldr	r0, [pc, #176]	@ (8008ff8 <tcp_timewait_input+0xd4>)
 8008f48:	f005 fee6 	bl	800ed18 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008f4c:	4b27      	ldr	r3, [pc, #156]	@ (8008fec <tcp_timewait_input+0xc8>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f003 0302 	and.w	r3, r3, #2
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d02a      	beq.n	8008fae <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008f58:	4b28      	ldr	r3, [pc, #160]	@ (8008ffc <tcp_timewait_input+0xd8>)
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	db2d      	blt.n	8008fc2 <tcp_timewait_input+0x9e>
 8008f66:	4b25      	ldr	r3, [pc, #148]	@ (8008ffc <tcp_timewait_input+0xd8>)
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008f72:	440b      	add	r3, r1
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	dc23      	bgt.n	8008fc2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f7a:	4b21      	ldr	r3, [pc, #132]	@ (8009000 <tcp_timewait_input+0xdc>)
 8008f7c:	6819      	ldr	r1, [r3, #0]
 8008f7e:	4b21      	ldr	r3, [pc, #132]	@ (8009004 <tcp_timewait_input+0xe0>)
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	4b1d      	ldr	r3, [pc, #116]	@ (8008ffc <tcp_timewait_input+0xd8>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8009008 <tcp_timewait_input+0xe4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f8e:	885b      	ldrh	r3, [r3, #2]
 8008f90:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f92:	4a1d      	ldr	r2, [pc, #116]	@ (8009008 <tcp_timewait_input+0xe4>)
 8008f94:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f96:	8812      	ldrh	r2, [r2, #0]
 8008f98:	b292      	uxth	r2, r2
 8008f9a:	9202      	str	r2, [sp, #8]
 8008f9c:	9301      	str	r3, [sp, #4]
 8008f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800900c <tcp_timewait_input+0xe8>)
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8009010 <tcp_timewait_input+0xec>)
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f002 fe6c 	bl	800bc84 <tcp_rst>
      return;
 8008fac:	e01b      	b.n	8008fe6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008fae:	4b0f      	ldr	r3, [pc, #60]	@ (8008fec <tcp_timewait_input+0xc8>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d003      	beq.n	8008fc2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008fba:	4b16      	ldr	r3, [pc, #88]	@ (8009014 <tcp_timewait_input+0xf0>)
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008fc2:	4b10      	ldr	r3, [pc, #64]	@ (8009004 <tcp_timewait_input+0xe0>)
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00c      	beq.n	8008fe4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	8b5b      	ldrh	r3, [r3, #26]
 8008fce:	f043 0302 	orr.w	r3, r3, #2
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f002 f89f 	bl	800b11c <tcp_output>
  }
  return;
 8008fde:	e001      	b.n	8008fe4 <tcp_timewait_input+0xc0>
    return;
 8008fe0:	bf00      	nop
 8008fe2:	e000      	b.n	8008fe6 <tcp_timewait_input+0xc2>
  return;
 8008fe4:	bf00      	nop
}
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	20007cb4 	.word	0x20007cb4
 8008ff0:	08010d78 	.word	0x08010d78
 8008ff4:	08010f90 	.word	0x08010f90
 8008ff8:	08010dc4 	.word	0x08010dc4
 8008ffc:	20007ca8 	.word	0x20007ca8
 8009000:	20007cac 	.word	0x20007cac
 8009004:	20007cb2 	.word	0x20007cb2
 8009008:	20007c98 	.word	0x20007c98
 800900c:	20004d64 	.word	0x20004d64
 8009010:	20004d68 	.word	0x20004d68
 8009014:	20007c70 	.word	0x20007c70

08009018 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009018:	b590      	push	{r4, r7, lr}
 800901a:	b08d      	sub	sp, #52	@ 0x34
 800901c:	af04      	add	r7, sp, #16
 800901e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d106      	bne.n	800903c <tcp_process+0x24>
 800902e:	4b9d      	ldr	r3, [pc, #628]	@ (80092a4 <tcp_process+0x28c>)
 8009030:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009034:	499c      	ldr	r1, [pc, #624]	@ (80092a8 <tcp_process+0x290>)
 8009036:	489d      	ldr	r0, [pc, #628]	@ (80092ac <tcp_process+0x294>)
 8009038:	f005 fe6e 	bl	800ed18 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800903c:	4b9c      	ldr	r3, [pc, #624]	@ (80092b0 <tcp_process+0x298>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b00      	cmp	r3, #0
 8009046:	d04e      	beq.n	80090e6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	7d1b      	ldrb	r3, [r3, #20]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d108      	bne.n	8009062 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009054:	4b97      	ldr	r3, [pc, #604]	@ (80092b4 <tcp_process+0x29c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	429a      	cmp	r2, r3
 800905a:	d123      	bne.n	80090a4 <tcp_process+0x8c>
        acceptable = 1;
 800905c:	2301      	movs	r3, #1
 800905e:	76fb      	strb	r3, [r7, #27]
 8009060:	e020      	b.n	80090a4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009066:	4b94      	ldr	r3, [pc, #592]	@ (80092b8 <tcp_process+0x2a0>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	429a      	cmp	r2, r3
 800906c:	d102      	bne.n	8009074 <tcp_process+0x5c>
        acceptable = 1;
 800906e:	2301      	movs	r3, #1
 8009070:	76fb      	strb	r3, [r7, #27]
 8009072:	e017      	b.n	80090a4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009074:	4b90      	ldr	r3, [pc, #576]	@ (80092b8 <tcp_process+0x2a0>)
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	2b00      	cmp	r3, #0
 8009080:	db10      	blt.n	80090a4 <tcp_process+0x8c>
 8009082:	4b8d      	ldr	r3, [pc, #564]	@ (80092b8 <tcp_process+0x2a0>)
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800908a:	6879      	ldr	r1, [r7, #4]
 800908c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800908e:	440b      	add	r3, r1
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	dc06      	bgt.n	80090a4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	8b5b      	ldrh	r3, [r3, #26]
 800909a:	f043 0302 	orr.w	r3, r3, #2
 800909e:	b29a      	uxth	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80090a4:	7efb      	ldrb	r3, [r7, #27]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d01b      	beq.n	80090e2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	7d1b      	ldrb	r3, [r3, #20]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d106      	bne.n	80090c0 <tcp_process+0xa8>
 80090b2:	4b7c      	ldr	r3, [pc, #496]	@ (80092a4 <tcp_process+0x28c>)
 80090b4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80090b8:	4980      	ldr	r1, [pc, #512]	@ (80092bc <tcp_process+0x2a4>)
 80090ba:	487c      	ldr	r0, [pc, #496]	@ (80092ac <tcp_process+0x294>)
 80090bc:	f005 fe2c 	bl	800ed18 <iprintf>
      recv_flags |= TF_RESET;
 80090c0:	4b7f      	ldr	r3, [pc, #508]	@ (80092c0 <tcp_process+0x2a8>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	f043 0308 	orr.w	r3, r3, #8
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	4b7d      	ldr	r3, [pc, #500]	@ (80092c0 <tcp_process+0x2a8>)
 80090cc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	8b5b      	ldrh	r3, [r3, #26]
 80090d2:	f023 0301 	bic.w	r3, r3, #1
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80090dc:	f06f 030d 	mvn.w	r3, #13
 80090e0:	e37a      	b.n	80097d8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	e378      	b.n	80097d8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80090e6:	4b72      	ldr	r3, [pc, #456]	@ (80092b0 <tcp_process+0x298>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d010      	beq.n	8009114 <tcp_process+0xfc>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	7d1b      	ldrb	r3, [r3, #20]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d00c      	beq.n	8009114 <tcp_process+0xfc>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	7d1b      	ldrb	r3, [r3, #20]
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d008      	beq.n	8009114 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	8b5b      	ldrh	r3, [r3, #26]
 8009106:	f043 0302 	orr.w	r3, r3, #2
 800910a:	b29a      	uxth	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	e361      	b.n	80097d8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	8b5b      	ldrh	r3, [r3, #26]
 8009118:	f003 0310 	and.w	r3, r3, #16
 800911c:	2b00      	cmp	r3, #0
 800911e:	d103      	bne.n	8009128 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009120:	4b68      	ldr	r3, [pc, #416]	@ (80092c4 <tcp_process+0x2ac>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f001 fc2b 	bl	800a994 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	7d1b      	ldrb	r3, [r3, #20]
 8009142:	3b02      	subs	r3, #2
 8009144:	2b07      	cmp	r3, #7
 8009146:	f200 8337 	bhi.w	80097b8 <tcp_process+0x7a0>
 800914a:	a201      	add	r2, pc, #4	@ (adr r2, 8009150 <tcp_process+0x138>)
 800914c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009150:	08009171 	.word	0x08009171
 8009154:	080093a1 	.word	0x080093a1
 8009158:	08009519 	.word	0x08009519
 800915c:	08009543 	.word	0x08009543
 8009160:	08009667 	.word	0x08009667
 8009164:	08009519 	.word	0x08009519
 8009168:	080096f3 	.word	0x080096f3
 800916c:	08009783 	.word	0x08009783
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009170:	4b4f      	ldr	r3, [pc, #316]	@ (80092b0 <tcp_process+0x298>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 80e4 	beq.w	8009346 <tcp_process+0x32e>
 800917e:	4b4c      	ldr	r3, [pc, #304]	@ (80092b0 <tcp_process+0x298>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 80dd 	beq.w	8009346 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	4b48      	ldr	r3, [pc, #288]	@ (80092b4 <tcp_process+0x29c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	f040 80d5 	bne.w	8009346 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800919c:	4b46      	ldr	r3, [pc, #280]	@ (80092b8 <tcp_process+0x2a0>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80091ae:	4b41      	ldr	r3, [pc, #260]	@ (80092b4 <tcp_process+0x29c>)
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80091b6:	4b44      	ldr	r3, [pc, #272]	@ (80092c8 <tcp_process+0x2b0>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	89db      	ldrh	r3, [r3, #14]
 80091bc:	b29a      	uxth	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80091d0:	4b39      	ldr	r3, [pc, #228]	@ (80092b8 <tcp_process+0x2a0>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	1e5a      	subs	r2, r3, #1
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2204      	movs	r2, #4
 80091de:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	3304      	adds	r3, #4
 80091e8:	4618      	mov	r0, r3
 80091ea:	f004 faa9 	bl	800d740 <ip4_route>
 80091ee:	4601      	mov	r1, r0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3304      	adds	r3, #4
 80091f4:	461a      	mov	r2, r3
 80091f6:	4620      	mov	r0, r4
 80091f8:	f7ff f88c 	bl	8008314 <tcp_eff_send_mss_netif>
 80091fc:	4603      	mov	r3, r0
 80091fe:	461a      	mov	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009208:	009a      	lsls	r2, r3, #2
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800920e:	005b      	lsls	r3, r3, #1
 8009210:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009214:	428b      	cmp	r3, r1
 8009216:	bf38      	it	cc
 8009218:	460b      	movcc	r3, r1
 800921a:	429a      	cmp	r2, r3
 800921c:	d204      	bcs.n	8009228 <tcp_process+0x210>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	b29b      	uxth	r3, r3
 8009226:	e00d      	b.n	8009244 <tcp_process+0x22c>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800922c:	005b      	lsls	r3, r3, #1
 800922e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009232:	4293      	cmp	r3, r2
 8009234:	d904      	bls.n	8009240 <tcp_process+0x228>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	b29b      	uxth	r3, r3
 800923e:	e001      	b.n	8009244 <tcp_process+0x22c>
 8009240:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009250:	2b00      	cmp	r3, #0
 8009252:	d106      	bne.n	8009262 <tcp_process+0x24a>
 8009254:	4b13      	ldr	r3, [pc, #76]	@ (80092a4 <tcp_process+0x28c>)
 8009256:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800925a:	491c      	ldr	r1, [pc, #112]	@ (80092cc <tcp_process+0x2b4>)
 800925c:	4813      	ldr	r0, [pc, #76]	@ (80092ac <tcp_process+0x294>)
 800925e:	f005 fd5b 	bl	800ed18 <iprintf>
        --pcb->snd_queuelen;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009268:	3b01      	subs	r3, #1
 800926a:	b29a      	uxth	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009276:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d12a      	bne.n	80092d4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009282:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d106      	bne.n	8009298 <tcp_process+0x280>
 800928a:	4b06      	ldr	r3, [pc, #24]	@ (80092a4 <tcp_process+0x28c>)
 800928c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8009290:	490f      	ldr	r1, [pc, #60]	@ (80092d0 <tcp_process+0x2b8>)
 8009292:	4806      	ldr	r0, [pc, #24]	@ (80092ac <tcp_process+0x294>)
 8009294:	f005 fd40 	bl	800ed18 <iprintf>
          pcb->unsent = rseg->next;
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	66da      	str	r2, [r3, #108]	@ 0x6c
 80092a0:	e01c      	b.n	80092dc <tcp_process+0x2c4>
 80092a2:	bf00      	nop
 80092a4:	08010d78 	.word	0x08010d78
 80092a8:	08010fb0 	.word	0x08010fb0
 80092ac:	08010dc4 	.word	0x08010dc4
 80092b0:	20007cb4 	.word	0x20007cb4
 80092b4:	20007cac 	.word	0x20007cac
 80092b8:	20007ca8 	.word	0x20007ca8
 80092bc:	08010fcc 	.word	0x08010fcc
 80092c0:	20007cb5 	.word	0x20007cb5
 80092c4:	20007c70 	.word	0x20007c70
 80092c8:	20007c98 	.word	0x20007c98
 80092cc:	08010fec 	.word	0x08010fec
 80092d0:	08011004 	.word	0x08011004
        } else {
          pcb->unacked = rseg->next;
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80092dc:	69f8      	ldr	r0, [r7, #28]
 80092de:	f7fe fd22 	bl	8007d26 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d104      	bne.n	80092f4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092f0:	861a      	strh	r2, [r3, #48]	@ 0x30
 80092f2:	e006      	b.n	8009302 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <tcp_process+0x30a>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	6910      	ldr	r0, [r2, #16]
 8009316:	2200      	movs	r2, #0
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	4798      	blx	r3
 800931c:	4603      	mov	r3, r0
 800931e:	76bb      	strb	r3, [r7, #26]
 8009320:	e001      	b.n	8009326 <tcp_process+0x30e>
 8009322:	2300      	movs	r3, #0
 8009324:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009326:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800932a:	f113 0f0d 	cmn.w	r3, #13
 800932e:	d102      	bne.n	8009336 <tcp_process+0x31e>
          return ERR_ABRT;
 8009330:	f06f 030c 	mvn.w	r3, #12
 8009334:	e250      	b.n	80097d8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	8b5b      	ldrh	r3, [r3, #26]
 800933a:	f043 0302 	orr.w	r3, r3, #2
 800933e:	b29a      	uxth	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009344:	e23a      	b.n	80097bc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009346:	4b98      	ldr	r3, [pc, #608]	@ (80095a8 <tcp_process+0x590>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	f003 0310 	and.w	r3, r3, #16
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 8234 	beq.w	80097bc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009354:	4b95      	ldr	r3, [pc, #596]	@ (80095ac <tcp_process+0x594>)
 8009356:	6819      	ldr	r1, [r3, #0]
 8009358:	4b95      	ldr	r3, [pc, #596]	@ (80095b0 <tcp_process+0x598>)
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	4b95      	ldr	r3, [pc, #596]	@ (80095b4 <tcp_process+0x59c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009364:	4b94      	ldr	r3, [pc, #592]	@ (80095b8 <tcp_process+0x5a0>)
 8009366:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009368:	885b      	ldrh	r3, [r3, #2]
 800936a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800936c:	4a92      	ldr	r2, [pc, #584]	@ (80095b8 <tcp_process+0x5a0>)
 800936e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009370:	8812      	ldrh	r2, [r2, #0]
 8009372:	b292      	uxth	r2, r2
 8009374:	9202      	str	r2, [sp, #8]
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	4b90      	ldr	r3, [pc, #576]	@ (80095bc <tcp_process+0x5a4>)
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	4b90      	ldr	r3, [pc, #576]	@ (80095c0 <tcp_process+0x5a8>)
 800937e:	4602      	mov	r2, r0
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f002 fc7f 	bl	800bc84 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800938c:	2b05      	cmp	r3, #5
 800938e:	f200 8215 	bhi.w	80097bc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f002 fa4b 	bl	800b834 <tcp_rexmit_rto>
      break;
 800939e:	e20d      	b.n	80097bc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80093a0:	4b81      	ldr	r3, [pc, #516]	@ (80095a8 <tcp_process+0x590>)
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	f003 0310 	and.w	r3, r3, #16
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 80a1 	beq.w	80094f0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093ae:	4b7f      	ldr	r3, [pc, #508]	@ (80095ac <tcp_process+0x594>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	3b01      	subs	r3, #1
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	db7e      	blt.n	80094bc <tcp_process+0x4a4>
 80093be:	4b7b      	ldr	r3, [pc, #492]	@ (80095ac <tcp_process+0x594>)
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	dc77      	bgt.n	80094bc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2204      	movs	r2, #4
 80093d0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d102      	bne.n	80093e0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80093da:	23fa      	movs	r3, #250	@ 0xfa
 80093dc:	76bb      	strb	r3, [r7, #26]
 80093de:	e01d      	b.n	800941c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d106      	bne.n	80093f8 <tcp_process+0x3e0>
 80093ea:	4b76      	ldr	r3, [pc, #472]	@ (80095c4 <tcp_process+0x5ac>)
 80093ec:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80093f0:	4975      	ldr	r1, [pc, #468]	@ (80095c8 <tcp_process+0x5b0>)
 80093f2:	4876      	ldr	r0, [pc, #472]	@ (80095cc <tcp_process+0x5b4>)
 80093f4:	f005 fc90 	bl	800ed18 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <tcp_process+0x400>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6910      	ldr	r0, [r2, #16]
 800940c:	2200      	movs	r2, #0
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	4798      	blx	r3
 8009412:	4603      	mov	r3, r0
 8009414:	76bb      	strb	r3, [r7, #26]
 8009416:	e001      	b.n	800941c <tcp_process+0x404>
 8009418:	23f0      	movs	r3, #240	@ 0xf0
 800941a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800941c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00a      	beq.n	800943a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009424:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009428:	f113 0f0d 	cmn.w	r3, #13
 800942c:	d002      	beq.n	8009434 <tcp_process+0x41c>
              tcp_abort(pcb);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7fd ff8c 	bl	800734c <tcp_abort>
            }
            return ERR_ABRT;
 8009434:	f06f 030c 	mvn.w	r3, #12
 8009438:	e1ce      	b.n	80097d8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fae0 	bl	8009a00 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009440:	4b63      	ldr	r3, [pc, #396]	@ (80095d0 <tcp_process+0x5b8>)
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <tcp_process+0x43c>
            recv_acked--;
 8009448:	4b61      	ldr	r3, [pc, #388]	@ (80095d0 <tcp_process+0x5b8>)
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	3b01      	subs	r3, #1
 800944e:	b29a      	uxth	r2, r3
 8009450:	4b5f      	ldr	r3, [pc, #380]	@ (80095d0 <tcp_process+0x5b8>)
 8009452:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009458:	009a      	lsls	r2, r3, #2
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009464:	428b      	cmp	r3, r1
 8009466:	bf38      	it	cc
 8009468:	460b      	movcc	r3, r1
 800946a:	429a      	cmp	r2, r3
 800946c:	d204      	bcs.n	8009478 <tcp_process+0x460>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	b29b      	uxth	r3, r3
 8009476:	e00d      	b.n	8009494 <tcp_process+0x47c>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009482:	4293      	cmp	r3, r2
 8009484:	d904      	bls.n	8009490 <tcp_process+0x478>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800948a:	005b      	lsls	r3, r3, #1
 800948c:	b29b      	uxth	r3, r3
 800948e:	e001      	b.n	8009494 <tcp_process+0x47c>
 8009490:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800949a:	4b4e      	ldr	r3, [pc, #312]	@ (80095d4 <tcp_process+0x5bc>)
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	f003 0320 	and.w	r3, r3, #32
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d037      	beq.n	8009516 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	8b5b      	ldrh	r3, [r3, #26]
 80094aa:	f043 0302 	orr.w	r3, r3, #2
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2207      	movs	r2, #7
 80094b8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80094ba:	e02c      	b.n	8009516 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094bc:	4b3b      	ldr	r3, [pc, #236]	@ (80095ac <tcp_process+0x594>)
 80094be:	6819      	ldr	r1, [r3, #0]
 80094c0:	4b3b      	ldr	r3, [pc, #236]	@ (80095b0 <tcp_process+0x598>)
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	461a      	mov	r2, r3
 80094c6:	4b3b      	ldr	r3, [pc, #236]	@ (80095b4 <tcp_process+0x59c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094cc:	4b3a      	ldr	r3, [pc, #232]	@ (80095b8 <tcp_process+0x5a0>)
 80094ce:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094d0:	885b      	ldrh	r3, [r3, #2]
 80094d2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094d4:	4a38      	ldr	r2, [pc, #224]	@ (80095b8 <tcp_process+0x5a0>)
 80094d6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094d8:	8812      	ldrh	r2, [r2, #0]
 80094da:	b292      	uxth	r2, r2
 80094dc:	9202      	str	r2, [sp, #8]
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	4b36      	ldr	r3, [pc, #216]	@ (80095bc <tcp_process+0x5a4>)
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	4b36      	ldr	r3, [pc, #216]	@ (80095c0 <tcp_process+0x5a8>)
 80094e6:	4602      	mov	r2, r0
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f002 fbcb 	bl	800bc84 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80094ee:	e167      	b.n	80097c0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80094f0:	4b2d      	ldr	r3, [pc, #180]	@ (80095a8 <tcp_process+0x590>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	f003 0302 	and.w	r3, r3, #2
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 8161 	beq.w	80097c0 <tcp_process+0x7a8>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009502:	1e5a      	subs	r2, r3, #1
 8009504:	4b2b      	ldr	r3, [pc, #172]	@ (80095b4 <tcp_process+0x59c>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	429a      	cmp	r2, r3
 800950a:	f040 8159 	bne.w	80097c0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f002 f9b2 	bl	800b878 <tcp_rexmit>
      break;
 8009514:	e154      	b.n	80097c0 <tcp_process+0x7a8>
 8009516:	e153      	b.n	80097c0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa71 	bl	8009a00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800951e:	4b2d      	ldr	r3, [pc, #180]	@ (80095d4 <tcp_process+0x5bc>)
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	f003 0320 	and.w	r3, r3, #32
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 814c 	beq.w	80097c4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	8b5b      	ldrh	r3, [r3, #26]
 8009530:	f043 0302 	orr.w	r3, r3, #2
 8009534:	b29a      	uxth	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2207      	movs	r2, #7
 800953e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009540:	e140      	b.n	80097c4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fa5c 	bl	8009a00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009548:	4b22      	ldr	r3, [pc, #136]	@ (80095d4 <tcp_process+0x5bc>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	f003 0320 	and.w	r3, r3, #32
 8009550:	2b00      	cmp	r3, #0
 8009552:	d071      	beq.n	8009638 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009554:	4b14      	ldr	r3, [pc, #80]	@ (80095a8 <tcp_process+0x590>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	f003 0310 	and.w	r3, r3, #16
 800955c:	2b00      	cmp	r3, #0
 800955e:	d060      	beq.n	8009622 <tcp_process+0x60a>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009564:	4b11      	ldr	r3, [pc, #68]	@ (80095ac <tcp_process+0x594>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	429a      	cmp	r2, r3
 800956a:	d15a      	bne.n	8009622 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009570:	2b00      	cmp	r3, #0
 8009572:	d156      	bne.n	8009622 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	8b5b      	ldrh	r3, [r3, #26]
 8009578:	f043 0302 	orr.w	r3, r3, #2
 800957c:	b29a      	uxth	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7fe fdbc 	bl	8008100 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009588:	4b13      	ldr	r3, [pc, #76]	@ (80095d8 <tcp_process+0x5c0>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	429a      	cmp	r2, r3
 8009590:	d105      	bne.n	800959e <tcp_process+0x586>
 8009592:	4b11      	ldr	r3, [pc, #68]	@ (80095d8 <tcp_process+0x5c0>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	4a0f      	ldr	r2, [pc, #60]	@ (80095d8 <tcp_process+0x5c0>)
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	e02e      	b.n	80095fc <tcp_process+0x5e4>
 800959e:	4b0e      	ldr	r3, [pc, #56]	@ (80095d8 <tcp_process+0x5c0>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e027      	b.n	80095f6 <tcp_process+0x5de>
 80095a6:	bf00      	nop
 80095a8:	20007cb4 	.word	0x20007cb4
 80095ac:	20007cac 	.word	0x20007cac
 80095b0:	20007cb2 	.word	0x20007cb2
 80095b4:	20007ca8 	.word	0x20007ca8
 80095b8:	20007c98 	.word	0x20007c98
 80095bc:	20004d64 	.word	0x20004d64
 80095c0:	20004d68 	.word	0x20004d68
 80095c4:	08010d78 	.word	0x08010d78
 80095c8:	08011018 	.word	0x08011018
 80095cc:	08010dc4 	.word	0x08010dc4
 80095d0:	20007cb0 	.word	0x20007cb0
 80095d4:	20007cb5 	.word	0x20007cb5
 80095d8:	20007c7c 	.word	0x20007c7c
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d104      	bne.n	80095f0 <tcp_process+0x5d8>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68da      	ldr	r2, [r3, #12]
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	60da      	str	r2, [r3, #12]
 80095ee:	e005      	b.n	80095fc <tcp_process+0x5e4>
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	617b      	str	r3, [r7, #20]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1ef      	bne.n	80095dc <tcp_process+0x5c4>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	60da      	str	r2, [r3, #12]
 8009602:	4b77      	ldr	r3, [pc, #476]	@ (80097e0 <tcp_process+0x7c8>)
 8009604:	2201      	movs	r2, #1
 8009606:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	220a      	movs	r2, #10
 800960c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800960e:	4b75      	ldr	r3, [pc, #468]	@ (80097e4 <tcp_process+0x7cc>)
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	60da      	str	r2, [r3, #12]
 8009616:	4a73      	ldr	r2, [pc, #460]	@ (80097e4 <tcp_process+0x7cc>)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6013      	str	r3, [r2, #0]
 800961c:	f002 fcf4 	bl	800c008 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009620:	e0d2      	b.n	80097c8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	8b5b      	ldrh	r3, [r3, #26]
 8009626:	f043 0302 	orr.w	r3, r3, #2
 800962a:	b29a      	uxth	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2208      	movs	r2, #8
 8009634:	751a      	strb	r2, [r3, #20]
      break;
 8009636:	e0c7      	b.n	80097c8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009638:	4b6b      	ldr	r3, [pc, #428]	@ (80097e8 <tcp_process+0x7d0>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f003 0310 	and.w	r3, r3, #16
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 80c1 	beq.w	80097c8 <tcp_process+0x7b0>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800964a:	4b68      	ldr	r3, [pc, #416]	@ (80097ec <tcp_process+0x7d4>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	429a      	cmp	r2, r3
 8009650:	f040 80ba 	bne.w	80097c8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009658:	2b00      	cmp	r3, #0
 800965a:	f040 80b5 	bne.w	80097c8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2206      	movs	r2, #6
 8009662:	751a      	strb	r2, [r3, #20]
      break;
 8009664:	e0b0      	b.n	80097c8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f9ca 	bl	8009a00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800966c:	4b60      	ldr	r3, [pc, #384]	@ (80097f0 <tcp_process+0x7d8>)
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	f003 0320 	and.w	r3, r3, #32
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 80a9 	beq.w	80097cc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	8b5b      	ldrh	r3, [r3, #26]
 800967e:	f043 0302 	orr.w	r3, r3, #2
 8009682:	b29a      	uxth	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7fe fd39 	bl	8008100 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800968e:	4b59      	ldr	r3, [pc, #356]	@ (80097f4 <tcp_process+0x7dc>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	429a      	cmp	r2, r3
 8009696:	d105      	bne.n	80096a4 <tcp_process+0x68c>
 8009698:	4b56      	ldr	r3, [pc, #344]	@ (80097f4 <tcp_process+0x7dc>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	4a55      	ldr	r2, [pc, #340]	@ (80097f4 <tcp_process+0x7dc>)
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	e013      	b.n	80096cc <tcp_process+0x6b4>
 80096a4:	4b53      	ldr	r3, [pc, #332]	@ (80097f4 <tcp_process+0x7dc>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	613b      	str	r3, [r7, #16]
 80096aa:	e00c      	b.n	80096c6 <tcp_process+0x6ae>
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d104      	bne.n	80096c0 <tcp_process+0x6a8>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68da      	ldr	r2, [r3, #12]
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	60da      	str	r2, [r3, #12]
 80096be:	e005      	b.n	80096cc <tcp_process+0x6b4>
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	613b      	str	r3, [r7, #16]
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1ef      	bne.n	80096ac <tcp_process+0x694>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	60da      	str	r2, [r3, #12]
 80096d2:	4b43      	ldr	r3, [pc, #268]	@ (80097e0 <tcp_process+0x7c8>)
 80096d4:	2201      	movs	r2, #1
 80096d6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	220a      	movs	r2, #10
 80096dc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80096de:	4b41      	ldr	r3, [pc, #260]	@ (80097e4 <tcp_process+0x7cc>)
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	60da      	str	r2, [r3, #12]
 80096e6:	4a3f      	ldr	r2, [pc, #252]	@ (80097e4 <tcp_process+0x7cc>)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6013      	str	r3, [r2, #0]
 80096ec:	f002 fc8c 	bl	800c008 <tcp_timer_needed>
      }
      break;
 80096f0:	e06c      	b.n	80097cc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f984 	bl	8009a00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80096f8:	4b3b      	ldr	r3, [pc, #236]	@ (80097e8 <tcp_process+0x7d0>)
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	f003 0310 	and.w	r3, r3, #16
 8009700:	2b00      	cmp	r3, #0
 8009702:	d065      	beq.n	80097d0 <tcp_process+0x7b8>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009708:	4b38      	ldr	r3, [pc, #224]	@ (80097ec <tcp_process+0x7d4>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	429a      	cmp	r2, r3
 800970e:	d15f      	bne.n	80097d0 <tcp_process+0x7b8>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009714:	2b00      	cmp	r3, #0
 8009716:	d15b      	bne.n	80097d0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7fe fcf1 	bl	8008100 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800971e:	4b35      	ldr	r3, [pc, #212]	@ (80097f4 <tcp_process+0x7dc>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	429a      	cmp	r2, r3
 8009726:	d105      	bne.n	8009734 <tcp_process+0x71c>
 8009728:	4b32      	ldr	r3, [pc, #200]	@ (80097f4 <tcp_process+0x7dc>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	4a31      	ldr	r2, [pc, #196]	@ (80097f4 <tcp_process+0x7dc>)
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	e013      	b.n	800975c <tcp_process+0x744>
 8009734:	4b2f      	ldr	r3, [pc, #188]	@ (80097f4 <tcp_process+0x7dc>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	e00c      	b.n	8009756 <tcp_process+0x73e>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	429a      	cmp	r2, r3
 8009744:	d104      	bne.n	8009750 <tcp_process+0x738>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	60da      	str	r2, [r3, #12]
 800974e:	e005      	b.n	800975c <tcp_process+0x744>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	60fb      	str	r3, [r7, #12]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1ef      	bne.n	800973c <tcp_process+0x724>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	60da      	str	r2, [r3, #12]
 8009762:	4b1f      	ldr	r3, [pc, #124]	@ (80097e0 <tcp_process+0x7c8>)
 8009764:	2201      	movs	r2, #1
 8009766:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	220a      	movs	r2, #10
 800976c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800976e:	4b1d      	ldr	r3, [pc, #116]	@ (80097e4 <tcp_process+0x7cc>)
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	60da      	str	r2, [r3, #12]
 8009776:	4a1b      	ldr	r2, [pc, #108]	@ (80097e4 <tcp_process+0x7cc>)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	f002 fc44 	bl	800c008 <tcp_timer_needed>
      }
      break;
 8009780:	e026      	b.n	80097d0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f93c 	bl	8009a00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009788:	4b17      	ldr	r3, [pc, #92]	@ (80097e8 <tcp_process+0x7d0>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	f003 0310 	and.w	r3, r3, #16
 8009790:	2b00      	cmp	r3, #0
 8009792:	d01f      	beq.n	80097d4 <tcp_process+0x7bc>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009798:	4b14      	ldr	r3, [pc, #80]	@ (80097ec <tcp_process+0x7d4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	429a      	cmp	r2, r3
 800979e:	d119      	bne.n	80097d4 <tcp_process+0x7bc>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d115      	bne.n	80097d4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80097a8:	4b11      	ldr	r3, [pc, #68]	@ (80097f0 <tcp_process+0x7d8>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	f043 0310 	orr.w	r3, r3, #16
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	4b0f      	ldr	r3, [pc, #60]	@ (80097f0 <tcp_process+0x7d8>)
 80097b4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80097b6:	e00d      	b.n	80097d4 <tcp_process+0x7bc>
    default:
      break;
 80097b8:	bf00      	nop
 80097ba:	e00c      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097bc:	bf00      	nop
 80097be:	e00a      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097c0:	bf00      	nop
 80097c2:	e008      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097c4:	bf00      	nop
 80097c6:	e006      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097c8:	bf00      	nop
 80097ca:	e004      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097cc:	bf00      	nop
 80097ce:	e002      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097d0:	bf00      	nop
 80097d2:	e000      	b.n	80097d6 <tcp_process+0x7be>
      break;
 80097d4:	bf00      	nop
  }
  return ERR_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3724      	adds	r7, #36	@ 0x24
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd90      	pop	{r4, r7, pc}
 80097e0:	20007c84 	.word	0x20007c84
 80097e4:	20007c80 	.word	0x20007c80
 80097e8:	20007cb4 	.word	0x20007cb4
 80097ec:	20007cac 	.word	0x20007cac
 80097f0:	20007cb5 	.word	0x20007cb5
 80097f4:	20007c7c 	.word	0x20007c7c

080097f8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80097f8:	b590      	push	{r4, r7, lr}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d106      	bne.n	8009816 <tcp_oos_insert_segment+0x1e>
 8009808:	4b3b      	ldr	r3, [pc, #236]	@ (80098f8 <tcp_oos_insert_segment+0x100>)
 800980a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800980e:	493b      	ldr	r1, [pc, #236]	@ (80098fc <tcp_oos_insert_segment+0x104>)
 8009810:	483b      	ldr	r0, [pc, #236]	@ (8009900 <tcp_oos_insert_segment+0x108>)
 8009812:	f005 fa81 	bl	800ed18 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	899b      	ldrh	r3, [r3, #12]
 800981c:	b29b      	uxth	r3, r3
 800981e:	4618      	mov	r0, r3
 8009820:	f7fb fcd2 	bl	80051c8 <lwip_htons>
 8009824:	4603      	mov	r3, r0
 8009826:	b2db      	uxtb	r3, r3
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d028      	beq.n	8009882 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009830:	6838      	ldr	r0, [r7, #0]
 8009832:	f7fe fa63 	bl	8007cfc <tcp_segs_free>
    next = NULL;
 8009836:	2300      	movs	r3, #0
 8009838:	603b      	str	r3, [r7, #0]
 800983a:	e056      	b.n	80098ea <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	899b      	ldrh	r3, [r3, #12]
 8009842:	b29b      	uxth	r3, r3
 8009844:	4618      	mov	r0, r3
 8009846:	f7fb fcbf 	bl	80051c8 <lwip_htons>
 800984a:	4603      	mov	r3, r0
 800984c:	b2db      	uxtb	r3, r3
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00d      	beq.n	8009872 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	899b      	ldrh	r3, [r3, #12]
 800985c:	b29c      	uxth	r4, r3
 800985e:	2001      	movs	r0, #1
 8009860:	f7fb fcb2 	bl	80051c8 <lwip_htons>
 8009864:	4603      	mov	r3, r0
 8009866:	461a      	mov	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	4322      	orrs	r2, r4
 800986e:	b292      	uxth	r2, r2
 8009870:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f7fe fa52 	bl	8007d26 <tcp_seg_free>
    while (next &&
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00e      	beq.n	80098a6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	891b      	ldrh	r3, [r3, #8]
 800988c:	461a      	mov	r2, r3
 800988e:	4b1d      	ldr	r3, [pc, #116]	@ (8009904 <tcp_oos_insert_segment+0x10c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	441a      	add	r2, r3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	8909      	ldrh	r1, [r1, #8]
 800989e:	440b      	add	r3, r1
 80098a0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	daca      	bge.n	800983c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d01e      	beq.n	80098ea <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	891b      	ldrh	r3, [r3, #8]
 80098b0:	461a      	mov	r2, r3
 80098b2:	4b14      	ldr	r3, [pc, #80]	@ (8009904 <tcp_oos_insert_segment+0x10c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	441a      	add	r2, r3
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	1ad3      	subs	r3, r2, r3
    if (next &&
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	dd12      	ble.n	80098ea <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009904 <tcp_oos_insert_segment+0x10c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	891b      	ldrh	r3, [r3, #8]
 80098e2:	4619      	mov	r1, r3
 80098e4:	4610      	mov	r0, r2
 80098e6:	f7fc fe23 	bl	8006530 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	601a      	str	r2, [r3, #0]
}
 80098f0:	bf00      	nop
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd90      	pop	{r4, r7, pc}
 80098f8:	08010d78 	.word	0x08010d78
 80098fc:	08011038 	.word	0x08011038
 8009900:	08010dc4 	.word	0x08010dc4
 8009904:	20007ca8 	.word	0x20007ca8

08009908 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009908:	b5b0      	push	{r4, r5, r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
 8009914:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009916:	e03e      	b.n	8009996 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	4618      	mov	r0, r3
 8009928:	f7fd f810 	bl	800694c <pbuf_clen>
 800992c:	4603      	mov	r3, r0
 800992e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009936:	8a7a      	ldrh	r2, [r7, #18]
 8009938:	429a      	cmp	r2, r3
 800993a:	d906      	bls.n	800994a <tcp_free_acked_segments+0x42>
 800993c:	4b2a      	ldr	r3, [pc, #168]	@ (80099e8 <tcp_free_acked_segments+0xe0>)
 800993e:	f240 4257 	movw	r2, #1111	@ 0x457
 8009942:	492a      	ldr	r1, [pc, #168]	@ (80099ec <tcp_free_acked_segments+0xe4>)
 8009944:	482a      	ldr	r0, [pc, #168]	@ (80099f0 <tcp_free_acked_segments+0xe8>)
 8009946:	f005 f9e7 	bl	800ed18 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8009950:	8a7b      	ldrh	r3, [r7, #18]
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	b29a      	uxth	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	891a      	ldrh	r2, [r3, #8]
 8009960:	4b24      	ldr	r3, [pc, #144]	@ (80099f4 <tcp_free_acked_segments+0xec>)
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	4413      	add	r3, r2
 8009966:	b29a      	uxth	r2, r3
 8009968:	4b22      	ldr	r3, [pc, #136]	@ (80099f4 <tcp_free_acked_segments+0xec>)
 800996a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800996c:	6978      	ldr	r0, [r7, #20]
 800996e:	f7fe f9da 	bl	8007d26 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00c      	beq.n	8009996 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d109      	bne.n	8009996 <tcp_free_acked_segments+0x8e>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d106      	bne.n	8009996 <tcp_free_acked_segments+0x8e>
 8009988:	4b17      	ldr	r3, [pc, #92]	@ (80099e8 <tcp_free_acked_segments+0xe0>)
 800998a:	f240 4261 	movw	r2, #1121	@ 0x461
 800998e:	491a      	ldr	r1, [pc, #104]	@ (80099f8 <tcp_free_acked_segments+0xf0>)
 8009990:	4817      	ldr	r0, [pc, #92]	@ (80099f0 <tcp_free_acked_segments+0xe8>)
 8009992:	f005 f9c1 	bl	800ed18 <iprintf>
  while (seg_list != NULL &&
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d020      	beq.n	80099de <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fb fc25 	bl	80051f2 <lwip_htonl>
 80099a8:	4604      	mov	r4, r0
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	891b      	ldrh	r3, [r3, #8]
 80099ae:	461d      	mov	r5, r3
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	899b      	ldrh	r3, [r3, #12]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fb fc05 	bl	80051c8 <lwip_htons>
 80099be:	4603      	mov	r3, r0
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <tcp_free_acked_segments+0xc6>
 80099ca:	2301      	movs	r3, #1
 80099cc:	e000      	b.n	80099d0 <tcp_free_acked_segments+0xc8>
 80099ce:	2300      	movs	r3, #0
 80099d0:	442b      	add	r3, r5
 80099d2:	18e2      	adds	r2, r4, r3
 80099d4:	4b09      	ldr	r3, [pc, #36]	@ (80099fc <tcp_free_acked_segments+0xf4>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80099da:	2b00      	cmp	r3, #0
 80099dc:	dd9c      	ble.n	8009918 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80099de:	68bb      	ldr	r3, [r7, #8]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3718      	adds	r7, #24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bdb0      	pop	{r4, r5, r7, pc}
 80099e8:	08010d78 	.word	0x08010d78
 80099ec:	08011060 	.word	0x08011060
 80099f0:	08010dc4 	.word	0x08010dc4
 80099f4:	20007cb0 	.word	0x20007cb0
 80099f8:	08011088 	.word	0x08011088
 80099fc:	20007cac 	.word	0x20007cac

08009a00 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009a00:	b5b0      	push	{r4, r5, r7, lr}
 8009a02:	b094      	sub	sp, #80	@ 0x50
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d106      	bne.n	8009a20 <tcp_receive+0x20>
 8009a12:	4b91      	ldr	r3, [pc, #580]	@ (8009c58 <tcp_receive+0x258>)
 8009a14:	f240 427b 	movw	r2, #1147	@ 0x47b
 8009a18:	4990      	ldr	r1, [pc, #576]	@ (8009c5c <tcp_receive+0x25c>)
 8009a1a:	4891      	ldr	r0, [pc, #580]	@ (8009c60 <tcp_receive+0x260>)
 8009a1c:	f005 f97c 	bl	800ed18 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	7d1b      	ldrb	r3, [r3, #20]
 8009a24:	2b03      	cmp	r3, #3
 8009a26:	d806      	bhi.n	8009a36 <tcp_receive+0x36>
 8009a28:	4b8b      	ldr	r3, [pc, #556]	@ (8009c58 <tcp_receive+0x258>)
 8009a2a:	f240 427c 	movw	r2, #1148	@ 0x47c
 8009a2e:	498d      	ldr	r1, [pc, #564]	@ (8009c64 <tcp_receive+0x264>)
 8009a30:	488b      	ldr	r0, [pc, #556]	@ (8009c60 <tcp_receive+0x260>)
 8009a32:	f005 f971 	bl	800ed18 <iprintf>

  if (flags & TCP_ACK) {
 8009a36:	4b8c      	ldr	r3, [pc, #560]	@ (8009c68 <tcp_receive+0x268>)
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	f003 0310 	and.w	r3, r3, #16
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 8264 	beq.w	8009f0c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a50:	4413      	add	r3, r2
 8009a52:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a58:	4b84      	ldr	r3, [pc, #528]	@ (8009c6c <tcp_receive+0x26c>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	db1b      	blt.n	8009a9a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a66:	4b81      	ldr	r3, [pc, #516]	@ (8009c6c <tcp_receive+0x26c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d106      	bne.n	8009a7c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009a72:	4b7f      	ldr	r3, [pc, #508]	@ (8009c70 <tcp_receive+0x270>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	db0e      	blt.n	8009a9a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009a80:	4b7b      	ldr	r3, [pc, #492]	@ (8009c70 <tcp_receive+0x270>)
 8009a82:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d125      	bne.n	8009ad4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009a88:	4b7a      	ldr	r3, [pc, #488]	@ (8009c74 <tcp_receive+0x274>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	89db      	ldrh	r3, [r3, #14]
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d91c      	bls.n	8009ad4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009a9a:	4b76      	ldr	r3, [pc, #472]	@ (8009c74 <tcp_receive+0x274>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	89db      	ldrh	r3, [r3, #14]
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d205      	bcs.n	8009ac4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8009ac4:	4b69      	ldr	r3, [pc, #420]	@ (8009c6c <tcp_receive+0x26c>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8009acc:	4b68      	ldr	r3, [pc, #416]	@ (8009c70 <tcp_receive+0x270>)
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009ad4:	4b66      	ldr	r3, [pc, #408]	@ (8009c70 <tcp_receive+0x270>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	dc58      	bgt.n	8009b94 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009ae2:	4b65      	ldr	r3, [pc, #404]	@ (8009c78 <tcp_receive+0x278>)
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d14b      	bne.n	8009b82 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8009af4:	4413      	add	r3, r2
 8009af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d142      	bne.n	8009b82 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	db3d      	blt.n	8009b82 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b0a:	4b59      	ldr	r3, [pc, #356]	@ (8009c70 <tcp_receive+0x270>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d137      	bne.n	8009b82 <tcp_receive+0x182>
              found_dupack = 1;
 8009b12:	2301      	movs	r3, #1
 8009b14:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009b1c:	2bff      	cmp	r3, #255	@ 0xff
 8009b1e:	d007      	beq.n	8009b30 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009b26:	3301      	adds	r3, #1
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	d91b      	bls.n	8009b72 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b44:	4413      	add	r3, r2
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d30a      	bcc.n	8009b68 <tcp_receive+0x168>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b5c:	4413      	add	r3, r2
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009b66:	e004      	b.n	8009b72 <tcp_receive+0x172>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009b6e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d902      	bls.n	8009b82 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f001 fee7 	bl	800b950 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f040 8161 	bne.w	8009e4c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b92:	e15b      	b.n	8009e4c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009b94:	4b36      	ldr	r3, [pc, #216]	@ (8009c70 <tcp_receive+0x270>)
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f2c0 814e 	blt.w	8009e42 <tcp_receive+0x442>
 8009ba6:	4b32      	ldr	r3, [pc, #200]	@ (8009c70 <tcp_receive+0x270>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f300 8146 	bgt.w	8009e42 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	8b5b      	ldrh	r3, [r3, #26]
 8009bba:	f003 0304 	and.w	r3, r3, #4
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d010      	beq.n	8009be4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	8b5b      	ldrh	r3, [r3, #26]
 8009bc6:	f023 0304 	bic.w	r3, r3, #4
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009bf2:	10db      	asrs	r3, r3, #3
 8009bf4:	b21b      	sxth	r3, r3
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	4413      	add	r3, r2
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	b21a      	sxth	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009c0c:	4b18      	ldr	r3, [pc, #96]	@ (8009c70 <tcp_receive+0x270>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8009c24:	4b12      	ldr	r3, [pc, #72]	@ (8009c70 <tcp_receive+0x270>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	7d1b      	ldrb	r3, [r3, #20]
 8009c30:	2b03      	cmp	r3, #3
 8009c32:	f240 8097 	bls.w	8009d64 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d245      	bcs.n	8009cd2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	8b5b      	ldrh	r3, [r3, #26]
 8009c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d014      	beq.n	8009c7c <tcp_receive+0x27c>
 8009c52:	2301      	movs	r3, #1
 8009c54:	e013      	b.n	8009c7e <tcp_receive+0x27e>
 8009c56:	bf00      	nop
 8009c58:	08010d78 	.word	0x08010d78
 8009c5c:	080110a8 	.word	0x080110a8
 8009c60:	08010dc4 	.word	0x08010dc4
 8009c64:	080110c4 	.word	0x080110c4
 8009c68:	20007cb4 	.word	0x20007cb4
 8009c6c:	20007ca8 	.word	0x20007ca8
 8009c70:	20007cac 	.word	0x20007cac
 8009c74:	20007c98 	.word	0x20007c98
 8009c78:	20007cb2 	.word	0x20007cb2
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009c82:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009c8c:	fb12 f303 	smulbb	r3, r2, r3
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009c94:	4293      	cmp	r3, r2
 8009c96:	bf28      	it	cs
 8009c98:	4613      	movcs	r3, r2
 8009c9a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009ca2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009ca4:	4413      	add	r3, r2
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d309      	bcc.n	8009cc6 <tcp_receive+0x2c6>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009cb8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009cba:	4413      	add	r3, r2
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009cc4:	e04e      	b.n	8009d64 <tcp_receive+0x364>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009ccc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009cd0:	e048      	b.n	8009d64 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009cd8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009cda:	4413      	add	r3, r2
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d309      	bcc.n	8009cfc <tcp_receive+0x2fc>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009cee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009cf0:	4413      	add	r3, r2
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009cfa:	e004      	b.n	8009d06 <tcp_receive+0x306>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d326      	bcc.n	8009d64 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d36:	4413      	add	r3, r2
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d30a      	bcc.n	8009d5a <tcp_receive+0x35a>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d4e:	4413      	add	r3, r2
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009d58:	e004      	b.n	8009d64 <tcp_receive+0x364>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d6c:	4a98      	ldr	r2, [pc, #608]	@ (8009fd0 <tcp_receive+0x5d0>)
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff fdca 	bl	8009908 <tcp_free_acked_segments>
 8009d74:	4602      	mov	r2, r0
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d82:	4a94      	ldr	r2, [pc, #592]	@ (8009fd4 <tcp_receive+0x5d4>)
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7ff fdbf 	bl	8009908 <tcp_free_acked_segments>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d9e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009da0:	e002      	b.n	8009da8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d103      	bne.n	8009dbe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8009dc4:	4b84      	ldr	r3, [pc, #528]	@ (8009fd8 <tcp_receive+0x5d8>)
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	4413      	add	r3, r2
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	8b5b      	ldrh	r3, [r3, #26]
 8009dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d035      	beq.n	8009e4a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d118      	bne.n	8009e18 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00c      	beq.n	8009e08 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fb f9f9 	bl	80051f2 <lwip_htonl>
 8009e00:	4603      	mov	r3, r0
 8009e02:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	dc20      	bgt.n	8009e4a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	8b5b      	ldrh	r3, [r3, #26]
 8009e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e16:	e018      	b.n	8009e4a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fb f9e4 	bl	80051f2 <lwip_htonl>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	1ae3      	subs	r3, r4, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dc0b      	bgt.n	8009e4a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	8b5b      	ldrh	r3, [r3, #26]
 8009e36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e40:	e003      	b.n	8009e4a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f001 ff70 	bl	800bd28 <tcp_send_empty_ack>
 8009e48:	e000      	b.n	8009e4c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e4a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d05b      	beq.n	8009f0c <tcp_receive+0x50c>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e58:	4b60      	ldr	r3, [pc, #384]	@ (8009fdc <tcp_receive+0x5dc>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	da54      	bge.n	8009f0c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009e62:	4b5f      	ldr	r3, [pc, #380]	@ (8009fe0 <tcp_receive+0x5e0>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009e76:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009e80:	10db      	asrs	r3, r3, #3
 8009e82:	b21b      	sxth	r3, r3
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009e9a:	4413      	add	r3, r2
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	b21a      	sxth	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8009ea4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	da05      	bge.n	8009eb8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009eac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009eb0:	425b      	negs	r3, r3
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009eb8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009ec2:	109b      	asrs	r3, r3, #2
 8009ec4:	b21b      	sxth	r3, r3
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009edc:	4413      	add	r3, r2
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	b21a      	sxth	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009eec:	10db      	asrs	r3, r3, #3
 8009eee:	b21b      	sxth	r3, r3
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	4413      	add	r3, r2
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	b21a      	sxth	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009f0c:	4b35      	ldr	r3, [pc, #212]	@ (8009fe4 <tcp_receive+0x5e4>)
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f000 84df 	beq.w	800a8d4 <tcp_receive+0xed4>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	7d1b      	ldrb	r3, [r3, #20]
 8009f1a:	2b06      	cmp	r3, #6
 8009f1c:	f200 84da 	bhi.w	800a8d4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f24:	4b30      	ldr	r3, [pc, #192]	@ (8009fe8 <tcp_receive+0x5e8>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f2c0 808f 	blt.w	800a050 <tcp_receive+0x650>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f36:	4b2b      	ldr	r3, [pc, #172]	@ (8009fe4 <tcp_receive+0x5e4>)
 8009f38:	881b      	ldrh	r3, [r3, #0]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8009fe8 <tcp_receive+0x5e8>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	440b      	add	r3, r1
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	3301      	adds	r3, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f300 8082 	bgt.w	800a050 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009f4c:	4b27      	ldr	r3, [pc, #156]	@ (8009fec <tcp_receive+0x5ec>)
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f56:	4b24      	ldr	r3, [pc, #144]	@ (8009fe8 <tcp_receive+0x5e8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009f5e:	4b23      	ldr	r3, [pc, #140]	@ (8009fec <tcp_receive+0x5ec>)
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d106      	bne.n	8009f74 <tcp_receive+0x574>
 8009f66:	4b22      	ldr	r3, [pc, #136]	@ (8009ff0 <tcp_receive+0x5f0>)
 8009f68:	f240 5294 	movw	r2, #1428	@ 0x594
 8009f6c:	4921      	ldr	r1, [pc, #132]	@ (8009ff4 <tcp_receive+0x5f4>)
 8009f6e:	4822      	ldr	r0, [pc, #136]	@ (8009ff8 <tcp_receive+0x5f8>)
 8009f70:	f004 fed2 	bl	800ed18 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f76:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d906      	bls.n	8009f8c <tcp_receive+0x58c>
 8009f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8009ff0 <tcp_receive+0x5f0>)
 8009f80:	f240 5295 	movw	r2, #1429	@ 0x595
 8009f84:	491d      	ldr	r1, [pc, #116]	@ (8009ffc <tcp_receive+0x5fc>)
 8009f86:	481c      	ldr	r0, [pc, #112]	@ (8009ff8 <tcp_receive+0x5f8>)
 8009f88:	f004 fec6 	bl	800ed18 <iprintf>
      off = (u16_t)off32;
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009f92:	4b16      	ldr	r3, [pc, #88]	@ (8009fec <tcp_receive+0x5ec>)
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	891b      	ldrh	r3, [r3, #8]
 8009f98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d906      	bls.n	8009fae <tcp_receive+0x5ae>
 8009fa0:	4b13      	ldr	r3, [pc, #76]	@ (8009ff0 <tcp_receive+0x5f0>)
 8009fa2:	f240 5297 	movw	r2, #1431	@ 0x597
 8009fa6:	4916      	ldr	r1, [pc, #88]	@ (800a000 <tcp_receive+0x600>)
 8009fa8:	4813      	ldr	r0, [pc, #76]	@ (8009ff8 <tcp_receive+0x5f8>)
 8009faa:	f004 feb5 	bl	800ed18 <iprintf>
      inseg.len -= off;
 8009fae:	4b0f      	ldr	r3, [pc, #60]	@ (8009fec <tcp_receive+0x5ec>)
 8009fb0:	891a      	ldrh	r2, [r3, #8]
 8009fb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	4b0c      	ldr	r3, [pc, #48]	@ (8009fec <tcp_receive+0x5ec>)
 8009fbc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8009fec <tcp_receive+0x5ec>)
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	891a      	ldrh	r2, [r3, #8]
 8009fc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8009fcc:	e02a      	b.n	800a024 <tcp_receive+0x624>
 8009fce:	bf00      	nop
 8009fd0:	080110e0 	.word	0x080110e0
 8009fd4:	080110e8 	.word	0x080110e8
 8009fd8:	20007cb0 	.word	0x20007cb0
 8009fdc:	20007cac 	.word	0x20007cac
 8009fe0:	20007c70 	.word	0x20007c70
 8009fe4:	20007cb2 	.word	0x20007cb2
 8009fe8:	20007ca8 	.word	0x20007ca8
 8009fec:	20007c88 	.word	0x20007c88
 8009ff0:	08010d78 	.word	0x08010d78
 8009ff4:	080110f0 	.word	0x080110f0
 8009ff8:	08010dc4 	.word	0x08010dc4
 8009ffc:	08011100 	.word	0x08011100
 800a000:	08011110 	.word	0x08011110
        off -= p->len;
 800a004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a006:	895b      	ldrh	r3, [r3, #10]
 800a008:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a014:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a016:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a01a:	2200      	movs	r2, #0
 800a01c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a01e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800a024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a026:	895b      	ldrh	r3, [r3, #10]
 800a028:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d8e9      	bhi.n	800a004 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a030:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a034:	4619      	mov	r1, r3
 800a036:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a038:	f7fc fb7a 	bl	8006730 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a040:	4a90      	ldr	r2, [pc, #576]	@ (800a284 <tcp_receive+0x884>)
 800a042:	6013      	str	r3, [r2, #0]
 800a044:	4b90      	ldr	r3, [pc, #576]	@ (800a288 <tcp_receive+0x888>)
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	4a8e      	ldr	r2, [pc, #568]	@ (800a284 <tcp_receive+0x884>)
 800a04a:	6812      	ldr	r2, [r2, #0]
 800a04c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a04e:	e00d      	b.n	800a06c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a050:	4b8c      	ldr	r3, [pc, #560]	@ (800a284 <tcp_receive+0x884>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	da06      	bge.n	800a06c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	8b5b      	ldrh	r3, [r3, #26]
 800a062:	f043 0302 	orr.w	r3, r3, #2
 800a066:	b29a      	uxth	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a06c:	4b85      	ldr	r3, [pc, #532]	@ (800a284 <tcp_receive+0x884>)
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	f2c0 8427 	blt.w	800a8ca <tcp_receive+0xeca>
 800a07c:	4b81      	ldr	r3, [pc, #516]	@ (800a284 <tcp_receive+0x884>)
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a084:	6879      	ldr	r1, [r7, #4]
 800a086:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a088:	440b      	add	r3, r1
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	3301      	adds	r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f300 841b 	bgt.w	800a8ca <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a098:	4b7a      	ldr	r3, [pc, #488]	@ (800a284 <tcp_receive+0x884>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	f040 8298 	bne.w	800a5d2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a0a2:	4b79      	ldr	r3, [pc, #484]	@ (800a288 <tcp_receive+0x888>)
 800a0a4:	891c      	ldrh	r4, [r3, #8]
 800a0a6:	4b78      	ldr	r3, [pc, #480]	@ (800a288 <tcp_receive+0x888>)
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	899b      	ldrh	r3, [r3, #12]
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fb f88a 	bl	80051c8 <lwip_htons>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <tcp_receive+0x6c4>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e000      	b.n	800a0c6 <tcp_receive+0x6c6>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4423      	add	r3, r4
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	4b70      	ldr	r3, [pc, #448]	@ (800a28c <tcp_receive+0x88c>)
 800a0cc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a0d2:	4b6e      	ldr	r3, [pc, #440]	@ (800a28c <tcp_receive+0x88c>)
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d274      	bcs.n	800a1c4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a0da:	4b6b      	ldr	r3, [pc, #428]	@ (800a288 <tcp_receive+0x888>)
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	899b      	ldrh	r3, [r3, #12]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fb f870 	bl	80051c8 <lwip_htons>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	f003 0301 	and.w	r3, r3, #1
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01e      	beq.n	800a132 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a0f4:	4b64      	ldr	r3, [pc, #400]	@ (800a288 <tcp_receive+0x888>)
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	899b      	ldrh	r3, [r3, #12]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	b21b      	sxth	r3, r3
 800a0fe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a102:	b21c      	sxth	r4, r3
 800a104:	4b60      	ldr	r3, [pc, #384]	@ (800a288 <tcp_receive+0x888>)
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	899b      	ldrh	r3, [r3, #12]
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fb f85b 	bl	80051c8 <lwip_htons>
 800a112:	4603      	mov	r3, r0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7fb f853 	bl	80051c8 <lwip_htons>
 800a122:	4603      	mov	r3, r0
 800a124:	b21b      	sxth	r3, r3
 800a126:	4323      	orrs	r3, r4
 800a128:	b21a      	sxth	r2, r3
 800a12a:	4b57      	ldr	r3, [pc, #348]	@ (800a288 <tcp_receive+0x888>)
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	b292      	uxth	r2, r2
 800a130:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a136:	4b54      	ldr	r3, [pc, #336]	@ (800a288 <tcp_receive+0x888>)
 800a138:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a13a:	4b53      	ldr	r3, [pc, #332]	@ (800a288 <tcp_receive+0x888>)
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	899b      	ldrh	r3, [r3, #12]
 800a140:	b29b      	uxth	r3, r3
 800a142:	4618      	mov	r0, r3
 800a144:	f7fb f840 	bl	80051c8 <lwip_htons>
 800a148:	4603      	mov	r3, r0
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	f003 0302 	and.w	r3, r3, #2
 800a150:	2b00      	cmp	r3, #0
 800a152:	d005      	beq.n	800a160 <tcp_receive+0x760>
            inseg.len -= 1;
 800a154:	4b4c      	ldr	r3, [pc, #304]	@ (800a288 <tcp_receive+0x888>)
 800a156:	891b      	ldrh	r3, [r3, #8]
 800a158:	3b01      	subs	r3, #1
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	4b4a      	ldr	r3, [pc, #296]	@ (800a288 <tcp_receive+0x888>)
 800a15e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a160:	4b49      	ldr	r3, [pc, #292]	@ (800a288 <tcp_receive+0x888>)
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	4a48      	ldr	r2, [pc, #288]	@ (800a288 <tcp_receive+0x888>)
 800a166:	8912      	ldrh	r2, [r2, #8]
 800a168:	4611      	mov	r1, r2
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fc f9e0 	bl	8006530 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a170:	4b45      	ldr	r3, [pc, #276]	@ (800a288 <tcp_receive+0x888>)
 800a172:	891c      	ldrh	r4, [r3, #8]
 800a174:	4b44      	ldr	r3, [pc, #272]	@ (800a288 <tcp_receive+0x888>)
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	899b      	ldrh	r3, [r3, #12]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fb f823 	bl	80051c8 <lwip_htons>
 800a182:	4603      	mov	r3, r0
 800a184:	b2db      	uxtb	r3, r3
 800a186:	f003 0303 	and.w	r3, r3, #3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <tcp_receive+0x792>
 800a18e:	2301      	movs	r3, #1
 800a190:	e000      	b.n	800a194 <tcp_receive+0x794>
 800a192:	2300      	movs	r3, #0
 800a194:	4423      	add	r3, r4
 800a196:	b29a      	uxth	r2, r3
 800a198:	4b3c      	ldr	r3, [pc, #240]	@ (800a28c <tcp_receive+0x88c>)
 800a19a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a19c:	4b3b      	ldr	r3, [pc, #236]	@ (800a28c <tcp_receive+0x88c>)
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	4b38      	ldr	r3, [pc, #224]	@ (800a284 <tcp_receive+0x884>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	441a      	add	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ac:	6879      	ldr	r1, [r7, #4]
 800a1ae:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a1b0:	440b      	add	r3, r1
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d006      	beq.n	800a1c4 <tcp_receive+0x7c4>
 800a1b6:	4b36      	ldr	r3, [pc, #216]	@ (800a290 <tcp_receive+0x890>)
 800a1b8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800a1bc:	4935      	ldr	r1, [pc, #212]	@ (800a294 <tcp_receive+0x894>)
 800a1be:	4836      	ldr	r0, [pc, #216]	@ (800a298 <tcp_receive+0x898>)
 800a1c0:	f004 fdaa 	bl	800ed18 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f000 80e6 	beq.w	800a39a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a1ce:	4b2e      	ldr	r3, [pc, #184]	@ (800a288 <tcp_receive+0x888>)
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	899b      	ldrh	r3, [r3, #12]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fa fff6 	bl	80051c8 <lwip_htons>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d010      	beq.n	800a20a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a1e8:	e00a      	b.n	800a200 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1ee:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7fd fd93 	bl	8007d26 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1f0      	bne.n	800a1ea <tcp_receive+0x7ea>
 800a208:	e0c7      	b.n	800a39a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a210:	e051      	b.n	800a2b6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	899b      	ldrh	r3, [r3, #12]
 800a218:	b29b      	uxth	r3, r3
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fa ffd4 	bl	80051c8 <lwip_htons>
 800a220:	4603      	mov	r3, r0
 800a222:	b2db      	uxtb	r3, r3
 800a224:	f003 0301 	and.w	r3, r3, #1
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d03c      	beq.n	800a2a6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a22c:	4b16      	ldr	r3, [pc, #88]	@ (800a288 <tcp_receive+0x888>)
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	899b      	ldrh	r3, [r3, #12]
 800a232:	b29b      	uxth	r3, r3
 800a234:	4618      	mov	r0, r3
 800a236:	f7fa ffc7 	bl	80051c8 <lwip_htons>
 800a23a:	4603      	mov	r3, r0
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a242:	2b00      	cmp	r3, #0
 800a244:	d12f      	bne.n	800a2a6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a246:	4b10      	ldr	r3, [pc, #64]	@ (800a288 <tcp_receive+0x888>)
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	899b      	ldrh	r3, [r3, #12]
 800a24c:	b29c      	uxth	r4, r3
 800a24e:	2001      	movs	r0, #1
 800a250:	f7fa ffba 	bl	80051c8 <lwip_htons>
 800a254:	4603      	mov	r3, r0
 800a256:	461a      	mov	r2, r3
 800a258:	4b0b      	ldr	r3, [pc, #44]	@ (800a288 <tcp_receive+0x888>)
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	4322      	orrs	r2, r4
 800a25e:	b292      	uxth	r2, r2
 800a260:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a262:	4b09      	ldr	r3, [pc, #36]	@ (800a288 <tcp_receive+0x888>)
 800a264:	891c      	ldrh	r4, [r3, #8]
 800a266:	4b08      	ldr	r3, [pc, #32]	@ (800a288 <tcp_receive+0x888>)
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	899b      	ldrh	r3, [r3, #12]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fa ffaa 	bl	80051c8 <lwip_htons>
 800a274:	4603      	mov	r3, r0
 800a276:	b2db      	uxtb	r3, r3
 800a278:	f003 0303 	and.w	r3, r3, #3
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00d      	beq.n	800a29c <tcp_receive+0x89c>
 800a280:	2301      	movs	r3, #1
 800a282:	e00c      	b.n	800a29e <tcp_receive+0x89e>
 800a284:	20007ca8 	.word	0x20007ca8
 800a288:	20007c88 	.word	0x20007c88
 800a28c:	20007cb2 	.word	0x20007cb2
 800a290:	08010d78 	.word	0x08010d78
 800a294:	08011120 	.word	0x08011120
 800a298:	08010dc4 	.word	0x08010dc4
 800a29c:	2300      	movs	r3, #0
 800a29e:	4423      	add	r3, r4
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	4b98      	ldr	r3, [pc, #608]	@ (800a504 <tcp_receive+0xb04>)
 800a2a4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a2a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a2aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800a2b0:	6938      	ldr	r0, [r7, #16]
 800a2b2:	f7fd fd38 	bl	8007d26 <tcp_seg_free>
            while (next &&
 800a2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00e      	beq.n	800a2da <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a2bc:	4b91      	ldr	r3, [pc, #580]	@ (800a504 <tcp_receive+0xb04>)
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	4b91      	ldr	r3, [pc, #580]	@ (800a508 <tcp_receive+0xb08>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	441a      	add	r2, r3
 800a2c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2d0:	8909      	ldrh	r1, [r1, #8]
 800a2d2:	440b      	add	r3, r1
 800a2d4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	da9b      	bge.n	800a212 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a2da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d059      	beq.n	800a394 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a2e0:	4b88      	ldr	r3, [pc, #544]	@ (800a504 <tcp_receive+0xb04>)
 800a2e2:	881b      	ldrh	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	4b88      	ldr	r3, [pc, #544]	@ (800a508 <tcp_receive+0xb08>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	441a      	add	r2, r3
 800a2ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	dd4d      	ble.n	800a394 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	4b81      	ldr	r3, [pc, #516]	@ (800a508 <tcp_receive+0xb08>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	b29b      	uxth	r3, r3
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	b29a      	uxth	r2, r3
 800a30a:	4b80      	ldr	r3, [pc, #512]	@ (800a50c <tcp_receive+0xb0c>)
 800a30c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a30e:	4b7f      	ldr	r3, [pc, #508]	@ (800a50c <tcp_receive+0xb0c>)
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	899b      	ldrh	r3, [r3, #12]
 800a314:	b29b      	uxth	r3, r3
 800a316:	4618      	mov	r0, r3
 800a318:	f7fa ff56 	bl	80051c8 <lwip_htons>
 800a31c:	4603      	mov	r3, r0
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	f003 0302 	and.w	r3, r3, #2
 800a324:	2b00      	cmp	r3, #0
 800a326:	d005      	beq.n	800a334 <tcp_receive+0x934>
                inseg.len -= 1;
 800a328:	4b78      	ldr	r3, [pc, #480]	@ (800a50c <tcp_receive+0xb0c>)
 800a32a:	891b      	ldrh	r3, [r3, #8]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b29a      	uxth	r2, r3
 800a330:	4b76      	ldr	r3, [pc, #472]	@ (800a50c <tcp_receive+0xb0c>)
 800a332:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a334:	4b75      	ldr	r3, [pc, #468]	@ (800a50c <tcp_receive+0xb0c>)
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	4a74      	ldr	r2, [pc, #464]	@ (800a50c <tcp_receive+0xb0c>)
 800a33a:	8912      	ldrh	r2, [r2, #8]
 800a33c:	4611      	mov	r1, r2
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fc f8f6 	bl	8006530 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a344:	4b71      	ldr	r3, [pc, #452]	@ (800a50c <tcp_receive+0xb0c>)
 800a346:	891c      	ldrh	r4, [r3, #8]
 800a348:	4b70      	ldr	r3, [pc, #448]	@ (800a50c <tcp_receive+0xb0c>)
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	899b      	ldrh	r3, [r3, #12]
 800a34e:	b29b      	uxth	r3, r3
 800a350:	4618      	mov	r0, r3
 800a352:	f7fa ff39 	bl	80051c8 <lwip_htons>
 800a356:	4603      	mov	r3, r0
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	f003 0303 	and.w	r3, r3, #3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d001      	beq.n	800a366 <tcp_receive+0x966>
 800a362:	2301      	movs	r3, #1
 800a364:	e000      	b.n	800a368 <tcp_receive+0x968>
 800a366:	2300      	movs	r3, #0
 800a368:	4423      	add	r3, r4
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	4b65      	ldr	r3, [pc, #404]	@ (800a504 <tcp_receive+0xb04>)
 800a36e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a370:	4b64      	ldr	r3, [pc, #400]	@ (800a504 <tcp_receive+0xb04>)
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	461a      	mov	r2, r3
 800a376:	4b64      	ldr	r3, [pc, #400]	@ (800a508 <tcp_receive+0xb08>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	441a      	add	r2, r3
 800a37c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	429a      	cmp	r2, r3
 800a384:	d006      	beq.n	800a394 <tcp_receive+0x994>
 800a386:	4b62      	ldr	r3, [pc, #392]	@ (800a510 <tcp_receive+0xb10>)
 800a388:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800a38c:	4961      	ldr	r1, [pc, #388]	@ (800a514 <tcp_receive+0xb14>)
 800a38e:	4862      	ldr	r0, [pc, #392]	@ (800a518 <tcp_receive+0xb18>)
 800a390:	f004 fcc2 	bl	800ed18 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a398:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a39a:	4b5a      	ldr	r3, [pc, #360]	@ (800a504 <tcp_receive+0xb04>)
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	4b59      	ldr	r3, [pc, #356]	@ (800a508 <tcp_receive+0xb08>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	441a      	add	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a3ae:	4b55      	ldr	r3, [pc, #340]	@ (800a504 <tcp_receive+0xb04>)
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d206      	bcs.n	800a3c4 <tcp_receive+0x9c4>
 800a3b6:	4b56      	ldr	r3, [pc, #344]	@ (800a510 <tcp_receive+0xb10>)
 800a3b8:	f240 6207 	movw	r2, #1543	@ 0x607
 800a3bc:	4957      	ldr	r1, [pc, #348]	@ (800a51c <tcp_receive+0xb1c>)
 800a3be:	4856      	ldr	r0, [pc, #344]	@ (800a518 <tcp_receive+0xb18>)
 800a3c0:	f004 fcaa 	bl	800ed18 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a3c8:	4b4e      	ldr	r3, [pc, #312]	@ (800a504 <tcp_receive+0xb04>)
 800a3ca:	881b      	ldrh	r3, [r3, #0]
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f7fc ffc5 	bl	8007364 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a3da:	4b4c      	ldr	r3, [pc, #304]	@ (800a50c <tcp_receive+0xb0c>)
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	891b      	ldrh	r3, [r3, #8]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d006      	beq.n	800a3f2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a3e4:	4b49      	ldr	r3, [pc, #292]	@ (800a50c <tcp_receive+0xb0c>)
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	4a4d      	ldr	r2, [pc, #308]	@ (800a520 <tcp_receive+0xb20>)
 800a3ea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a3ec:	4b47      	ldr	r3, [pc, #284]	@ (800a50c <tcp_receive+0xb0c>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a3f2:	4b46      	ldr	r3, [pc, #280]	@ (800a50c <tcp_receive+0xb0c>)
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	899b      	ldrh	r3, [r3, #12]
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fa fee4 	bl	80051c8 <lwip_htons>
 800a400:	4603      	mov	r3, r0
 800a402:	b2db      	uxtb	r3, r3
 800a404:	f003 0301 	and.w	r3, r3, #1
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 80b8 	beq.w	800a57e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a40e:	4b45      	ldr	r3, [pc, #276]	@ (800a524 <tcp_receive+0xb24>)
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	f043 0320 	orr.w	r3, r3, #32
 800a416:	b2da      	uxtb	r2, r3
 800a418:	4b42      	ldr	r3, [pc, #264]	@ (800a524 <tcp_receive+0xb24>)
 800a41a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a41c:	e0af      	b.n	800a57e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a422:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	4a36      	ldr	r2, [pc, #216]	@ (800a508 <tcp_receive+0xb08>)
 800a42e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	891b      	ldrh	r3, [r3, #8]
 800a434:	461c      	mov	r4, r3
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	899b      	ldrh	r3, [r3, #12]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fa fec2 	bl	80051c8 <lwip_htons>
 800a444:	4603      	mov	r3, r0
 800a446:	b2db      	uxtb	r3, r3
 800a448:	f003 0303 	and.w	r3, r3, #3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <tcp_receive+0xa54>
 800a450:	2301      	movs	r3, #1
 800a452:	e000      	b.n	800a456 <tcp_receive+0xa56>
 800a454:	2300      	movs	r3, #0
 800a456:	191a      	adds	r2, r3, r4
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45c:	441a      	add	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a466:	461c      	mov	r4, r3
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	891b      	ldrh	r3, [r3, #8]
 800a46c:	461d      	mov	r5, r3
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	899b      	ldrh	r3, [r3, #12]
 800a474:	b29b      	uxth	r3, r3
 800a476:	4618      	mov	r0, r3
 800a478:	f7fa fea6 	bl	80051c8 <lwip_htons>
 800a47c:	4603      	mov	r3, r0
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	f003 0303 	and.w	r3, r3, #3
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <tcp_receive+0xa8c>
 800a488:	2301      	movs	r3, #1
 800a48a:	e000      	b.n	800a48e <tcp_receive+0xa8e>
 800a48c:	2300      	movs	r3, #0
 800a48e:	442b      	add	r3, r5
 800a490:	429c      	cmp	r4, r3
 800a492:	d206      	bcs.n	800a4a2 <tcp_receive+0xaa2>
 800a494:	4b1e      	ldr	r3, [pc, #120]	@ (800a510 <tcp_receive+0xb10>)
 800a496:	f240 622b 	movw	r2, #1579	@ 0x62b
 800a49a:	4923      	ldr	r1, [pc, #140]	@ (800a528 <tcp_receive+0xb28>)
 800a49c:	481e      	ldr	r0, [pc, #120]	@ (800a518 <tcp_receive+0xb18>)
 800a49e:	f004 fc3b 	bl	800ed18 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	891b      	ldrh	r3, [r3, #8]
 800a4a6:	461c      	mov	r4, r3
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	899b      	ldrh	r3, [r3, #12]
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7fa fe89 	bl	80051c8 <lwip_htons>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	f003 0303 	and.w	r3, r3, #3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <tcp_receive+0xac6>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e000      	b.n	800a4c8 <tcp_receive+0xac8>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	1919      	adds	r1, r3, r4
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a4ce:	b28b      	uxth	r3, r1
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7fc ff43 	bl	8007364 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	891b      	ldrh	r3, [r3, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d028      	beq.n	800a53a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a4e8:	4b0d      	ldr	r3, [pc, #52]	@ (800a520 <tcp_receive+0xb20>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d01d      	beq.n	800a52c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a4f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a520 <tcp_receive+0xb20>)
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	4610      	mov	r0, r2
 800a4fc:	f7fc fa60 	bl	80069c0 <pbuf_cat>
 800a500:	e018      	b.n	800a534 <tcp_receive+0xb34>
 800a502:	bf00      	nop
 800a504:	20007cb2 	.word	0x20007cb2
 800a508:	20007ca8 	.word	0x20007ca8
 800a50c:	20007c88 	.word	0x20007c88
 800a510:	08010d78 	.word	0x08010d78
 800a514:	08011158 	.word	0x08011158
 800a518:	08010dc4 	.word	0x08010dc4
 800a51c:	08011194 	.word	0x08011194
 800a520:	20007cb8 	.word	0x20007cb8
 800a524:	20007cb5 	.word	0x20007cb5
 800a528:	080111b4 	.word	0x080111b4
            } else {
              recv_data = cseg->p;
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	4a70      	ldr	r2, [pc, #448]	@ (800a6f4 <tcp_receive+0xcf4>)
 800a532:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2200      	movs	r2, #0
 800a538:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	899b      	ldrh	r3, [r3, #12]
 800a540:	b29b      	uxth	r3, r3
 800a542:	4618      	mov	r0, r3
 800a544:	f7fa fe40 	bl	80051c8 <lwip_htons>
 800a548:	4603      	mov	r3, r0
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00d      	beq.n	800a570 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a554:	4b68      	ldr	r3, [pc, #416]	@ (800a6f8 <tcp_receive+0xcf8>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	f043 0320 	orr.w	r3, r3, #32
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	4b66      	ldr	r3, [pc, #408]	@ (800a6f8 <tcp_receive+0xcf8>)
 800a560:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	7d1b      	ldrb	r3, [r3, #20]
 800a566:	2b04      	cmp	r3, #4
 800a568:	d102      	bne.n	800a570 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2207      	movs	r2, #7
 800a56e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800a578:	68b8      	ldr	r0, [r7, #8]
 800a57a:	f7fd fbd4 	bl	8007d26 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a582:	2b00      	cmp	r3, #0
 800a584:	d008      	beq.n	800a598 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800a592:	429a      	cmp	r2, r3
 800a594:	f43f af43 	beq.w	800a41e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	8b5b      	ldrh	r3, [r3, #26]
 800a59c:	f003 0301 	and.w	r3, r3, #1
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00e      	beq.n	800a5c2 <tcp_receive+0xbc2>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	8b5b      	ldrh	r3, [r3, #26]
 800a5a8:	f023 0301 	bic.w	r3, r3, #1
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	835a      	strh	r2, [r3, #26]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	8b5b      	ldrh	r3, [r3, #26]
 800a5b6:	f043 0302 	orr.w	r3, r3, #2
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a5c0:	e187      	b.n	800a8d2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	8b5b      	ldrh	r3, [r3, #26]
 800a5c6:	f043 0301 	orr.w	r3, r3, #1
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a5d0:	e17f      	b.n	800a8d2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d106      	bne.n	800a5e8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a5da:	4848      	ldr	r0, [pc, #288]	@ (800a6fc <tcp_receive+0xcfc>)
 800a5dc:	f7fd fbbc 	bl	8007d58 <tcp_seg_copy>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	675a      	str	r2, [r3, #116]	@ 0x74
 800a5e6:	e16c      	b.n	800a8c2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a5f2:	e156      	b.n	800a8a2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	685a      	ldr	r2, [r3, #4]
 800a5fa:	4b41      	ldr	r3, [pc, #260]	@ (800a700 <tcp_receive+0xd00>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d11d      	bne.n	800a63e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a602:	4b3e      	ldr	r3, [pc, #248]	@ (800a6fc <tcp_receive+0xcfc>)
 800a604:	891a      	ldrh	r2, [r3, #8]
 800a606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a608:	891b      	ldrh	r3, [r3, #8]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	f240 814e 	bls.w	800a8ac <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a610:	483a      	ldr	r0, [pc, #232]	@ (800a6fc <tcp_receive+0xcfc>)
 800a612:	f7fd fba1 	bl	8007d58 <tcp_seg_copy>
 800a616:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f000 8148 	beq.w	800a8b0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800a620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a622:	2b00      	cmp	r3, #0
 800a624:	d003      	beq.n	800a62e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	e002      	b.n	800a634 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a634:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a636:	6978      	ldr	r0, [r7, #20]
 800a638:	f7ff f8de 	bl	80097f8 <tcp_oos_insert_segment>
                }
                break;
 800a63c:	e138      	b.n	800a8b0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a63e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a640:	2b00      	cmp	r3, #0
 800a642:	d117      	bne.n	800a674 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a644:	4b2e      	ldr	r3, [pc, #184]	@ (800a700 <tcp_receive+0xd00>)
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	2b00      	cmp	r3, #0
 800a652:	da57      	bge.n	800a704 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a654:	4829      	ldr	r0, [pc, #164]	@ (800a6fc <tcp_receive+0xcfc>)
 800a656:	f7fd fb7f 	bl	8007d58 <tcp_seg_copy>
 800a65a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 8128 	beq.w	800a8b4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a66a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a66c:	69b8      	ldr	r0, [r7, #24]
 800a66e:	f7ff f8c3 	bl	80097f8 <tcp_oos_insert_segment>
                  }
                  break;
 800a672:	e11f      	b.n	800a8b4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a674:	4b22      	ldr	r3, [pc, #136]	@ (800a700 <tcp_receive+0xd00>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	1ad3      	subs	r3, r2, r3
 800a680:	3b01      	subs	r3, #1
 800a682:	2b00      	cmp	r3, #0
 800a684:	db3e      	blt.n	800a704 <tcp_receive+0xd04>
 800a686:	4b1e      	ldr	r3, [pc, #120]	@ (800a700 <tcp_receive+0xd00>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	3301      	adds	r3, #1
 800a694:	2b00      	cmp	r3, #0
 800a696:	dc35      	bgt.n	800a704 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a698:	4818      	ldr	r0, [pc, #96]	@ (800a6fc <tcp_receive+0xcfc>)
 800a69a:	f7fd fb5d 	bl	8007d58 <tcp_seg_copy>
 800a69e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 8108 	beq.w	800a8b8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6b0:	8912      	ldrh	r2, [r2, #8]
 800a6b2:	441a      	add	r2, r3
 800a6b4:	4b12      	ldr	r3, [pc, #72]	@ (800a700 <tcp_receive+0xd00>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	dd12      	ble.n	800a6e4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a6be:	4b10      	ldr	r3, [pc, #64]	@ (800a700 <tcp_receive+0xd00>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6da:	891b      	ldrh	r3, [r3, #8]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	4610      	mov	r0, r2
 800a6e0:	f7fb ff26 	bl	8006530 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e6:	69fa      	ldr	r2, [r7, #28]
 800a6e8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a6ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6ec:	69f8      	ldr	r0, [r7, #28]
 800a6ee:	f7ff f883 	bl	80097f8 <tcp_oos_insert_segment>
                  }
                  break;
 800a6f2:	e0e1      	b.n	800a8b8 <tcp_receive+0xeb8>
 800a6f4:	20007cb8 	.word	0x20007cb8
 800a6f8:	20007cb5 	.word	0x20007cb5
 800a6fc:	20007c88 	.word	0x20007c88
 800a700:	20007ca8 	.word	0x20007ca8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a706:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f040 80c5 	bne.w	800a89c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a712:	4b7f      	ldr	r3, [pc, #508]	@ (800a910 <tcp_receive+0xf10>)
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f340 80bc 	ble.w	800a89c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	899b      	ldrh	r3, [r3, #12]
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fa fd4b 	bl	80051c8 <lwip_htons>
 800a732:	4603      	mov	r3, r0
 800a734:	b2db      	uxtb	r3, r3
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f040 80be 	bne.w	800a8bc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a740:	4874      	ldr	r0, [pc, #464]	@ (800a914 <tcp_receive+0xf14>)
 800a742:	f7fd fb09 	bl	8007d58 <tcp_seg_copy>
 800a746:	4602      	mov	r2, r0
 800a748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 80b5 	beq.w	800a8c0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a75e:	8912      	ldrh	r2, [r2, #8]
 800a760:	441a      	add	r2, r3
 800a762:	4b6b      	ldr	r3, [pc, #428]	@ (800a910 <tcp_receive+0xf10>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	2b00      	cmp	r3, #0
 800a76a:	dd12      	ble.n	800a792 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a76c:	4b68      	ldr	r3, [pc, #416]	@ (800a910 <tcp_receive+0xf10>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	b29a      	uxth	r2, r3
 800a772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	b29b      	uxth	r3, r3
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a780:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a788:	891b      	ldrh	r3, [r3, #8]
 800a78a:	4619      	mov	r1, r3
 800a78c:	4610      	mov	r0, r2
 800a78e:	f7fb fecf 	bl	8006530 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a792:	4b61      	ldr	r3, [pc, #388]	@ (800a918 <tcp_receive+0xf18>)
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	461a      	mov	r2, r3
 800a798:	4b5d      	ldr	r3, [pc, #372]	@ (800a910 <tcp_receive+0xf10>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	441a      	add	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a7a6:	440b      	add	r3, r1
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f340 8088 	ble.w	800a8c0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	899b      	ldrh	r3, [r3, #12]
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fa fd04 	bl	80051c8 <lwip_htons>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	f003 0301 	and.w	r3, r3, #1
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d021      	beq.n	800a810 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	899b      	ldrh	r3, [r3, #12]
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	b21b      	sxth	r3, r3
 800a7d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a7dc:	b21c      	sxth	r4, r3
 800a7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	899b      	ldrh	r3, [r3, #12]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fa fced 	bl	80051c8 <lwip_htons>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fa fce5 	bl	80051c8 <lwip_htons>
 800a7fe:	4603      	mov	r3, r0
 800a800:	b21b      	sxth	r3, r3
 800a802:	4323      	orrs	r3, r4
 800a804:	b21a      	sxth	r2, r3
 800a806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	b292      	uxth	r2, r2
 800a80e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a814:	b29a      	uxth	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a81a:	4413      	add	r3, r2
 800a81c:	b299      	uxth	r1, r3
 800a81e:	4b3c      	ldr	r3, [pc, #240]	@ (800a910 <tcp_receive+0xf10>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	b29a      	uxth	r2, r3
 800a824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	1a8a      	subs	r2, r1, r2
 800a82a:	b292      	uxth	r2, r2
 800a82c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	891b      	ldrh	r3, [r3, #8]
 800a83a:	4619      	mov	r1, r3
 800a83c:	4610      	mov	r0, r2
 800a83e:	f7fb fe77 	bl	8006530 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	891c      	ldrh	r4, [r3, #8]
 800a848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	899b      	ldrh	r3, [r3, #12]
 800a850:	b29b      	uxth	r3, r3
 800a852:	4618      	mov	r0, r3
 800a854:	f7fa fcb8 	bl	80051c8 <lwip_htons>
 800a858:	4603      	mov	r3, r0
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	f003 0303 	and.w	r3, r3, #3
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <tcp_receive+0xe68>
 800a864:	2301      	movs	r3, #1
 800a866:	e000      	b.n	800a86a <tcp_receive+0xe6a>
 800a868:	2300      	movs	r3, #0
 800a86a:	4423      	add	r3, r4
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	4b2a      	ldr	r3, [pc, #168]	@ (800a918 <tcp_receive+0xf18>)
 800a870:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a872:	4b29      	ldr	r3, [pc, #164]	@ (800a918 <tcp_receive+0xf18>)
 800a874:	881b      	ldrh	r3, [r3, #0]
 800a876:	461a      	mov	r2, r3
 800a878:	4b25      	ldr	r3, [pc, #148]	@ (800a910 <tcp_receive+0xf10>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	441a      	add	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a882:	6879      	ldr	r1, [r7, #4]
 800a884:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a886:	440b      	add	r3, r1
 800a888:	429a      	cmp	r2, r3
 800a88a:	d019      	beq.n	800a8c0 <tcp_receive+0xec0>
 800a88c:	4b23      	ldr	r3, [pc, #140]	@ (800a91c <tcp_receive+0xf1c>)
 800a88e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800a892:	4923      	ldr	r1, [pc, #140]	@ (800a920 <tcp_receive+0xf20>)
 800a894:	4823      	ldr	r0, [pc, #140]	@ (800a924 <tcp_receive+0xf24>)
 800a896:	f004 fa3f 	bl	800ed18 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a89a:	e011      	b.n	800a8c0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f47f aea5 	bne.w	800a5f4 <tcp_receive+0xbf4>
 800a8aa:	e00a      	b.n	800a8c2 <tcp_receive+0xec2>
                break;
 800a8ac:	bf00      	nop
 800a8ae:	e008      	b.n	800a8c2 <tcp_receive+0xec2>
                break;
 800a8b0:	bf00      	nop
 800a8b2:	e006      	b.n	800a8c2 <tcp_receive+0xec2>
                  break;
 800a8b4:	bf00      	nop
 800a8b6:	e004      	b.n	800a8c2 <tcp_receive+0xec2>
                  break;
 800a8b8:	bf00      	nop
 800a8ba:	e002      	b.n	800a8c2 <tcp_receive+0xec2>
                  break;
 800a8bc:	bf00      	nop
 800a8be:	e000      	b.n	800a8c2 <tcp_receive+0xec2>
                break;
 800a8c0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f001 fa30 	bl	800bd28 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a8c8:	e003      	b.n	800a8d2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f001 fa2c 	bl	800bd28 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a8d0:	e01a      	b.n	800a908 <tcp_receive+0xf08>
 800a8d2:	e019      	b.n	800a908 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a8d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a910 <tcp_receive+0xf10>)
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	db0a      	blt.n	800a8f8 <tcp_receive+0xef8>
 800a8e2:	4b0b      	ldr	r3, [pc, #44]	@ (800a910 <tcp_receive+0xf10>)
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ea:	6879      	ldr	r1, [r7, #4]
 800a8ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a8ee:	440b      	add	r3, r1
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	dd07      	ble.n	800a908 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	8b5b      	ldrh	r3, [r3, #26]
 800a8fc:	f043 0302 	orr.w	r3, r3, #2
 800a900:	b29a      	uxth	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a906:	e7ff      	b.n	800a908 <tcp_receive+0xf08>
 800a908:	bf00      	nop
 800a90a:	3750      	adds	r7, #80	@ 0x50
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bdb0      	pop	{r4, r5, r7, pc}
 800a910:	20007ca8 	.word	0x20007ca8
 800a914:	20007c88 	.word	0x20007c88
 800a918:	20007cb2 	.word	0x20007cb2
 800a91c:	08010d78 	.word	0x08010d78
 800a920:	08011120 	.word	0x08011120
 800a924:	08010dc4 	.word	0x08010dc4

0800a928 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a92e:	4b15      	ldr	r3, [pc, #84]	@ (800a984 <tcp_get_next_optbyte+0x5c>)
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	b291      	uxth	r1, r2
 800a936:	4a13      	ldr	r2, [pc, #76]	@ (800a984 <tcp_get_next_optbyte+0x5c>)
 800a938:	8011      	strh	r1, [r2, #0]
 800a93a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a93c:	4b12      	ldr	r3, [pc, #72]	@ (800a988 <tcp_get_next_optbyte+0x60>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d004      	beq.n	800a94e <tcp_get_next_optbyte+0x26>
 800a944:	4b11      	ldr	r3, [pc, #68]	@ (800a98c <tcp_get_next_optbyte+0x64>)
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	88fa      	ldrh	r2, [r7, #6]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d208      	bcs.n	800a960 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a94e:	4b10      	ldr	r3, [pc, #64]	@ (800a990 <tcp_get_next_optbyte+0x68>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3314      	adds	r3, #20
 800a954:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a956:	88fb      	ldrh	r3, [r7, #6]
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	4413      	add	r3, r2
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	e00b      	b.n	800a978 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a960:	88fb      	ldrh	r3, [r7, #6]
 800a962:	b2da      	uxtb	r2, r3
 800a964:	4b09      	ldr	r3, [pc, #36]	@ (800a98c <tcp_get_next_optbyte+0x64>)
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a96e:	4b06      	ldr	r3, [pc, #24]	@ (800a988 <tcp_get_next_optbyte+0x60>)
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	797b      	ldrb	r3, [r7, #5]
 800a974:	4413      	add	r3, r2
 800a976:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a978:	4618      	mov	r0, r3
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	20007ca4 	.word	0x20007ca4
 800a988:	20007ca0 	.word	0x20007ca0
 800a98c:	20007c9e 	.word	0x20007c9e
 800a990:	20007c98 	.word	0x20007c98

0800a994 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d106      	bne.n	800a9b0 <tcp_parseopt+0x1c>
 800a9a2:	4b32      	ldr	r3, [pc, #200]	@ (800aa6c <tcp_parseopt+0xd8>)
 800a9a4:	f240 727d 	movw	r2, #1917	@ 0x77d
 800a9a8:	4931      	ldr	r1, [pc, #196]	@ (800aa70 <tcp_parseopt+0xdc>)
 800a9aa:	4832      	ldr	r0, [pc, #200]	@ (800aa74 <tcp_parseopt+0xe0>)
 800a9ac:	f004 f9b4 	bl	800ed18 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a9b0:	4b31      	ldr	r3, [pc, #196]	@ (800aa78 <tcp_parseopt+0xe4>)
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d056      	beq.n	800aa66 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a9b8:	4b30      	ldr	r3, [pc, #192]	@ (800aa7c <tcp_parseopt+0xe8>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	801a      	strh	r2, [r3, #0]
 800a9be:	e046      	b.n	800aa4e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800a9c0:	f7ff ffb2 	bl	800a928 <tcp_get_next_optbyte>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d006      	beq.n	800a9dc <tcp_parseopt+0x48>
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	dc2a      	bgt.n	800aa28 <tcp_parseopt+0x94>
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d042      	beq.n	800aa5c <tcp_parseopt+0xc8>
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d038      	beq.n	800aa4c <tcp_parseopt+0xb8>
 800a9da:	e025      	b.n	800aa28 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a9dc:	f7ff ffa4 	bl	800a928 <tcp_get_next_optbyte>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b04      	cmp	r3, #4
 800a9e4:	d13c      	bne.n	800aa60 <tcp_parseopt+0xcc>
 800a9e6:	4b25      	ldr	r3, [pc, #148]	@ (800aa7c <tcp_parseopt+0xe8>)
 800a9e8:	881b      	ldrh	r3, [r3, #0]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	4a22      	ldr	r2, [pc, #136]	@ (800aa78 <tcp_parseopt+0xe4>)
 800a9ee:	8812      	ldrh	r2, [r2, #0]
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	da35      	bge.n	800aa60 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a9f4:	f7ff ff98 	bl	800a928 <tcp_get_next_optbyte>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	021b      	lsls	r3, r3, #8
 800a9fc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a9fe:	f7ff ff93 	bl	800a928 <tcp_get_next_optbyte>
 800aa02:	4603      	mov	r3, r0
 800aa04:	461a      	mov	r2, r3
 800aa06:	89bb      	ldrh	r3, [r7, #12]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800aa0c:	89bb      	ldrh	r3, [r7, #12]
 800aa0e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800aa12:	d804      	bhi.n	800aa1e <tcp_parseopt+0x8a>
 800aa14:	89bb      	ldrh	r3, [r7, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <tcp_parseopt+0x8a>
 800aa1a:	89ba      	ldrh	r2, [r7, #12]
 800aa1c:	e001      	b.n	800aa22 <tcp_parseopt+0x8e>
 800aa1e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800aa26:	e012      	b.n	800aa4e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800aa28:	f7ff ff7e 	bl	800a928 <tcp_get_next_optbyte>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800aa30:	7afb      	ldrb	r3, [r7, #11]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d916      	bls.n	800aa64 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800aa36:	7afb      	ldrb	r3, [r7, #11]
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	4b10      	ldr	r3, [pc, #64]	@ (800aa7c <tcp_parseopt+0xe8>)
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	4413      	add	r3, r2
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	3b02      	subs	r3, #2
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	4b0d      	ldr	r3, [pc, #52]	@ (800aa7c <tcp_parseopt+0xe8>)
 800aa48:	801a      	strh	r2, [r3, #0]
 800aa4a:	e000      	b.n	800aa4e <tcp_parseopt+0xba>
          break;
 800aa4c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aa4e:	4b0b      	ldr	r3, [pc, #44]	@ (800aa7c <tcp_parseopt+0xe8>)
 800aa50:	881a      	ldrh	r2, [r3, #0]
 800aa52:	4b09      	ldr	r3, [pc, #36]	@ (800aa78 <tcp_parseopt+0xe4>)
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d3b2      	bcc.n	800a9c0 <tcp_parseopt+0x2c>
 800aa5a:	e004      	b.n	800aa66 <tcp_parseopt+0xd2>
          return;
 800aa5c:	bf00      	nop
 800aa5e:	e002      	b.n	800aa66 <tcp_parseopt+0xd2>
            return;
 800aa60:	bf00      	nop
 800aa62:	e000      	b.n	800aa66 <tcp_parseopt+0xd2>
            return;
 800aa64:	bf00      	nop
      }
    }
  }
}
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	08010d78 	.word	0x08010d78
 800aa70:	080111dc 	.word	0x080111dc
 800aa74:	08010dc4 	.word	0x08010dc4
 800aa78:	20007c9c 	.word	0x20007c9c
 800aa7c:	20007ca4 	.word	0x20007ca4

0800aa80 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800aa80:	b480      	push	{r7}
 800aa82:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800aa84:	4b05      	ldr	r3, [pc, #20]	@ (800aa9c <tcp_trigger_input_pcb_close+0x1c>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	f043 0310 	orr.w	r3, r3, #16
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	4b03      	ldr	r3, [pc, #12]	@ (800aa9c <tcp_trigger_input_pcb_close+0x1c>)
 800aa90:	701a      	strb	r2, [r3, #0]
}
 800aa92:	bf00      	nop
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	20007cb5 	.word	0x20007cb5

0800aaa0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00a      	beq.n	800aac8 <tcp_route+0x28>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	7a1b      	ldrb	r3, [r3, #8]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d006      	beq.n	800aac8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	7a1b      	ldrb	r3, [r3, #8]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fb fb7c 	bl	80061bc <netif_get_by_index>
 800aac4:	4603      	mov	r3, r0
 800aac6:	e003      	b.n	800aad0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f002 fe39 	bl	800d740 <ip4_route>
 800aace:	4603      	mov	r3, r0
  }
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800aad8:	b590      	push	{r4, r7, lr}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	603b      	str	r3, [r7, #0]
 800aae4:	4613      	mov	r3, r2
 800aae6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d105      	bne.n	800aafa <tcp_create_segment+0x22>
 800aaee:	4b43      	ldr	r3, [pc, #268]	@ (800abfc <tcp_create_segment+0x124>)
 800aaf0:	22a3      	movs	r2, #163	@ 0xa3
 800aaf2:	4943      	ldr	r1, [pc, #268]	@ (800ac00 <tcp_create_segment+0x128>)
 800aaf4:	4843      	ldr	r0, [pc, #268]	@ (800ac04 <tcp_create_segment+0x12c>)
 800aaf6:	f004 f90f 	bl	800ed18 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d105      	bne.n	800ab0c <tcp_create_segment+0x34>
 800ab00:	4b3e      	ldr	r3, [pc, #248]	@ (800abfc <tcp_create_segment+0x124>)
 800ab02:	22a4      	movs	r2, #164	@ 0xa4
 800ab04:	4940      	ldr	r1, [pc, #256]	@ (800ac08 <tcp_create_segment+0x130>)
 800ab06:	483f      	ldr	r0, [pc, #252]	@ (800ac04 <tcp_create_segment+0x12c>)
 800ab08:	f004 f906 	bl	800ed18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ab0c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	f003 0304 	and.w	r3, r3, #4
 800ab18:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ab1a:	2003      	movs	r0, #3
 800ab1c:	f7fa ffc8 	bl	8005ab0 <memp_malloc>
 800ab20:	6138      	str	r0, [r7, #16]
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d104      	bne.n	800ab32 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ab28:	68b8      	ldr	r0, [r7, #8]
 800ab2a:	f7fb fe87 	bl	800683c <pbuf_free>
    return NULL;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e060      	b.n	800abf4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800ab38:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	891a      	ldrh	r2, [r3, #8]
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d205      	bcs.n	800ab5e <tcp_create_segment+0x86>
 800ab52:	4b2a      	ldr	r3, [pc, #168]	@ (800abfc <tcp_create_segment+0x124>)
 800ab54:	22b0      	movs	r2, #176	@ 0xb0
 800ab56:	492d      	ldr	r1, [pc, #180]	@ (800ac0c <tcp_create_segment+0x134>)
 800ab58:	482a      	ldr	r0, [pc, #168]	@ (800ac04 <tcp_create_segment+0x12c>)
 800ab5a:	f004 f8dd 	bl	800ed18 <iprintf>
  seg->len = p->tot_len - optlen;
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	891a      	ldrh	r2, [r3, #8]
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ab6e:	2114      	movs	r1, #20
 800ab70:	68b8      	ldr	r0, [r7, #8]
 800ab72:	f7fb fdcd 	bl	8006710 <pbuf_add_header>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d004      	beq.n	800ab86 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ab7c:	6938      	ldr	r0, [r7, #16]
 800ab7e:	f7fd f8d2 	bl	8007d26 <tcp_seg_free>
    return NULL;
 800ab82:	2300      	movs	r3, #0
 800ab84:	e036      	b.n	800abf4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	8ada      	ldrh	r2, [r3, #22]
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	68dc      	ldr	r4, [r3, #12]
 800ab98:	4610      	mov	r0, r2
 800ab9a:	f7fa fb15 	bl	80051c8 <lwip_htons>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	8b1a      	ldrh	r2, [r3, #24]
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	68dc      	ldr	r4, [r3, #12]
 800abaa:	4610      	mov	r0, r2
 800abac:	f7fa fb0c 	bl	80051c8 <lwip_htons>
 800abb0:	4603      	mov	r3, r0
 800abb2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	68dc      	ldr	r4, [r3, #12]
 800abb8:	6838      	ldr	r0, [r7, #0]
 800abba:	f7fa fb1a 	bl	80051f2 <lwip_htonl>
 800abbe:	4603      	mov	r3, r0
 800abc0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800abc2:	7dfb      	ldrb	r3, [r7, #23]
 800abc4:	089b      	lsrs	r3, r3, #2
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	3305      	adds	r3, #5
 800abca:	b29b      	uxth	r3, r3
 800abcc:	031b      	lsls	r3, r3, #12
 800abce:	b29a      	uxth	r2, r3
 800abd0:	79fb      	ldrb	r3, [r7, #7]
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	4313      	orrs	r3, r2
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	68dc      	ldr	r4, [r3, #12]
 800abdc:	4610      	mov	r0, r2
 800abde:	f7fa faf3 	bl	80051c8 <lwip_htons>
 800abe2:	4603      	mov	r3, r0
 800abe4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	749a      	strb	r2, [r3, #18]
 800abee:	2200      	movs	r2, #0
 800abf0:	74da      	strb	r2, [r3, #19]
  return seg;
 800abf2:	693b      	ldr	r3, [r7, #16]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	371c      	adds	r7, #28
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd90      	pop	{r4, r7, pc}
 800abfc:	080111f8 	.word	0x080111f8
 800ac00:	0801122c 	.word	0x0801122c
 800ac04:	0801124c 	.word	0x0801124c
 800ac08:	08011274 	.word	0x08011274
 800ac0c:	08011298 	.word	0x08011298

0800ac10 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ac10:	b590      	push	{r4, r7, lr}
 800ac12:	b08b      	sub	sp, #44	@ 0x2c
 800ac14:	af02      	add	r7, sp, #8
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	61fb      	str	r3, [r7, #28]
 800ac20:	2300      	movs	r3, #0
 800ac22:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ac24:	2300      	movs	r3, #0
 800ac26:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d106      	bne.n	800ac3c <tcp_split_unsent_seg+0x2c>
 800ac2e:	4b95      	ldr	r3, [pc, #596]	@ (800ae84 <tcp_split_unsent_seg+0x274>)
 800ac30:	f240 324b 	movw	r2, #843	@ 0x34b
 800ac34:	4994      	ldr	r1, [pc, #592]	@ (800ae88 <tcp_split_unsent_seg+0x278>)
 800ac36:	4895      	ldr	r0, [pc, #596]	@ (800ae8c <tcp_split_unsent_seg+0x27c>)
 800ac38:	f004 f86e 	bl	800ed18 <iprintf>

  useg = pcb->unsent;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac40:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d102      	bne.n	800ac4e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ac48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac4c:	e116      	b.n	800ae7c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ac4e:	887b      	ldrh	r3, [r7, #2]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d109      	bne.n	800ac68 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ac54:	4b8b      	ldr	r3, [pc, #556]	@ (800ae84 <tcp_split_unsent_seg+0x274>)
 800ac56:	f240 3253 	movw	r2, #851	@ 0x353
 800ac5a:	498d      	ldr	r1, [pc, #564]	@ (800ae90 <tcp_split_unsent_seg+0x280>)
 800ac5c:	488b      	ldr	r0, [pc, #556]	@ (800ae8c <tcp_split_unsent_seg+0x27c>)
 800ac5e:	f004 f85b 	bl	800ed18 <iprintf>
    return ERR_VAL;
 800ac62:	f06f 0305 	mvn.w	r3, #5
 800ac66:	e109      	b.n	800ae7c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	891b      	ldrh	r3, [r3, #8]
 800ac6c:	887a      	ldrh	r2, [r7, #2]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d301      	bcc.n	800ac76 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	e102      	b.n	800ae7c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ac7a:	887a      	ldrh	r2, [r7, #2]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d906      	bls.n	800ac8e <tcp_split_unsent_seg+0x7e>
 800ac80:	4b80      	ldr	r3, [pc, #512]	@ (800ae84 <tcp_split_unsent_seg+0x274>)
 800ac82:	f240 325b 	movw	r2, #859	@ 0x35b
 800ac86:	4983      	ldr	r1, [pc, #524]	@ (800ae94 <tcp_split_unsent_seg+0x284>)
 800ac88:	4880      	ldr	r0, [pc, #512]	@ (800ae8c <tcp_split_unsent_seg+0x27c>)
 800ac8a:	f004 f845 	bl	800ed18 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	891b      	ldrh	r3, [r3, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d106      	bne.n	800aca4 <tcp_split_unsent_seg+0x94>
 800ac96:	4b7b      	ldr	r3, [pc, #492]	@ (800ae84 <tcp_split_unsent_seg+0x274>)
 800ac98:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800ac9c:	497e      	ldr	r1, [pc, #504]	@ (800ae98 <tcp_split_unsent_seg+0x288>)
 800ac9e:	487b      	ldr	r0, [pc, #492]	@ (800ae8c <tcp_split_unsent_seg+0x27c>)
 800aca0:	f004 f83a 	bl	800ed18 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	7a9b      	ldrb	r3, [r3, #10]
 800aca8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	f003 0304 	and.w	r3, r3, #4
 800acb4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	891a      	ldrh	r2, [r3, #8]
 800acba:	887b      	ldrh	r3, [r7, #2]
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	89bb      	ldrh	r3, [r7, #12]
 800acc6:	4413      	add	r3, r2
 800acc8:	b29b      	uxth	r3, r3
 800acca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800acce:	4619      	mov	r1, r3
 800acd0:	2036      	movs	r0, #54	@ 0x36
 800acd2:	f7fb facf 	bl	8006274 <pbuf_alloc>
 800acd6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 80b7 	beq.w	800ae4e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	891a      	ldrh	r2, [r3, #8]
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	891b      	ldrh	r3, [r3, #8]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	b29a      	uxth	r2, r3
 800acee:	887b      	ldrh	r3, [r7, #2]
 800acf0:	4413      	add	r3, r2
 800acf2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	6858      	ldr	r0, [r3, #4]
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	685a      	ldr	r2, [r3, #4]
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	18d1      	adds	r1, r2, r3
 800ad00:	897b      	ldrh	r3, [r7, #10]
 800ad02:	89ba      	ldrh	r2, [r7, #12]
 800ad04:	f7fb ff84 	bl	8006c10 <pbuf_copy_partial>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	89bb      	ldrh	r3, [r7, #12]
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	f040 809f 	bne.w	800ae52 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	899b      	ldrh	r3, [r3, #12]
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fa fa53 	bl	80051c8 <lwip_htons>
 800ad22:	4603      	mov	r3, r0
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad2a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ad30:	7efb      	ldrb	r3, [r7, #27]
 800ad32:	f003 0308 	and.w	r3, r3, #8
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d007      	beq.n	800ad4a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ad3a:	7efb      	ldrb	r3, [r7, #27]
 800ad3c:	f023 0308 	bic.w	r3, r3, #8
 800ad40:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ad42:	7ebb      	ldrb	r3, [r7, #26]
 800ad44:	f043 0308 	orr.w	r3, r3, #8
 800ad48:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ad4a:	7efb      	ldrb	r3, [r7, #27]
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d007      	beq.n	800ad64 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ad54:	7efb      	ldrb	r3, [r7, #27]
 800ad56:	f023 0301 	bic.w	r3, r3, #1
 800ad5a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ad5c:	7ebb      	ldrb	r3, [r7, #26]
 800ad5e:	f043 0301 	orr.w	r3, r3, #1
 800ad62:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fa fa41 	bl	80051f2 <lwip_htonl>
 800ad70:	4602      	mov	r2, r0
 800ad72:	887b      	ldrh	r3, [r7, #2]
 800ad74:	18d1      	adds	r1, r2, r3
 800ad76:	7eba      	ldrb	r2, [r7, #26]
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	6939      	ldr	r1, [r7, #16]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7ff fea9 	bl	800aad8 <tcp_create_segment>
 800ad86:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d063      	beq.n	800ae56 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fb fdda 	bl	800694c <pbuf_clen>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ada2:	1a9b      	subs	r3, r3, r2
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	6858      	ldr	r0, [r3, #4]
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	891a      	ldrh	r2, [r3, #8]
 800adb6:	89bb      	ldrh	r3, [r7, #12]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	b29b      	uxth	r3, r3
 800adbc:	4619      	mov	r1, r3
 800adbe:	f7fb fbb7 	bl	8006530 <pbuf_realloc>
  useg->len -= remainder;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	891a      	ldrh	r2, [r3, #8]
 800adc6:	89bb      	ldrh	r3, [r7, #12]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	b29a      	uxth	r2, r3
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	899b      	ldrh	r3, [r3, #12]
 800add6:	b29c      	uxth	r4, r3
 800add8:	7efb      	ldrb	r3, [r7, #27]
 800adda:	b29b      	uxth	r3, r3
 800addc:	4618      	mov	r0, r3
 800adde:	f7fa f9f3 	bl	80051c8 <lwip_htons>
 800ade2:	4603      	mov	r3, r0
 800ade4:	461a      	mov	r2, r3
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	4322      	orrs	r2, r4
 800adec:	b292      	uxth	r2, r2
 800adee:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fb fda9 	bl	800694c <pbuf_clen>
 800adfa:	4603      	mov	r3, r0
 800adfc:	461a      	mov	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ae04:	4413      	add	r3, r2
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fb fd9a 	bl	800694c <pbuf_clen>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ae22:	4413      	add	r3, r2
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	69fa      	ldr	r2, [r7, #28]
 800ae38:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d103      	bne.n	800ae4a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e016      	b.n	800ae7c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ae4e:	bf00      	nop
 800ae50:	e002      	b.n	800ae58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ae52:	bf00      	nop
 800ae54:	e000      	b.n	800ae58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ae56:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d006      	beq.n	800ae6c <tcp_split_unsent_seg+0x25c>
 800ae5e:	4b09      	ldr	r3, [pc, #36]	@ (800ae84 <tcp_split_unsent_seg+0x274>)
 800ae60:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800ae64:	490d      	ldr	r1, [pc, #52]	@ (800ae9c <tcp_split_unsent_seg+0x28c>)
 800ae66:	4809      	ldr	r0, [pc, #36]	@ (800ae8c <tcp_split_unsent_seg+0x27c>)
 800ae68:	f003 ff56 	bl	800ed18 <iprintf>
  if (p != NULL) {
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d002      	beq.n	800ae78 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ae72:	6938      	ldr	r0, [r7, #16]
 800ae74:	f7fb fce2 	bl	800683c <pbuf_free>
  }

  return ERR_MEM;
 800ae78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3724      	adds	r7, #36	@ 0x24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd90      	pop	{r4, r7, pc}
 800ae84:	080111f8 	.word	0x080111f8
 800ae88:	0801158c 	.word	0x0801158c
 800ae8c:	0801124c 	.word	0x0801124c
 800ae90:	080115b0 	.word	0x080115b0
 800ae94:	080115d4 	.word	0x080115d4
 800ae98:	080115e4 	.word	0x080115e4
 800ae9c:	080115f4 	.word	0x080115f4

0800aea0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800aea0:	b590      	push	{r4, r7, lr}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d106      	bne.n	800aebc <tcp_send_fin+0x1c>
 800aeae:	4b21      	ldr	r3, [pc, #132]	@ (800af34 <tcp_send_fin+0x94>)
 800aeb0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800aeb4:	4920      	ldr	r1, [pc, #128]	@ (800af38 <tcp_send_fin+0x98>)
 800aeb6:	4821      	ldr	r0, [pc, #132]	@ (800af3c <tcp_send_fin+0x9c>)
 800aeb8:	f003 ff2e 	bl	800ed18 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d02e      	beq.n	800af22 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aec8:	60fb      	str	r3, [r7, #12]
 800aeca:	e002      	b.n	800aed2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1f8      	bne.n	800aecc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	899b      	ldrh	r3, [r3, #12]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fa f970 	bl	80051c8 <lwip_htons>
 800aee8:	4603      	mov	r3, r0
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	f003 0307 	and.w	r3, r3, #7
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d116      	bne.n	800af22 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	899b      	ldrh	r3, [r3, #12]
 800aefa:	b29c      	uxth	r4, r3
 800aefc:	2001      	movs	r0, #1
 800aefe:	f7fa f963 	bl	80051c8 <lwip_htons>
 800af02:	4603      	mov	r3, r0
 800af04:	461a      	mov	r2, r3
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	4322      	orrs	r2, r4
 800af0c:	b292      	uxth	r2, r2
 800af0e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	8b5b      	ldrh	r3, [r3, #26]
 800af14:	f043 0320 	orr.w	r3, r3, #32
 800af18:	b29a      	uxth	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	e004      	b.n	800af2c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800af22:	2101      	movs	r1, #1
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f80b 	bl	800af40 <tcp_enqueue_flags>
 800af2a:	4603      	mov	r3, r0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	bd90      	pop	{r4, r7, pc}
 800af34:	080111f8 	.word	0x080111f8
 800af38:	08011600 	.word	0x08011600
 800af3c:	0801124c 	.word	0x0801124c

0800af40 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b08a      	sub	sp, #40	@ 0x28
 800af44:	af02      	add	r7, sp, #8
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800af4c:	2300      	movs	r3, #0
 800af4e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800af54:	78fb      	ldrb	r3, [r7, #3]
 800af56:	f003 0303 	and.w	r3, r3, #3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d106      	bne.n	800af6c <tcp_enqueue_flags+0x2c>
 800af5e:	4b67      	ldr	r3, [pc, #412]	@ (800b0fc <tcp_enqueue_flags+0x1bc>)
 800af60:	f240 4211 	movw	r2, #1041	@ 0x411
 800af64:	4966      	ldr	r1, [pc, #408]	@ (800b100 <tcp_enqueue_flags+0x1c0>)
 800af66:	4867      	ldr	r0, [pc, #412]	@ (800b104 <tcp_enqueue_flags+0x1c4>)
 800af68:	f003 fed6 	bl	800ed18 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d106      	bne.n	800af80 <tcp_enqueue_flags+0x40>
 800af72:	4b62      	ldr	r3, [pc, #392]	@ (800b0fc <tcp_enqueue_flags+0x1bc>)
 800af74:	f240 4213 	movw	r2, #1043	@ 0x413
 800af78:	4963      	ldr	r1, [pc, #396]	@ (800b108 <tcp_enqueue_flags+0x1c8>)
 800af7a:	4862      	ldr	r0, [pc, #392]	@ (800b104 <tcp_enqueue_flags+0x1c4>)
 800af7c:	f003 fecc 	bl	800ed18 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800af80:	78fb      	ldrb	r3, [r7, #3]
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800af8a:	2301      	movs	r3, #1
 800af8c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800af8e:	7ffb      	ldrb	r3, [r7, #31]
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	b2db      	uxtb	r3, r3
 800af94:	f003 0304 	and.w	r3, r3, #4
 800af98:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800af9a:	7dfb      	ldrb	r3, [r7, #23]
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800afa2:	4619      	mov	r1, r3
 800afa4:	2036      	movs	r0, #54	@ 0x36
 800afa6:	f7fb f965 	bl	8006274 <pbuf_alloc>
 800afaa:	6138      	str	r0, [r7, #16]
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d109      	bne.n	800afc6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	8b5b      	ldrh	r3, [r3, #26]
 800afb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afba:	b29a      	uxth	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800afc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800afc4:	e095      	b.n	800b0f2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	895a      	ldrh	r2, [r3, #10]
 800afca:	7dfb      	ldrb	r3, [r7, #23]
 800afcc:	b29b      	uxth	r3, r3
 800afce:	429a      	cmp	r2, r3
 800afd0:	d206      	bcs.n	800afe0 <tcp_enqueue_flags+0xa0>
 800afd2:	4b4a      	ldr	r3, [pc, #296]	@ (800b0fc <tcp_enqueue_flags+0x1bc>)
 800afd4:	f240 4239 	movw	r2, #1081	@ 0x439
 800afd8:	494c      	ldr	r1, [pc, #304]	@ (800b10c <tcp_enqueue_flags+0x1cc>)
 800afda:	484a      	ldr	r0, [pc, #296]	@ (800b104 <tcp_enqueue_flags+0x1c4>)
 800afdc:	f003 fe9c 	bl	800ed18 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800afe4:	78fa      	ldrb	r2, [r7, #3]
 800afe6:	7ffb      	ldrb	r3, [r7, #31]
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	460b      	mov	r3, r1
 800afec:	6939      	ldr	r1, [r7, #16]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7ff fd72 	bl	800aad8 <tcp_create_segment>
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d109      	bne.n	800b010 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	8b5b      	ldrh	r3, [r3, #26]
 800b000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b004:	b29a      	uxth	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b00a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b00e:	e070      	b.n	800b0f2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	f003 0303 	and.w	r3, r3, #3
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d006      	beq.n	800b02a <tcp_enqueue_flags+0xea>
 800b01c:	4b37      	ldr	r3, [pc, #220]	@ (800b0fc <tcp_enqueue_flags+0x1bc>)
 800b01e:	f240 4242 	movw	r2, #1090	@ 0x442
 800b022:	493b      	ldr	r1, [pc, #236]	@ (800b110 <tcp_enqueue_flags+0x1d0>)
 800b024:	4837      	ldr	r0, [pc, #220]	@ (800b104 <tcp_enqueue_flags+0x1c4>)
 800b026:	f003 fe77 	bl	800ed18 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	891b      	ldrh	r3, [r3, #8]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d006      	beq.n	800b040 <tcp_enqueue_flags+0x100>
 800b032:	4b32      	ldr	r3, [pc, #200]	@ (800b0fc <tcp_enqueue_flags+0x1bc>)
 800b034:	f240 4243 	movw	r2, #1091	@ 0x443
 800b038:	4936      	ldr	r1, [pc, #216]	@ (800b114 <tcp_enqueue_flags+0x1d4>)
 800b03a:	4832      	ldr	r0, [pc, #200]	@ (800b104 <tcp_enqueue_flags+0x1c4>)
 800b03c:	f003 fe6c 	bl	800ed18 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b044:	2b00      	cmp	r3, #0
 800b046:	d103      	bne.n	800b050 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b04e:	e00d      	b.n	800b06c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b054:	61bb      	str	r3, [r7, #24]
 800b056:	e002      	b.n	800b05e <tcp_enqueue_flags+0x11e>
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	61bb      	str	r3, [r7, #24]
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1f8      	bne.n	800b058 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	f003 0302 	and.w	r3, r3, #2
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d104      	bne.n	800b088 <tcp_enqueue_flags+0x148>
 800b07e:	78fb      	ldrb	r3, [r7, #3]
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	2b00      	cmp	r3, #0
 800b086:	d004      	beq.n	800b092 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b08c:	1c5a      	adds	r2, r3, #1
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b092:	78fb      	ldrb	r3, [r7, #3]
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d006      	beq.n	800b0aa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	8b5b      	ldrh	r3, [r3, #26]
 800b0a0:	f043 0320 	orr.w	r3, r3, #32
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fb fc4c 	bl	800694c <pbuf_clen>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b0be:	4413      	add	r3, r2
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00e      	beq.n	800b0f0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10a      	bne.n	800b0f0 <tcp_enqueue_flags+0x1b0>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d106      	bne.n	800b0f0 <tcp_enqueue_flags+0x1b0>
 800b0e2:	4b06      	ldr	r3, [pc, #24]	@ (800b0fc <tcp_enqueue_flags+0x1bc>)
 800b0e4:	f240 4265 	movw	r2, #1125	@ 0x465
 800b0e8:	490b      	ldr	r1, [pc, #44]	@ (800b118 <tcp_enqueue_flags+0x1d8>)
 800b0ea:	4806      	ldr	r0, [pc, #24]	@ (800b104 <tcp_enqueue_flags+0x1c4>)
 800b0ec:	f003 fe14 	bl	800ed18 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3720      	adds	r7, #32
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	080111f8 	.word	0x080111f8
 800b100:	0801161c 	.word	0x0801161c
 800b104:	0801124c 	.word	0x0801124c
 800b108:	08011674 	.word	0x08011674
 800b10c:	08011694 	.word	0x08011694
 800b110:	080116d0 	.word	0x080116d0
 800b114:	080116e8 	.word	0x080116e8
 800b118:	08011714 	.word	0x08011714

0800b11c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b11c:	b5b0      	push	{r4, r5, r7, lr}
 800b11e:	b08a      	sub	sp, #40	@ 0x28
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d106      	bne.n	800b138 <tcp_output+0x1c>
 800b12a:	4b8a      	ldr	r3, [pc, #552]	@ (800b354 <tcp_output+0x238>)
 800b12c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800b130:	4989      	ldr	r1, [pc, #548]	@ (800b358 <tcp_output+0x23c>)
 800b132:	488a      	ldr	r0, [pc, #552]	@ (800b35c <tcp_output+0x240>)
 800b134:	f003 fdf0 	bl	800ed18 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	7d1b      	ldrb	r3, [r3, #20]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d106      	bne.n	800b14e <tcp_output+0x32>
 800b140:	4b84      	ldr	r3, [pc, #528]	@ (800b354 <tcp_output+0x238>)
 800b142:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800b146:	4986      	ldr	r1, [pc, #536]	@ (800b360 <tcp_output+0x244>)
 800b148:	4884      	ldr	r0, [pc, #528]	@ (800b35c <tcp_output+0x240>)
 800b14a:	f003 fde5 	bl	800ed18 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b14e:	4b85      	ldr	r3, [pc, #532]	@ (800b364 <tcp_output+0x248>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	429a      	cmp	r2, r3
 800b156:	d101      	bne.n	800b15c <tcp_output+0x40>
    return ERR_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	e1ce      	b.n	800b4fa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b168:	4293      	cmp	r3, r2
 800b16a:	bf28      	it	cs
 800b16c:	4613      	movcs	r3, r2
 800b16e:	b29b      	uxth	r3, r3
 800b170:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b176:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800b178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10b      	bne.n	800b196 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	8b5b      	ldrh	r3, [r3, #26]
 800b182:	f003 0302 	and.w	r3, r3, #2
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 81aa 	beq.w	800b4e0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fdcb 	bl	800bd28 <tcp_send_empty_ack>
 800b192:	4603      	mov	r3, r0
 800b194:	e1b1      	b.n	800b4fa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b196:	6879      	ldr	r1, [r7, #4]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3304      	adds	r3, #4
 800b19c:	461a      	mov	r2, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7ff fc7e 	bl	800aaa0 <tcp_route>
 800b1a4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d102      	bne.n	800b1b2 <tcp_output+0x96>
    return ERR_RTE;
 800b1ac:	f06f 0303 	mvn.w	r3, #3
 800b1b0:	e1a3      	b.n	800b4fa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d003      	beq.n	800b1c0 <tcp_output+0xa4>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d111      	bne.n	800b1e4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <tcp_output+0xb0>
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	3304      	adds	r3, #4
 800b1ca:	e000      	b.n	800b1ce <tcp_output+0xb2>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d102      	bne.n	800b1dc <tcp_output+0xc0>
      return ERR_RTE;
 800b1d6:	f06f 0303 	mvn.w	r3, #3
 800b1da:	e18e      	b.n	800b4fa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fa f801 	bl	80051f2 <lwip_htonl>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1fa:	8912      	ldrh	r2, [r2, #8]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	69ba      	ldr	r2, [r7, #24]
 800b200:	429a      	cmp	r2, r3
 800b202:	d227      	bcs.n	800b254 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b20a:	461a      	mov	r2, r3
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	4293      	cmp	r3, r2
 800b210:	d114      	bne.n	800b23c <tcp_output+0x120>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b216:	2b00      	cmp	r3, #0
 800b218:	d110      	bne.n	800b23c <tcp_output+0x120>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b220:	2b00      	cmp	r3, #0
 800b222:	d10b      	bne.n	800b23c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	8b5b      	ldrh	r3, [r3, #26]
 800b240:	f003 0302 	and.w	r3, r3, #2
 800b244:	2b00      	cmp	r3, #0
 800b246:	f000 814d 	beq.w	800b4e4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 fd6c 	bl	800bd28 <tcp_send_empty_ack>
 800b250:	4603      	mov	r3, r0
 800b252:	e152      	b.n	800b4fa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b260:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 811c 	beq.w	800b4a2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b26a:	e002      	b.n	800b272 <tcp_output+0x156>
 800b26c:	6a3b      	ldr	r3, [r7, #32]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	623b      	str	r3, [r7, #32]
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1f8      	bne.n	800b26c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b27a:	e112      	b.n	800b4a2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	899b      	ldrh	r3, [r3, #12]
 800b282:	b29b      	uxth	r3, r3
 800b284:	4618      	mov	r0, r3
 800b286:	f7f9 ff9f 	bl	80051c8 <lwip_htons>
 800b28a:	4603      	mov	r3, r0
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	f003 0304 	and.w	r3, r3, #4
 800b292:	2b00      	cmp	r3, #0
 800b294:	d006      	beq.n	800b2a4 <tcp_output+0x188>
 800b296:	4b2f      	ldr	r3, [pc, #188]	@ (800b354 <tcp_output+0x238>)
 800b298:	f240 5236 	movw	r2, #1334	@ 0x536
 800b29c:	4932      	ldr	r1, [pc, #200]	@ (800b368 <tcp_output+0x24c>)
 800b29e:	482f      	ldr	r0, [pc, #188]	@ (800b35c <tcp_output+0x240>)
 800b2a0:	f003 fd3a 	bl	800ed18 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d01f      	beq.n	800b2ec <tcp_output+0x1d0>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	8b5b      	ldrh	r3, [r3, #26]
 800b2b0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d119      	bne.n	800b2ec <tcp_output+0x1d0>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <tcp_output+0x1bc>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d110      	bne.n	800b2ec <tcp_output+0x1d0>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2ce:	891a      	ldrh	r2, [r3, #8]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d209      	bcs.n	800b2ec <tcp_output+0x1d0>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d004      	beq.n	800b2ec <tcp_output+0x1d0>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b2e8:	2b08      	cmp	r3, #8
 800b2ea:	d901      	bls.n	800b2f0 <tcp_output+0x1d4>
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e000      	b.n	800b2f2 <tcp_output+0x1d6>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d106      	bne.n	800b304 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	8b5b      	ldrh	r3, [r3, #26]
 800b2fa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 80e4 	beq.w	800b4cc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	7d1b      	ldrb	r3, [r3, #20]
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d00d      	beq.n	800b328 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	899b      	ldrh	r3, [r3, #12]
 800b312:	b29c      	uxth	r4, r3
 800b314:	2010      	movs	r0, #16
 800b316:	f7f9 ff57 	bl	80051c8 <lwip_htons>
 800b31a:	4603      	mov	r3, r0
 800b31c:	461a      	mov	r2, r3
 800b31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	4322      	orrs	r2, r4
 800b324:	b292      	uxth	r2, r2
 800b326:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b328:	697a      	ldr	r2, [r7, #20]
 800b32a:	6879      	ldr	r1, [r7, #4]
 800b32c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b32e:	f000 f909 	bl	800b544 <tcp_output_segment>
 800b332:	4603      	mov	r3, r0
 800b334:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d016      	beq.n	800b36c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	8b5b      	ldrh	r3, [r3, #26]
 800b342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b346:	b29a      	uxth	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	835a      	strh	r2, [r3, #26]
      return err;
 800b34c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b350:	e0d3      	b.n	800b4fa <tcp_output+0x3de>
 800b352:	bf00      	nop
 800b354:	080111f8 	.word	0x080111f8
 800b358:	0801173c 	.word	0x0801173c
 800b35c:	0801124c 	.word	0x0801124c
 800b360:	08011754 	.word	0x08011754
 800b364:	20007cbc 	.word	0x20007cbc
 800b368:	0801177c 	.word	0x0801177c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	7d1b      	ldrb	r3, [r3, #20]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d006      	beq.n	800b38a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	8b5b      	ldrh	r3, [r3, #26]
 800b380:	f023 0303 	bic.w	r3, r3, #3
 800b384:	b29a      	uxth	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	4618      	mov	r0, r3
 800b392:	f7f9 ff2e 	bl	80051f2 <lwip_htonl>
 800b396:	4604      	mov	r4, r0
 800b398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39a:	891b      	ldrh	r3, [r3, #8]
 800b39c:	461d      	mov	r5, r3
 800b39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	899b      	ldrh	r3, [r3, #12]
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7f9 ff0e 	bl	80051c8 <lwip_htons>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	f003 0303 	and.w	r3, r3, #3
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <tcp_output+0x2a0>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e000      	b.n	800b3be <tcp_output+0x2a2>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	442b      	add	r3, r5
 800b3c0:	4423      	add	r3, r4
 800b3c2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	da02      	bge.n	800b3d6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d8:	891b      	ldrh	r3, [r3, #8]
 800b3da:	461c      	mov	r4, r3
 800b3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	899b      	ldrh	r3, [r3, #12]
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7f9 feef 	bl	80051c8 <lwip_htons>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	f003 0303 	and.w	r3, r3, #3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d001      	beq.n	800b3fa <tcp_output+0x2de>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e000      	b.n	800b3fc <tcp_output+0x2e0>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	4423      	add	r3, r4
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d049      	beq.n	800b496 <tcp_output+0x37a>
      seg->next = NULL;
 800b402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b404:	2200      	movs	r2, #0
 800b406:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d105      	bne.n	800b41c <tcp_output+0x300>
        pcb->unacked = seg;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b414:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800b416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b418:	623b      	str	r3, [r7, #32]
 800b41a:	e03f      	b.n	800b49c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	4618      	mov	r0, r3
 800b424:	f7f9 fee5 	bl	80051f2 <lwip_htonl>
 800b428:	4604      	mov	r4, r0
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	4618      	mov	r0, r3
 800b432:	f7f9 fede 	bl	80051f2 <lwip_htonl>
 800b436:	4603      	mov	r3, r0
 800b438:	1ae3      	subs	r3, r4, r3
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	da24      	bge.n	800b488 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	3370      	adds	r3, #112	@ 0x70
 800b442:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b444:	e002      	b.n	800b44c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d011      	beq.n	800b478 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7f9 fec8 	bl	80051f2 <lwip_htonl>
 800b462:	4604      	mov	r4, r0
 800b464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7f9 fec1 	bl	80051f2 <lwip_htonl>
 800b470:	4603      	mov	r3, r0
 800b472:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b474:	2b00      	cmp	r3, #0
 800b476:	dbe6      	blt.n	800b446 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	e009      	b.n	800b49c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b488:	6a3b      	ldr	r3, [r7, #32]
 800b48a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b48c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b48e:	6a3b      	ldr	r3, [r7, #32]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	623b      	str	r3, [r7, #32]
 800b494:	e002      	b.n	800b49c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b496:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b498:	f7fc fc45 	bl	8007d26 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4a0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d012      	beq.n	800b4ce <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7f9 fe9f 	bl	80051f2 <lwip_htonl>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4be:	8912      	ldrh	r2, [r2, #8]
 800b4c0:	4413      	add	r3, r2
  while (seg != NULL &&
 800b4c2:	69ba      	ldr	r2, [r7, #24]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	f4bf aed9 	bcs.w	800b27c <tcp_output+0x160>
 800b4ca:	e000      	b.n	800b4ce <tcp_output+0x3b2>
      break;
 800b4cc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d108      	bne.n	800b4e8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800b4de:	e004      	b.n	800b4ea <tcp_output+0x3ce>
    goto output_done;
 800b4e0:	bf00      	nop
 800b4e2:	e002      	b.n	800b4ea <tcp_output+0x3ce>
    goto output_done;
 800b4e4:	bf00      	nop
 800b4e6:	e000      	b.n	800b4ea <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b4e8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	8b5b      	ldrh	r3, [r3, #26]
 800b4ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3728      	adds	r7, #40	@ 0x28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bdb0      	pop	{r4, r5, r7, pc}
 800b502:	bf00      	nop

0800b504 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d106      	bne.n	800b520 <tcp_output_segment_busy+0x1c>
 800b512:	4b09      	ldr	r3, [pc, #36]	@ (800b538 <tcp_output_segment_busy+0x34>)
 800b514:	f240 529a 	movw	r2, #1434	@ 0x59a
 800b518:	4908      	ldr	r1, [pc, #32]	@ (800b53c <tcp_output_segment_busy+0x38>)
 800b51a:	4809      	ldr	r0, [pc, #36]	@ (800b540 <tcp_output_segment_busy+0x3c>)
 800b51c:	f003 fbfc 	bl	800ed18 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	7b9b      	ldrb	r3, [r3, #14]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d001      	beq.n	800b52e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e000      	b.n	800b530 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	080111f8 	.word	0x080111f8
 800b53c:	08011794 	.word	0x08011794
 800b540:	0801124c 	.word	0x0801124c

0800b544 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b544:	b5b0      	push	{r4, r5, r7, lr}
 800b546:	b08c      	sub	sp, #48	@ 0x30
 800b548:	af04      	add	r7, sp, #16
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d106      	bne.n	800b564 <tcp_output_segment+0x20>
 800b556:	4b64      	ldr	r3, [pc, #400]	@ (800b6e8 <tcp_output_segment+0x1a4>)
 800b558:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800b55c:	4963      	ldr	r1, [pc, #396]	@ (800b6ec <tcp_output_segment+0x1a8>)
 800b55e:	4864      	ldr	r0, [pc, #400]	@ (800b6f0 <tcp_output_segment+0x1ac>)
 800b560:	f003 fbda 	bl	800ed18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <tcp_output_segment+0x34>
 800b56a:	4b5f      	ldr	r3, [pc, #380]	@ (800b6e8 <tcp_output_segment+0x1a4>)
 800b56c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800b570:	4960      	ldr	r1, [pc, #384]	@ (800b6f4 <tcp_output_segment+0x1b0>)
 800b572:	485f      	ldr	r0, [pc, #380]	@ (800b6f0 <tcp_output_segment+0x1ac>)
 800b574:	f003 fbd0 	bl	800ed18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <tcp_output_segment+0x48>
 800b57e:	4b5a      	ldr	r3, [pc, #360]	@ (800b6e8 <tcp_output_segment+0x1a4>)
 800b580:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800b584:	495c      	ldr	r1, [pc, #368]	@ (800b6f8 <tcp_output_segment+0x1b4>)
 800b586:	485a      	ldr	r0, [pc, #360]	@ (800b6f0 <tcp_output_segment+0x1ac>)
 800b588:	f003 fbc6 	bl	800ed18 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f7ff ffb9 	bl	800b504 <tcp_output_segment_busy>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	e0a1      	b.n	800b6e0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	68dc      	ldr	r4, [r3, #12]
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	f7f9 fe24 	bl	80051f2 <lwip_htonl>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	68dc      	ldr	r4, [r3, #12]
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	f7f9 fe06 	bl	80051c8 <lwip_htons>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b5c8:	441a      	add	r2, r3
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	3314      	adds	r3, #20
 800b5d4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	7a9b      	ldrb	r3, [r3, #10]
 800b5da:	f003 0301 	and.w	r3, r3, #1
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d015      	beq.n	800b60e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6879      	ldr	r1, [r7, #4]
 800b5ea:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800b5ee:	f7fc fe91 	bl	8008314 <tcp_eff_send_mss_netif>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b5f6:	8b7b      	ldrh	r3, [r7, #26]
 800b5f8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7f9 fdf8 	bl	80051f2 <lwip_htonl>
 800b602:	4602      	mov	r2, r0
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	3304      	adds	r3, #4
 800b60c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b614:	2b00      	cmp	r3, #0
 800b616:	da02      	bge.n	800b61e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	2200      	movs	r2, #0
 800b61c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10c      	bne.n	800b640 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b626:	4b35      	ldr	r3, [pc, #212]	@ (800b6fc <tcp_output_segment+0x1b8>)
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	4618      	mov	r0, r3
 800b636:	f7f9 fddc 	bl	80051f2 <lwip_htonl>
 800b63a:	4602      	mov	r2, r0
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	68da      	ldr	r2, [r3, #12]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	8959      	ldrh	r1, [r3, #10]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	8b3a      	ldrh	r2, [r7, #24]
 800b65a:	1a8a      	subs	r2, r1, r2
 800b65c:	b292      	uxth	r2, r2
 800b65e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	8919      	ldrh	r1, [r3, #8]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	8b3a      	ldrh	r2, [r7, #24]
 800b66c:	1a8a      	subs	r2, r1, r2
 800b66e:	b292      	uxth	r2, r2
 800b670:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	68d2      	ldr	r2, [r2, #12]
 800b67a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	741a      	strb	r2, [r3, #16]
 800b684:	2200      	movs	r2, #0
 800b686:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	68da      	ldr	r2, [r3, #12]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	7a9b      	ldrb	r3, [r3, #10]
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <tcp_output_segment+0x158>
 800b698:	2318      	movs	r3, #24
 800b69a:	e000      	b.n	800b69e <tcp_output_segment+0x15a>
 800b69c:	2314      	movs	r3, #20
 800b69e:	4413      	add	r3, r2
 800b6a0:	69fa      	ldr	r2, [r7, #28]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d006      	beq.n	800b6b4 <tcp_output_segment+0x170>
 800b6a6:	4b10      	ldr	r3, [pc, #64]	@ (800b6e8 <tcp_output_segment+0x1a4>)
 800b6a8:	f240 621c 	movw	r2, #1564	@ 0x61c
 800b6ac:	4914      	ldr	r1, [pc, #80]	@ (800b700 <tcp_output_segment+0x1bc>)
 800b6ae:	4810      	ldr	r0, [pc, #64]	@ (800b6f0 <tcp_output_segment+0x1ac>)
 800b6b0:	f003 fb32 	bl	800ed18 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6858      	ldr	r0, [r3, #4]
 800b6b8:	68b9      	ldr	r1, [r7, #8]
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	1d1c      	adds	r4, r3, #4
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	7add      	ldrb	r5, [r3, #11]
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	7a9b      	ldrb	r3, [r3, #10]
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	9202      	str	r2, [sp, #8]
 800b6ca:	2206      	movs	r2, #6
 800b6cc:	9201      	str	r2, [sp, #4]
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	462b      	mov	r3, r5
 800b6d2:	4622      	mov	r2, r4
 800b6d4:	f002 f9f2 	bl	800dabc <ip4_output_if>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b6dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3720      	adds	r7, #32
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bdb0      	pop	{r4, r5, r7, pc}
 800b6e8:	080111f8 	.word	0x080111f8
 800b6ec:	080117bc 	.word	0x080117bc
 800b6f0:	0801124c 	.word	0x0801124c
 800b6f4:	080117dc 	.word	0x080117dc
 800b6f8:	080117fc 	.word	0x080117fc
 800b6fc:	20007c70 	.word	0x20007c70
 800b700:	08011820 	.word	0x08011820

0800b704 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b704:	b5b0      	push	{r4, r5, r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d106      	bne.n	800b720 <tcp_rexmit_rto_prepare+0x1c>
 800b712:	4b31      	ldr	r3, [pc, #196]	@ (800b7d8 <tcp_rexmit_rto_prepare+0xd4>)
 800b714:	f240 6263 	movw	r2, #1635	@ 0x663
 800b718:	4930      	ldr	r1, [pc, #192]	@ (800b7dc <tcp_rexmit_rto_prepare+0xd8>)
 800b71a:	4831      	ldr	r0, [pc, #196]	@ (800b7e0 <tcp_rexmit_rto_prepare+0xdc>)
 800b71c:	f003 fafc 	bl	800ed18 <iprintf>

  if (pcb->unacked == NULL) {
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b724:	2b00      	cmp	r3, #0
 800b726:	d102      	bne.n	800b72e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b728:	f06f 0305 	mvn.w	r3, #5
 800b72c:	e050      	b.n	800b7d0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	e00b      	b.n	800b74e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f7ff fee4 	bl	800b504 <tcp_output_segment_busy>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d002      	beq.n	800b748 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b742:	f06f 0305 	mvn.w	r3, #5
 800b746:	e043      	b.n	800b7d0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	60fb      	str	r3, [r7, #12]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1ef      	bne.n	800b736 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f7ff fed4 	bl	800b504 <tcp_output_segment_busy>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d002      	beq.n	800b768 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b762:	f06f 0305 	mvn.w	r3, #5
 800b766:	e033      	b.n	800b7d0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	8b5b      	ldrh	r3, [r3, #26]
 800b782:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b786:	b29a      	uxth	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	4618      	mov	r0, r3
 800b794:	f7f9 fd2d 	bl	80051f2 <lwip_htonl>
 800b798:	4604      	mov	r4, r0
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	891b      	ldrh	r3, [r3, #8]
 800b79e:	461d      	mov	r5, r3
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	899b      	ldrh	r3, [r3, #12]
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7f9 fd0d 	bl	80051c8 <lwip_htons>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	f003 0303 	and.w	r3, r3, #3
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <tcp_rexmit_rto_prepare+0xba>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e000      	b.n	800b7c0 <tcp_rexmit_rto_prepare+0xbc>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	442b      	add	r3, r5
 800b7c2:	18e2      	adds	r2, r4, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bdb0      	pop	{r4, r5, r7, pc}
 800b7d8:	080111f8 	.word	0x080111f8
 800b7dc:	08011834 	.word	0x08011834
 800b7e0:	0801124c 	.word	0x0801124c

0800b7e4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d106      	bne.n	800b800 <tcp_rexmit_rto_commit+0x1c>
 800b7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b828 <tcp_rexmit_rto_commit+0x44>)
 800b7f4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b7f8:	490c      	ldr	r1, [pc, #48]	@ (800b82c <tcp_rexmit_rto_commit+0x48>)
 800b7fa:	480d      	ldr	r0, [pc, #52]	@ (800b830 <tcp_rexmit_rto_commit+0x4c>)
 800b7fc:	f003 fa8c 	bl	800ed18 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b806:	2bff      	cmp	r3, #255	@ 0xff
 800b808:	d007      	beq.n	800b81a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b810:	3301      	adds	r3, #1
 800b812:	b2da      	uxtb	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7ff fc7e 	bl	800b11c <tcp_output>
}
 800b820:	bf00      	nop
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	080111f8 	.word	0x080111f8
 800b82c:	08011858 	.word	0x08011858
 800b830:	0801124c 	.word	0x0801124c

0800b834 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d106      	bne.n	800b850 <tcp_rexmit_rto+0x1c>
 800b842:	4b0a      	ldr	r3, [pc, #40]	@ (800b86c <tcp_rexmit_rto+0x38>)
 800b844:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800b848:	4909      	ldr	r1, [pc, #36]	@ (800b870 <tcp_rexmit_rto+0x3c>)
 800b84a:	480a      	ldr	r0, [pc, #40]	@ (800b874 <tcp_rexmit_rto+0x40>)
 800b84c:	f003 fa64 	bl	800ed18 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f7ff ff57 	bl	800b704 <tcp_rexmit_rto_prepare>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d102      	bne.n	800b862 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff ffc1 	bl	800b7e4 <tcp_rexmit_rto_commit>
  }
}
 800b862:	bf00      	nop
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	080111f8 	.word	0x080111f8
 800b870:	0801187c 	.word	0x0801187c
 800b874:	0801124c 	.word	0x0801124c

0800b878 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b878:	b590      	push	{r4, r7, lr}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d106      	bne.n	800b894 <tcp_rexmit+0x1c>
 800b886:	4b2f      	ldr	r3, [pc, #188]	@ (800b944 <tcp_rexmit+0xcc>)
 800b888:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800b88c:	492e      	ldr	r1, [pc, #184]	@ (800b948 <tcp_rexmit+0xd0>)
 800b88e:	482f      	ldr	r0, [pc, #188]	@ (800b94c <tcp_rexmit+0xd4>)
 800b890:	f003 fa42 	bl	800ed18 <iprintf>

  if (pcb->unacked == NULL) {
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d102      	bne.n	800b8a2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b89c:	f06f 0305 	mvn.w	r3, #5
 800b8a0:	e04c      	b.n	800b93c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8a6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b8a8:	68b8      	ldr	r0, [r7, #8]
 800b8aa:	f7ff fe2b 	bl	800b504 <tcp_output_segment_busy>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d002      	beq.n	800b8ba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b8b4:	f06f 0305 	mvn.w	r3, #5
 800b8b8:	e040      	b.n	800b93c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	336c      	adds	r3, #108	@ 0x6c
 800b8c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b8c8:	e002      	b.n	800b8d0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d011      	beq.n	800b8fc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7f9 fc86 	bl	80051f2 <lwip_htonl>
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7f9 fc7f 	bl	80051f2 <lwip_htonl>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	dbe6      	blt.n	800b8ca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d103      	bne.n	800b91a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b920:	2bff      	cmp	r3, #255	@ 0xff
 800b922:	d007      	beq.n	800b934 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b92a:	3301      	adds	r3, #1
 800b92c:	b2da      	uxtb	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b93a:	2300      	movs	r3, #0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	bd90      	pop	{r4, r7, pc}
 800b944:	080111f8 	.word	0x080111f8
 800b948:	08011898 	.word	0x08011898
 800b94c:	0801124c 	.word	0x0801124c

0800b950 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d106      	bne.n	800b96c <tcp_rexmit_fast+0x1c>
 800b95e:	4b2a      	ldr	r3, [pc, #168]	@ (800ba08 <tcp_rexmit_fast+0xb8>)
 800b960:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800b964:	4929      	ldr	r1, [pc, #164]	@ (800ba0c <tcp_rexmit_fast+0xbc>)
 800b966:	482a      	ldr	r0, [pc, #168]	@ (800ba10 <tcp_rexmit_fast+0xc0>)
 800b968:	f003 f9d6 	bl	800ed18 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b970:	2b00      	cmp	r3, #0
 800b972:	d045      	beq.n	800ba00 <tcp_rexmit_fast+0xb0>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	8b5b      	ldrh	r3, [r3, #26]
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d13f      	bne.n	800ba00 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7ff ff79 	bl	800b878 <tcp_rexmit>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d139      	bne.n	800ba00 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b998:	4293      	cmp	r3, r2
 800b99a:	bf28      	it	cs
 800b99c:	4613      	movcs	r3, r2
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	da00      	bge.n	800b9a6 <tcp_rexmit_fast+0x56>
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	105b      	asrs	r3, r3, #1
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b9bc:	005b      	lsls	r3, r3, #1
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d206      	bcs.n	800b9d0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b9da:	4619      	mov	r1, r3
 800b9dc:	0049      	lsls	r1, r1, #1
 800b9de:	440b      	add	r3, r1
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	4413      	add	r3, r2
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	8b5b      	ldrh	r3, [r3, #26]
 800b9f0:	f043 0304 	orr.w	r3, r3, #4
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800ba00:	bf00      	nop
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	080111f8 	.word	0x080111f8
 800ba0c:	080118b0 	.word	0x080118b0
 800ba10:	0801124c 	.word	0x0801124c

0800ba14 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	607b      	str	r3, [r7, #4]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	817b      	strh	r3, [r7, #10]
 800ba22:	4613      	mov	r3, r2
 800ba24:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ba26:	897a      	ldrh	r2, [r7, #10]
 800ba28:	893b      	ldrh	r3, [r7, #8]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	3314      	adds	r3, #20
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ba36:	4619      	mov	r1, r3
 800ba38:	2022      	movs	r0, #34	@ 0x22
 800ba3a:	f7fa fc1b 	bl	8006274 <pbuf_alloc>
 800ba3e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d04d      	beq.n	800bae2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ba46:	897b      	ldrh	r3, [r7, #10]
 800ba48:	3313      	adds	r3, #19
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	8952      	ldrh	r2, [r2, #10]
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	db06      	blt.n	800ba60 <tcp_output_alloc_header_common+0x4c>
 800ba52:	4b26      	ldr	r3, [pc, #152]	@ (800baec <tcp_output_alloc_header_common+0xd8>)
 800ba54:	f240 7223 	movw	r2, #1827	@ 0x723
 800ba58:	4925      	ldr	r1, [pc, #148]	@ (800baf0 <tcp_output_alloc_header_common+0xdc>)
 800ba5a:	4826      	ldr	r0, [pc, #152]	@ (800baf4 <tcp_output_alloc_header_common+0xe0>)
 800ba5c:	f003 f95c 	bl	800ed18 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ba66:	8c3b      	ldrh	r3, [r7, #32]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7f9 fbad 	bl	80051c8 <lwip_htons>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	461a      	mov	r2, r3
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ba76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f9 fba5 	bl	80051c8 <lwip_htons>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	461a      	mov	r2, r3
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f7f9 fbb0 	bl	80051f2 <lwip_htonl>
 800ba92:	4602      	mov	r2, r0
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ba98:	897b      	ldrh	r3, [r7, #10]
 800ba9a:	089b      	lsrs	r3, r3, #2
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	3305      	adds	r3, #5
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	031b      	lsls	r3, r3, #12
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800baaa:	b29b      	uxth	r3, r3
 800baac:	4313      	orrs	r3, r2
 800baae:	b29b      	uxth	r3, r3
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7f9 fb89 	bl	80051c8 <lwip_htons>
 800bab6:	4603      	mov	r3, r0
 800bab8:	461a      	mov	r2, r3
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800babe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7f9 fb81 	bl	80051c8 <lwip_htons>
 800bac6:	4603      	mov	r3, r0
 800bac8:	461a      	mov	r2, r3
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	2200      	movs	r2, #0
 800bad2:	741a      	strb	r2, [r3, #16]
 800bad4:	2200      	movs	r2, #0
 800bad6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	2200      	movs	r2, #0
 800badc:	749a      	strb	r2, [r3, #18]
 800bade:	2200      	movs	r2, #0
 800bae0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800bae2:	697b      	ldr	r3, [r7, #20]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3718      	adds	r7, #24
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	080111f8 	.word	0x080111f8
 800baf0:	080118d0 	.word	0x080118d0
 800baf4:	0801124c 	.word	0x0801124c

0800baf8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800baf8:	b5b0      	push	{r4, r5, r7, lr}
 800bafa:	b08a      	sub	sp, #40	@ 0x28
 800bafc:	af04      	add	r7, sp, #16
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	607b      	str	r3, [r7, #4]
 800bb02:	460b      	mov	r3, r1
 800bb04:	817b      	strh	r3, [r7, #10]
 800bb06:	4613      	mov	r3, r2
 800bb08:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d106      	bne.n	800bb1e <tcp_output_alloc_header+0x26>
 800bb10:	4b15      	ldr	r3, [pc, #84]	@ (800bb68 <tcp_output_alloc_header+0x70>)
 800bb12:	f240 7242 	movw	r2, #1858	@ 0x742
 800bb16:	4915      	ldr	r1, [pc, #84]	@ (800bb6c <tcp_output_alloc_header+0x74>)
 800bb18:	4815      	ldr	r0, [pc, #84]	@ (800bb70 <tcp_output_alloc_header+0x78>)
 800bb1a:	f003 f8fd 	bl	800ed18 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	8adb      	ldrh	r3, [r3, #22]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	8b12      	ldrh	r2, [r2, #24]
 800bb2a:	68f9      	ldr	r1, [r7, #12]
 800bb2c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800bb2e:	893d      	ldrh	r5, [r7, #8]
 800bb30:	897c      	ldrh	r4, [r7, #10]
 800bb32:	9103      	str	r1, [sp, #12]
 800bb34:	2110      	movs	r1, #16
 800bb36:	9102      	str	r1, [sp, #8]
 800bb38:	9201      	str	r2, [sp, #4]
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	462a      	mov	r2, r5
 800bb40:	4621      	mov	r1, r4
 800bb42:	f7ff ff67 	bl	800ba14 <tcp_output_alloc_header_common>
 800bb46:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d006      	beq.n	800bb5c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800bb56:	441a      	add	r2, r3
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800bb5c:	697b      	ldr	r3, [r7, #20]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3718      	adds	r7, #24
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bdb0      	pop	{r4, r5, r7, pc}
 800bb66:	bf00      	nop
 800bb68:	080111f8 	.word	0x080111f8
 800bb6c:	08011900 	.word	0x08011900
 800bb70:	0801124c 	.word	0x0801124c

0800bb74 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b088      	sub	sp, #32
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	4611      	mov	r1, r2
 800bb80:	461a      	mov	r2, r3
 800bb82:	460b      	mov	r3, r1
 800bb84:	71fb      	strb	r3, [r7, #7]
 800bb86:	4613      	mov	r3, r2
 800bb88:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d106      	bne.n	800bba2 <tcp_output_fill_options+0x2e>
 800bb94:	4b12      	ldr	r3, [pc, #72]	@ (800bbe0 <tcp_output_fill_options+0x6c>)
 800bb96:	f240 7256 	movw	r2, #1878	@ 0x756
 800bb9a:	4912      	ldr	r1, [pc, #72]	@ (800bbe4 <tcp_output_fill_options+0x70>)
 800bb9c:	4812      	ldr	r0, [pc, #72]	@ (800bbe8 <tcp_output_fill_options+0x74>)
 800bb9e:	f003 f8bb 	bl	800ed18 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	3314      	adds	r3, #20
 800bbac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bbae:	8bfb      	ldrh	r3, [r7, #30]
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	79fb      	ldrb	r3, [r7, #7]
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	f003 0304 	and.w	r3, r3, #4
 800bbbc:	4413      	add	r3, r2
 800bbbe:	3314      	adds	r3, #20
 800bbc0:	69ba      	ldr	r2, [r7, #24]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	697a      	ldr	r2, [r7, #20]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d006      	beq.n	800bbd8 <tcp_output_fill_options+0x64>
 800bbca:	4b05      	ldr	r3, [pc, #20]	@ (800bbe0 <tcp_output_fill_options+0x6c>)
 800bbcc:	f240 7275 	movw	r2, #1909	@ 0x775
 800bbd0:	4906      	ldr	r1, [pc, #24]	@ (800bbec <tcp_output_fill_options+0x78>)
 800bbd2:	4805      	ldr	r0, [pc, #20]	@ (800bbe8 <tcp_output_fill_options+0x74>)
 800bbd4:	f003 f8a0 	bl	800ed18 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bbd8:	bf00      	nop
 800bbda:	3720      	adds	r7, #32
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	080111f8 	.word	0x080111f8
 800bbe4:	08011928 	.word	0x08011928
 800bbe8:	0801124c 	.word	0x0801124c
 800bbec:	08011820 	.word	0x08011820

0800bbf0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b08a      	sub	sp, #40	@ 0x28
 800bbf4:	af04      	add	r7, sp, #16
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d106      	bne.n	800bc12 <tcp_output_control_segment+0x22>
 800bc04:	4b1c      	ldr	r3, [pc, #112]	@ (800bc78 <tcp_output_control_segment+0x88>)
 800bc06:	f240 7287 	movw	r2, #1927	@ 0x787
 800bc0a:	491c      	ldr	r1, [pc, #112]	@ (800bc7c <tcp_output_control_segment+0x8c>)
 800bc0c:	481c      	ldr	r0, [pc, #112]	@ (800bc80 <tcp_output_control_segment+0x90>)
 800bc0e:	f003 f883 	bl	800ed18 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	6879      	ldr	r1, [r7, #4]
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7fe ff42 	bl	800aaa0 <tcp_route>
 800bc1c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d102      	bne.n	800bc2a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800bc24:	23fc      	movs	r3, #252	@ 0xfc
 800bc26:	75fb      	strb	r3, [r7, #23]
 800bc28:	e01c      	b.n	800bc64 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d006      	beq.n	800bc3e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	7adb      	ldrb	r3, [r3, #11]
 800bc34:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	7a9b      	ldrb	r3, [r3, #10]
 800bc3a:	757b      	strb	r3, [r7, #21]
 800bc3c:	e003      	b.n	800bc46 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800bc3e:	23ff      	movs	r3, #255	@ 0xff
 800bc40:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800bc42:	2300      	movs	r3, #0
 800bc44:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bc46:	7dba      	ldrb	r2, [r7, #22]
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	9302      	str	r3, [sp, #8]
 800bc4c:	2306      	movs	r3, #6
 800bc4e:	9301      	str	r3, [sp, #4]
 800bc50:	7d7b      	ldrb	r3, [r7, #21]
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	4613      	mov	r3, r2
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	6879      	ldr	r1, [r7, #4]
 800bc5a:	68b8      	ldr	r0, [r7, #8]
 800bc5c:	f001 ff2e 	bl	800dabc <ip4_output_if>
 800bc60:	4603      	mov	r3, r0
 800bc62:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bc64:	68b8      	ldr	r0, [r7, #8]
 800bc66:	f7fa fde9 	bl	800683c <pbuf_free>
  return err;
 800bc6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	080111f8 	.word	0x080111f8
 800bc7c:	08011950 	.word	0x08011950
 800bc80:	0801124c 	.word	0x0801124c

0800bc84 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bc84:	b590      	push	{r4, r7, lr}
 800bc86:	b08b      	sub	sp, #44	@ 0x2c
 800bc88:	af04      	add	r7, sp, #16
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	607a      	str	r2, [r7, #4]
 800bc90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d106      	bne.n	800bca6 <tcp_rst+0x22>
 800bc98:	4b1f      	ldr	r3, [pc, #124]	@ (800bd18 <tcp_rst+0x94>)
 800bc9a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800bc9e:	491f      	ldr	r1, [pc, #124]	@ (800bd1c <tcp_rst+0x98>)
 800bca0:	481f      	ldr	r0, [pc, #124]	@ (800bd20 <tcp_rst+0x9c>)
 800bca2:	f003 f839 	bl	800ed18 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d106      	bne.n	800bcba <tcp_rst+0x36>
 800bcac:	4b1a      	ldr	r3, [pc, #104]	@ (800bd18 <tcp_rst+0x94>)
 800bcae:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800bcb2:	491c      	ldr	r1, [pc, #112]	@ (800bd24 <tcp_rst+0xa0>)
 800bcb4:	481a      	ldr	r0, [pc, #104]	@ (800bd20 <tcp_rst+0x9c>)
 800bcb6:	f003 f82f 	bl	800ed18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bcba:	2300      	movs	r3, #0
 800bcbc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800bcbe:	f246 0308 	movw	r3, #24584	@ 0x6008
 800bcc2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
 800bcc6:	b29c      	uxth	r4, r3
 800bcc8:	68b8      	ldr	r0, [r7, #8]
 800bcca:	f7f9 fa92 	bl	80051f2 <lwip_htonl>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	8abb      	ldrh	r3, [r7, #20]
 800bcd2:	9303      	str	r3, [sp, #12]
 800bcd4:	2314      	movs	r3, #20
 800bcd6:	9302      	str	r3, [sp, #8]
 800bcd8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800bcda:	9301      	str	r3, [sp, #4]
 800bcdc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	4613      	mov	r3, r2
 800bce2:	2200      	movs	r2, #0
 800bce4:	4621      	mov	r1, r4
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7ff fe94 	bl	800ba14 <tcp_output_alloc_header_common>
 800bcec:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00c      	beq.n	800bd0e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bcf4:	7dfb      	ldrb	r3, [r7, #23]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	6939      	ldr	r1, [r7, #16]
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f7ff ff3a 	bl	800bb74 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	6939      	ldr	r1, [r7, #16]
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f7ff ff72 	bl	800bbf0 <tcp_output_control_segment>
 800bd0c:	e000      	b.n	800bd10 <tcp_rst+0x8c>
    return;
 800bd0e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bd10:	371c      	adds	r7, #28
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd90      	pop	{r4, r7, pc}
 800bd16:	bf00      	nop
 800bd18:	080111f8 	.word	0x080111f8
 800bd1c:	0801197c 	.word	0x0801197c
 800bd20:	0801124c 	.word	0x0801124c
 800bd24:	08011998 	.word	0x08011998

0800bd28 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bd28:	b590      	push	{r4, r7, lr}
 800bd2a:	b087      	sub	sp, #28
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800bd30:	2300      	movs	r3, #0
 800bd32:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d106      	bne.n	800bd4c <tcp_send_empty_ack+0x24>
 800bd3e:	4b28      	ldr	r3, [pc, #160]	@ (800bde0 <tcp_send_empty_ack+0xb8>)
 800bd40:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800bd44:	4927      	ldr	r1, [pc, #156]	@ (800bde4 <tcp_send_empty_ack+0xbc>)
 800bd46:	4828      	ldr	r0, [pc, #160]	@ (800bde8 <tcp_send_empty_ack+0xc0>)
 800bd48:	f002 ffe6 	bl	800ed18 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	f003 0304 	and.w	r3, r3, #4
 800bd56:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bd58:	7d7b      	ldrb	r3, [r7, #21]
 800bd5a:	b29c      	uxth	r4, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7f9 fa46 	bl	80051f2 <lwip_htonl>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2200      	movs	r2, #0
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7ff fec3 	bl	800baf8 <tcp_output_alloc_header>
 800bd72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d109      	bne.n	800bd8e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	8b5b      	ldrh	r3, [r3, #26]
 800bd7e:	f043 0303 	orr.w	r3, r3, #3
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bd88:	f06f 0301 	mvn.w	r3, #1
 800bd8c:	e023      	b.n	800bdd6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bd8e:	7dbb      	ldrb	r3, [r7, #22]
 800bd90:	7dfa      	ldrb	r2, [r7, #23]
 800bd92:	6939      	ldr	r1, [r7, #16]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff feed 	bl	800bb74 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3304      	adds	r3, #4
 800bda0:	6939      	ldr	r1, [r7, #16]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7ff ff24 	bl	800bbf0 <tcp_output_control_segment>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bdac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d007      	beq.n	800bdc4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	8b5b      	ldrh	r3, [r3, #26]
 800bdb8:	f043 0303 	orr.w	r3, r3, #3
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	835a      	strh	r2, [r3, #26]
 800bdc2:	e006      	b.n	800bdd2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	8b5b      	ldrh	r3, [r3, #26]
 800bdc8:	f023 0303 	bic.w	r3, r3, #3
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800bdd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	371c      	adds	r7, #28
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd90      	pop	{r4, r7, pc}
 800bdde:	bf00      	nop
 800bde0:	080111f8 	.word	0x080111f8
 800bde4:	080119b4 	.word	0x080119b4
 800bde8:	0801124c 	.word	0x0801124c

0800bdec <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bdec:	b590      	push	{r4, r7, lr}
 800bdee:	b087      	sub	sp, #28
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d106      	bne.n	800be0c <tcp_keepalive+0x20>
 800bdfe:	4b18      	ldr	r3, [pc, #96]	@ (800be60 <tcp_keepalive+0x74>)
 800be00:	f640 0224 	movw	r2, #2084	@ 0x824
 800be04:	4917      	ldr	r1, [pc, #92]	@ (800be64 <tcp_keepalive+0x78>)
 800be06:	4818      	ldr	r0, [pc, #96]	@ (800be68 <tcp_keepalive+0x7c>)
 800be08:	f002 ff86 	bl	800ed18 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800be0c:	7dfb      	ldrb	r3, [r7, #23]
 800be0e:	b29c      	uxth	r4, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be14:	3b01      	subs	r3, #1
 800be16:	4618      	mov	r0, r3
 800be18:	f7f9 f9eb 	bl	80051f2 <lwip_htonl>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2200      	movs	r2, #0
 800be20:	4621      	mov	r1, r4
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7ff fe68 	bl	800baf8 <tcp_output_alloc_header>
 800be28:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d102      	bne.n	800be36 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800be30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be34:	e010      	b.n	800be58 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800be36:	7dfb      	ldrb	r3, [r7, #23]
 800be38:	2200      	movs	r2, #0
 800be3a:	6939      	ldr	r1, [r7, #16]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7ff fe99 	bl	800bb74 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	3304      	adds	r3, #4
 800be48:	6939      	ldr	r1, [r7, #16]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f7ff fed0 	bl	800bbf0 <tcp_output_control_segment>
 800be50:	4603      	mov	r3, r0
 800be52:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800be54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	371c      	adds	r7, #28
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd90      	pop	{r4, r7, pc}
 800be60:	080111f8 	.word	0x080111f8
 800be64:	080119d4 	.word	0x080119d4
 800be68:	0801124c 	.word	0x0801124c

0800be6c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800be6c:	b590      	push	{r4, r7, lr}
 800be6e:	b08b      	sub	sp, #44	@ 0x2c
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800be74:	2300      	movs	r3, #0
 800be76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d106      	bne.n	800be8e <tcp_zero_window_probe+0x22>
 800be80:	4b4c      	ldr	r3, [pc, #304]	@ (800bfb4 <tcp_zero_window_probe+0x148>)
 800be82:	f640 024f 	movw	r2, #2127	@ 0x84f
 800be86:	494c      	ldr	r1, [pc, #304]	@ (800bfb8 <tcp_zero_window_probe+0x14c>)
 800be88:	484c      	ldr	r0, [pc, #304]	@ (800bfbc <tcp_zero_window_probe+0x150>)
 800be8a:	f002 ff45 	bl	800ed18 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be92:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800be94:	6a3b      	ldr	r3, [r7, #32]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	e086      	b.n	800bfac <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800bea4:	2bff      	cmp	r3, #255	@ 0xff
 800bea6:	d007      	beq.n	800beb8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800beae:	3301      	adds	r3, #1
 800beb0:	b2da      	uxtb	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800beb8:	6a3b      	ldr	r3, [r7, #32]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	899b      	ldrh	r3, [r3, #12]
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7f9 f981 	bl	80051c8 <lwip_htons>
 800bec6:	4603      	mov	r3, r0
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d005      	beq.n	800bede <tcp_zero_window_probe+0x72>
 800bed2:	6a3b      	ldr	r3, [r7, #32]
 800bed4:	891b      	ldrh	r3, [r3, #8]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <tcp_zero_window_probe+0x72>
 800beda:	2301      	movs	r3, #1
 800bedc:	e000      	b.n	800bee0 <tcp_zero_window_probe+0x74>
 800bede:	2300      	movs	r3, #0
 800bee0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bee2:	7ffb      	ldrb	r3, [r7, #31]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	bf0c      	ite	eq
 800bee8:	2301      	moveq	r3, #1
 800beea:	2300      	movne	r3, #0
 800beec:	b2db      	uxtb	r3, r3
 800beee:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bef4:	b299      	uxth	r1, r3
 800bef6:	6a3b      	ldr	r3, [r7, #32]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	8bba      	ldrh	r2, [r7, #28]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7ff fdfa 	bl	800baf8 <tcp_output_alloc_header>
 800bf04:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d102      	bne.n	800bf12 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bf0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf10:	e04c      	b.n	800bfac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bf18:	7ffb      	ldrb	r3, [r7, #31]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d011      	beq.n	800bf42 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	899b      	ldrh	r3, [r3, #12]
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	b21b      	sxth	r3, r3
 800bf26:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bf2a:	b21c      	sxth	r4, r3
 800bf2c:	2011      	movs	r0, #17
 800bf2e:	f7f9 f94b 	bl	80051c8 <lwip_htons>
 800bf32:	4603      	mov	r3, r0
 800bf34:	b21b      	sxth	r3, r3
 800bf36:	4323      	orrs	r3, r4
 800bf38:	b21b      	sxth	r3, r3
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	819a      	strh	r2, [r3, #12]
 800bf40:	e010      	b.n	800bf64 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	3314      	adds	r3, #20
 800bf48:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bf4a:	6a3b      	ldr	r3, [r7, #32]
 800bf4c:	6858      	ldr	r0, [r3, #4]
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	891a      	ldrh	r2, [r3, #8]
 800bf54:	6a3b      	ldr	r3, [r7, #32]
 800bf56:	891b      	ldrh	r3, [r3, #8]
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	6939      	ldr	r1, [r7, #16]
 800bf60:	f7fa fe56 	bl	8006c10 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7f9 f941 	bl	80051f2 <lwip_htonl>
 800bf70:	4603      	mov	r3, r0
 800bf72:	3301      	adds	r3, #1
 800bf74:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	da02      	bge.n	800bf88 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bf88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	69b9      	ldr	r1, [r7, #24]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f7ff fdef 	bl	800bb74 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	69b9      	ldr	r1, [r7, #24]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff fe26 	bl	800bbf0 <tcp_output_control_segment>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bfa8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	372c      	adds	r7, #44	@ 0x2c
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd90      	pop	{r4, r7, pc}
 800bfb4:	080111f8 	.word	0x080111f8
 800bfb8:	080119f0 	.word	0x080119f0
 800bfbc:	0801124c 	.word	0x0801124c

0800bfc0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bfc8:	f7fa ff10 	bl	8006dec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bfcc:	4b0a      	ldr	r3, [pc, #40]	@ (800bff8 <tcpip_tcp_timer+0x38>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d103      	bne.n	800bfdc <tcpip_tcp_timer+0x1c>
 800bfd4:	4b09      	ldr	r3, [pc, #36]	@ (800bffc <tcpip_tcp_timer+0x3c>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d005      	beq.n	800bfe8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bfdc:	2200      	movs	r2, #0
 800bfde:	4908      	ldr	r1, [pc, #32]	@ (800c000 <tcpip_tcp_timer+0x40>)
 800bfe0:	20fa      	movs	r0, #250	@ 0xfa
 800bfe2:	f000 f8f3 	bl	800c1cc <sys_timeout>
 800bfe6:	e003      	b.n	800bff0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bfe8:	4b06      	ldr	r3, [pc, #24]	@ (800c004 <tcpip_tcp_timer+0x44>)
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]
  }
}
 800bfee:	bf00      	nop
 800bff0:	bf00      	nop
 800bff2:	3708      	adds	r7, #8
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	20007c7c 	.word	0x20007c7c
 800bffc:	20007c80 	.word	0x20007c80
 800c000:	0800bfc1 	.word	0x0800bfc1
 800c004:	20007cc8 	.word	0x20007cc8

0800c008 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c00c:	4b0a      	ldr	r3, [pc, #40]	@ (800c038 <tcp_timer_needed+0x30>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10f      	bne.n	800c034 <tcp_timer_needed+0x2c>
 800c014:	4b09      	ldr	r3, [pc, #36]	@ (800c03c <tcp_timer_needed+0x34>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d103      	bne.n	800c024 <tcp_timer_needed+0x1c>
 800c01c:	4b08      	ldr	r3, [pc, #32]	@ (800c040 <tcp_timer_needed+0x38>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d007      	beq.n	800c034 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c024:	4b04      	ldr	r3, [pc, #16]	@ (800c038 <tcp_timer_needed+0x30>)
 800c026:	2201      	movs	r2, #1
 800c028:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c02a:	2200      	movs	r2, #0
 800c02c:	4905      	ldr	r1, [pc, #20]	@ (800c044 <tcp_timer_needed+0x3c>)
 800c02e:	20fa      	movs	r0, #250	@ 0xfa
 800c030:	f000 f8cc 	bl	800c1cc <sys_timeout>
  }
}
 800c034:	bf00      	nop
 800c036:	bd80      	pop	{r7, pc}
 800c038:	20007cc8 	.word	0x20007cc8
 800c03c:	20007c7c 	.word	0x20007c7c
 800c040:	20007c80 	.word	0x20007c80
 800c044:	0800bfc1 	.word	0x0800bfc1

0800c048 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c054:	2006      	movs	r0, #6
 800c056:	f7f9 fd2b 	bl	8005ab0 <memp_malloc>
 800c05a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d109      	bne.n	800c076 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d151      	bne.n	800c10c <sys_timeout_abs+0xc4>
 800c068:	4b2a      	ldr	r3, [pc, #168]	@ (800c114 <sys_timeout_abs+0xcc>)
 800c06a:	22be      	movs	r2, #190	@ 0xbe
 800c06c:	492a      	ldr	r1, [pc, #168]	@ (800c118 <sys_timeout_abs+0xd0>)
 800c06e:	482b      	ldr	r0, [pc, #172]	@ (800c11c <sys_timeout_abs+0xd4>)
 800c070:	f002 fe52 	bl	800ed18 <iprintf>
    return;
 800c074:	e04a      	b.n	800c10c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	2200      	movs	r2, #0
 800c07a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c08e:	4b24      	ldr	r3, [pc, #144]	@ (800c120 <sys_timeout_abs+0xd8>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d103      	bne.n	800c09e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c096:	4a22      	ldr	r2, [pc, #136]	@ (800c120 <sys_timeout_abs+0xd8>)
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	6013      	str	r3, [r2, #0]
    return;
 800c09c:	e037      	b.n	800c10e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	4b1f      	ldr	r3, [pc, #124]	@ (800c120 <sys_timeout_abs+0xd8>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	0fdb      	lsrs	r3, r3, #31
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d007      	beq.n	800c0c6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c0b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c120 <sys_timeout_abs+0xd8>)
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c0be:	4a18      	ldr	r2, [pc, #96]	@ (800c120 <sys_timeout_abs+0xd8>)
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	6013      	str	r3, [r2, #0]
 800c0c4:	e023      	b.n	800c10e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c0c6:	4b16      	ldr	r3, [pc, #88]	@ (800c120 <sys_timeout_abs+0xd8>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	617b      	str	r3, [r7, #20]
 800c0cc:	e01a      	b.n	800c104 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00b      	beq.n	800c0ee <sys_timeout_abs+0xa6>
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	0fdb      	lsrs	r3, r3, #31
 800c0e4:	f003 0301 	and.w	r3, r3, #1
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d007      	beq.n	800c0fe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	601a      	str	r2, [r3, #0]
        break;
 800c0fc:	e007      	b.n	800c10e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	617b      	str	r3, [r7, #20]
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e1      	bne.n	800c0ce <sys_timeout_abs+0x86>
 800c10a:	e000      	b.n	800c10e <sys_timeout_abs+0xc6>
    return;
 800c10c:	bf00      	nop
      }
    }
  }
}
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	08011a14 	.word	0x08011a14
 800c118:	08011a48 	.word	0x08011a48
 800c11c:	08011a88 	.word	0x08011a88
 800c120:	20007cc0 	.word	0x20007cc0

0800c124 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	4798      	blx	r3

  now = sys_now();
 800c136:	f7f8 fe9d 	bl	8004e74 <sys_now>
 800c13a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	4b0f      	ldr	r3, [pc, #60]	@ (800c180 <lwip_cyclic_timer+0x5c>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4413      	add	r3, r2
 800c146:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	0fdb      	lsrs	r3, r3, #31
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b00      	cmp	r3, #0
 800c158:	d009      	beq.n	800c16e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	4413      	add	r3, r2
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	4907      	ldr	r1, [pc, #28]	@ (800c184 <lwip_cyclic_timer+0x60>)
 800c166:	4618      	mov	r0, r3
 800c168:	f7ff ff6e 	bl	800c048 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c16c:	e004      	b.n	800c178 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	4904      	ldr	r1, [pc, #16]	@ (800c184 <lwip_cyclic_timer+0x60>)
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f7ff ff68 	bl	800c048 <sys_timeout_abs>
}
 800c178:	bf00      	nop
 800c17a:	3718      	adds	r7, #24
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	20007cc4 	.word	0x20007cc4
 800c184:	0800c125 	.word	0x0800c125

0800c188 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c18e:	2301      	movs	r3, #1
 800c190:	607b      	str	r3, [r7, #4]
 800c192:	e00e      	b.n	800c1b2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c194:	4a0b      	ldr	r2, [pc, #44]	@ (800c1c4 <sys_timeouts_init+0x3c>)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	00db      	lsls	r3, r3, #3
 800c1a0:	4a08      	ldr	r2, [pc, #32]	@ (800c1c4 <sys_timeouts_init+0x3c>)
 800c1a2:	4413      	add	r3, r2
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	4908      	ldr	r1, [pc, #32]	@ (800c1c8 <sys_timeouts_init+0x40>)
 800c1a8:	f000 f810 	bl	800c1cc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	607b      	str	r3, [r7, #4]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d9ed      	bls.n	800c194 <sys_timeouts_init+0xc>
  }
}
 800c1b8:	bf00      	nop
 800c1ba:	bf00      	nop
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	08012600 	.word	0x08012600
 800c1c8:	0800c125 	.word	0x0800c125

0800c1cc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1de:	d306      	bcc.n	800c1ee <sys_timeout+0x22>
 800c1e0:	4b0a      	ldr	r3, [pc, #40]	@ (800c20c <sys_timeout+0x40>)
 800c1e2:	f240 1229 	movw	r2, #297	@ 0x129
 800c1e6:	490a      	ldr	r1, [pc, #40]	@ (800c210 <sys_timeout+0x44>)
 800c1e8:	480a      	ldr	r0, [pc, #40]	@ (800c214 <sys_timeout+0x48>)
 800c1ea:	f002 fd95 	bl	800ed18 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c1ee:	f7f8 fe41 	bl	8004e74 <sys_now>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	68b9      	ldr	r1, [r7, #8]
 800c1fe:	6978      	ldr	r0, [r7, #20]
 800c200:	f7ff ff22 	bl	800c048 <sys_timeout_abs>
#endif
}
 800c204:	bf00      	nop
 800c206:	3718      	adds	r7, #24
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	08011a14 	.word	0x08011a14
 800c210:	08011ab0 	.word	0x08011ab0
 800c214:	08011a88 	.word	0x08011a88

0800c218 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c21c:	f002 fc7c 	bl	800eb18 <rand>
 800c220:	4603      	mov	r3, r0
 800c222:	b29b      	uxth	r3, r3
 800c224:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c228:	b29b      	uxth	r3, r3
 800c22a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c22e:	b29a      	uxth	r2, r3
 800c230:	4b01      	ldr	r3, [pc, #4]	@ (800c238 <udp_init+0x20>)
 800c232:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c234:	bf00      	nop
 800c236:	bd80      	pop	{r7, pc}
 800c238:	20000028 	.word	0x20000028

0800c23c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	4613      	mov	r3, r2
 800c248:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d105      	bne.n	800c25c <udp_input_local_match+0x20>
 800c250:	4b27      	ldr	r3, [pc, #156]	@ (800c2f0 <udp_input_local_match+0xb4>)
 800c252:	2287      	movs	r2, #135	@ 0x87
 800c254:	4927      	ldr	r1, [pc, #156]	@ (800c2f4 <udp_input_local_match+0xb8>)
 800c256:	4828      	ldr	r0, [pc, #160]	@ (800c2f8 <udp_input_local_match+0xbc>)
 800c258:	f002 fd5e 	bl	800ed18 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d105      	bne.n	800c26e <udp_input_local_match+0x32>
 800c262:	4b23      	ldr	r3, [pc, #140]	@ (800c2f0 <udp_input_local_match+0xb4>)
 800c264:	2288      	movs	r2, #136	@ 0x88
 800c266:	4925      	ldr	r1, [pc, #148]	@ (800c2fc <udp_input_local_match+0xc0>)
 800c268:	4823      	ldr	r0, [pc, #140]	@ (800c2f8 <udp_input_local_match+0xbc>)
 800c26a:	f002 fd55 	bl	800ed18 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	7a1b      	ldrb	r3, [r3, #8]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00b      	beq.n	800c28e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	7a1a      	ldrb	r2, [r3, #8]
 800c27a:	4b21      	ldr	r3, [pc, #132]	@ (800c300 <udp_input_local_match+0xc4>)
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c282:	3301      	adds	r3, #1
 800c284:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c286:	429a      	cmp	r2, r3
 800c288:	d001      	beq.n	800c28e <udp_input_local_match+0x52>
    return 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	e02b      	b.n	800c2e6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c28e:	79fb      	ldrb	r3, [r7, #7]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d018      	beq.n	800c2c6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d013      	beq.n	800c2c2 <udp_input_local_match+0x86>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00f      	beq.n	800c2c2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c2a2:	4b17      	ldr	r3, [pc, #92]	@ (800c300 <udp_input_local_match+0xc4>)
 800c2a4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c2a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2aa:	d00a      	beq.n	800c2c2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	4b13      	ldr	r3, [pc, #76]	@ (800c300 <udp_input_local_match+0xc4>)
 800c2b2:	695b      	ldr	r3, [r3, #20]
 800c2b4:	405a      	eors	r2, r3
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	3308      	adds	r3, #8
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d110      	bne.n	800c2e4 <udp_input_local_match+0xa8>
          return 1;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e00f      	b.n	800c2e6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d009      	beq.n	800c2e0 <udp_input_local_match+0xa4>
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d005      	beq.n	800c2e0 <udp_input_local_match+0xa4>
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	4b09      	ldr	r3, [pc, #36]	@ (800c300 <udp_input_local_match+0xc4>)
 800c2da:	695b      	ldr	r3, [r3, #20]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d101      	bne.n	800c2e4 <udp_input_local_match+0xa8>
        return 1;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e000      	b.n	800c2e6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3710      	adds	r7, #16
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	08011afc 	.word	0x08011afc
 800c2f4:	08011b2c 	.word	0x08011b2c
 800c2f8:	08011b50 	.word	0x08011b50
 800c2fc:	08011b78 	.word	0x08011b78
 800c300:	20004d54 	.word	0x20004d54

0800c304 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c304:	b590      	push	{r4, r7, lr}
 800c306:	b08d      	sub	sp, #52	@ 0x34
 800c308:	af02      	add	r7, sp, #8
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c30e:	2300      	movs	r3, #0
 800c310:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d105      	bne.n	800c324 <udp_input+0x20>
 800c318:	4b7c      	ldr	r3, [pc, #496]	@ (800c50c <udp_input+0x208>)
 800c31a:	22cf      	movs	r2, #207	@ 0xcf
 800c31c:	497c      	ldr	r1, [pc, #496]	@ (800c510 <udp_input+0x20c>)
 800c31e:	487d      	ldr	r0, [pc, #500]	@ (800c514 <udp_input+0x210>)
 800c320:	f002 fcfa 	bl	800ed18 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d105      	bne.n	800c336 <udp_input+0x32>
 800c32a:	4b78      	ldr	r3, [pc, #480]	@ (800c50c <udp_input+0x208>)
 800c32c:	22d0      	movs	r2, #208	@ 0xd0
 800c32e:	497a      	ldr	r1, [pc, #488]	@ (800c518 <udp_input+0x214>)
 800c330:	4878      	ldr	r0, [pc, #480]	@ (800c514 <udp_input+0x210>)
 800c332:	f002 fcf1 	bl	800ed18 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	895b      	ldrh	r3, [r3, #10]
 800c33a:	2b07      	cmp	r3, #7
 800c33c:	d803      	bhi.n	800c346 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f7fa fa7c 	bl	800683c <pbuf_free>
    goto end;
 800c344:	e0de      	b.n	800c504 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c34c:	4b73      	ldr	r3, [pc, #460]	@ (800c51c <udp_input+0x218>)
 800c34e:	695b      	ldr	r3, [r3, #20]
 800c350:	4a72      	ldr	r2, [pc, #456]	@ (800c51c <udp_input+0x218>)
 800c352:	6812      	ldr	r2, [r2, #0]
 800c354:	4611      	mov	r1, r2
 800c356:	4618      	mov	r0, r3
 800c358:	f001 fc88 	bl	800dc6c <ip4_addr_isbroadcast_u32>
 800c35c:	4603      	mov	r3, r0
 800c35e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	881b      	ldrh	r3, [r3, #0]
 800c364:	b29b      	uxth	r3, r3
 800c366:	4618      	mov	r0, r3
 800c368:	f7f8 ff2e 	bl	80051c8 <lwip_htons>
 800c36c:	4603      	mov	r3, r0
 800c36e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	885b      	ldrh	r3, [r3, #2]
 800c374:	b29b      	uxth	r3, r3
 800c376:	4618      	mov	r0, r3
 800c378:	f7f8 ff26 	bl	80051c8 <lwip_htons>
 800c37c:	4603      	mov	r3, r0
 800c37e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c380:	2300      	movs	r3, #0
 800c382:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800c384:	2300      	movs	r3, #0
 800c386:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c388:	2300      	movs	r3, #0
 800c38a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c38c:	4b64      	ldr	r3, [pc, #400]	@ (800c520 <udp_input+0x21c>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	627b      	str	r3, [r7, #36]	@ 0x24
 800c392:	e054      	b.n	800c43e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c396:	8a5b      	ldrh	r3, [r3, #18]
 800c398:	89fa      	ldrh	r2, [r7, #14]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d14a      	bne.n	800c434 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c39e:	7cfb      	ldrb	r3, [r7, #19]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	6839      	ldr	r1, [r7, #0]
 800c3a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c3a6:	f7ff ff49 	bl	800c23c <udp_input_local_match>
 800c3aa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d041      	beq.n	800c434 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b2:	7c1b      	ldrb	r3, [r3, #16]
 800c3b4:	f003 0304 	and.w	r3, r3, #4
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d11d      	bne.n	800c3f8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d102      	bne.n	800c3c8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c4:	61fb      	str	r3, [r7, #28]
 800c3c6:	e017      	b.n	800c3f8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c3c8:	7cfb      	ldrb	r3, [r7, #19]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d014      	beq.n	800c3f8 <udp_input+0xf4>
 800c3ce:	4b53      	ldr	r3, [pc, #332]	@ (800c51c <udp_input+0x218>)
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3d6:	d10f      	bne.n	800c3f8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d008      	beq.n	800c3f8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d101      	bne.n	800c3f8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fa:	8a9b      	ldrh	r3, [r3, #20]
 800c3fc:	8a3a      	ldrh	r2, [r7, #16]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d118      	bne.n	800c434 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c404:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c406:	2b00      	cmp	r3, #0
 800c408:	d005      	beq.n	800c416 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	4b43      	ldr	r3, [pc, #268]	@ (800c51c <udp_input+0x218>)
 800c410:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c412:	429a      	cmp	r2, r3
 800c414:	d10e      	bne.n	800c434 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c416:	6a3b      	ldr	r3, [r7, #32]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d014      	beq.n	800c446 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41e:	68da      	ldr	r2, [r3, #12]
 800c420:	6a3b      	ldr	r3, [r7, #32]
 800c422:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c424:	4b3e      	ldr	r3, [pc, #248]	@ (800c520 <udp_input+0x21c>)
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c42a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c42c:	4a3c      	ldr	r2, [pc, #240]	@ (800c520 <udp_input+0x21c>)
 800c42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c430:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c432:	e008      	b.n	800c446 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c436:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1a7      	bne.n	800c394 <udp_input+0x90>
 800c444:	e000      	b.n	800c448 <udp_input+0x144>
        break;
 800c446:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <udp_input+0x15a>
    for_us = 1;
 800c458:	2301      	movs	r3, #1
 800c45a:	76fb      	strb	r3, [r7, #27]
 800c45c:	e00a      	b.n	800c474 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	3304      	adds	r3, #4
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	4b2d      	ldr	r3, [pc, #180]	@ (800c51c <udp_input+0x218>)
 800c466:	695b      	ldr	r3, [r3, #20]
 800c468:	429a      	cmp	r2, r3
 800c46a:	bf0c      	ite	eq
 800c46c:	2301      	moveq	r3, #1
 800c46e:	2300      	movne	r3, #0
 800c470:	b2db      	uxtb	r3, r3
 800c472:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c474:	7efb      	ldrb	r3, [r7, #27]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d041      	beq.n	800c4fe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c47a:	2108      	movs	r1, #8
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f7fa f957 	bl	8006730 <pbuf_remove_header>
 800c482:	4603      	mov	r3, r0
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00a      	beq.n	800c49e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c488:	4b20      	ldr	r3, [pc, #128]	@ (800c50c <udp_input+0x208>)
 800c48a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800c48e:	4925      	ldr	r1, [pc, #148]	@ (800c524 <udp_input+0x220>)
 800c490:	4820      	ldr	r0, [pc, #128]	@ (800c514 <udp_input+0x210>)
 800c492:	f002 fc41 	bl	800ed18 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7fa f9d0 	bl	800683c <pbuf_free>
      goto end;
 800c49c:	e032      	b.n	800c504 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d012      	beq.n	800c4ca <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a6:	699b      	ldr	r3, [r3, #24]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00a      	beq.n	800c4c2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ae:	699c      	ldr	r4, [r3, #24]
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b2:	69d8      	ldr	r0, [r3, #28]
 800c4b4:	8a3b      	ldrh	r3, [r7, #16]
 800c4b6:	9300      	str	r3, [sp, #0]
 800c4b8:	4b1b      	ldr	r3, [pc, #108]	@ (800c528 <udp_input+0x224>)
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c4be:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c4c0:	e021      	b.n	800c506 <udp_input+0x202>
        pbuf_free(p);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f7fa f9ba 	bl	800683c <pbuf_free>
        goto end;
 800c4c8:	e01c      	b.n	800c504 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c4ca:	7cfb      	ldrb	r3, [r7, #19]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d112      	bne.n	800c4f6 <udp_input+0x1f2>
 800c4d0:	4b12      	ldr	r3, [pc, #72]	@ (800c51c <udp_input+0x218>)
 800c4d2:	695b      	ldr	r3, [r3, #20]
 800c4d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c4d8:	2be0      	cmp	r3, #224	@ 0xe0
 800c4da:	d00c      	beq.n	800c4f6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c4dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c51c <udp_input+0x218>)
 800c4de:	899b      	ldrh	r3, [r3, #12]
 800c4e0:	3308      	adds	r3, #8
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	b21b      	sxth	r3, r3
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f7fa f994 	bl	8006816 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c4ee:	2103      	movs	r1, #3
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f001 f89b 	bl	800d62c <icmp_dest_unreach>
      pbuf_free(p);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7fa f9a0 	bl	800683c <pbuf_free>
  return;
 800c4fc:	e003      	b.n	800c506 <udp_input+0x202>
    pbuf_free(p);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f7fa f99c 	bl	800683c <pbuf_free>
  return;
 800c504:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c506:	372c      	adds	r7, #44	@ 0x2c
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd90      	pop	{r4, r7, pc}
 800c50c:	08011afc 	.word	0x08011afc
 800c510:	08011ba0 	.word	0x08011ba0
 800c514:	08011b50 	.word	0x08011b50
 800c518:	08011bb8 	.word	0x08011bb8
 800c51c:	20004d54 	.word	0x20004d54
 800c520:	20007ccc 	.word	0x20007ccc
 800c524:	08011bd4 	.word	0x08011bd4
 800c528:	20004d64 	.word	0x20004d64

0800c52c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d01e      	beq.n	800c57a <udp_netif_ip_addr_changed+0x4e>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d01a      	beq.n	800c57a <udp_netif_ip_addr_changed+0x4e>
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d017      	beq.n	800c57a <udp_netif_ip_addr_changed+0x4e>
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d013      	beq.n	800c57a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c552:	4b0d      	ldr	r3, [pc, #52]	@ (800c588 <udp_netif_ip_addr_changed+0x5c>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	60fb      	str	r3, [r7, #12]
 800c558:	e00c      	b.n	800c574 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	429a      	cmp	r2, r3
 800c564:	d103      	bne.n	800c56e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	60fb      	str	r3, [r7, #12]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1ef      	bne.n	800c55a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c57a:	bf00      	nop
 800c57c:	3714      	adds	r7, #20
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	20007ccc 	.word	0x20007ccc

0800c58c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c594:	4915      	ldr	r1, [pc, #84]	@ (800c5ec <etharp_free_entry+0x60>)
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	4613      	mov	r3, r2
 800c59a:	005b      	lsls	r3, r3, #1
 800c59c:	4413      	add	r3, r2
 800c59e:	00db      	lsls	r3, r3, #3
 800c5a0:	440b      	add	r3, r1
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d013      	beq.n	800c5d0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c5a8:	4910      	ldr	r1, [pc, #64]	@ (800c5ec <etharp_free_entry+0x60>)
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	005b      	lsls	r3, r3, #1
 800c5b0:	4413      	add	r3, r2
 800c5b2:	00db      	lsls	r3, r3, #3
 800c5b4:	440b      	add	r3, r1
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7fa f93f 	bl	800683c <pbuf_free>
    arp_table[i].q = NULL;
 800c5be:	490b      	ldr	r1, [pc, #44]	@ (800c5ec <etharp_free_entry+0x60>)
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	005b      	lsls	r3, r3, #1
 800c5c6:	4413      	add	r3, r2
 800c5c8:	00db      	lsls	r3, r3, #3
 800c5ca:	440b      	add	r3, r1
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c5d0:	4906      	ldr	r1, [pc, #24]	@ (800c5ec <etharp_free_entry+0x60>)
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	005b      	lsls	r3, r3, #1
 800c5d8:	4413      	add	r3, r2
 800c5da:	00db      	lsls	r3, r3, #3
 800c5dc:	440b      	add	r3, r1
 800c5de:	3314      	adds	r3, #20
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c5e4:	bf00      	nop
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	20007cd0 	.word	0x20007cd0

0800c5f0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	607b      	str	r3, [r7, #4]
 800c5fa:	e096      	b.n	800c72a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c5fc:	494f      	ldr	r1, [pc, #316]	@ (800c73c <etharp_tmr+0x14c>)
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	4613      	mov	r3, r2
 800c602:	005b      	lsls	r3, r3, #1
 800c604:	4413      	add	r3, r2
 800c606:	00db      	lsls	r3, r3, #3
 800c608:	440b      	add	r3, r1
 800c60a:	3314      	adds	r3, #20
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c610:	78fb      	ldrb	r3, [r7, #3]
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 8086 	beq.w	800c724 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c618:	4948      	ldr	r1, [pc, #288]	@ (800c73c <etharp_tmr+0x14c>)
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	4613      	mov	r3, r2
 800c61e:	005b      	lsls	r3, r3, #1
 800c620:	4413      	add	r3, r2
 800c622:	00db      	lsls	r3, r3, #3
 800c624:	440b      	add	r3, r1
 800c626:	3312      	adds	r3, #18
 800c628:	881b      	ldrh	r3, [r3, #0]
 800c62a:	3301      	adds	r3, #1
 800c62c:	b298      	uxth	r0, r3
 800c62e:	4943      	ldr	r1, [pc, #268]	@ (800c73c <etharp_tmr+0x14c>)
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	4613      	mov	r3, r2
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	4413      	add	r3, r2
 800c638:	00db      	lsls	r3, r3, #3
 800c63a:	440b      	add	r3, r1
 800c63c:	3312      	adds	r3, #18
 800c63e:	4602      	mov	r2, r0
 800c640:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c642:	493e      	ldr	r1, [pc, #248]	@ (800c73c <etharp_tmr+0x14c>)
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	4613      	mov	r3, r2
 800c648:	005b      	lsls	r3, r3, #1
 800c64a:	4413      	add	r3, r2
 800c64c:	00db      	lsls	r3, r3, #3
 800c64e:	440b      	add	r3, r1
 800c650:	3312      	adds	r3, #18
 800c652:	881b      	ldrh	r3, [r3, #0]
 800c654:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c658:	d215      	bcs.n	800c686 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c65a:	4938      	ldr	r1, [pc, #224]	@ (800c73c <etharp_tmr+0x14c>)
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	4613      	mov	r3, r2
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	4413      	add	r3, r2
 800c664:	00db      	lsls	r3, r3, #3
 800c666:	440b      	add	r3, r1
 800c668:	3314      	adds	r3, #20
 800c66a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d10e      	bne.n	800c68e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c670:	4932      	ldr	r1, [pc, #200]	@ (800c73c <etharp_tmr+0x14c>)
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	4613      	mov	r3, r2
 800c676:	005b      	lsls	r3, r3, #1
 800c678:	4413      	add	r3, r2
 800c67a:	00db      	lsls	r3, r3, #3
 800c67c:	440b      	add	r3, r1
 800c67e:	3312      	adds	r3, #18
 800c680:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c682:	2b04      	cmp	r3, #4
 800c684:	d903      	bls.n	800c68e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff ff80 	bl	800c58c <etharp_free_entry>
 800c68c:	e04a      	b.n	800c724 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c68e:	492b      	ldr	r1, [pc, #172]	@ (800c73c <etharp_tmr+0x14c>)
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	4613      	mov	r3, r2
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	4413      	add	r3, r2
 800c698:	00db      	lsls	r3, r3, #3
 800c69a:	440b      	add	r3, r1
 800c69c:	3314      	adds	r3, #20
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2b03      	cmp	r3, #3
 800c6a2:	d10a      	bne.n	800c6ba <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c6a4:	4925      	ldr	r1, [pc, #148]	@ (800c73c <etharp_tmr+0x14c>)
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	005b      	lsls	r3, r3, #1
 800c6ac:	4413      	add	r3, r2
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	440b      	add	r3, r1
 800c6b2:	3314      	adds	r3, #20
 800c6b4:	2204      	movs	r2, #4
 800c6b6:	701a      	strb	r2, [r3, #0]
 800c6b8:	e034      	b.n	800c724 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c6ba:	4920      	ldr	r1, [pc, #128]	@ (800c73c <etharp_tmr+0x14c>)
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	4613      	mov	r3, r2
 800c6c0:	005b      	lsls	r3, r3, #1
 800c6c2:	4413      	add	r3, r2
 800c6c4:	00db      	lsls	r3, r3, #3
 800c6c6:	440b      	add	r3, r1
 800c6c8:	3314      	adds	r3, #20
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	2b04      	cmp	r3, #4
 800c6ce:	d10a      	bne.n	800c6e6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c6d0:	491a      	ldr	r1, [pc, #104]	@ (800c73c <etharp_tmr+0x14c>)
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	005b      	lsls	r3, r3, #1
 800c6d8:	4413      	add	r3, r2
 800c6da:	00db      	lsls	r3, r3, #3
 800c6dc:	440b      	add	r3, r1
 800c6de:	3314      	adds	r3, #20
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	701a      	strb	r2, [r3, #0]
 800c6e4:	e01e      	b.n	800c724 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c6e6:	4915      	ldr	r1, [pc, #84]	@ (800c73c <etharp_tmr+0x14c>)
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	005b      	lsls	r3, r3, #1
 800c6ee:	4413      	add	r3, r2
 800c6f0:	00db      	lsls	r3, r3, #3
 800c6f2:	440b      	add	r3, r1
 800c6f4:	3314      	adds	r3, #20
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d113      	bne.n	800c724 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c6fc:	490f      	ldr	r1, [pc, #60]	@ (800c73c <etharp_tmr+0x14c>)
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	4613      	mov	r3, r2
 800c702:	005b      	lsls	r3, r3, #1
 800c704:	4413      	add	r3, r2
 800c706:	00db      	lsls	r3, r3, #3
 800c708:	440b      	add	r3, r1
 800c70a:	3308      	adds	r3, #8
 800c70c:	6818      	ldr	r0, [r3, #0]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	4613      	mov	r3, r2
 800c712:	005b      	lsls	r3, r3, #1
 800c714:	4413      	add	r3, r2
 800c716:	00db      	lsls	r3, r3, #3
 800c718:	4a08      	ldr	r2, [pc, #32]	@ (800c73c <etharp_tmr+0x14c>)
 800c71a:	4413      	add	r3, r2
 800c71c:	3304      	adds	r3, #4
 800c71e:	4619      	mov	r1, r3
 800c720:	f000 fe6e 	bl	800d400 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	3301      	adds	r3, #1
 800c728:	607b      	str	r3, [r7, #4]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b09      	cmp	r3, #9
 800c72e:	f77f af65 	ble.w	800c5fc <etharp_tmr+0xc>
      }
    }
  }
}
 800c732:	bf00      	nop
 800c734:	bf00      	nop
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	20007cd0 	.word	0x20007cd0

0800c740 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b08a      	sub	sp, #40	@ 0x28
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	460b      	mov	r3, r1
 800c74a:	607a      	str	r2, [r7, #4]
 800c74c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c74e:	230a      	movs	r3, #10
 800c750:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c752:	230a      	movs	r3, #10
 800c754:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c756:	230a      	movs	r3, #10
 800c758:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c75e:	230a      	movs	r3, #10
 800c760:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c762:	2300      	movs	r3, #0
 800c764:	83bb      	strh	r3, [r7, #28]
 800c766:	2300      	movs	r3, #0
 800c768:	837b      	strh	r3, [r7, #26]
 800c76a:	2300      	movs	r3, #0
 800c76c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c76e:	2300      	movs	r3, #0
 800c770:	843b      	strh	r3, [r7, #32]
 800c772:	e0ae      	b.n	800c8d2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c774:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c778:	49a6      	ldr	r1, [pc, #664]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c77a:	4613      	mov	r3, r2
 800c77c:	005b      	lsls	r3, r3, #1
 800c77e:	4413      	add	r3, r2
 800c780:	00db      	lsls	r3, r3, #3
 800c782:	440b      	add	r3, r1
 800c784:	3314      	adds	r3, #20
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c78a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c78e:	2b0a      	cmp	r3, #10
 800c790:	d105      	bne.n	800c79e <etharp_find_entry+0x5e>
 800c792:	7dfb      	ldrb	r3, [r7, #23]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d102      	bne.n	800c79e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c798:	8c3b      	ldrh	r3, [r7, #32]
 800c79a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c79c:	e095      	b.n	800c8ca <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c79e:	7dfb      	ldrb	r3, [r7, #23]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f000 8092 	beq.w	800c8ca <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d009      	beq.n	800c7c0 <etharp_find_entry+0x80>
 800c7ac:	7dfb      	ldrb	r3, [r7, #23]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d806      	bhi.n	800c7c0 <etharp_find_entry+0x80>
 800c7b2:	4b99      	ldr	r3, [pc, #612]	@ (800ca18 <etharp_find_entry+0x2d8>)
 800c7b4:	f240 1223 	movw	r2, #291	@ 0x123
 800c7b8:	4998      	ldr	r1, [pc, #608]	@ (800ca1c <etharp_find_entry+0x2dc>)
 800c7ba:	4899      	ldr	r0, [pc, #612]	@ (800ca20 <etharp_find_entry+0x2e0>)
 800c7bc:	f002 faac 	bl	800ed18 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d020      	beq.n	800c808 <etharp_find_entry+0xc8>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6819      	ldr	r1, [r3, #0]
 800c7ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7ce:	4891      	ldr	r0, [pc, #580]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	4413      	add	r3, r2
 800c7d6:	00db      	lsls	r3, r3, #3
 800c7d8:	4403      	add	r3, r0
 800c7da:	3304      	adds	r3, #4
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4299      	cmp	r1, r3
 800c7e0:	d112      	bne.n	800c808 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00c      	beq.n	800c802 <etharp_find_entry+0xc2>
 800c7e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7ec:	4989      	ldr	r1, [pc, #548]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	005b      	lsls	r3, r3, #1
 800c7f2:	4413      	add	r3, r2
 800c7f4:	00db      	lsls	r3, r3, #3
 800c7f6:	440b      	add	r3, r1
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d102      	bne.n	800c808 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c802:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c806:	e100      	b.n	800ca0a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c808:	7dfb      	ldrb	r3, [r7, #23]
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d140      	bne.n	800c890 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c80e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c812:	4980      	ldr	r1, [pc, #512]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c814:	4613      	mov	r3, r2
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	4413      	add	r3, r2
 800c81a:	00db      	lsls	r3, r3, #3
 800c81c:	440b      	add	r3, r1
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d01a      	beq.n	800c85a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c824:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c828:	497a      	ldr	r1, [pc, #488]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c82a:	4613      	mov	r3, r2
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	4413      	add	r3, r2
 800c830:	00db      	lsls	r3, r3, #3
 800c832:	440b      	add	r3, r1
 800c834:	3312      	adds	r3, #18
 800c836:	881b      	ldrh	r3, [r3, #0]
 800c838:	8bba      	ldrh	r2, [r7, #28]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d845      	bhi.n	800c8ca <etharp_find_entry+0x18a>
            old_queue = i;
 800c83e:	8c3b      	ldrh	r3, [r7, #32]
 800c840:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c842:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c846:	4973      	ldr	r1, [pc, #460]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c848:	4613      	mov	r3, r2
 800c84a:	005b      	lsls	r3, r3, #1
 800c84c:	4413      	add	r3, r2
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	440b      	add	r3, r1
 800c852:	3312      	adds	r3, #18
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	83bb      	strh	r3, [r7, #28]
 800c858:	e037      	b.n	800c8ca <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c85a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c85e:	496d      	ldr	r1, [pc, #436]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c860:	4613      	mov	r3, r2
 800c862:	005b      	lsls	r3, r3, #1
 800c864:	4413      	add	r3, r2
 800c866:	00db      	lsls	r3, r3, #3
 800c868:	440b      	add	r3, r1
 800c86a:	3312      	adds	r3, #18
 800c86c:	881b      	ldrh	r3, [r3, #0]
 800c86e:	8b7a      	ldrh	r2, [r7, #26]
 800c870:	429a      	cmp	r2, r3
 800c872:	d82a      	bhi.n	800c8ca <etharp_find_entry+0x18a>
            old_pending = i;
 800c874:	8c3b      	ldrh	r3, [r7, #32]
 800c876:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800c878:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c87c:	4965      	ldr	r1, [pc, #404]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c87e:	4613      	mov	r3, r2
 800c880:	005b      	lsls	r3, r3, #1
 800c882:	4413      	add	r3, r2
 800c884:	00db      	lsls	r3, r3, #3
 800c886:	440b      	add	r3, r1
 800c888:	3312      	adds	r3, #18
 800c88a:	881b      	ldrh	r3, [r3, #0]
 800c88c:	837b      	strh	r3, [r7, #26]
 800c88e:	e01c      	b.n	800c8ca <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c890:	7dfb      	ldrb	r3, [r7, #23]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d919      	bls.n	800c8ca <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c896:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c89a:	495e      	ldr	r1, [pc, #376]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c89c:	4613      	mov	r3, r2
 800c89e:	005b      	lsls	r3, r3, #1
 800c8a0:	4413      	add	r3, r2
 800c8a2:	00db      	lsls	r3, r3, #3
 800c8a4:	440b      	add	r3, r1
 800c8a6:	3312      	adds	r3, #18
 800c8a8:	881b      	ldrh	r3, [r3, #0]
 800c8aa:	8b3a      	ldrh	r2, [r7, #24]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d80c      	bhi.n	800c8ca <etharp_find_entry+0x18a>
            old_stable = i;
 800c8b0:	8c3b      	ldrh	r3, [r7, #32]
 800c8b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800c8b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8b8:	4956      	ldr	r1, [pc, #344]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	005b      	lsls	r3, r3, #1
 800c8be:	4413      	add	r3, r2
 800c8c0:	00db      	lsls	r3, r3, #3
 800c8c2:	440b      	add	r3, r1
 800c8c4:	3312      	adds	r3, #18
 800c8c6:	881b      	ldrh	r3, [r3, #0]
 800c8c8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8ca:	8c3b      	ldrh	r3, [r7, #32]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	843b      	strh	r3, [r7, #32]
 800c8d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c8d6:	2b09      	cmp	r3, #9
 800c8d8:	f77f af4c 	ble.w	800c774 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c8dc:	7afb      	ldrb	r3, [r7, #11]
 800c8de:	f003 0302 	and.w	r3, r3, #2
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d108      	bne.n	800c8f8 <etharp_find_entry+0x1b8>
 800c8e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c8ea:	2b0a      	cmp	r3, #10
 800c8ec:	d107      	bne.n	800c8fe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c8ee:	7afb      	ldrb	r3, [r7, #11]
 800c8f0:	f003 0301 	and.w	r3, r3, #1
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d102      	bne.n	800c8fe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c8f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8fc:	e085      	b.n	800ca0a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c8fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c902:	2b09      	cmp	r3, #9
 800c904:	dc02      	bgt.n	800c90c <etharp_find_entry+0x1cc>
    i = empty;
 800c906:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c908:	843b      	strh	r3, [r7, #32]
 800c90a:	e039      	b.n	800c980 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c90c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c910:	2b09      	cmp	r3, #9
 800c912:	dc14      	bgt.n	800c93e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c916:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c918:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c91c:	493d      	ldr	r1, [pc, #244]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c91e:	4613      	mov	r3, r2
 800c920:	005b      	lsls	r3, r3, #1
 800c922:	4413      	add	r3, r2
 800c924:	00db      	lsls	r3, r3, #3
 800c926:	440b      	add	r3, r1
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d018      	beq.n	800c960 <etharp_find_entry+0x220>
 800c92e:	4b3a      	ldr	r3, [pc, #232]	@ (800ca18 <etharp_find_entry+0x2d8>)
 800c930:	f240 126d 	movw	r2, #365	@ 0x16d
 800c934:	493b      	ldr	r1, [pc, #236]	@ (800ca24 <etharp_find_entry+0x2e4>)
 800c936:	483a      	ldr	r0, [pc, #232]	@ (800ca20 <etharp_find_entry+0x2e0>)
 800c938:	f002 f9ee 	bl	800ed18 <iprintf>
 800c93c:	e010      	b.n	800c960 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c93e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800c942:	2b09      	cmp	r3, #9
 800c944:	dc02      	bgt.n	800c94c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c946:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c948:	843b      	strh	r3, [r7, #32]
 800c94a:	e009      	b.n	800c960 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c94c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c950:	2b09      	cmp	r3, #9
 800c952:	dc02      	bgt.n	800c95a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c954:	8bfb      	ldrh	r3, [r7, #30]
 800c956:	843b      	strh	r3, [r7, #32]
 800c958:	e002      	b.n	800c960 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c95a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c95e:	e054      	b.n	800ca0a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c960:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c964:	2b09      	cmp	r3, #9
 800c966:	dd06      	ble.n	800c976 <etharp_find_entry+0x236>
 800c968:	4b2b      	ldr	r3, [pc, #172]	@ (800ca18 <etharp_find_entry+0x2d8>)
 800c96a:	f240 127f 	movw	r2, #383	@ 0x17f
 800c96e:	492e      	ldr	r1, [pc, #184]	@ (800ca28 <etharp_find_entry+0x2e8>)
 800c970:	482b      	ldr	r0, [pc, #172]	@ (800ca20 <etharp_find_entry+0x2e0>)
 800c972:	f002 f9d1 	bl	800ed18 <iprintf>
    etharp_free_entry(i);
 800c976:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7ff fe06 	bl	800c58c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c980:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c984:	2b09      	cmp	r3, #9
 800c986:	dd06      	ble.n	800c996 <etharp_find_entry+0x256>
 800c988:	4b23      	ldr	r3, [pc, #140]	@ (800ca18 <etharp_find_entry+0x2d8>)
 800c98a:	f240 1283 	movw	r2, #387	@ 0x183
 800c98e:	4926      	ldr	r1, [pc, #152]	@ (800ca28 <etharp_find_entry+0x2e8>)
 800c990:	4823      	ldr	r0, [pc, #140]	@ (800ca20 <etharp_find_entry+0x2e0>)
 800c992:	f002 f9c1 	bl	800ed18 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c996:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c99a:	491e      	ldr	r1, [pc, #120]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c99c:	4613      	mov	r3, r2
 800c99e:	005b      	lsls	r3, r3, #1
 800c9a0:	4413      	add	r3, r2
 800c9a2:	00db      	lsls	r3, r3, #3
 800c9a4:	440b      	add	r3, r1
 800c9a6:	3314      	adds	r3, #20
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d006      	beq.n	800c9bc <etharp_find_entry+0x27c>
 800c9ae:	4b1a      	ldr	r3, [pc, #104]	@ (800ca18 <etharp_find_entry+0x2d8>)
 800c9b0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800c9b4:	491d      	ldr	r1, [pc, #116]	@ (800ca2c <etharp_find_entry+0x2ec>)
 800c9b6:	481a      	ldr	r0, [pc, #104]	@ (800ca20 <etharp_find_entry+0x2e0>)
 800c9b8:	f002 f9ae 	bl	800ed18 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00b      	beq.n	800c9da <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c9c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6819      	ldr	r1, [r3, #0]
 800c9ca:	4812      	ldr	r0, [pc, #72]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	005b      	lsls	r3, r3, #1
 800c9d0:	4413      	add	r3, r2
 800c9d2:	00db      	lsls	r3, r3, #3
 800c9d4:	4403      	add	r3, r0
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c9da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9de:	490d      	ldr	r1, [pc, #52]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	005b      	lsls	r3, r3, #1
 800c9e4:	4413      	add	r3, r2
 800c9e6:	00db      	lsls	r3, r3, #3
 800c9e8:	440b      	add	r3, r1
 800c9ea:	3312      	adds	r3, #18
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c9f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9f4:	4907      	ldr	r1, [pc, #28]	@ (800ca14 <etharp_find_entry+0x2d4>)
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	005b      	lsls	r3, r3, #1
 800c9fa:	4413      	add	r3, r2
 800c9fc:	00db      	lsls	r3, r3, #3
 800c9fe:	440b      	add	r3, r1
 800ca00:	3308      	adds	r3, #8
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ca06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3728      	adds	r7, #40	@ 0x28
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	20007cd0 	.word	0x20007cd0
 800ca18:	08011e60 	.word	0x08011e60
 800ca1c:	08011e98 	.word	0x08011e98
 800ca20:	08011ed8 	.word	0x08011ed8
 800ca24:	08011f00 	.word	0x08011f00
 800ca28:	08011f18 	.word	0x08011f18
 800ca2c:	08011f2c 	.word	0x08011f2c

0800ca30 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b088      	sub	sp, #32
 800ca34:	af02      	add	r7, sp, #8
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
 800ca3c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ca44:	2b06      	cmp	r3, #6
 800ca46:	d006      	beq.n	800ca56 <etharp_update_arp_entry+0x26>
 800ca48:	4b48      	ldr	r3, [pc, #288]	@ (800cb6c <etharp_update_arp_entry+0x13c>)
 800ca4a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800ca4e:	4948      	ldr	r1, [pc, #288]	@ (800cb70 <etharp_update_arp_entry+0x140>)
 800ca50:	4848      	ldr	r0, [pc, #288]	@ (800cb74 <etharp_update_arp_entry+0x144>)
 800ca52:	f002 f961 	bl	800ed18 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d012      	beq.n	800ca82 <etharp_update_arp_entry+0x52>
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00e      	beq.n	800ca82 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	68f9      	ldr	r1, [r7, #12]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f001 f8fe 	bl	800dc6c <ip4_addr_isbroadcast_u32>
 800ca70:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d105      	bne.n	800ca82 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca7e:	2be0      	cmp	r3, #224	@ 0xe0
 800ca80:	d102      	bne.n	800ca88 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ca82:	f06f 030f 	mvn.w	r3, #15
 800ca86:	e06c      	b.n	800cb62 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ca88:	78fb      	ldrb	r3, [r7, #3]
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	68b8      	ldr	r0, [r7, #8]
 800ca90:	f7ff fe56 	bl	800c740 <etharp_find_entry>
 800ca94:	4603      	mov	r3, r0
 800ca96:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ca98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	da02      	bge.n	800caa6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800caa0:	8afb      	ldrh	r3, [r7, #22]
 800caa2:	b25b      	sxtb	r3, r3
 800caa4:	e05d      	b.n	800cb62 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800caa6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800caaa:	4933      	ldr	r1, [pc, #204]	@ (800cb78 <etharp_update_arp_entry+0x148>)
 800caac:	4613      	mov	r3, r2
 800caae:	005b      	lsls	r3, r3, #1
 800cab0:	4413      	add	r3, r2
 800cab2:	00db      	lsls	r3, r3, #3
 800cab4:	440b      	add	r3, r1
 800cab6:	3314      	adds	r3, #20
 800cab8:	2202      	movs	r2, #2
 800caba:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cabc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cac0:	492d      	ldr	r1, [pc, #180]	@ (800cb78 <etharp_update_arp_entry+0x148>)
 800cac2:	4613      	mov	r3, r2
 800cac4:	005b      	lsls	r3, r3, #1
 800cac6:	4413      	add	r3, r2
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	440b      	add	r3, r1
 800cacc:	3308      	adds	r3, #8
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cad2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cad6:	4613      	mov	r3, r2
 800cad8:	005b      	lsls	r3, r3, #1
 800cada:	4413      	add	r3, r2
 800cadc:	00db      	lsls	r3, r3, #3
 800cade:	3308      	adds	r3, #8
 800cae0:	4a25      	ldr	r2, [pc, #148]	@ (800cb78 <etharp_update_arp_entry+0x148>)
 800cae2:	4413      	add	r3, r2
 800cae4:	3304      	adds	r3, #4
 800cae6:	2206      	movs	r2, #6
 800cae8:	6879      	ldr	r1, [r7, #4]
 800caea:	4618      	mov	r0, r3
 800caec:	f002 f9ef 	bl	800eece <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800caf0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800caf4:	4920      	ldr	r1, [pc, #128]	@ (800cb78 <etharp_update_arp_entry+0x148>)
 800caf6:	4613      	mov	r3, r2
 800caf8:	005b      	lsls	r3, r3, #1
 800cafa:	4413      	add	r3, r2
 800cafc:	00db      	lsls	r3, r3, #3
 800cafe:	440b      	add	r3, r1
 800cb00:	3312      	adds	r3, #18
 800cb02:	2200      	movs	r2, #0
 800cb04:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cb06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb0a:	491b      	ldr	r1, [pc, #108]	@ (800cb78 <etharp_update_arp_entry+0x148>)
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	005b      	lsls	r3, r3, #1
 800cb10:	4413      	add	r3, r2
 800cb12:	00db      	lsls	r3, r3, #3
 800cb14:	440b      	add	r3, r1
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d021      	beq.n	800cb60 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cb1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb20:	4915      	ldr	r1, [pc, #84]	@ (800cb78 <etharp_update_arp_entry+0x148>)
 800cb22:	4613      	mov	r3, r2
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	4413      	add	r3, r2
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	440b      	add	r3, r1
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cb30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb34:	4910      	ldr	r1, [pc, #64]	@ (800cb78 <etharp_update_arp_entry+0x148>)
 800cb36:	4613      	mov	r3, r2
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	4413      	add	r3, r2
 800cb3c:	00db      	lsls	r3, r3, #3
 800cb3e:	440b      	add	r3, r1
 800cb40:	2200      	movs	r2, #0
 800cb42:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800cb4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6939      	ldr	r1, [r7, #16]
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f001 ff97 	bl	800ea88 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cb5a:	6938      	ldr	r0, [r7, #16]
 800cb5c:	f7f9 fe6e 	bl	800683c <pbuf_free>
  }
  return ERR_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3718      	adds	r7, #24
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	08011e60 	.word	0x08011e60
 800cb70:	08011f58 	.word	0x08011f58
 800cb74:	08011ed8 	.word	0x08011ed8
 800cb78:	20007cd0 	.word	0x20007cd0

0800cb7c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb84:	2300      	movs	r3, #0
 800cb86:	60fb      	str	r3, [r7, #12]
 800cb88:	e01e      	b.n	800cbc8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cb8a:	4913      	ldr	r1, [pc, #76]	@ (800cbd8 <etharp_cleanup_netif+0x5c>)
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	005b      	lsls	r3, r3, #1
 800cb92:	4413      	add	r3, r2
 800cb94:	00db      	lsls	r3, r3, #3
 800cb96:	440b      	add	r3, r1
 800cb98:	3314      	adds	r3, #20
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cb9e:	7afb      	ldrb	r3, [r7, #11]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00e      	beq.n	800cbc2 <etharp_cleanup_netif+0x46>
 800cba4:	490c      	ldr	r1, [pc, #48]	@ (800cbd8 <etharp_cleanup_netif+0x5c>)
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	4613      	mov	r3, r2
 800cbaa:	005b      	lsls	r3, r3, #1
 800cbac:	4413      	add	r3, r2
 800cbae:	00db      	lsls	r3, r3, #3
 800cbb0:	440b      	add	r3, r1
 800cbb2:	3308      	adds	r3, #8
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d102      	bne.n	800cbc2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f7ff fce5 	bl	800c58c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	60fb      	str	r3, [r7, #12]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2b09      	cmp	r3, #9
 800cbcc:	dddd      	ble.n	800cb8a <etharp_cleanup_netif+0xe>
    }
  }
}
 800cbce:	bf00      	nop
 800cbd0:	bf00      	nop
 800cbd2:	3710      	adds	r7, #16
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	20007cd0 	.word	0x20007cd0

0800cbdc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cbdc:	b5b0      	push	{r4, r5, r7, lr}
 800cbde:	b08a      	sub	sp, #40	@ 0x28
 800cbe0:	af04      	add	r7, sp, #16
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d107      	bne.n	800cbfc <etharp_input+0x20>
 800cbec:	4b3d      	ldr	r3, [pc, #244]	@ (800cce4 <etharp_input+0x108>)
 800cbee:	f240 228a 	movw	r2, #650	@ 0x28a
 800cbf2:	493d      	ldr	r1, [pc, #244]	@ (800cce8 <etharp_input+0x10c>)
 800cbf4:	483d      	ldr	r0, [pc, #244]	@ (800ccec <etharp_input+0x110>)
 800cbf6:	f002 f88f 	bl	800ed18 <iprintf>
 800cbfa:	e06f      	b.n	800ccdc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	881b      	ldrh	r3, [r3, #0]
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc0c:	d10c      	bne.n	800cc28 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cc12:	2b06      	cmp	r3, #6
 800cc14:	d108      	bne.n	800cc28 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cc1a:	2b04      	cmp	r3, #4
 800cc1c:	d104      	bne.n	800cc28 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	885b      	ldrh	r3, [r3, #2]
 800cc22:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cc24:	2b08      	cmp	r3, #8
 800cc26:	d003      	beq.n	800cc30 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f7f9 fe07 	bl	800683c <pbuf_free>
    return;
 800cc2e:	e055      	b.n	800ccdc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	330e      	adds	r3, #14
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	3318      	adds	r3, #24
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	3304      	adds	r3, #4
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d102      	bne.n	800cc50 <etharp_input+0x74>
    for_us = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	75fb      	strb	r3, [r7, #23]
 800cc4e:	e009      	b.n	800cc64 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	3304      	adds	r3, #4
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	bf0c      	ite	eq
 800cc5c:	2301      	moveq	r3, #1
 800cc5e:	2300      	movne	r3, #0
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	f103 0208 	add.w	r2, r3, #8
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d001      	beq.n	800cc74 <etharp_input+0x98>
 800cc70:	2301      	movs	r3, #1
 800cc72:	e000      	b.n	800cc76 <etharp_input+0x9a>
 800cc74:	2302      	movs	r3, #2
 800cc76:	f107 010c 	add.w	r1, r7, #12
 800cc7a:	6838      	ldr	r0, [r7, #0]
 800cc7c:	f7ff fed8 	bl	800ca30 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	88db      	ldrh	r3, [r3, #6]
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc8a:	d003      	beq.n	800cc94 <etharp_input+0xb8>
 800cc8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc90:	d01e      	beq.n	800ccd0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800cc92:	e020      	b.n	800ccd6 <etharp_input+0xfa>
      if (for_us) {
 800cc94:	7dfb      	ldrb	r3, [r7, #23]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d01c      	beq.n	800ccd4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ccb4:	2102      	movs	r1, #2
 800ccb6:	9103      	str	r1, [sp, #12]
 800ccb8:	f107 010c 	add.w	r1, r7, #12
 800ccbc:	9102      	str	r1, [sp, #8]
 800ccbe:	9201      	str	r2, [sp, #4]
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	462b      	mov	r3, r5
 800ccc4:	4622      	mov	r2, r4
 800ccc6:	4601      	mov	r1, r0
 800ccc8:	6838      	ldr	r0, [r7, #0]
 800ccca:	f000 faeb 	bl	800d2a4 <etharp_raw>
      break;
 800ccce:	e001      	b.n	800ccd4 <etharp_input+0xf8>
      break;
 800ccd0:	bf00      	nop
 800ccd2:	e000      	b.n	800ccd6 <etharp_input+0xfa>
      break;
 800ccd4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f7f9 fdb0 	bl	800683c <pbuf_free>
}
 800ccdc:	3718      	adds	r7, #24
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bdb0      	pop	{r4, r5, r7, pc}
 800cce2:	bf00      	nop
 800cce4:	08011e60 	.word	0x08011e60
 800cce8:	08011fb0 	.word	0x08011fb0
 800ccec:	08011ed8 	.word	0x08011ed8

0800ccf0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af02      	add	r7, sp, #8
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ccfe:	79fa      	ldrb	r2, [r7, #7]
 800cd00:	4944      	ldr	r1, [pc, #272]	@ (800ce14 <etharp_output_to_arp_index+0x124>)
 800cd02:	4613      	mov	r3, r2
 800cd04:	005b      	lsls	r3, r3, #1
 800cd06:	4413      	add	r3, r2
 800cd08:	00db      	lsls	r3, r3, #3
 800cd0a:	440b      	add	r3, r1
 800cd0c:	3314      	adds	r3, #20
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d806      	bhi.n	800cd22 <etharp_output_to_arp_index+0x32>
 800cd14:	4b40      	ldr	r3, [pc, #256]	@ (800ce18 <etharp_output_to_arp_index+0x128>)
 800cd16:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800cd1a:	4940      	ldr	r1, [pc, #256]	@ (800ce1c <etharp_output_to_arp_index+0x12c>)
 800cd1c:	4840      	ldr	r0, [pc, #256]	@ (800ce20 <etharp_output_to_arp_index+0x130>)
 800cd1e:	f001 fffb 	bl	800ed18 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cd22:	79fa      	ldrb	r2, [r7, #7]
 800cd24:	493b      	ldr	r1, [pc, #236]	@ (800ce14 <etharp_output_to_arp_index+0x124>)
 800cd26:	4613      	mov	r3, r2
 800cd28:	005b      	lsls	r3, r3, #1
 800cd2a:	4413      	add	r3, r2
 800cd2c:	00db      	lsls	r3, r3, #3
 800cd2e:	440b      	add	r3, r1
 800cd30:	3314      	adds	r3, #20
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	2b02      	cmp	r3, #2
 800cd36:	d153      	bne.n	800cde0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cd38:	79fa      	ldrb	r2, [r7, #7]
 800cd3a:	4936      	ldr	r1, [pc, #216]	@ (800ce14 <etharp_output_to_arp_index+0x124>)
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	005b      	lsls	r3, r3, #1
 800cd40:	4413      	add	r3, r2
 800cd42:	00db      	lsls	r3, r3, #3
 800cd44:	440b      	add	r3, r1
 800cd46:	3312      	adds	r3, #18
 800cd48:	881b      	ldrh	r3, [r3, #0]
 800cd4a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800cd4e:	d919      	bls.n	800cd84 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cd50:	79fa      	ldrb	r2, [r7, #7]
 800cd52:	4613      	mov	r3, r2
 800cd54:	005b      	lsls	r3, r3, #1
 800cd56:	4413      	add	r3, r2
 800cd58:	00db      	lsls	r3, r3, #3
 800cd5a:	4a2e      	ldr	r2, [pc, #184]	@ (800ce14 <etharp_output_to_arp_index+0x124>)
 800cd5c:	4413      	add	r3, r2
 800cd5e:	3304      	adds	r3, #4
 800cd60:	4619      	mov	r1, r3
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f000 fb4c 	bl	800d400 <etharp_request>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d138      	bne.n	800cde0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cd6e:	79fa      	ldrb	r2, [r7, #7]
 800cd70:	4928      	ldr	r1, [pc, #160]	@ (800ce14 <etharp_output_to_arp_index+0x124>)
 800cd72:	4613      	mov	r3, r2
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	4413      	add	r3, r2
 800cd78:	00db      	lsls	r3, r3, #3
 800cd7a:	440b      	add	r3, r1
 800cd7c:	3314      	adds	r3, #20
 800cd7e:	2203      	movs	r2, #3
 800cd80:	701a      	strb	r2, [r3, #0]
 800cd82:	e02d      	b.n	800cde0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cd84:	79fa      	ldrb	r2, [r7, #7]
 800cd86:	4923      	ldr	r1, [pc, #140]	@ (800ce14 <etharp_output_to_arp_index+0x124>)
 800cd88:	4613      	mov	r3, r2
 800cd8a:	005b      	lsls	r3, r3, #1
 800cd8c:	4413      	add	r3, r2
 800cd8e:	00db      	lsls	r3, r3, #3
 800cd90:	440b      	add	r3, r1
 800cd92:	3312      	adds	r3, #18
 800cd94:	881b      	ldrh	r3, [r3, #0]
 800cd96:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800cd9a:	d321      	bcc.n	800cde0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cd9c:	79fa      	ldrb	r2, [r7, #7]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	005b      	lsls	r3, r3, #1
 800cda2:	4413      	add	r3, r2
 800cda4:	00db      	lsls	r3, r3, #3
 800cda6:	4a1b      	ldr	r2, [pc, #108]	@ (800ce14 <etharp_output_to_arp_index+0x124>)
 800cda8:	4413      	add	r3, r2
 800cdaa:	1d19      	adds	r1, r3, #4
 800cdac:	79fa      	ldrb	r2, [r7, #7]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	005b      	lsls	r3, r3, #1
 800cdb2:	4413      	add	r3, r2
 800cdb4:	00db      	lsls	r3, r3, #3
 800cdb6:	3308      	adds	r3, #8
 800cdb8:	4a16      	ldr	r2, [pc, #88]	@ (800ce14 <etharp_output_to_arp_index+0x124>)
 800cdba:	4413      	add	r3, r2
 800cdbc:	3304      	adds	r3, #4
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f000 fafb 	bl	800d3bc <etharp_request_dst>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d109      	bne.n	800cde0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cdcc:	79fa      	ldrb	r2, [r7, #7]
 800cdce:	4911      	ldr	r1, [pc, #68]	@ (800ce14 <etharp_output_to_arp_index+0x124>)
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	4413      	add	r3, r2
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	440b      	add	r3, r1
 800cdda:	3314      	adds	r3, #20
 800cddc:	2203      	movs	r2, #3
 800cdde:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800cde6:	79fa      	ldrb	r2, [r7, #7]
 800cde8:	4613      	mov	r3, r2
 800cdea:	005b      	lsls	r3, r3, #1
 800cdec:	4413      	add	r3, r2
 800cdee:	00db      	lsls	r3, r3, #3
 800cdf0:	3308      	adds	r3, #8
 800cdf2:	4a08      	ldr	r2, [pc, #32]	@ (800ce14 <etharp_output_to_arp_index+0x124>)
 800cdf4:	4413      	add	r3, r2
 800cdf6:	3304      	adds	r3, #4
 800cdf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cdfc:	9200      	str	r2, [sp, #0]
 800cdfe:	460a      	mov	r2, r1
 800ce00:	68b9      	ldr	r1, [r7, #8]
 800ce02:	68f8      	ldr	r0, [r7, #12]
 800ce04:	f001 fe40 	bl	800ea88 <ethernet_output>
 800ce08:	4603      	mov	r3, r0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	20007cd0 	.word	0x20007cd0
 800ce18:	08011e60 	.word	0x08011e60
 800ce1c:	08011fd0 	.word	0x08011fd0
 800ce20:	08011ed8 	.word	0x08011ed8

0800ce24 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b08a      	sub	sp, #40	@ 0x28
 800ce28:	af02      	add	r7, sp, #8
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d106      	bne.n	800ce48 <etharp_output+0x24>
 800ce3a:	4b73      	ldr	r3, [pc, #460]	@ (800d008 <etharp_output+0x1e4>)
 800ce3c:	f240 321e 	movw	r2, #798	@ 0x31e
 800ce40:	4972      	ldr	r1, [pc, #456]	@ (800d00c <etharp_output+0x1e8>)
 800ce42:	4873      	ldr	r0, [pc, #460]	@ (800d010 <etharp_output+0x1ec>)
 800ce44:	f001 ff68 	bl	800ed18 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d106      	bne.n	800ce5c <etharp_output+0x38>
 800ce4e:	4b6e      	ldr	r3, [pc, #440]	@ (800d008 <etharp_output+0x1e4>)
 800ce50:	f240 321f 	movw	r2, #799	@ 0x31f
 800ce54:	496f      	ldr	r1, [pc, #444]	@ (800d014 <etharp_output+0x1f0>)
 800ce56:	486e      	ldr	r0, [pc, #440]	@ (800d010 <etharp_output+0x1ec>)
 800ce58:	f001 ff5e 	bl	800ed18 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <etharp_output+0x4c>
 800ce62:	4b69      	ldr	r3, [pc, #420]	@ (800d008 <etharp_output+0x1e4>)
 800ce64:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800ce68:	496b      	ldr	r1, [pc, #428]	@ (800d018 <etharp_output+0x1f4>)
 800ce6a:	4869      	ldr	r0, [pc, #420]	@ (800d010 <etharp_output+0x1ec>)
 800ce6c:	f001 ff54 	bl	800ed18 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	68f9      	ldr	r1, [r7, #12]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 fef8 	bl	800dc6c <ip4_addr_isbroadcast_u32>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d002      	beq.n	800ce88 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ce82:	4b66      	ldr	r3, [pc, #408]	@ (800d01c <etharp_output+0x1f8>)
 800ce84:	61fb      	str	r3, [r7, #28]
 800ce86:	e0af      	b.n	800cfe8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ce90:	2be0      	cmp	r3, #224	@ 0xe0
 800ce92:	d118      	bne.n	800cec6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ce94:	2301      	movs	r3, #1
 800ce96:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ce9c:	235e      	movs	r3, #94	@ 0x5e
 800ce9e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	3301      	adds	r3, #1
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	3302      	adds	r3, #2
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	3303      	adds	r3, #3
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cebe:	f107 0310 	add.w	r3, r7, #16
 800cec2:	61fb      	str	r3, [r7, #28]
 800cec4:	e090      	b.n	800cfe8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	3304      	adds	r3, #4
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	405a      	eors	r2, r3
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3308      	adds	r3, #8
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4013      	ands	r3, r2
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d012      	beq.n	800cf04 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cee4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d00b      	beq.n	800cf04 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	330c      	adds	r3, #12
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d003      	beq.n	800cefe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	330c      	adds	r3, #12
 800cefa:	61bb      	str	r3, [r7, #24]
 800cefc:	e002      	b.n	800cf04 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cefe:	f06f 0303 	mvn.w	r3, #3
 800cf02:	e07d      	b.n	800d000 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cf04:	4b46      	ldr	r3, [pc, #280]	@ (800d020 <etharp_output+0x1fc>)
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	4619      	mov	r1, r3
 800cf0a:	4a46      	ldr	r2, [pc, #280]	@ (800d024 <etharp_output+0x200>)
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	005b      	lsls	r3, r3, #1
 800cf10:	440b      	add	r3, r1
 800cf12:	00db      	lsls	r3, r3, #3
 800cf14:	4413      	add	r3, r2
 800cf16:	3314      	adds	r3, #20
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d925      	bls.n	800cf6a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cf1e:	4b40      	ldr	r3, [pc, #256]	@ (800d020 <etharp_output+0x1fc>)
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	4619      	mov	r1, r3
 800cf24:	4a3f      	ldr	r2, [pc, #252]	@ (800d024 <etharp_output+0x200>)
 800cf26:	460b      	mov	r3, r1
 800cf28:	005b      	lsls	r3, r3, #1
 800cf2a:	440b      	add	r3, r1
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	4413      	add	r3, r2
 800cf30:	3308      	adds	r3, #8
 800cf32:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d117      	bne.n	800cf6a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	4b38      	ldr	r3, [pc, #224]	@ (800d020 <etharp_output+0x1fc>)
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	4618      	mov	r0, r3
 800cf44:	4937      	ldr	r1, [pc, #220]	@ (800d024 <etharp_output+0x200>)
 800cf46:	4603      	mov	r3, r0
 800cf48:	005b      	lsls	r3, r3, #1
 800cf4a:	4403      	add	r3, r0
 800cf4c:	00db      	lsls	r3, r3, #3
 800cf4e:	440b      	add	r3, r1
 800cf50:	3304      	adds	r3, #4
 800cf52:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d108      	bne.n	800cf6a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cf58:	4b31      	ldr	r3, [pc, #196]	@ (800d020 <etharp_output+0x1fc>)
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	68b9      	ldr	r1, [r7, #8]
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f7ff fec5 	bl	800ccf0 <etharp_output_to_arp_index>
 800cf66:	4603      	mov	r3, r0
 800cf68:	e04a      	b.n	800d000 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	75fb      	strb	r3, [r7, #23]
 800cf6e:	e031      	b.n	800cfd4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cf70:	7dfa      	ldrb	r2, [r7, #23]
 800cf72:	492c      	ldr	r1, [pc, #176]	@ (800d024 <etharp_output+0x200>)
 800cf74:	4613      	mov	r3, r2
 800cf76:	005b      	lsls	r3, r3, #1
 800cf78:	4413      	add	r3, r2
 800cf7a:	00db      	lsls	r3, r3, #3
 800cf7c:	440b      	add	r3, r1
 800cf7e:	3314      	adds	r3, #20
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d923      	bls.n	800cfce <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cf86:	7dfa      	ldrb	r2, [r7, #23]
 800cf88:	4926      	ldr	r1, [pc, #152]	@ (800d024 <etharp_output+0x200>)
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	4413      	add	r3, r2
 800cf90:	00db      	lsls	r3, r3, #3
 800cf92:	440b      	add	r3, r1
 800cf94:	3308      	adds	r3, #8
 800cf96:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d117      	bne.n	800cfce <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	6819      	ldr	r1, [r3, #0]
 800cfa2:	7dfa      	ldrb	r2, [r7, #23]
 800cfa4:	481f      	ldr	r0, [pc, #124]	@ (800d024 <etharp_output+0x200>)
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	4413      	add	r3, r2
 800cfac:	00db      	lsls	r3, r3, #3
 800cfae:	4403      	add	r3, r0
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cfb4:	4299      	cmp	r1, r3
 800cfb6:	d10a      	bne.n	800cfce <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cfb8:	4a19      	ldr	r2, [pc, #100]	@ (800d020 <etharp_output+0x1fc>)
 800cfba:	7dfb      	ldrb	r3, [r7, #23]
 800cfbc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cfbe:	7dfb      	ldrb	r3, [r7, #23]
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	68b9      	ldr	r1, [r7, #8]
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f7ff fe93 	bl	800ccf0 <etharp_output_to_arp_index>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	e018      	b.n	800d000 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cfce:	7dfb      	ldrb	r3, [r7, #23]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	75fb      	strb	r3, [r7, #23]
 800cfd4:	7dfb      	ldrb	r3, [r7, #23]
 800cfd6:	2b09      	cmp	r3, #9
 800cfd8:	d9ca      	bls.n	800cf70 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cfda:	68ba      	ldr	r2, [r7, #8]
 800cfdc:	69b9      	ldr	r1, [r7, #24]
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f000 f822 	bl	800d028 <etharp_query>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	e00b      	b.n	800d000 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800cfee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	68b9      	ldr	r1, [r7, #8]
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f001 fd45 	bl	800ea88 <ethernet_output>
 800cffe:	4603      	mov	r3, r0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3720      	adds	r7, #32
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	08011e60 	.word	0x08011e60
 800d00c:	08011fb0 	.word	0x08011fb0
 800d010:	08011ed8 	.word	0x08011ed8
 800d014:	08012000 	.word	0x08012000
 800d018:	08011fa0 	.word	0x08011fa0
 800d01c:	0801261c 	.word	0x0801261c
 800d020:	20007dc0 	.word	0x20007dc0
 800d024:	20007cd0 	.word	0x20007cd0

0800d028 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b08c      	sub	sp, #48	@ 0x30
 800d02c:	af02      	add	r7, sp, #8
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	3326      	adds	r3, #38	@ 0x26
 800d038:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d03a:	23ff      	movs	r3, #255	@ 0xff
 800d03c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d040:	2300      	movs	r3, #0
 800d042:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	68f9      	ldr	r1, [r7, #12]
 800d04a:	4618      	mov	r0, r3
 800d04c:	f000 fe0e 	bl	800dc6c <ip4_addr_isbroadcast_u32>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10c      	bne.n	800d070 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d05e:	2be0      	cmp	r3, #224	@ 0xe0
 800d060:	d006      	beq.n	800d070 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d003      	beq.n	800d070 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d102      	bne.n	800d076 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d070:	f06f 030f 	mvn.w	r3, #15
 800d074:	e101      	b.n	800d27a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d076:	68fa      	ldr	r2, [r7, #12]
 800d078:	2101      	movs	r1, #1
 800d07a:	68b8      	ldr	r0, [r7, #8]
 800d07c:	f7ff fb60 	bl	800c740 <etharp_find_entry>
 800d080:	4603      	mov	r3, r0
 800d082:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d084:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	da02      	bge.n	800d092 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d08c:	8a7b      	ldrh	r3, [r7, #18]
 800d08e:	b25b      	sxtb	r3, r3
 800d090:	e0f3      	b.n	800d27a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d092:	8a7b      	ldrh	r3, [r7, #18]
 800d094:	2b7e      	cmp	r3, #126	@ 0x7e
 800d096:	d906      	bls.n	800d0a6 <etharp_query+0x7e>
 800d098:	4b7a      	ldr	r3, [pc, #488]	@ (800d284 <etharp_query+0x25c>)
 800d09a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d09e:	497a      	ldr	r1, [pc, #488]	@ (800d288 <etharp_query+0x260>)
 800d0a0:	487a      	ldr	r0, [pc, #488]	@ (800d28c <etharp_query+0x264>)
 800d0a2:	f001 fe39 	bl	800ed18 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d0a6:	8a7b      	ldrh	r3, [r7, #18]
 800d0a8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d0aa:	7c7a      	ldrb	r2, [r7, #17]
 800d0ac:	4978      	ldr	r1, [pc, #480]	@ (800d290 <etharp_query+0x268>)
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	005b      	lsls	r3, r3, #1
 800d0b2:	4413      	add	r3, r2
 800d0b4:	00db      	lsls	r3, r3, #3
 800d0b6:	440b      	add	r3, r1
 800d0b8:	3314      	adds	r3, #20
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d115      	bne.n	800d0ec <etharp_query+0xc4>
    is_new_entry = 1;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d0c4:	7c7a      	ldrb	r2, [r7, #17]
 800d0c6:	4972      	ldr	r1, [pc, #456]	@ (800d290 <etharp_query+0x268>)
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	005b      	lsls	r3, r3, #1
 800d0cc:	4413      	add	r3, r2
 800d0ce:	00db      	lsls	r3, r3, #3
 800d0d0:	440b      	add	r3, r1
 800d0d2:	3314      	adds	r3, #20
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d0d8:	7c7a      	ldrb	r2, [r7, #17]
 800d0da:	496d      	ldr	r1, [pc, #436]	@ (800d290 <etharp_query+0x268>)
 800d0dc:	4613      	mov	r3, r2
 800d0de:	005b      	lsls	r3, r3, #1
 800d0e0:	4413      	add	r3, r2
 800d0e2:	00db      	lsls	r3, r3, #3
 800d0e4:	440b      	add	r3, r1
 800d0e6:	3308      	adds	r3, #8
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d0ec:	7c7a      	ldrb	r2, [r7, #17]
 800d0ee:	4968      	ldr	r1, [pc, #416]	@ (800d290 <etharp_query+0x268>)
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	005b      	lsls	r3, r3, #1
 800d0f4:	4413      	add	r3, r2
 800d0f6:	00db      	lsls	r3, r3, #3
 800d0f8:	440b      	add	r3, r1
 800d0fa:	3314      	adds	r3, #20
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d011      	beq.n	800d126 <etharp_query+0xfe>
 800d102:	7c7a      	ldrb	r2, [r7, #17]
 800d104:	4962      	ldr	r1, [pc, #392]	@ (800d290 <etharp_query+0x268>)
 800d106:	4613      	mov	r3, r2
 800d108:	005b      	lsls	r3, r3, #1
 800d10a:	4413      	add	r3, r2
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	440b      	add	r3, r1
 800d110:	3314      	adds	r3, #20
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	2b01      	cmp	r3, #1
 800d116:	d806      	bhi.n	800d126 <etharp_query+0xfe>
 800d118:	4b5a      	ldr	r3, [pc, #360]	@ (800d284 <etharp_query+0x25c>)
 800d11a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d11e:	495d      	ldr	r1, [pc, #372]	@ (800d294 <etharp_query+0x26c>)
 800d120:	485a      	ldr	r0, [pc, #360]	@ (800d28c <etharp_query+0x264>)
 800d122:	f001 fdf9 	bl	800ed18 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d126:	6a3b      	ldr	r3, [r7, #32]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d102      	bne.n	800d132 <etharp_query+0x10a>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d10c      	bne.n	800d14c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d132:	68b9      	ldr	r1, [r7, #8]
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f000 f963 	bl	800d400 <etharp_request>
 800d13a:	4603      	mov	r3, r0
 800d13c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d102      	bne.n	800d14c <etharp_query+0x124>
      return result;
 800d146:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d14a:	e096      	b.n	800d27a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d106      	bne.n	800d160 <etharp_query+0x138>
 800d152:	4b4c      	ldr	r3, [pc, #304]	@ (800d284 <etharp_query+0x25c>)
 800d154:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d158:	494f      	ldr	r1, [pc, #316]	@ (800d298 <etharp_query+0x270>)
 800d15a:	484c      	ldr	r0, [pc, #304]	@ (800d28c <etharp_query+0x264>)
 800d15c:	f001 fddc 	bl	800ed18 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d160:	7c7a      	ldrb	r2, [r7, #17]
 800d162:	494b      	ldr	r1, [pc, #300]	@ (800d290 <etharp_query+0x268>)
 800d164:	4613      	mov	r3, r2
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	4413      	add	r3, r2
 800d16a:	00db      	lsls	r3, r3, #3
 800d16c:	440b      	add	r3, r1
 800d16e:	3314      	adds	r3, #20
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d917      	bls.n	800d1a6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d176:	4a49      	ldr	r2, [pc, #292]	@ (800d29c <etharp_query+0x274>)
 800d178:	7c7b      	ldrb	r3, [r7, #17]
 800d17a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d17c:	7c7a      	ldrb	r2, [r7, #17]
 800d17e:	4613      	mov	r3, r2
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	4413      	add	r3, r2
 800d184:	00db      	lsls	r3, r3, #3
 800d186:	3308      	adds	r3, #8
 800d188:	4a41      	ldr	r2, [pc, #260]	@ (800d290 <etharp_query+0x268>)
 800d18a:	4413      	add	r3, r2
 800d18c:	3304      	adds	r3, #4
 800d18e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d192:	9200      	str	r2, [sp, #0]
 800d194:	697a      	ldr	r2, [r7, #20]
 800d196:	6879      	ldr	r1, [r7, #4]
 800d198:	68f8      	ldr	r0, [r7, #12]
 800d19a:	f001 fc75 	bl	800ea88 <ethernet_output>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d1a4:	e067      	b.n	800d276 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d1a6:	7c7a      	ldrb	r2, [r7, #17]
 800d1a8:	4939      	ldr	r1, [pc, #228]	@ (800d290 <etharp_query+0x268>)
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	005b      	lsls	r3, r3, #1
 800d1ae:	4413      	add	r3, r2
 800d1b0:	00db      	lsls	r3, r3, #3
 800d1b2:	440b      	add	r3, r1
 800d1b4:	3314      	adds	r3, #20
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d15c      	bne.n	800d276 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d1c4:	e01c      	b.n	800d200 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	895a      	ldrh	r2, [r3, #10]
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	891b      	ldrh	r3, [r3, #8]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d10a      	bne.n	800d1e8 <etharp_query+0x1c0>
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d006      	beq.n	800d1e8 <etharp_query+0x1c0>
 800d1da:	4b2a      	ldr	r3, [pc, #168]	@ (800d284 <etharp_query+0x25c>)
 800d1dc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d1e0:	492f      	ldr	r1, [pc, #188]	@ (800d2a0 <etharp_query+0x278>)
 800d1e2:	482a      	ldr	r0, [pc, #168]	@ (800d28c <etharp_query+0x264>)
 800d1e4:	f001 fd98 	bl	800ed18 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	7b1b      	ldrb	r3, [r3, #12]
 800d1ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d002      	beq.n	800d1fa <etharp_query+0x1d2>
        copy_needed = 1;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	61bb      	str	r3, [r7, #24]
        break;
 800d1f8:	e005      	b.n	800d206 <etharp_query+0x1de>
      }
      p = p->next;
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1df      	bne.n	800d1c6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d007      	beq.n	800d21c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d212:	200e      	movs	r0, #14
 800d214:	f7f9 fd6e 	bl	8006cf4 <pbuf_clone>
 800d218:	61f8      	str	r0, [r7, #28]
 800d21a:	e004      	b.n	800d226 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d220:	69f8      	ldr	r0, [r7, #28]
 800d222:	f7f9 fbab 	bl	800697c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d021      	beq.n	800d270 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d22c:	7c7a      	ldrb	r2, [r7, #17]
 800d22e:	4918      	ldr	r1, [pc, #96]	@ (800d290 <etharp_query+0x268>)
 800d230:	4613      	mov	r3, r2
 800d232:	005b      	lsls	r3, r3, #1
 800d234:	4413      	add	r3, r2
 800d236:	00db      	lsls	r3, r3, #3
 800d238:	440b      	add	r3, r1
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00a      	beq.n	800d256 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d240:	7c7a      	ldrb	r2, [r7, #17]
 800d242:	4913      	ldr	r1, [pc, #76]	@ (800d290 <etharp_query+0x268>)
 800d244:	4613      	mov	r3, r2
 800d246:	005b      	lsls	r3, r3, #1
 800d248:	4413      	add	r3, r2
 800d24a:	00db      	lsls	r3, r3, #3
 800d24c:	440b      	add	r3, r1
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4618      	mov	r0, r3
 800d252:	f7f9 faf3 	bl	800683c <pbuf_free>
      }
      arp_table[i].q = p;
 800d256:	7c7a      	ldrb	r2, [r7, #17]
 800d258:	490d      	ldr	r1, [pc, #52]	@ (800d290 <etharp_query+0x268>)
 800d25a:	4613      	mov	r3, r2
 800d25c:	005b      	lsls	r3, r3, #1
 800d25e:	4413      	add	r3, r2
 800d260:	00db      	lsls	r3, r3, #3
 800d262:	440b      	add	r3, r1
 800d264:	69fa      	ldr	r2, [r7, #28]
 800d266:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d268:	2300      	movs	r3, #0
 800d26a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d26e:	e002      	b.n	800d276 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d270:	23ff      	movs	r3, #255	@ 0xff
 800d272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d276:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3728      	adds	r7, #40	@ 0x28
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	08011e60 	.word	0x08011e60
 800d288:	0801200c 	.word	0x0801200c
 800d28c:	08011ed8 	.word	0x08011ed8
 800d290:	20007cd0 	.word	0x20007cd0
 800d294:	0801201c 	.word	0x0801201c
 800d298:	08012000 	.word	0x08012000
 800d29c:	20007dc0 	.word	0x20007dc0
 800d2a0:	08012044 	.word	0x08012044

0800d2a4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b08a      	sub	sp, #40	@ 0x28
 800d2a8:	af02      	add	r7, sp, #8
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	607a      	str	r2, [r7, #4]
 800d2b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d106      	bne.n	800d2ca <etharp_raw+0x26>
 800d2bc:	4b3a      	ldr	r3, [pc, #232]	@ (800d3a8 <etharp_raw+0x104>)
 800d2be:	f240 4257 	movw	r2, #1111	@ 0x457
 800d2c2:	493a      	ldr	r1, [pc, #232]	@ (800d3ac <etharp_raw+0x108>)
 800d2c4:	483a      	ldr	r0, [pc, #232]	@ (800d3b0 <etharp_raw+0x10c>)
 800d2c6:	f001 fd27 	bl	800ed18 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d2ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d2ce:	211c      	movs	r1, #28
 800d2d0:	200e      	movs	r0, #14
 800d2d2:	f7f8 ffcf 	bl	8006274 <pbuf_alloc>
 800d2d6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d102      	bne.n	800d2e4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d2de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d2e2:	e05d      	b.n	800d3a0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	895b      	ldrh	r3, [r3, #10]
 800d2e8:	2b1b      	cmp	r3, #27
 800d2ea:	d806      	bhi.n	800d2fa <etharp_raw+0x56>
 800d2ec:	4b2e      	ldr	r3, [pc, #184]	@ (800d3a8 <etharp_raw+0x104>)
 800d2ee:	f240 4262 	movw	r2, #1122	@ 0x462
 800d2f2:	4930      	ldr	r1, [pc, #192]	@ (800d3b4 <etharp_raw+0x110>)
 800d2f4:	482e      	ldr	r0, [pc, #184]	@ (800d3b0 <etharp_raw+0x10c>)
 800d2f6:	f001 fd0f 	bl	800ed18 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d300:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d302:	4618      	mov	r0, r3
 800d304:	f7f7 ff60 	bl	80051c8 <lwip_htons>
 800d308:	4603      	mov	r3, r0
 800d30a:	461a      	mov	r2, r3
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d316:	2b06      	cmp	r3, #6
 800d318:	d006      	beq.n	800d328 <etharp_raw+0x84>
 800d31a:	4b23      	ldr	r3, [pc, #140]	@ (800d3a8 <etharp_raw+0x104>)
 800d31c:	f240 4269 	movw	r2, #1129	@ 0x469
 800d320:	4925      	ldr	r1, [pc, #148]	@ (800d3b8 <etharp_raw+0x114>)
 800d322:	4823      	ldr	r0, [pc, #140]	@ (800d3b0 <etharp_raw+0x10c>)
 800d324:	f001 fcf8 	bl	800ed18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	3308      	adds	r3, #8
 800d32c:	2206      	movs	r2, #6
 800d32e:	6839      	ldr	r1, [r7, #0]
 800d330:	4618      	mov	r0, r3
 800d332:	f001 fdcc 	bl	800eece <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	3312      	adds	r3, #18
 800d33a:	2206      	movs	r2, #6
 800d33c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d33e:	4618      	mov	r0, r3
 800d340:	f001 fdc5 	bl	800eece <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	330e      	adds	r3, #14
 800d348:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d34a:	6812      	ldr	r2, [r2, #0]
 800d34c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	3318      	adds	r3, #24
 800d352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d354:	6812      	ldr	r2, [r2, #0]
 800d356:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	2200      	movs	r2, #0
 800d35c:	701a      	strb	r2, [r3, #0]
 800d35e:	2200      	movs	r2, #0
 800d360:	f042 0201 	orr.w	r2, r2, #1
 800d364:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	2200      	movs	r2, #0
 800d36a:	f042 0208 	orr.w	r2, r2, #8
 800d36e:	709a      	strb	r2, [r3, #2]
 800d370:	2200      	movs	r2, #0
 800d372:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	2206      	movs	r2, #6
 800d378:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	2204      	movs	r2, #4
 800d37e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d380:	f640 0306 	movw	r3, #2054	@ 0x806
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	68ba      	ldr	r2, [r7, #8]
 800d38a:	69b9      	ldr	r1, [r7, #24]
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	f001 fb7b 	bl	800ea88 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d392:	69b8      	ldr	r0, [r7, #24]
 800d394:	f7f9 fa52 	bl	800683c <pbuf_free>
  p = NULL;
 800d398:	2300      	movs	r3, #0
 800d39a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d39c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3720      	adds	r7, #32
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	08011e60 	.word	0x08011e60
 800d3ac:	08011fb0 	.word	0x08011fb0
 800d3b0:	08011ed8 	.word	0x08011ed8
 800d3b4:	08012060 	.word	0x08012060
 800d3b8:	08012094 	.word	0x08012094

0800d3bc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b088      	sub	sp, #32
 800d3c0:	af04      	add	r7, sp, #16
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d3d8:	2201      	movs	r2, #1
 800d3da:	9203      	str	r2, [sp, #12]
 800d3dc:	68ba      	ldr	r2, [r7, #8]
 800d3de:	9202      	str	r2, [sp, #8]
 800d3e0:	4a06      	ldr	r2, [pc, #24]	@ (800d3fc <etharp_request_dst+0x40>)
 800d3e2:	9201      	str	r2, [sp, #4]
 800d3e4:	9300      	str	r3, [sp, #0]
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	68f8      	ldr	r0, [r7, #12]
 800d3ec:	f7ff ff5a 	bl	800d2a4 <etharp_raw>
 800d3f0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	08012624 	.word	0x08012624

0800d400 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d40a:	4a05      	ldr	r2, [pc, #20]	@ (800d420 <etharp_request+0x20>)
 800d40c:	6839      	ldr	r1, [r7, #0]
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f7ff ffd4 	bl	800d3bc <etharp_request_dst>
 800d414:	4603      	mov	r3, r0
}
 800d416:	4618      	mov	r0, r3
 800d418:	3708      	adds	r7, #8
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	0801261c 	.word	0x0801261c

0800d424 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b08e      	sub	sp, #56	@ 0x38
 800d428:	af04      	add	r7, sp, #16
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d42e:	4b79      	ldr	r3, [pc, #484]	@ (800d614 <icmp_input+0x1f0>)
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	f003 030f 	and.w	r3, r3, #15
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	b2db      	uxtb	r3, r3
 800d442:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800d444:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d446:	2b13      	cmp	r3, #19
 800d448:	f240 80cd 	bls.w	800d5e6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	895b      	ldrh	r3, [r3, #10]
 800d450:	2b03      	cmp	r3, #3
 800d452:	f240 80ca 	bls.w	800d5ea <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d460:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d464:	2b00      	cmp	r3, #0
 800d466:	f000 80b7 	beq.w	800d5d8 <icmp_input+0x1b4>
 800d46a:	2b08      	cmp	r3, #8
 800d46c:	f040 80b7 	bne.w	800d5de <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d470:	4b69      	ldr	r3, [pc, #420]	@ (800d618 <icmp_input+0x1f4>)
 800d472:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d474:	4b67      	ldr	r3, [pc, #412]	@ (800d614 <icmp_input+0x1f0>)
 800d476:	695b      	ldr	r3, [r3, #20]
 800d478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d47c:	2be0      	cmp	r3, #224	@ 0xe0
 800d47e:	f000 80bb 	beq.w	800d5f8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d482:	4b64      	ldr	r3, [pc, #400]	@ (800d614 <icmp_input+0x1f0>)
 800d484:	695b      	ldr	r3, [r3, #20]
 800d486:	4a63      	ldr	r2, [pc, #396]	@ (800d614 <icmp_input+0x1f0>)
 800d488:	6812      	ldr	r2, [r2, #0]
 800d48a:	4611      	mov	r1, r2
 800d48c:	4618      	mov	r0, r3
 800d48e:	f000 fbed 	bl	800dc6c <ip4_addr_isbroadcast_u32>
 800d492:	4603      	mov	r3, r0
 800d494:	2b00      	cmp	r3, #0
 800d496:	f040 80b1 	bne.w	800d5fc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	891b      	ldrh	r3, [r3, #8]
 800d49e:	2b07      	cmp	r3, #7
 800d4a0:	f240 80a5 	bls.w	800d5ee <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d4a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d4a6:	330e      	adds	r3, #14
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7f9 f930 	bl	8006710 <pbuf_add_header>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d04b      	beq.n	800d54e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	891a      	ldrh	r2, [r3, #8]
 800d4ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d4bc:	4413      	add	r3, r2
 800d4be:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	891b      	ldrh	r3, [r3, #8]
 800d4c4:	8b7a      	ldrh	r2, [r7, #26]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	f0c0 809a 	bcc.w	800d600 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d4cc:	8b7b      	ldrh	r3, [r7, #26]
 800d4ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	200e      	movs	r0, #14
 800d4d6:	f7f8 fecd 	bl	8006274 <pbuf_alloc>
 800d4da:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f000 8090 	beq.w	800d604 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	895b      	ldrh	r3, [r3, #10]
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d4ec:	3308      	adds	r3, #8
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d203      	bcs.n	800d4fa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d4f2:	6978      	ldr	r0, [r7, #20]
 800d4f4:	f7f9 f9a2 	bl	800683c <pbuf_free>
          goto icmperr;
 800d4f8:	e085      	b.n	800d606 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d500:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d502:	4618      	mov	r0, r3
 800d504:	f001 fce3 	bl	800eece <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d508:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d50a:	4619      	mov	r1, r3
 800d50c:	6978      	ldr	r0, [r7, #20]
 800d50e:	f7f9 f90f 	bl	8006730 <pbuf_remove_header>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d009      	beq.n	800d52c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d518:	4b40      	ldr	r3, [pc, #256]	@ (800d61c <icmp_input+0x1f8>)
 800d51a:	22b6      	movs	r2, #182	@ 0xb6
 800d51c:	4940      	ldr	r1, [pc, #256]	@ (800d620 <icmp_input+0x1fc>)
 800d51e:	4841      	ldr	r0, [pc, #260]	@ (800d624 <icmp_input+0x200>)
 800d520:	f001 fbfa 	bl	800ed18 <iprintf>
          pbuf_free(r);
 800d524:	6978      	ldr	r0, [r7, #20]
 800d526:	f7f9 f989 	bl	800683c <pbuf_free>
          goto icmperr;
 800d52a:	e06c      	b.n	800d606 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	6978      	ldr	r0, [r7, #20]
 800d530:	f7f9 fa9c 	bl	8006a6c <pbuf_copy>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d003      	beq.n	800d542 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d53a:	6978      	ldr	r0, [r7, #20]
 800d53c:	f7f9 f97e 	bl	800683c <pbuf_free>
          goto icmperr;
 800d540:	e061      	b.n	800d606 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7f9 f97a 	bl	800683c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	607b      	str	r3, [r7, #4]
 800d54c:	e00f      	b.n	800d56e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d54e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d550:	330e      	adds	r3, #14
 800d552:	4619      	mov	r1, r3
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f7f9 f8eb 	bl	8006730 <pbuf_remove_header>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d006      	beq.n	800d56e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d560:	4b2e      	ldr	r3, [pc, #184]	@ (800d61c <icmp_input+0x1f8>)
 800d562:	22c7      	movs	r2, #199	@ 0xc7
 800d564:	4930      	ldr	r1, [pc, #192]	@ (800d628 <icmp_input+0x204>)
 800d566:	482f      	ldr	r0, [pc, #188]	@ (800d624 <icmp_input+0x200>)
 800d568:	f001 fbd6 	bl	800ed18 <iprintf>
          goto icmperr;
 800d56c:	e04b      	b.n	800d606 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d574:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d576:	4619      	mov	r1, r3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f7f9 f8c9 	bl	8006710 <pbuf_add_header>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d12b      	bne.n	800d5dc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d592:	4b20      	ldr	r3, [pc, #128]	@ (800d614 <icmp_input+0x1f0>)
 800d594:	691a      	ldr	r2, [r3, #16]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	2200      	movs	r2, #0
 800d59e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	709a      	strb	r2, [r3, #2]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	22ff      	movs	r2, #255	@ 0xff
 800d5ae:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	729a      	strb	r2, [r3, #10]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	9302      	str	r3, [sp, #8]
 800d5be:	2301      	movs	r3, #1
 800d5c0:	9301      	str	r3, [sp, #4]
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	9300      	str	r3, [sp, #0]
 800d5c6:	23ff      	movs	r3, #255	@ 0xff
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	69f9      	ldr	r1, [r7, #28]
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 fa75 	bl	800dabc <ip4_output_if>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d5d6:	e001      	b.n	800d5dc <icmp_input+0x1b8>
      break;
 800d5d8:	bf00      	nop
 800d5da:	e000      	b.n	800d5de <icmp_input+0x1ba>
      break;
 800d5dc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f7f9 f92c 	bl	800683c <pbuf_free>
  return;
 800d5e4:	e013      	b.n	800d60e <icmp_input+0x1ea>
    goto lenerr;
 800d5e6:	bf00      	nop
 800d5e8:	e002      	b.n	800d5f0 <icmp_input+0x1cc>
    goto lenerr;
 800d5ea:	bf00      	nop
 800d5ec:	e000      	b.n	800d5f0 <icmp_input+0x1cc>
        goto lenerr;
 800d5ee:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f7f9 f923 	bl	800683c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d5f6:	e00a      	b.n	800d60e <icmp_input+0x1ea>
        goto icmperr;
 800d5f8:	bf00      	nop
 800d5fa:	e004      	b.n	800d606 <icmp_input+0x1e2>
        goto icmperr;
 800d5fc:	bf00      	nop
 800d5fe:	e002      	b.n	800d606 <icmp_input+0x1e2>
          goto icmperr;
 800d600:	bf00      	nop
 800d602:	e000      	b.n	800d606 <icmp_input+0x1e2>
          goto icmperr;
 800d604:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f7f9 f918 	bl	800683c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d60c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d60e:	3728      	adds	r7, #40	@ 0x28
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	20004d54 	.word	0x20004d54
 800d618:	20004d68 	.word	0x20004d68
 800d61c:	080120d8 	.word	0x080120d8
 800d620:	08012110 	.word	0x08012110
 800d624:	08012148 	.word	0x08012148
 800d628:	08012170 	.word	0x08012170

0800d62c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	460b      	mov	r3, r1
 800d636:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d638:	78fb      	ldrb	r3, [r7, #3]
 800d63a:	461a      	mov	r2, r3
 800d63c:	2103      	movs	r1, #3
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 f814 	bl	800d66c <icmp_send_response>
}
 800d644:	bf00      	nop
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	460b      	mov	r3, r1
 800d656:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d658:	78fb      	ldrb	r3, [r7, #3]
 800d65a:	461a      	mov	r2, r3
 800d65c:	210b      	movs	r1, #11
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 f804 	bl	800d66c <icmp_send_response>
}
 800d664:	bf00      	nop
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b08c      	sub	sp, #48	@ 0x30
 800d670:	af04      	add	r7, sp, #16
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	460b      	mov	r3, r1
 800d676:	70fb      	strb	r3, [r7, #3]
 800d678:	4613      	mov	r3, r2
 800d67a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d67c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d680:	2124      	movs	r1, #36	@ 0x24
 800d682:	2022      	movs	r0, #34	@ 0x22
 800d684:	f7f8 fdf6 	bl	8006274 <pbuf_alloc>
 800d688:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d04c      	beq.n	800d72a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	895b      	ldrh	r3, [r3, #10]
 800d694:	2b23      	cmp	r3, #35	@ 0x23
 800d696:	d806      	bhi.n	800d6a6 <icmp_send_response+0x3a>
 800d698:	4b26      	ldr	r3, [pc, #152]	@ (800d734 <icmp_send_response+0xc8>)
 800d69a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800d69e:	4926      	ldr	r1, [pc, #152]	@ (800d738 <icmp_send_response+0xcc>)
 800d6a0:	4826      	ldr	r0, [pc, #152]	@ (800d73c <icmp_send_response+0xd0>)
 800d6a2:	f001 fb39 	bl	800ed18 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d6ac:	69fb      	ldr	r3, [r7, #28]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	78fa      	ldrb	r2, [r7, #3]
 800d6b6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	78ba      	ldrb	r2, [r7, #2]
 800d6bc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	711a      	strb	r2, [r3, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	719a      	strb	r2, [r3, #6]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	f103 0008 	add.w	r0, r3, #8
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	221c      	movs	r2, #28
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	f001 fbf4 	bl	800eece <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d6ec:	f107 030c 	add.w	r3, r7, #12
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f000 f825 	bl	800d740 <ip4_route>
 800d6f6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d011      	beq.n	800d722 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	2200      	movs	r2, #0
 800d702:	709a      	strb	r2, [r3, #2]
 800d704:	2200      	movs	r2, #0
 800d706:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d708:	f107 020c 	add.w	r2, r7, #12
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	9302      	str	r3, [sp, #8]
 800d710:	2301      	movs	r3, #1
 800d712:	9301      	str	r3, [sp, #4]
 800d714:	2300      	movs	r3, #0
 800d716:	9300      	str	r3, [sp, #0]
 800d718:	23ff      	movs	r3, #255	@ 0xff
 800d71a:	2100      	movs	r1, #0
 800d71c:	69f8      	ldr	r0, [r7, #28]
 800d71e:	f000 f9cd 	bl	800dabc <ip4_output_if>
  }
  pbuf_free(q);
 800d722:	69f8      	ldr	r0, [r7, #28]
 800d724:	f7f9 f88a 	bl	800683c <pbuf_free>
 800d728:	e000      	b.n	800d72c <icmp_send_response+0xc0>
    return;
 800d72a:	bf00      	nop
}
 800d72c:	3720      	adds	r7, #32
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	080120d8 	.word	0x080120d8
 800d738:	080121a4 	.word	0x080121a4
 800d73c:	08012148 	.word	0x08012148

0800d740 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d748:	4b33      	ldr	r3, [pc, #204]	@ (800d818 <ip4_route+0xd8>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	60fb      	str	r3, [r7, #12]
 800d74e:	e036      	b.n	800d7be <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d756:	f003 0301 	and.w	r3, r3, #1
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d02b      	beq.n	800d7b8 <ip4_route+0x78>
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d766:	089b      	lsrs	r3, r3, #2
 800d768:	f003 0301 	and.w	r3, r3, #1
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d022      	beq.n	800d7b8 <ip4_route+0x78>
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	3304      	adds	r3, #4
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d01d      	beq.n	800d7b8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	3304      	adds	r3, #4
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	405a      	eors	r2, r3
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	3308      	adds	r3, #8
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4013      	ands	r3, r2
 800d790:	2b00      	cmp	r3, #0
 800d792:	d101      	bne.n	800d798 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	e038      	b.n	800d80a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d79e:	f003 0302 	and.w	r3, r3, #2
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d108      	bne.n	800d7b8 <ip4_route+0x78>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	330c      	adds	r3, #12
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d101      	bne.n	800d7b8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	e028      	b.n	800d80a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	60fb      	str	r3, [r7, #12]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d1c5      	bne.n	800d750 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d7c4:	4b15      	ldr	r3, [pc, #84]	@ (800d81c <ip4_route+0xdc>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d01a      	beq.n	800d802 <ip4_route+0xc2>
 800d7cc:	4b13      	ldr	r3, [pc, #76]	@ (800d81c <ip4_route+0xdc>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7d4:	f003 0301 	and.w	r3, r3, #1
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d012      	beq.n	800d802 <ip4_route+0xc2>
 800d7dc:	4b0f      	ldr	r3, [pc, #60]	@ (800d81c <ip4_route+0xdc>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7e4:	f003 0304 	and.w	r3, r3, #4
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00a      	beq.n	800d802 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d7ec:	4b0b      	ldr	r3, [pc, #44]	@ (800d81c <ip4_route+0xdc>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	3304      	adds	r3, #4
 800d7f2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d004      	beq.n	800d802 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800d800:	d101      	bne.n	800d806 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d802:	2300      	movs	r3, #0
 800d804:	e001      	b.n	800d80a <ip4_route+0xca>
  }

  return netif_default;
 800d806:	4b05      	ldr	r3, [pc, #20]	@ (800d81c <ip4_route+0xdc>)
 800d808:	681b      	ldr	r3, [r3, #0]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3714      	adds	r7, #20
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	20007c64 	.word	0x20007c64
 800d81c:	20007c68 	.word	0x20007c68

0800d820 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d82e:	f003 0301 	and.w	r3, r3, #1
 800d832:	b2db      	uxtb	r3, r3
 800d834:	2b00      	cmp	r3, #0
 800d836:	d016      	beq.n	800d866 <ip4_input_accept+0x46>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	3304      	adds	r3, #4
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d011      	beq.n	800d866 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d842:	4b0b      	ldr	r3, [pc, #44]	@ (800d870 <ip4_input_accept+0x50>)
 800d844:	695a      	ldr	r2, [r3, #20]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	3304      	adds	r3, #4
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d008      	beq.n	800d862 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d850:	4b07      	ldr	r3, [pc, #28]	@ (800d870 <ip4_input_accept+0x50>)
 800d852:	695b      	ldr	r3, [r3, #20]
 800d854:	6879      	ldr	r1, [r7, #4]
 800d856:	4618      	mov	r0, r3
 800d858:	f000 fa08 	bl	800dc6c <ip4_addr_isbroadcast_u32>
 800d85c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d001      	beq.n	800d866 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d862:	2301      	movs	r3, #1
 800d864:	e000      	b.n	800d868 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	20004d54 	.word	0x20004d54

0800d874 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b086      	sub	sp, #24
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	091b      	lsrs	r3, r3, #4
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	2b04      	cmp	r3, #4
 800d88e:	d004      	beq.n	800d89a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7f8 ffd3 	bl	800683c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d896:	2300      	movs	r3, #0
 800d898:	e107      	b.n	800daaa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	f003 030f 	and.w	r3, r3, #15
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	009b      	lsls	r3, r3, #2
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	885b      	ldrh	r3, [r3, #2]
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7f7 fc89 	bl	80051c8 <lwip_htons>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	891b      	ldrh	r3, [r3, #8]
 800d8be:	89ba      	ldrh	r2, [r7, #12]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d204      	bcs.n	800d8ce <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d8c4:	89bb      	ldrh	r3, [r7, #12]
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f7f8 fe31 	bl	8006530 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	895b      	ldrh	r3, [r3, #10]
 800d8d2:	89fa      	ldrh	r2, [r7, #14]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d807      	bhi.n	800d8e8 <ip4_input+0x74>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	891b      	ldrh	r3, [r3, #8]
 800d8dc:	89ba      	ldrh	r2, [r7, #12]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d802      	bhi.n	800d8e8 <ip4_input+0x74>
 800d8e2:	89fb      	ldrh	r3, [r7, #14]
 800d8e4:	2b13      	cmp	r3, #19
 800d8e6:	d804      	bhi.n	800d8f2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f7f8 ffa7 	bl	800683c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	e0db      	b.n	800daaa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	691b      	ldr	r3, [r3, #16]
 800d8f6:	4a6f      	ldr	r2, [pc, #444]	@ (800dab4 <ip4_input+0x240>)
 800d8f8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	68db      	ldr	r3, [r3, #12]
 800d8fe:	4a6d      	ldr	r2, [pc, #436]	@ (800dab4 <ip4_input+0x240>)
 800d900:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d902:	4b6c      	ldr	r3, [pc, #432]	@ (800dab4 <ip4_input+0x240>)
 800d904:	695b      	ldr	r3, [r3, #20]
 800d906:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d90a:	2be0      	cmp	r3, #224	@ 0xe0
 800d90c:	d112      	bne.n	800d934 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d914:	f003 0301 	and.w	r3, r3, #1
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d007      	beq.n	800d92e <ip4_input+0xba>
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	3304      	adds	r3, #4
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d002      	beq.n	800d92e <ip4_input+0xba>
      netif = inp;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	613b      	str	r3, [r7, #16]
 800d92c:	e02a      	b.n	800d984 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d92e:	2300      	movs	r3, #0
 800d930:	613b      	str	r3, [r7, #16]
 800d932:	e027      	b.n	800d984 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d934:	6838      	ldr	r0, [r7, #0]
 800d936:	f7ff ff73 	bl	800d820 <ip4_input_accept>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d002      	beq.n	800d946 <ip4_input+0xd2>
      netif = inp;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	613b      	str	r3, [r7, #16]
 800d944:	e01e      	b.n	800d984 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d946:	2300      	movs	r3, #0
 800d948:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d94a:	4b5a      	ldr	r3, [pc, #360]	@ (800dab4 <ip4_input+0x240>)
 800d94c:	695b      	ldr	r3, [r3, #20]
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	2b7f      	cmp	r3, #127	@ 0x7f
 800d952:	d017      	beq.n	800d984 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d954:	4b58      	ldr	r3, [pc, #352]	@ (800dab8 <ip4_input+0x244>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	613b      	str	r3, [r7, #16]
 800d95a:	e00e      	b.n	800d97a <ip4_input+0x106>
          if (netif == inp) {
 800d95c:	693a      	ldr	r2, [r7, #16]
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	429a      	cmp	r2, r3
 800d962:	d006      	beq.n	800d972 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d964:	6938      	ldr	r0, [r7, #16]
 800d966:	f7ff ff5b 	bl	800d820 <ip4_input_accept>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d108      	bne.n	800d982 <ip4_input+0x10e>
 800d970:	e000      	b.n	800d974 <ip4_input+0x100>
            continue;
 800d972:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	613b      	str	r3, [r7, #16]
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d1ed      	bne.n	800d95c <ip4_input+0xe8>
 800d980:	e000      	b.n	800d984 <ip4_input+0x110>
            break;
 800d982:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d984:	4b4b      	ldr	r3, [pc, #300]	@ (800dab4 <ip4_input+0x240>)
 800d986:	691b      	ldr	r3, [r3, #16]
 800d988:	6839      	ldr	r1, [r7, #0]
 800d98a:	4618      	mov	r0, r3
 800d98c:	f000 f96e 	bl	800dc6c <ip4_addr_isbroadcast_u32>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d105      	bne.n	800d9a2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d996:	4b47      	ldr	r3, [pc, #284]	@ (800dab4 <ip4_input+0x240>)
 800d998:	691b      	ldr	r3, [r3, #16]
 800d99a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d99e:	2be0      	cmp	r3, #224	@ 0xe0
 800d9a0:	d104      	bne.n	800d9ac <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f7f8 ff4a 	bl	800683c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	e07e      	b.n	800daaa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d104      	bne.n	800d9bc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f7f8 ff42 	bl	800683c <pbuf_free>
    return ERR_OK;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	e076      	b.n	800daaa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	88db      	ldrh	r3, [r3, #6]
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800d9c8:	4013      	ands	r3, r2
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00b      	beq.n	800d9e6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 fc92 	bl	800e2f8 <ip4_reass>
 800d9d4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d101      	bne.n	800d9e0 <ip4_input+0x16c>
      return ERR_OK;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	e064      	b.n	800daaa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d9e6:	4a33      	ldr	r2, [pc, #204]	@ (800dab4 <ip4_input+0x240>)
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d9ec:	4a31      	ldr	r2, [pc, #196]	@ (800dab4 <ip4_input+0x240>)
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d9f2:	4a30      	ldr	r2, [pc, #192]	@ (800dab4 <ip4_input+0x240>)
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	f003 030f 	and.w	r3, r3, #15
 800da00:	b2db      	uxtb	r3, r3
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	b2db      	uxtb	r3, r3
 800da06:	461a      	mov	r2, r3
 800da08:	4b2a      	ldr	r3, [pc, #168]	@ (800dab4 <ip4_input+0x240>)
 800da0a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800da0c:	89fb      	ldrh	r3, [r7, #14]
 800da0e:	4619      	mov	r1, r3
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7f8 fe8d 	bl	8006730 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	7a5b      	ldrb	r3, [r3, #9]
 800da1a:	2b11      	cmp	r3, #17
 800da1c:	d006      	beq.n	800da2c <ip4_input+0x1b8>
 800da1e:	2b11      	cmp	r3, #17
 800da20:	dc13      	bgt.n	800da4a <ip4_input+0x1d6>
 800da22:	2b01      	cmp	r3, #1
 800da24:	d00c      	beq.n	800da40 <ip4_input+0x1cc>
 800da26:	2b06      	cmp	r3, #6
 800da28:	d005      	beq.n	800da36 <ip4_input+0x1c2>
 800da2a:	e00e      	b.n	800da4a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800da2c:	6839      	ldr	r1, [r7, #0]
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f7fe fc68 	bl	800c304 <udp_input>
        break;
 800da34:	e026      	b.n	800da84 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800da36:	6839      	ldr	r1, [r7, #0]
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f7fa fd29 	bl	8008490 <tcp_input>
        break;
 800da3e:	e021      	b.n	800da84 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800da40:	6839      	ldr	r1, [r7, #0]
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f7ff fcee 	bl	800d424 <icmp_input>
        break;
 800da48:	e01c      	b.n	800da84 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800da4a:	4b1a      	ldr	r3, [pc, #104]	@ (800dab4 <ip4_input+0x240>)
 800da4c:	695b      	ldr	r3, [r3, #20]
 800da4e:	6939      	ldr	r1, [r7, #16]
 800da50:	4618      	mov	r0, r3
 800da52:	f000 f90b 	bl	800dc6c <ip4_addr_isbroadcast_u32>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10f      	bne.n	800da7c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800da5c:	4b15      	ldr	r3, [pc, #84]	@ (800dab4 <ip4_input+0x240>)
 800da5e:	695b      	ldr	r3, [r3, #20]
 800da60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800da64:	2be0      	cmp	r3, #224	@ 0xe0
 800da66:	d009      	beq.n	800da7c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800da68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800da6c:	4619      	mov	r1, r3
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7f8 fed1 	bl	8006816 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800da74:	2102      	movs	r1, #2
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f7ff fdd8 	bl	800d62c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f7f8 fedd 	bl	800683c <pbuf_free>
        break;
 800da82:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800da84:	4b0b      	ldr	r3, [pc, #44]	@ (800dab4 <ip4_input+0x240>)
 800da86:	2200      	movs	r2, #0
 800da88:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800da8a:	4b0a      	ldr	r3, [pc, #40]	@ (800dab4 <ip4_input+0x240>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800da90:	4b08      	ldr	r3, [pc, #32]	@ (800dab4 <ip4_input+0x240>)
 800da92:	2200      	movs	r2, #0
 800da94:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800da96:	4b07      	ldr	r3, [pc, #28]	@ (800dab4 <ip4_input+0x240>)
 800da98:	2200      	movs	r2, #0
 800da9a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800da9c:	4b05      	ldr	r3, [pc, #20]	@ (800dab4 <ip4_input+0x240>)
 800da9e:	2200      	movs	r2, #0
 800daa0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800daa2:	4b04      	ldr	r3, [pc, #16]	@ (800dab4 <ip4_input+0x240>)
 800daa4:	2200      	movs	r2, #0
 800daa6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800daa8:	2300      	movs	r3, #0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	20004d54 	.word	0x20004d54
 800dab8:	20007c64 	.word	0x20007c64

0800dabc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b08a      	sub	sp, #40	@ 0x28
 800dac0:	af04      	add	r7, sp, #16
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	60b9      	str	r1, [r7, #8]
 800dac6:	607a      	str	r2, [r7, #4]
 800dac8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d009      	beq.n	800dae8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d003      	beq.n	800dae2 <ip4_output_if+0x26>
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d102      	bne.n	800dae8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800dae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae4:	3304      	adds	r3, #4
 800dae6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dae8:	78fa      	ldrb	r2, [r7, #3]
 800daea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daec:	9302      	str	r3, [sp, #8]
 800daee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800daf2:	9301      	str	r3, [sp, #4]
 800daf4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800daf8:	9300      	str	r3, [sp, #0]
 800dafa:	4613      	mov	r3, r2
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	6979      	ldr	r1, [r7, #20]
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f000 f805 	bl	800db10 <ip4_output_if_src>
 800db06:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3718      	adds	r7, #24
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b088      	sub	sp, #32
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	607a      	str	r2, [r7, #4]
 800db1c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	7b9b      	ldrb	r3, [r3, #14]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d006      	beq.n	800db34 <ip4_output_if_src+0x24>
 800db26:	4b4b      	ldr	r3, [pc, #300]	@ (800dc54 <ip4_output_if_src+0x144>)
 800db28:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800db2c:	494a      	ldr	r1, [pc, #296]	@ (800dc58 <ip4_output_if_src+0x148>)
 800db2e:	484b      	ldr	r0, [pc, #300]	@ (800dc5c <ip4_output_if_src+0x14c>)
 800db30:	f001 f8f2 	bl	800ed18 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d060      	beq.n	800dbfc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800db3a:	2314      	movs	r3, #20
 800db3c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800db3e:	2114      	movs	r1, #20
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f7f8 fde5 	bl	8006710 <pbuf_add_header>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d002      	beq.n	800db52 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800db4c:	f06f 0301 	mvn.w	r3, #1
 800db50:	e07c      	b.n	800dc4c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	895b      	ldrh	r3, [r3, #10]
 800db5c:	2b13      	cmp	r3, #19
 800db5e:	d806      	bhi.n	800db6e <ip4_output_if_src+0x5e>
 800db60:	4b3c      	ldr	r3, [pc, #240]	@ (800dc54 <ip4_output_if_src+0x144>)
 800db62:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800db66:	493e      	ldr	r1, [pc, #248]	@ (800dc60 <ip4_output_if_src+0x150>)
 800db68:	483c      	ldr	r0, [pc, #240]	@ (800dc5c <ip4_output_if_src+0x14c>)
 800db6a:	f001 f8d5 	bl	800ed18 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	78fa      	ldrb	r2, [r7, #3]
 800db72:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800db7a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800db84:	8b7b      	ldrh	r3, [r7, #26]
 800db86:	089b      	lsrs	r3, r3, #2
 800db88:	b29b      	uxth	r3, r3
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db90:	b2da      	uxtb	r2, r3
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800db9c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	891b      	ldrh	r3, [r3, #8]
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7f7 fb10 	bl	80051c8 <lwip_htons>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	461a      	mov	r2, r3
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	719a      	strb	r2, [r3, #6]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800dbba:	4b2a      	ldr	r3, [pc, #168]	@ (800dc64 <ip4_output_if_src+0x154>)
 800dbbc:	881b      	ldrh	r3, [r3, #0]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7f7 fb02 	bl	80051c8 <lwip_htons>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800dbcc:	4b25      	ldr	r3, [pc, #148]	@ (800dc64 <ip4_output_if_src+0x154>)
 800dbce:	881b      	ldrh	r3, [r3, #0]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	b29a      	uxth	r2, r3
 800dbd4:	4b23      	ldr	r3, [pc, #140]	@ (800dc64 <ip4_output_if_src+0x154>)
 800dbd6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d104      	bne.n	800dbe8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800dbde:	4b22      	ldr	r3, [pc, #136]	@ (800dc68 <ip4_output_if_src+0x158>)
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	60da      	str	r2, [r3, #12]
 800dbe6:	e003      	b.n	800dbf0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	681a      	ldr	r2, [r3, #0]
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	729a      	strb	r2, [r3, #10]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	72da      	strb	r2, [r3, #11]
 800dbfa:	e00f      	b.n	800dc1c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	895b      	ldrh	r3, [r3, #10]
 800dc00:	2b13      	cmp	r3, #19
 800dc02:	d802      	bhi.n	800dc0a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dc04:	f06f 0301 	mvn.w	r3, #1
 800dc08:	e020      	b.n	800dc4c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	691b      	ldr	r3, [r3, #16]
 800dc14:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800dc16:	f107 0314 	add.w	r3, r7, #20
 800dc1a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800dc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d00c      	beq.n	800dc3e <ip4_output_if_src+0x12e>
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	891a      	ldrh	r2, [r3, #8]
 800dc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d906      	bls.n	800dc3e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	f000 fd53 	bl	800e6e0 <ip4_frag>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	e006      	b.n	800dc4c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800dc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	68f9      	ldr	r1, [r7, #12]
 800dc46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc48:	4798      	blx	r3
 800dc4a:	4603      	mov	r3, r0
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3720      	adds	r7, #32
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	080121d0 	.word	0x080121d0
 800dc58:	08012204 	.word	0x08012204
 800dc5c:	08012210 	.word	0x08012210
 800dc60:	08012238 	.word	0x08012238
 800dc64:	20007dc2 	.word	0x20007dc2
 800dc68:	08012618 	.word	0x08012618

0800dc6c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b085      	sub	sp, #20
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc80:	d002      	beq.n	800dc88 <ip4_addr_isbroadcast_u32+0x1c>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d101      	bne.n	800dc8c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	e02a      	b.n	800dce2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc92:	f003 0302 	and.w	r3, r3, #2
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d101      	bne.n	800dc9e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	e021      	b.n	800dce2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	3304      	adds	r3, #4
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d101      	bne.n	800dcae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	e019      	b.n	800dce2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800dcae:	68fa      	ldr	r2, [r7, #12]
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	405a      	eors	r2, r3
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	3308      	adds	r3, #8
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4013      	ands	r3, r2
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d10d      	bne.n	800dce0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	3308      	adds	r3, #8
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	43da      	mvns	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	3308      	adds	r3, #8
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d101      	bne.n	800dce0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800dcdc:	2301      	movs	r3, #1
 800dcde:	e000      	b.n	800dce2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800dce0:	2300      	movs	r3, #0
  }
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3714      	adds	r7, #20
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr
	...

0800dcf0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800dcfa:	4b12      	ldr	r3, [pc, #72]	@ (800dd44 <ip_reass_tmr+0x54>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800dd00:	e018      	b.n	800dd34 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	7fdb      	ldrb	r3, [r3, #31]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00b      	beq.n	800dd22 <ip_reass_tmr+0x32>
      r->timer--;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	7fdb      	ldrb	r3, [r3, #31]
 800dd0e:	3b01      	subs	r3, #1
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	60fb      	str	r3, [r7, #12]
 800dd20:	e008      	b.n	800dd34 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800dd2c:	68b9      	ldr	r1, [r7, #8]
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 f80a 	bl	800dd48 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1e3      	bne.n	800dd02 <ip_reass_tmr+0x12>
    }
  }
}
 800dd3a:	bf00      	nop
 800dd3c:	bf00      	nop
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	20007dc4 	.word	0x20007dc4

0800dd48 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b088      	sub	sp, #32
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800dd52:	2300      	movs	r3, #0
 800dd54:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800dd56:	683a      	ldr	r2, [r7, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d105      	bne.n	800dd6a <ip_reass_free_complete_datagram+0x22>
 800dd5e:	4b45      	ldr	r3, [pc, #276]	@ (800de74 <ip_reass_free_complete_datagram+0x12c>)
 800dd60:	22ab      	movs	r2, #171	@ 0xab
 800dd62:	4945      	ldr	r1, [pc, #276]	@ (800de78 <ip_reass_free_complete_datagram+0x130>)
 800dd64:	4845      	ldr	r0, [pc, #276]	@ (800de7c <ip_reass_free_complete_datagram+0x134>)
 800dd66:	f000 ffd7 	bl	800ed18 <iprintf>
  if (prev != NULL) {
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00a      	beq.n	800dd86 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d005      	beq.n	800dd86 <ip_reass_free_complete_datagram+0x3e>
 800dd7a:	4b3e      	ldr	r3, [pc, #248]	@ (800de74 <ip_reass_free_complete_datagram+0x12c>)
 800dd7c:	22ad      	movs	r2, #173	@ 0xad
 800dd7e:	4940      	ldr	r1, [pc, #256]	@ (800de80 <ip_reass_free_complete_datagram+0x138>)
 800dd80:	483e      	ldr	r0, [pc, #248]	@ (800de7c <ip_reass_free_complete_datagram+0x134>)
 800dd82:	f000 ffc9 	bl	800ed18 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	889b      	ldrh	r3, [r3, #4]
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d12a      	bne.n	800ddee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	6858      	ldr	r0, [r3, #4]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	3308      	adds	r3, #8
 800ddae:	2214      	movs	r2, #20
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	f001 f88c 	bl	800eece <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ddb6:	2101      	movs	r1, #1
 800ddb8:	69b8      	ldr	r0, [r7, #24]
 800ddba:	f7ff fc47 	bl	800d64c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ddbe:	69b8      	ldr	r0, [r7, #24]
 800ddc0:	f7f8 fdc4 	bl	800694c <pbuf_clen>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ddc8:	8bfa      	ldrh	r2, [r7, #30]
 800ddca:	8a7b      	ldrh	r3, [r7, #18]
 800ddcc:	4413      	add	r3, r2
 800ddce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddd2:	db05      	blt.n	800dde0 <ip_reass_free_complete_datagram+0x98>
 800ddd4:	4b27      	ldr	r3, [pc, #156]	@ (800de74 <ip_reass_free_complete_datagram+0x12c>)
 800ddd6:	22bc      	movs	r2, #188	@ 0xbc
 800ddd8:	492a      	ldr	r1, [pc, #168]	@ (800de84 <ip_reass_free_complete_datagram+0x13c>)
 800ddda:	4828      	ldr	r0, [pc, #160]	@ (800de7c <ip_reass_free_complete_datagram+0x134>)
 800dddc:	f000 ff9c 	bl	800ed18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dde0:	8bfa      	ldrh	r2, [r7, #30]
 800dde2:	8a7b      	ldrh	r3, [r7, #18]
 800dde4:	4413      	add	r3, r2
 800dde6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800dde8:	69b8      	ldr	r0, [r7, #24]
 800ddea:	f7f8 fd27 	bl	800683c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ddf4:	e01f      	b.n	800de36 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f7f8 fda0 	bl	800694c <pbuf_clen>
 800de0c:	4603      	mov	r3, r0
 800de0e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800de10:	8bfa      	ldrh	r2, [r7, #30]
 800de12:	8a7b      	ldrh	r3, [r7, #18]
 800de14:	4413      	add	r3, r2
 800de16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de1a:	db05      	blt.n	800de28 <ip_reass_free_complete_datagram+0xe0>
 800de1c:	4b15      	ldr	r3, [pc, #84]	@ (800de74 <ip_reass_free_complete_datagram+0x12c>)
 800de1e:	22cc      	movs	r2, #204	@ 0xcc
 800de20:	4918      	ldr	r1, [pc, #96]	@ (800de84 <ip_reass_free_complete_datagram+0x13c>)
 800de22:	4816      	ldr	r0, [pc, #88]	@ (800de7c <ip_reass_free_complete_datagram+0x134>)
 800de24:	f000 ff78 	bl	800ed18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800de28:	8bfa      	ldrh	r2, [r7, #30]
 800de2a:	8a7b      	ldrh	r3, [r7, #18]
 800de2c:	4413      	add	r3, r2
 800de2e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f7f8 fd03 	bl	800683c <pbuf_free>
  while (p != NULL) {
 800de36:	69bb      	ldr	r3, [r7, #24]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1dc      	bne.n	800ddf6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800de3c:	6839      	ldr	r1, [r7, #0]
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 f8c2 	bl	800dfc8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800de44:	4b10      	ldr	r3, [pc, #64]	@ (800de88 <ip_reass_free_complete_datagram+0x140>)
 800de46:	881b      	ldrh	r3, [r3, #0]
 800de48:	8bfa      	ldrh	r2, [r7, #30]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d905      	bls.n	800de5a <ip_reass_free_complete_datagram+0x112>
 800de4e:	4b09      	ldr	r3, [pc, #36]	@ (800de74 <ip_reass_free_complete_datagram+0x12c>)
 800de50:	22d2      	movs	r2, #210	@ 0xd2
 800de52:	490e      	ldr	r1, [pc, #56]	@ (800de8c <ip_reass_free_complete_datagram+0x144>)
 800de54:	4809      	ldr	r0, [pc, #36]	@ (800de7c <ip_reass_free_complete_datagram+0x134>)
 800de56:	f000 ff5f 	bl	800ed18 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800de5a:	4b0b      	ldr	r3, [pc, #44]	@ (800de88 <ip_reass_free_complete_datagram+0x140>)
 800de5c:	881a      	ldrh	r2, [r3, #0]
 800de5e:	8bfb      	ldrh	r3, [r7, #30]
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	b29a      	uxth	r2, r3
 800de64:	4b08      	ldr	r3, [pc, #32]	@ (800de88 <ip_reass_free_complete_datagram+0x140>)
 800de66:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800de68:	8bfb      	ldrh	r3, [r7, #30]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3720      	adds	r7, #32
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	08012268 	.word	0x08012268
 800de78:	080122a4 	.word	0x080122a4
 800de7c:	080122b0 	.word	0x080122b0
 800de80:	080122d8 	.word	0x080122d8
 800de84:	080122ec 	.word	0x080122ec
 800de88:	20007dc8 	.word	0x20007dc8
 800de8c:	0801230c 	.word	0x0801230c

0800de90 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b08a      	sub	sp, #40	@ 0x28
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800de9a:	2300      	movs	r3, #0
 800de9c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800de9e:	2300      	movs	r3, #0
 800dea0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dea2:	2300      	movs	r3, #0
 800dea4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dea6:	2300      	movs	r3, #0
 800dea8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800deae:	4b28      	ldr	r3, [pc, #160]	@ (800df50 <ip_reass_remove_oldest_datagram+0xc0>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800deb4:	e030      	b.n	800df18 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800deb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb8:	695a      	ldr	r2, [r3, #20]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d10c      	bne.n	800dedc <ip_reass_remove_oldest_datagram+0x4c>
 800dec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec4:	699a      	ldr	r2, [r3, #24]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	691b      	ldr	r3, [r3, #16]
 800deca:	429a      	cmp	r2, r3
 800decc:	d106      	bne.n	800dedc <ip_reass_remove_oldest_datagram+0x4c>
 800dece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded0:	899a      	ldrh	r2, [r3, #12]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	889b      	ldrh	r3, [r3, #4]
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	429a      	cmp	r2, r3
 800deda:	d014      	beq.n	800df06 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	3301      	adds	r3, #1
 800dee0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800dee2:	6a3b      	ldr	r3, [r7, #32]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d104      	bne.n	800def2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800dee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	61bb      	str	r3, [r7, #24]
 800def0:	e009      	b.n	800df06 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800def2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def4:	7fda      	ldrb	r2, [r3, #31]
 800def6:	6a3b      	ldr	r3, [r7, #32]
 800def8:	7fdb      	ldrb	r3, [r3, #31]
 800defa:	429a      	cmp	r2, r3
 800defc:	d803      	bhi.n	800df06 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800defe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df00:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800df02:	69fb      	ldr	r3, [r7, #28]
 800df04:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800df06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d001      	beq.n	800df12 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800df0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df10:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800df12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800df18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d1cb      	bne.n	800deb6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800df1e:	6a3b      	ldr	r3, [r7, #32]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d008      	beq.n	800df36 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800df24:	69b9      	ldr	r1, [r7, #24]
 800df26:	6a38      	ldr	r0, [r7, #32]
 800df28:	f7ff ff0e 	bl	800dd48 <ip_reass_free_complete_datagram>
 800df2c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800df2e:	697a      	ldr	r2, [r7, #20]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	4413      	add	r3, r2
 800df34:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800df36:	697a      	ldr	r2, [r7, #20]
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	da02      	bge.n	800df44 <ip_reass_remove_oldest_datagram+0xb4>
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	2b01      	cmp	r3, #1
 800df42:	dcac      	bgt.n	800de9e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800df44:	697b      	ldr	r3, [r7, #20]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3728      	adds	r7, #40	@ 0x28
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	20007dc4 	.word	0x20007dc4

0800df54 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800df5e:	2004      	movs	r0, #4
 800df60:	f7f7 fda6 	bl	8005ab0 <memp_malloc>
 800df64:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d110      	bne.n	800df8e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800df6c:	6839      	ldr	r1, [r7, #0]
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7ff ff8e 	bl	800de90 <ip_reass_remove_oldest_datagram>
 800df74:	4602      	mov	r2, r0
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	4293      	cmp	r3, r2
 800df7a:	dc03      	bgt.n	800df84 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800df7c:	2004      	movs	r0, #4
 800df7e:	f7f7 fd97 	bl	8005ab0 <memp_malloc>
 800df82:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d101      	bne.n	800df8e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800df8a:	2300      	movs	r3, #0
 800df8c:	e016      	b.n	800dfbc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800df8e:	2220      	movs	r2, #32
 800df90:	2100      	movs	r1, #0
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	f000 ff25 	bl	800ede2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	220f      	movs	r2, #15
 800df9c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800df9e:	4b09      	ldr	r3, [pc, #36]	@ (800dfc4 <ip_reass_enqueue_new_datagram+0x70>)
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dfa6:	4a07      	ldr	r2, [pc, #28]	@ (800dfc4 <ip_reass_enqueue_new_datagram+0x70>)
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	3308      	adds	r3, #8
 800dfb0:	2214      	movs	r2, #20
 800dfb2:	6879      	ldr	r1, [r7, #4]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f000 ff8a 	bl	800eece <memcpy>
  return ipr;
 800dfba:	68fb      	ldr	r3, [r7, #12]
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3710      	adds	r7, #16
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	20007dc4 	.word	0x20007dc4

0800dfc8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800dfd2:	4b10      	ldr	r3, [pc, #64]	@ (800e014 <ip_reass_dequeue_datagram+0x4c>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d104      	bne.n	800dfe6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4a0c      	ldr	r2, [pc, #48]	@ (800e014 <ip_reass_dequeue_datagram+0x4c>)
 800dfe2:	6013      	str	r3, [r2, #0]
 800dfe4:	e00d      	b.n	800e002 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d106      	bne.n	800dffa <ip_reass_dequeue_datagram+0x32>
 800dfec:	4b0a      	ldr	r3, [pc, #40]	@ (800e018 <ip_reass_dequeue_datagram+0x50>)
 800dfee:	f240 1245 	movw	r2, #325	@ 0x145
 800dff2:	490a      	ldr	r1, [pc, #40]	@ (800e01c <ip_reass_dequeue_datagram+0x54>)
 800dff4:	480a      	ldr	r0, [pc, #40]	@ (800e020 <ip_reass_dequeue_datagram+0x58>)
 800dff6:	f000 fe8f 	bl	800ed18 <iprintf>
    prev->next = ipr->next;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e002:	6879      	ldr	r1, [r7, #4]
 800e004:	2004      	movs	r0, #4
 800e006:	f7f7 fdc3 	bl	8005b90 <memp_free>
}
 800e00a:	bf00      	nop
 800e00c:	3708      	adds	r7, #8
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	20007dc4 	.word	0x20007dc4
 800e018:	08012268 	.word	0x08012268
 800e01c:	08012330 	.word	0x08012330
 800e020:	080122b0 	.word	0x080122b0

0800e024 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b08c      	sub	sp, #48	@ 0x30
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e030:	2300      	movs	r3, #0
 800e032:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e034:	2301      	movs	r3, #1
 800e036:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	885b      	ldrh	r3, [r3, #2]
 800e042:	b29b      	uxth	r3, r3
 800e044:	4618      	mov	r0, r3
 800e046:	f7f7 f8bf 	bl	80051c8 <lwip_htons>
 800e04a:	4603      	mov	r3, r0
 800e04c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	f003 030f 	and.w	r3, r3, #15
 800e056:	b2db      	uxtb	r3, r3
 800e058:	009b      	lsls	r3, r3, #2
 800e05a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e05c:	7e7b      	ldrb	r3, [r7, #25]
 800e05e:	b29b      	uxth	r3, r3
 800e060:	8b7a      	ldrh	r2, [r7, #26]
 800e062:	429a      	cmp	r2, r3
 800e064:	d202      	bcs.n	800e06c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e06a:	e135      	b.n	800e2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e06c:	7e7b      	ldrb	r3, [r7, #25]
 800e06e:	b29b      	uxth	r3, r3
 800e070:	8b7a      	ldrh	r2, [r7, #26]
 800e072:	1ad3      	subs	r3, r2, r3
 800e074:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e076:	69fb      	ldr	r3, [r7, #28]
 800e078:	88db      	ldrh	r3, [r3, #6]
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7f7 f8a3 	bl	80051c8 <lwip_htons>
 800e082:	4603      	mov	r3, r0
 800e084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e088:	b29b      	uxth	r3, r3
 800e08a:	00db      	lsls	r3, r3, #3
 800e08c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800e094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e096:	2200      	movs	r2, #0
 800e098:	701a      	strb	r2, [r3, #0]
 800e09a:	2200      	movs	r2, #0
 800e09c:	705a      	strb	r2, [r3, #1]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	709a      	strb	r2, [r3, #2]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a8:	8afa      	ldrh	r2, [r7, #22]
 800e0aa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e0ac:	8afa      	ldrh	r2, [r7, #22]
 800e0ae:	8b7b      	ldrh	r3, [r7, #26]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	b29a      	uxth	r2, r3
 800e0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ba:	88db      	ldrh	r3, [r3, #6]
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	8afa      	ldrh	r2, [r7, #22]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d902      	bls.n	800e0ca <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e0c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0c8:	e106      	b.n	800e2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0d0:	e068      	b.n	800e1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0da:	889b      	ldrh	r3, [r3, #4]
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	889b      	ldrh	r3, [r3, #4]
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d235      	bcs.n	800e154 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d020      	beq.n	800e136 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f6:	889b      	ldrh	r3, [r3, #4]
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0fc:	88db      	ldrh	r3, [r3, #6]
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	429a      	cmp	r2, r3
 800e102:	d307      	bcc.n	800e114 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e106:	88db      	ldrh	r3, [r3, #6]
 800e108:	b29a      	uxth	r2, r3
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	889b      	ldrh	r3, [r3, #4]
 800e10e:	b29b      	uxth	r3, r3
 800e110:	429a      	cmp	r2, r3
 800e112:	d902      	bls.n	800e11a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e118:	e0de      	b.n	800e2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e11c:	68ba      	ldr	r2, [r7, #8]
 800e11e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e122:	88db      	ldrh	r3, [r3, #6]
 800e124:	b29a      	uxth	r2, r3
 800e126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e128:	889b      	ldrh	r3, [r3, #4]
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d03d      	beq.n	800e1ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e130:	2300      	movs	r3, #0
 800e132:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e134:	e03a      	b.n	800e1ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e138:	88db      	ldrh	r3, [r3, #6]
 800e13a:	b29a      	uxth	r2, r3
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	889b      	ldrh	r3, [r3, #4]
 800e140:	b29b      	uxth	r3, r3
 800e142:	429a      	cmp	r2, r3
 800e144:	d902      	bls.n	800e14c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e146:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e14a:	e0c5      	b.n	800e2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	68ba      	ldr	r2, [r7, #8]
 800e150:	605a      	str	r2, [r3, #4]
      break;
 800e152:	e02b      	b.n	800e1ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e156:	889b      	ldrh	r3, [r3, #4]
 800e158:	b29a      	uxth	r2, r3
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	889b      	ldrh	r3, [r3, #4]
 800e15e:	b29b      	uxth	r3, r3
 800e160:	429a      	cmp	r2, r3
 800e162:	d102      	bne.n	800e16a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e164:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e168:	e0b6      	b.n	800e2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16c:	889b      	ldrh	r3, [r3, #4]
 800e16e:	b29a      	uxth	r2, r3
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	88db      	ldrh	r3, [r3, #6]
 800e174:	b29b      	uxth	r3, r3
 800e176:	429a      	cmp	r2, r3
 800e178:	d202      	bcs.n	800e180 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e17a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e17e:	e0ab      	b.n	800e2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e182:	2b00      	cmp	r3, #0
 800e184:	d009      	beq.n	800e19a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e188:	88db      	ldrh	r3, [r3, #6]
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	889b      	ldrh	r3, [r3, #4]
 800e190:	b29b      	uxth	r3, r3
 800e192:	429a      	cmp	r2, r3
 800e194:	d001      	beq.n	800e19a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e196:	2300      	movs	r3, #0
 800e198:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800e1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d193      	bne.n	800e0d2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e1aa:	e000      	b.n	800e1ae <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e1ac:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d12d      	bne.n	800e210 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d01c      	beq.n	800e1f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1bc:	88db      	ldrh	r3, [r3, #6]
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c2:	889b      	ldrh	r3, [r3, #4]
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d906      	bls.n	800e1d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e1ca:	4b45      	ldr	r3, [pc, #276]	@ (800e2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e1cc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800e1d0:	4944      	ldr	r1, [pc, #272]	@ (800e2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e1d2:	4845      	ldr	r0, [pc, #276]	@ (800e2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e1d4:	f000 fda0 	bl	800ed18 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1da:	68ba      	ldr	r2, [r7, #8]
 800e1dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1e0:	88db      	ldrh	r3, [r3, #6]
 800e1e2:	b29a      	uxth	r2, r3
 800e1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1e6:	889b      	ldrh	r3, [r3, #4]
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d010      	beq.n	800e210 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	623b      	str	r3, [r7, #32]
 800e1f2:	e00d      	b.n	800e210 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d006      	beq.n	800e20a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e1fc:	4b38      	ldr	r3, [pc, #224]	@ (800e2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e1fe:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800e202:	493a      	ldr	r1, [pc, #232]	@ (800e2ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e204:	4838      	ldr	r0, [pc, #224]	@ (800e2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e206:	f000 fd87 	bl	800ed18 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	68ba      	ldr	r2, [r7, #8]
 800e20e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d105      	bne.n	800e222 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	7f9b      	ldrb	r3, [r3, #30]
 800e21a:	f003 0301 	and.w	r3, r3, #1
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d059      	beq.n	800e2d6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e222:	6a3b      	ldr	r3, [r7, #32]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d04f      	beq.n	800e2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	685b      	ldr	r3, [r3, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d006      	beq.n	800e23e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	889b      	ldrh	r3, [r3, #4]
 800e238:	b29b      	uxth	r3, r3
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d002      	beq.n	800e244 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e23e:	2300      	movs	r3, #0
 800e240:	623b      	str	r3, [r7, #32]
 800e242:	e041      	b.n	800e2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e246:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800e248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e24e:	e012      	b.n	800e276 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800e256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e258:	88db      	ldrh	r3, [r3, #6]
 800e25a:	b29a      	uxth	r2, r3
 800e25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e25e:	889b      	ldrh	r3, [r3, #4]
 800e260:	b29b      	uxth	r3, r3
 800e262:	429a      	cmp	r2, r3
 800e264:	d002      	beq.n	800e26c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e266:	2300      	movs	r3, #0
 800e268:	623b      	str	r3, [r7, #32]
            break;
 800e26a:	e007      	b.n	800e27c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e26e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800e270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d1e9      	bne.n	800e250 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e27c:	6a3b      	ldr	r3, [r7, #32]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d022      	beq.n	800e2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d106      	bne.n	800e298 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e28a:	4b15      	ldr	r3, [pc, #84]	@ (800e2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e28c:	f240 12df 	movw	r2, #479	@ 0x1df
 800e290:	4917      	ldr	r1, [pc, #92]	@ (800e2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e292:	4815      	ldr	r0, [pc, #84]	@ (800e2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e294:	f000 fd40 	bl	800ed18 <iprintf>
          LWIP_ASSERT("sanity check",
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d106      	bne.n	800e2b2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e2a4:	4b0e      	ldr	r3, [pc, #56]	@ (800e2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e2a6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e2aa:	4911      	ldr	r1, [pc, #68]	@ (800e2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e2ac:	480e      	ldr	r0, [pc, #56]	@ (800e2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e2ae:	f000 fd33 	bl	800ed18 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d006      	beq.n	800e2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e2ba:	4b09      	ldr	r3, [pc, #36]	@ (800e2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e2bc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800e2c0:	490c      	ldr	r1, [pc, #48]	@ (800e2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e2c2:	4809      	ldr	r0, [pc, #36]	@ (800e2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e2c4:	f000 fd28 	bl	800ed18 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e2c8:	6a3b      	ldr	r3, [r7, #32]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	bf14      	ite	ne
 800e2ce:	2301      	movne	r3, #1
 800e2d0:	2300      	moveq	r3, #0
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	e000      	b.n	800e2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e2d6:	2300      	movs	r3, #0
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3730      	adds	r7, #48	@ 0x30
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	08012268 	.word	0x08012268
 800e2e4:	0801234c 	.word	0x0801234c
 800e2e8:	080122b0 	.word	0x080122b0
 800e2ec:	0801236c 	.word	0x0801236c
 800e2f0:	080123a4 	.word	0x080123a4
 800e2f4:	080123b4 	.word	0x080123b4

0800e2f8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b08e      	sub	sp, #56	@ 0x38
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	f003 030f 	and.w	r3, r3, #15
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	b2db      	uxtb	r3, r3
 800e314:	2b14      	cmp	r3, #20
 800e316:	f040 8171 	bne.w	800e5fc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e31c:	88db      	ldrh	r3, [r3, #6]
 800e31e:	b29b      	uxth	r3, r3
 800e320:	4618      	mov	r0, r3
 800e322:	f7f6 ff51 	bl	80051c8 <lwip_htons>
 800e326:	4603      	mov	r3, r0
 800e328:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	00db      	lsls	r3, r3, #3
 800e330:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e334:	885b      	ldrh	r3, [r3, #2]
 800e336:	b29b      	uxth	r3, r3
 800e338:	4618      	mov	r0, r3
 800e33a:	f7f6 ff45 	bl	80051c8 <lwip_htons>
 800e33e:	4603      	mov	r3, r0
 800e340:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	f003 030f 	and.w	r3, r3, #15
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800e352:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e356:	b29b      	uxth	r3, r3
 800e358:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e35a:	429a      	cmp	r2, r3
 800e35c:	f0c0 8150 	bcc.w	800e600 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e360:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e364:	b29b      	uxth	r3, r3
 800e366:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e368:	1ad3      	subs	r3, r2, r3
 800e36a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f7f8 faed 	bl	800694c <pbuf_clen>
 800e372:	4603      	mov	r3, r0
 800e374:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e376:	4b8c      	ldr	r3, [pc, #560]	@ (800e5a8 <ip4_reass+0x2b0>)
 800e378:	881b      	ldrh	r3, [r3, #0]
 800e37a:	461a      	mov	r2, r3
 800e37c:	8c3b      	ldrh	r3, [r7, #32]
 800e37e:	4413      	add	r3, r2
 800e380:	2b0a      	cmp	r3, #10
 800e382:	dd10      	ble.n	800e3a6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e384:	8c3b      	ldrh	r3, [r7, #32]
 800e386:	4619      	mov	r1, r3
 800e388:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e38a:	f7ff fd81 	bl	800de90 <ip_reass_remove_oldest_datagram>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	f000 8137 	beq.w	800e604 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e396:	4b84      	ldr	r3, [pc, #528]	@ (800e5a8 <ip4_reass+0x2b0>)
 800e398:	881b      	ldrh	r3, [r3, #0]
 800e39a:	461a      	mov	r2, r3
 800e39c:	8c3b      	ldrh	r3, [r7, #32]
 800e39e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e3a0:	2b0a      	cmp	r3, #10
 800e3a2:	f300 812f 	bgt.w	800e604 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e3a6:	4b81      	ldr	r3, [pc, #516]	@ (800e5ac <ip4_reass+0x2b4>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800e3ac:	e015      	b.n	800e3da <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b0:	695a      	ldr	r2, [r3, #20]
 800e3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d10c      	bne.n	800e3d4 <ip4_reass+0xdc>
 800e3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3bc:	699a      	ldr	r2, [r3, #24]
 800e3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3c0:	691b      	ldr	r3, [r3, #16]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d106      	bne.n	800e3d4 <ip4_reass+0xdc>
 800e3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3c8:	899a      	ldrh	r2, [r3, #12]
 800e3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3cc:	889b      	ldrh	r3, [r3, #4]
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d006      	beq.n	800e3e2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1e6      	bne.n	800e3ae <ip4_reass+0xb6>
 800e3e0:	e000      	b.n	800e3e4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e3e2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d109      	bne.n	800e3fe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e3ea:	8c3b      	ldrh	r3, [r7, #32]
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3f0:	f7ff fdb0 	bl	800df54 <ip_reass_enqueue_new_datagram>
 800e3f4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d11c      	bne.n	800e436 <ip4_reass+0x13e>
      goto nullreturn;
 800e3fc:	e105      	b.n	800e60a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e400:	88db      	ldrh	r3, [r3, #6]
 800e402:	b29b      	uxth	r3, r3
 800e404:	4618      	mov	r0, r3
 800e406:	f7f6 fedf 	bl	80051c8 <lwip_htons>
 800e40a:	4603      	mov	r3, r0
 800e40c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e410:	2b00      	cmp	r3, #0
 800e412:	d110      	bne.n	800e436 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e416:	89db      	ldrh	r3, [r3, #14]
 800e418:	4618      	mov	r0, r3
 800e41a:	f7f6 fed5 	bl	80051c8 <lwip_htons>
 800e41e:	4603      	mov	r3, r0
 800e420:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e424:	2b00      	cmp	r3, #0
 800e426:	d006      	beq.n	800e436 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e42a:	3308      	adds	r3, #8
 800e42c:	2214      	movs	r2, #20
 800e42e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e430:	4618      	mov	r0, r3
 800e432:	f000 fd4c 	bl	800eece <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e438:	88db      	ldrh	r3, [r3, #6]
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	f003 0320 	and.w	r3, r3, #32
 800e440:	2b00      	cmp	r3, #0
 800e442:	bf0c      	ite	eq
 800e444:	2301      	moveq	r3, #1
 800e446:	2300      	movne	r3, #0
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d00e      	beq.n	800e470 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e452:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e454:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e456:	4413      	add	r3, r2
 800e458:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e45a:	8b7a      	ldrh	r2, [r7, #26]
 800e45c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e45e:	429a      	cmp	r2, r3
 800e460:	f0c0 80a0 	bcc.w	800e5a4 <ip4_reass+0x2ac>
 800e464:	8b7b      	ldrh	r3, [r7, #26]
 800e466:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800e46a:	4293      	cmp	r3, r2
 800e46c:	f200 809a 	bhi.w	800e5a4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e470:	69fa      	ldr	r2, [r7, #28]
 800e472:	6879      	ldr	r1, [r7, #4]
 800e474:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e476:	f7ff fdd5 	bl	800e024 <ip_reass_chain_frag_into_datagram_and_validate>
 800e47a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e482:	f000 809b 	beq.w	800e5bc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e486:	4b48      	ldr	r3, [pc, #288]	@ (800e5a8 <ip4_reass+0x2b0>)
 800e488:	881a      	ldrh	r2, [r3, #0]
 800e48a:	8c3b      	ldrh	r3, [r7, #32]
 800e48c:	4413      	add	r3, r2
 800e48e:	b29a      	uxth	r2, r3
 800e490:	4b45      	ldr	r3, [pc, #276]	@ (800e5a8 <ip4_reass+0x2b0>)
 800e492:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e494:	69fb      	ldr	r3, [r7, #28]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d00d      	beq.n	800e4b6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e49a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e49c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e49e:	4413      	add	r3, r2
 800e4a0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a4:	8a7a      	ldrh	r2, [r7, #18]
 800e4a6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4aa:	7f9b      	ldrb	r3, [r3, #30]
 800e4ac:	f043 0301 	orr.w	r3, r3, #1
 800e4b0:	b2da      	uxtb	r2, r3
 800e4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4b4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d171      	bne.n	800e5a0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4be:	8b9b      	ldrh	r3, [r3, #28]
 800e4c0:	3314      	adds	r3, #20
 800e4c2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d8:	3308      	adds	r3, #8
 800e4da:	2214      	movs	r2, #20
 800e4dc:	4619      	mov	r1, r3
 800e4de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4e0:	f000 fcf5 	bl	800eece <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e4e4:	8a3b      	ldrh	r3, [r7, #16]
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7f6 fe6e 	bl	80051c8 <lwip_htons>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4f2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	719a      	strb	r2, [r3, #6]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e500:	2200      	movs	r2, #0
 800e502:	729a      	strb	r2, [r3, #10]
 800e504:	2200      	movs	r2, #0
 800e506:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e50e:	e00d      	b.n	800e52c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e516:	2114      	movs	r1, #20
 800e518:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e51a:	f7f8 f909 	bl	8006730 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e51e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f7f8 fa4d 	bl	80069c0 <pbuf_cat>
      r = iprh->next_pbuf;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800e52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d1ee      	bne.n	800e510 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e532:	4b1e      	ldr	r3, [pc, #120]	@ (800e5ac <ip4_reass+0x2b4>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e538:	429a      	cmp	r2, r3
 800e53a:	d102      	bne.n	800e542 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e53c:	2300      	movs	r3, #0
 800e53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e540:	e010      	b.n	800e564 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e542:	4b1a      	ldr	r3, [pc, #104]	@ (800e5ac <ip4_reass+0x2b4>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e548:	e007      	b.n	800e55a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e550:	429a      	cmp	r2, r3
 800e552:	d006      	beq.n	800e562 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d1f4      	bne.n	800e54a <ip4_reass+0x252>
 800e560:	e000      	b.n	800e564 <ip4_reass+0x26c>
          break;
 800e562:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e566:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e568:	f7ff fd2e 	bl	800dfc8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f7f8 f9ed 	bl	800694c <pbuf_clen>
 800e572:	4603      	mov	r3, r0
 800e574:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e576:	4b0c      	ldr	r3, [pc, #48]	@ (800e5a8 <ip4_reass+0x2b0>)
 800e578:	881b      	ldrh	r3, [r3, #0]
 800e57a:	8c3a      	ldrh	r2, [r7, #32]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d906      	bls.n	800e58e <ip4_reass+0x296>
 800e580:	4b0b      	ldr	r3, [pc, #44]	@ (800e5b0 <ip4_reass+0x2b8>)
 800e582:	f240 229b 	movw	r2, #667	@ 0x29b
 800e586:	490b      	ldr	r1, [pc, #44]	@ (800e5b4 <ip4_reass+0x2bc>)
 800e588:	480b      	ldr	r0, [pc, #44]	@ (800e5b8 <ip4_reass+0x2c0>)
 800e58a:	f000 fbc5 	bl	800ed18 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e58e:	4b06      	ldr	r3, [pc, #24]	@ (800e5a8 <ip4_reass+0x2b0>)
 800e590:	881a      	ldrh	r2, [r3, #0]
 800e592:	8c3b      	ldrh	r3, [r7, #32]
 800e594:	1ad3      	subs	r3, r2, r3
 800e596:	b29a      	uxth	r2, r3
 800e598:	4b03      	ldr	r3, [pc, #12]	@ (800e5a8 <ip4_reass+0x2b0>)
 800e59a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	e038      	b.n	800e612 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	e036      	b.n	800e612 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e5a4:	bf00      	nop
 800e5a6:	e00a      	b.n	800e5be <ip4_reass+0x2c6>
 800e5a8:	20007dc8 	.word	0x20007dc8
 800e5ac:	20007dc4 	.word	0x20007dc4
 800e5b0:	08012268 	.word	0x08012268
 800e5b4:	080123d8 	.word	0x080123d8
 800e5b8:	080122b0 	.word	0x080122b0
    goto nullreturn_ipr;
 800e5bc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d106      	bne.n	800e5d2 <ip4_reass+0x2da>
 800e5c4:	4b15      	ldr	r3, [pc, #84]	@ (800e61c <ip4_reass+0x324>)
 800e5c6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800e5ca:	4915      	ldr	r1, [pc, #84]	@ (800e620 <ip4_reass+0x328>)
 800e5cc:	4815      	ldr	r0, [pc, #84]	@ (800e624 <ip4_reass+0x32c>)
 800e5ce:	f000 fba3 	bl	800ed18 <iprintf>
  if (ipr->p == NULL) {
 800e5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d116      	bne.n	800e608 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e5da:	4b13      	ldr	r3, [pc, #76]	@ (800e628 <ip4_reass+0x330>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d006      	beq.n	800e5f2 <ip4_reass+0x2fa>
 800e5e4:	4b0d      	ldr	r3, [pc, #52]	@ (800e61c <ip4_reass+0x324>)
 800e5e6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800e5ea:	4910      	ldr	r1, [pc, #64]	@ (800e62c <ip4_reass+0x334>)
 800e5ec:	480d      	ldr	r0, [pc, #52]	@ (800e624 <ip4_reass+0x32c>)
 800e5ee:	f000 fb93 	bl	800ed18 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e5f2:	2100      	movs	r1, #0
 800e5f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5f6:	f7ff fce7 	bl	800dfc8 <ip_reass_dequeue_datagram>
 800e5fa:	e006      	b.n	800e60a <ip4_reass+0x312>
    goto nullreturn;
 800e5fc:	bf00      	nop
 800e5fe:	e004      	b.n	800e60a <ip4_reass+0x312>
    goto nullreturn;
 800e600:	bf00      	nop
 800e602:	e002      	b.n	800e60a <ip4_reass+0x312>
      goto nullreturn;
 800e604:	bf00      	nop
 800e606:	e000      	b.n	800e60a <ip4_reass+0x312>
  }

nullreturn:
 800e608:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f7f8 f916 	bl	800683c <pbuf_free>
  return NULL;
 800e610:	2300      	movs	r3, #0
}
 800e612:	4618      	mov	r0, r3
 800e614:	3738      	adds	r7, #56	@ 0x38
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	08012268 	.word	0x08012268
 800e620:	080123f4 	.word	0x080123f4
 800e624:	080122b0 	.word	0x080122b0
 800e628:	20007dc4 	.word	0x20007dc4
 800e62c:	08012400 	.word	0x08012400

0800e630 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e634:	2005      	movs	r0, #5
 800e636:	f7f7 fa3b 	bl	8005ab0 <memp_malloc>
 800e63a:	4603      	mov	r3, r0
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d106      	bne.n	800e65c <ip_frag_free_pbuf_custom_ref+0x1c>
 800e64e:	4b07      	ldr	r3, [pc, #28]	@ (800e66c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e650:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800e654:	4906      	ldr	r1, [pc, #24]	@ (800e670 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e656:	4807      	ldr	r0, [pc, #28]	@ (800e674 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e658:	f000 fb5e 	bl	800ed18 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e65c:	6879      	ldr	r1, [r7, #4]
 800e65e:	2005      	movs	r0, #5
 800e660:	f7f7 fa96 	bl	8005b90 <memp_free>
}
 800e664:	bf00      	nop
 800e666:	3708      	adds	r7, #8
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	08012268 	.word	0x08012268
 800e670:	08012420 	.word	0x08012420
 800e674:	080122b0 	.word	0x080122b0

0800e678 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d106      	bne.n	800e698 <ipfrag_free_pbuf_custom+0x20>
 800e68a:	4b11      	ldr	r3, [pc, #68]	@ (800e6d0 <ipfrag_free_pbuf_custom+0x58>)
 800e68c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800e690:	4910      	ldr	r1, [pc, #64]	@ (800e6d4 <ipfrag_free_pbuf_custom+0x5c>)
 800e692:	4811      	ldr	r0, [pc, #68]	@ (800e6d8 <ipfrag_free_pbuf_custom+0x60>)
 800e694:	f000 fb40 	bl	800ed18 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e698:	68fa      	ldr	r2, [r7, #12]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d006      	beq.n	800e6ae <ipfrag_free_pbuf_custom+0x36>
 800e6a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e6d0 <ipfrag_free_pbuf_custom+0x58>)
 800e6a2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800e6a6:	490d      	ldr	r1, [pc, #52]	@ (800e6dc <ipfrag_free_pbuf_custom+0x64>)
 800e6a8:	480b      	ldr	r0, [pc, #44]	@ (800e6d8 <ipfrag_free_pbuf_custom+0x60>)
 800e6aa:	f000 fb35 	bl	800ed18 <iprintf>
  if (pcr->original != NULL) {
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	695b      	ldr	r3, [r3, #20]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d004      	beq.n	800e6c0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	695b      	ldr	r3, [r3, #20]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7f8 f8be 	bl	800683c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e6c0:	68f8      	ldr	r0, [r7, #12]
 800e6c2:	f7ff ffbd 	bl	800e640 <ip_frag_free_pbuf_custom_ref>
}
 800e6c6:	bf00      	nop
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	08012268 	.word	0x08012268
 800e6d4:	0801242c 	.word	0x0801242c
 800e6d8:	080122b0 	.word	0x080122b0
 800e6dc:	08012438 	.word	0x08012438

0800e6e0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b094      	sub	sp, #80	@ 0x50
 800e6e4:	af02      	add	r7, sp, #8
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e6f6:	3b14      	subs	r3, #20
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	da00      	bge.n	800e6fe <ip4_frag+0x1e>
 800e6fc:	3307      	adds	r3, #7
 800e6fe:	10db      	asrs	r3, r3, #3
 800e700:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e702:	2314      	movs	r3, #20
 800e704:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800e70c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e70e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	f003 030f 	and.w	r3, r3, #15
 800e718:	b2db      	uxtb	r3, r3
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	2b14      	cmp	r3, #20
 800e720:	d002      	beq.n	800e728 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e722:	f06f 0305 	mvn.w	r3, #5
 800e726:	e110      	b.n	800e94a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	895b      	ldrh	r3, [r3, #10]
 800e72c:	2b13      	cmp	r3, #19
 800e72e:	d809      	bhi.n	800e744 <ip4_frag+0x64>
 800e730:	4b88      	ldr	r3, [pc, #544]	@ (800e954 <ip4_frag+0x274>)
 800e732:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800e736:	4988      	ldr	r1, [pc, #544]	@ (800e958 <ip4_frag+0x278>)
 800e738:	4888      	ldr	r0, [pc, #544]	@ (800e95c <ip4_frag+0x27c>)
 800e73a:	f000 faed 	bl	800ed18 <iprintf>
 800e73e:	f06f 0305 	mvn.w	r3, #5
 800e742:	e102      	b.n	800e94a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e746:	88db      	ldrh	r3, [r3, #6]
 800e748:	b29b      	uxth	r3, r3
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7f6 fd3c 	bl	80051c8 <lwip_htons>
 800e750:	4603      	mov	r3, r0
 800e752:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800e754:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e756:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e75a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e75e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e764:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	891b      	ldrh	r3, [r3, #8]
 800e76a:	3b14      	subs	r3, #20
 800e76c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800e770:	e0e1      	b.n	800e936 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e772:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e774:	00db      	lsls	r3, r3, #3
 800e776:	b29b      	uxth	r3, r3
 800e778:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e77c:	4293      	cmp	r3, r2
 800e77e:	bf28      	it	cs
 800e780:	4613      	movcs	r3, r2
 800e782:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e784:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e788:	2114      	movs	r1, #20
 800e78a:	200e      	movs	r0, #14
 800e78c:	f7f7 fd72 	bl	8006274 <pbuf_alloc>
 800e790:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800e792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e794:	2b00      	cmp	r3, #0
 800e796:	f000 80d5 	beq.w	800e944 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e79c:	895b      	ldrh	r3, [r3, #10]
 800e79e:	2b13      	cmp	r3, #19
 800e7a0:	d806      	bhi.n	800e7b0 <ip4_frag+0xd0>
 800e7a2:	4b6c      	ldr	r3, [pc, #432]	@ (800e954 <ip4_frag+0x274>)
 800e7a4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800e7a8:	496d      	ldr	r1, [pc, #436]	@ (800e960 <ip4_frag+0x280>)
 800e7aa:	486c      	ldr	r0, [pc, #432]	@ (800e95c <ip4_frag+0x27c>)
 800e7ac:	f000 fab4 	bl	800ed18 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	2214      	movs	r2, #20
 800e7b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f000 fb88 	bl	800eece <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800e7c4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e7c6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800e7ca:	e064      	b.n	800e896 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	895a      	ldrh	r2, [r3, #10]
 800e7d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e7d2:	1ad3      	subs	r3, r2, r3
 800e7d4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	895b      	ldrh	r3, [r3, #10]
 800e7da:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d906      	bls.n	800e7ee <ip4_frag+0x10e>
 800e7e0:	4b5c      	ldr	r3, [pc, #368]	@ (800e954 <ip4_frag+0x274>)
 800e7e2:	f240 322d 	movw	r2, #813	@ 0x32d
 800e7e6:	495f      	ldr	r1, [pc, #380]	@ (800e964 <ip4_frag+0x284>)
 800e7e8:	485c      	ldr	r0, [pc, #368]	@ (800e95c <ip4_frag+0x27c>)
 800e7ea:	f000 fa95 	bl	800ed18 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e7ee:	8bfa      	ldrh	r2, [r7, #30]
 800e7f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	bf28      	it	cs
 800e7f8:	4613      	movcs	r3, r2
 800e7fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e7fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e802:	2b00      	cmp	r3, #0
 800e804:	d105      	bne.n	800e812 <ip4_frag+0x132>
        poff = 0;
 800e806:	2300      	movs	r3, #0
 800e808:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	60fb      	str	r3, [r7, #12]
        continue;
 800e810:	e041      	b.n	800e896 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e812:	f7ff ff0d 	bl	800e630 <ip_frag_alloc_pbuf_custom_ref>
 800e816:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d103      	bne.n	800e826 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e81e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e820:	f7f8 f80c 	bl	800683c <pbuf_free>
        goto memerr;
 800e824:	e08f      	b.n	800e946 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e826:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e82c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e82e:	4413      	add	r3, r2
 800e830:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800e834:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e838:	9201      	str	r2, [sp, #4]
 800e83a:	9300      	str	r3, [sp, #0]
 800e83c:	4603      	mov	r3, r0
 800e83e:	2241      	movs	r2, #65	@ 0x41
 800e840:	2000      	movs	r0, #0
 800e842:	f7f7 fe41 	bl	80064c8 <pbuf_alloced_custom>
 800e846:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d106      	bne.n	800e85c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e84e:	69b8      	ldr	r0, [r7, #24]
 800e850:	f7ff fef6 	bl	800e640 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e854:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e856:	f7f7 fff1 	bl	800683c <pbuf_free>
        goto memerr;
 800e85a:	e074      	b.n	800e946 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e85c:	68f8      	ldr	r0, [r7, #12]
 800e85e:	f7f8 f88d 	bl	800697c <pbuf_ref>
      pcr->original = p;
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	68fa      	ldr	r2, [r7, #12]
 800e866:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	4a3f      	ldr	r2, [pc, #252]	@ (800e968 <ip4_frag+0x288>)
 800e86c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e86e:	6979      	ldr	r1, [r7, #20]
 800e870:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e872:	f7f8 f8a5 	bl	80069c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e876:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800e87a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e87e:	1ad3      	subs	r3, r2, r3
 800e880:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800e884:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d004      	beq.n	800e896 <ip4_frag+0x1b6>
        poff = 0;
 800e88c:	2300      	movs	r3, #0
 800e88e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e896:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d196      	bne.n	800e7cc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e89e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800e8a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e8a4:	4413      	add	r3, r2
 800e8a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e8ac:	f1a3 0213 	sub.w	r2, r3, #19
 800e8b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	bfcc      	ite	gt
 800e8b8:	2301      	movgt	r3, #1
 800e8ba:	2300      	movle	r3, #0
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e8c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800e8c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800e8ca:	6a3b      	ldr	r3, [r7, #32]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d002      	beq.n	800e8d6 <ip4_frag+0x1f6>
 800e8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d003      	beq.n	800e8de <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e8d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e8d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e8dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e8de:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7f6 fc71 	bl	80051c8 <lwip_htons>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ec:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e8ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e8f0:	3314      	adds	r3, #20
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7f6 fc67 	bl	80051c8 <lwip_htons>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e900:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e904:	2200      	movs	r2, #0
 800e906:	729a      	strb	r2, [r3, #10]
 800e908:	2200      	movs	r2, #0
 800e90a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	695b      	ldr	r3, [r3, #20]
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e914:	68b8      	ldr	r0, [r7, #8]
 800e916:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e918:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e91a:	f7f7 ff8f 	bl	800683c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e91e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e922:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800e92a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800e92e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e930:	4413      	add	r3, r2
 800e932:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800e936:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f47f af19 	bne.w	800e772 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e940:	2300      	movs	r3, #0
 800e942:	e002      	b.n	800e94a <ip4_frag+0x26a>
      goto memerr;
 800e944:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3748      	adds	r7, #72	@ 0x48
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	bf00      	nop
 800e954:	08012268 	.word	0x08012268
 800e958:	08012444 	.word	0x08012444
 800e95c:	080122b0 	.word	0x080122b0
 800e960:	08012460 	.word	0x08012460
 800e964:	08012480 	.word	0x08012480
 800e968:	0800e679 	.word	0x0800e679

0800e96c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b086      	sub	sp, #24
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e976:	230e      	movs	r3, #14
 800e978:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	895b      	ldrh	r3, [r3, #10]
 800e97e:	2b0e      	cmp	r3, #14
 800e980:	d96e      	bls.n	800ea60 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	7bdb      	ldrb	r3, [r3, #15]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d106      	bne.n	800e998 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e990:	3301      	adds	r3, #1
 800e992:	b2da      	uxtb	r2, r3
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	7b1a      	ldrb	r2, [r3, #12]
 800e9a2:	7b5b      	ldrb	r3, [r3, #13]
 800e9a4:	021b      	lsls	r3, r3, #8
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	f003 0301 	and.w	r3, r3, #1
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d023      	beq.n	800e9fe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d10f      	bne.n	800e9de <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	785b      	ldrb	r3, [r3, #1]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d11b      	bne.n	800e9fe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e9ca:	2b5e      	cmp	r3, #94	@ 0x5e
 800e9cc:	d117      	bne.n	800e9fe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	7b5b      	ldrb	r3, [r3, #13]
 800e9d2:	f043 0310 	orr.w	r3, r3, #16
 800e9d6:	b2da      	uxtb	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	735a      	strb	r2, [r3, #13]
 800e9dc:	e00f      	b.n	800e9fe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	2206      	movs	r2, #6
 800e9e2:	4928      	ldr	r1, [pc, #160]	@ (800ea84 <ethernet_input+0x118>)
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f000 f9ec 	bl	800edc2 <memcmp>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d106      	bne.n	800e9fe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	7b5b      	ldrb	r3, [r3, #13]
 800e9f4:	f043 0308 	orr.w	r3, r3, #8
 800e9f8:	b2da      	uxtb	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e9fe:	89fb      	ldrh	r3, [r7, #14]
 800ea00:	2b08      	cmp	r3, #8
 800ea02:	d003      	beq.n	800ea0c <ethernet_input+0xa0>
 800ea04:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800ea08:	d014      	beq.n	800ea34 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ea0a:	e032      	b.n	800ea72 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea12:	f003 0308 	and.w	r3, r3, #8
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d024      	beq.n	800ea64 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ea1a:	8afb      	ldrh	r3, [r7, #22]
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7f7 fe86 	bl	8006730 <pbuf_remove_header>
 800ea24:	4603      	mov	r3, r0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d11e      	bne.n	800ea68 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ea2a:	6839      	ldr	r1, [r7, #0]
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f7fe ff21 	bl	800d874 <ip4_input>
      break;
 800ea32:	e013      	b.n	800ea5c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea3a:	f003 0308 	and.w	r3, r3, #8
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d014      	beq.n	800ea6c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ea42:	8afb      	ldrh	r3, [r7, #22]
 800ea44:	4619      	mov	r1, r3
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7f7 fe72 	bl	8006730 <pbuf_remove_header>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d10e      	bne.n	800ea70 <ethernet_input+0x104>
        etharp_input(p, netif);
 800ea52:	6839      	ldr	r1, [r7, #0]
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f7fe f8c1 	bl	800cbdc <etharp_input>
      break;
 800ea5a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	e00c      	b.n	800ea7a <ethernet_input+0x10e>
    goto free_and_return;
 800ea60:	bf00      	nop
 800ea62:	e006      	b.n	800ea72 <ethernet_input+0x106>
        goto free_and_return;
 800ea64:	bf00      	nop
 800ea66:	e004      	b.n	800ea72 <ethernet_input+0x106>
        goto free_and_return;
 800ea68:	bf00      	nop
 800ea6a:	e002      	b.n	800ea72 <ethernet_input+0x106>
        goto free_and_return;
 800ea6c:	bf00      	nop
 800ea6e:	e000      	b.n	800ea72 <ethernet_input+0x106>
        goto free_and_return;
 800ea70:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f7f7 fee2 	bl	800683c <pbuf_free>
  return ERR_OK;
 800ea78:	2300      	movs	r3, #0
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3718      	adds	r7, #24
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	0801261c 	.word	0x0801261c

0800ea88 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b086      	sub	sp, #24
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	607a      	str	r2, [r7, #4]
 800ea94:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ea96:	8c3b      	ldrh	r3, [r7, #32]
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7f6 fb95 	bl	80051c8 <lwip_htons>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800eaa2:	210e      	movs	r1, #14
 800eaa4:	68b8      	ldr	r0, [r7, #8]
 800eaa6:	f7f7 fe33 	bl	8006710 <pbuf_add_header>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d125      	bne.n	800eafc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	8afa      	ldrh	r2, [r7, #22]
 800eaba:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	2206      	movs	r2, #6
 800eac0:	6839      	ldr	r1, [r7, #0]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f000 fa03 	bl	800eece <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	3306      	adds	r3, #6
 800eacc:	2206      	movs	r2, #6
 800eace:	6879      	ldr	r1, [r7, #4]
 800ead0:	4618      	mov	r0, r3
 800ead2:	f000 f9fc 	bl	800eece <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800eadc:	2b06      	cmp	r3, #6
 800eade:	d006      	beq.n	800eaee <ethernet_output+0x66>
 800eae0:	4b0a      	ldr	r3, [pc, #40]	@ (800eb0c <ethernet_output+0x84>)
 800eae2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800eae6:	490a      	ldr	r1, [pc, #40]	@ (800eb10 <ethernet_output+0x88>)
 800eae8:	480a      	ldr	r0, [pc, #40]	@ (800eb14 <ethernet_output+0x8c>)
 800eaea:	f000 f915 	bl	800ed18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	699b      	ldr	r3, [r3, #24]
 800eaf2:	68b9      	ldr	r1, [r7, #8]
 800eaf4:	68f8      	ldr	r0, [r7, #12]
 800eaf6:	4798      	blx	r3
 800eaf8:	4603      	mov	r3, r0
 800eafa:	e002      	b.n	800eb02 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800eafc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800eafe:	f06f 0301 	mvn.w	r3, #1
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3718      	adds	r7, #24
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	08012490 	.word	0x08012490
 800eb10:	080124c8 	.word	0x080124c8
 800eb14:	080124fc 	.word	0x080124fc

0800eb18 <rand>:
 800eb18:	4b16      	ldr	r3, [pc, #88]	@ (800eb74 <rand+0x5c>)
 800eb1a:	b510      	push	{r4, lr}
 800eb1c:	681c      	ldr	r4, [r3, #0]
 800eb1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800eb20:	b9b3      	cbnz	r3, 800eb50 <rand+0x38>
 800eb22:	2018      	movs	r0, #24
 800eb24:	f000 fa4a 	bl	800efbc <malloc>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	6320      	str	r0, [r4, #48]	@ 0x30
 800eb2c:	b920      	cbnz	r0, 800eb38 <rand+0x20>
 800eb2e:	4b12      	ldr	r3, [pc, #72]	@ (800eb78 <rand+0x60>)
 800eb30:	4812      	ldr	r0, [pc, #72]	@ (800eb7c <rand+0x64>)
 800eb32:	2152      	movs	r1, #82	@ 0x52
 800eb34:	f000 f9da 	bl	800eeec <__assert_func>
 800eb38:	4911      	ldr	r1, [pc, #68]	@ (800eb80 <rand+0x68>)
 800eb3a:	4b12      	ldr	r3, [pc, #72]	@ (800eb84 <rand+0x6c>)
 800eb3c:	e9c0 1300 	strd	r1, r3, [r0]
 800eb40:	4b11      	ldr	r3, [pc, #68]	@ (800eb88 <rand+0x70>)
 800eb42:	6083      	str	r3, [r0, #8]
 800eb44:	230b      	movs	r3, #11
 800eb46:	8183      	strh	r3, [r0, #12]
 800eb48:	2100      	movs	r1, #0
 800eb4a:	2001      	movs	r0, #1
 800eb4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800eb50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800eb52:	480e      	ldr	r0, [pc, #56]	@ (800eb8c <rand+0x74>)
 800eb54:	690b      	ldr	r3, [r1, #16]
 800eb56:	694c      	ldr	r4, [r1, #20]
 800eb58:	4a0d      	ldr	r2, [pc, #52]	@ (800eb90 <rand+0x78>)
 800eb5a:	4358      	muls	r0, r3
 800eb5c:	fb02 0004 	mla	r0, r2, r4, r0
 800eb60:	fba3 3202 	umull	r3, r2, r3, r2
 800eb64:	3301      	adds	r3, #1
 800eb66:	eb40 0002 	adc.w	r0, r0, r2
 800eb6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800eb6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800eb72:	bd10      	pop	{r4, pc}
 800eb74:	20000038 	.word	0x20000038
 800eb78:	0801262a 	.word	0x0801262a
 800eb7c:	08012641 	.word	0x08012641
 800eb80:	abcd330e 	.word	0xabcd330e
 800eb84:	e66d1234 	.word	0xe66d1234
 800eb88:	0005deec 	.word	0x0005deec
 800eb8c:	5851f42d 	.word	0x5851f42d
 800eb90:	4c957f2d 	.word	0x4c957f2d

0800eb94 <std>:
 800eb94:	2300      	movs	r3, #0
 800eb96:	b510      	push	{r4, lr}
 800eb98:	4604      	mov	r4, r0
 800eb9a:	e9c0 3300 	strd	r3, r3, [r0]
 800eb9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eba2:	6083      	str	r3, [r0, #8]
 800eba4:	8181      	strh	r1, [r0, #12]
 800eba6:	6643      	str	r3, [r0, #100]	@ 0x64
 800eba8:	81c2      	strh	r2, [r0, #14]
 800ebaa:	6183      	str	r3, [r0, #24]
 800ebac:	4619      	mov	r1, r3
 800ebae:	2208      	movs	r2, #8
 800ebb0:	305c      	adds	r0, #92	@ 0x5c
 800ebb2:	f000 f916 	bl	800ede2 <memset>
 800ebb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ebec <std+0x58>)
 800ebb8:	6263      	str	r3, [r4, #36]	@ 0x24
 800ebba:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf0 <std+0x5c>)
 800ebbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ebbe:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf4 <std+0x60>)
 800ebc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ebc2:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf8 <std+0x64>)
 800ebc4:	6323      	str	r3, [r4, #48]	@ 0x30
 800ebc6:	4b0d      	ldr	r3, [pc, #52]	@ (800ebfc <std+0x68>)
 800ebc8:	6224      	str	r4, [r4, #32]
 800ebca:	429c      	cmp	r4, r3
 800ebcc:	d006      	beq.n	800ebdc <std+0x48>
 800ebce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ebd2:	4294      	cmp	r4, r2
 800ebd4:	d002      	beq.n	800ebdc <std+0x48>
 800ebd6:	33d0      	adds	r3, #208	@ 0xd0
 800ebd8:	429c      	cmp	r4, r3
 800ebda:	d105      	bne.n	800ebe8 <std+0x54>
 800ebdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ebe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebe4:	f000 b970 	b.w	800eec8 <__retarget_lock_init_recursive>
 800ebe8:	bd10      	pop	{r4, pc}
 800ebea:	bf00      	nop
 800ebec:	0800ed3d 	.word	0x0800ed3d
 800ebf0:	0800ed5f 	.word	0x0800ed5f
 800ebf4:	0800ed97 	.word	0x0800ed97
 800ebf8:	0800edbb 	.word	0x0800edbb
 800ebfc:	20007dcc 	.word	0x20007dcc

0800ec00 <stdio_exit_handler>:
 800ec00:	4a02      	ldr	r2, [pc, #8]	@ (800ec0c <stdio_exit_handler+0xc>)
 800ec02:	4903      	ldr	r1, [pc, #12]	@ (800ec10 <stdio_exit_handler+0x10>)
 800ec04:	4803      	ldr	r0, [pc, #12]	@ (800ec14 <stdio_exit_handler+0x14>)
 800ec06:	f000 b869 	b.w	800ecdc <_fwalk_sglue>
 800ec0a:	bf00      	nop
 800ec0c:	2000002c 	.word	0x2000002c
 800ec10:	0800f7d1 	.word	0x0800f7d1
 800ec14:	2000003c 	.word	0x2000003c

0800ec18 <cleanup_stdio>:
 800ec18:	6841      	ldr	r1, [r0, #4]
 800ec1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ec4c <cleanup_stdio+0x34>)
 800ec1c:	4299      	cmp	r1, r3
 800ec1e:	b510      	push	{r4, lr}
 800ec20:	4604      	mov	r4, r0
 800ec22:	d001      	beq.n	800ec28 <cleanup_stdio+0x10>
 800ec24:	f000 fdd4 	bl	800f7d0 <_fflush_r>
 800ec28:	68a1      	ldr	r1, [r4, #8]
 800ec2a:	4b09      	ldr	r3, [pc, #36]	@ (800ec50 <cleanup_stdio+0x38>)
 800ec2c:	4299      	cmp	r1, r3
 800ec2e:	d002      	beq.n	800ec36 <cleanup_stdio+0x1e>
 800ec30:	4620      	mov	r0, r4
 800ec32:	f000 fdcd 	bl	800f7d0 <_fflush_r>
 800ec36:	68e1      	ldr	r1, [r4, #12]
 800ec38:	4b06      	ldr	r3, [pc, #24]	@ (800ec54 <cleanup_stdio+0x3c>)
 800ec3a:	4299      	cmp	r1, r3
 800ec3c:	d004      	beq.n	800ec48 <cleanup_stdio+0x30>
 800ec3e:	4620      	mov	r0, r4
 800ec40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec44:	f000 bdc4 	b.w	800f7d0 <_fflush_r>
 800ec48:	bd10      	pop	{r4, pc}
 800ec4a:	bf00      	nop
 800ec4c:	20007dcc 	.word	0x20007dcc
 800ec50:	20007e34 	.word	0x20007e34
 800ec54:	20007e9c 	.word	0x20007e9c

0800ec58 <global_stdio_init.part.0>:
 800ec58:	b510      	push	{r4, lr}
 800ec5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ec88 <global_stdio_init.part.0+0x30>)
 800ec5c:	4c0b      	ldr	r4, [pc, #44]	@ (800ec8c <global_stdio_init.part.0+0x34>)
 800ec5e:	4a0c      	ldr	r2, [pc, #48]	@ (800ec90 <global_stdio_init.part.0+0x38>)
 800ec60:	601a      	str	r2, [r3, #0]
 800ec62:	4620      	mov	r0, r4
 800ec64:	2200      	movs	r2, #0
 800ec66:	2104      	movs	r1, #4
 800ec68:	f7ff ff94 	bl	800eb94 <std>
 800ec6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ec70:	2201      	movs	r2, #1
 800ec72:	2109      	movs	r1, #9
 800ec74:	f7ff ff8e 	bl	800eb94 <std>
 800ec78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ec7c:	2202      	movs	r2, #2
 800ec7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec82:	2112      	movs	r1, #18
 800ec84:	f7ff bf86 	b.w	800eb94 <std>
 800ec88:	20007f04 	.word	0x20007f04
 800ec8c:	20007dcc 	.word	0x20007dcc
 800ec90:	0800ec01 	.word	0x0800ec01

0800ec94 <__sfp_lock_acquire>:
 800ec94:	4801      	ldr	r0, [pc, #4]	@ (800ec9c <__sfp_lock_acquire+0x8>)
 800ec96:	f000 b918 	b.w	800eeca <__retarget_lock_acquire_recursive>
 800ec9a:	bf00      	nop
 800ec9c:	20007f0d 	.word	0x20007f0d

0800eca0 <__sfp_lock_release>:
 800eca0:	4801      	ldr	r0, [pc, #4]	@ (800eca8 <__sfp_lock_release+0x8>)
 800eca2:	f000 b913 	b.w	800eecc <__retarget_lock_release_recursive>
 800eca6:	bf00      	nop
 800eca8:	20007f0d 	.word	0x20007f0d

0800ecac <__sinit>:
 800ecac:	b510      	push	{r4, lr}
 800ecae:	4604      	mov	r4, r0
 800ecb0:	f7ff fff0 	bl	800ec94 <__sfp_lock_acquire>
 800ecb4:	6a23      	ldr	r3, [r4, #32]
 800ecb6:	b11b      	cbz	r3, 800ecc0 <__sinit+0x14>
 800ecb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecbc:	f7ff bff0 	b.w	800eca0 <__sfp_lock_release>
 800ecc0:	4b04      	ldr	r3, [pc, #16]	@ (800ecd4 <__sinit+0x28>)
 800ecc2:	6223      	str	r3, [r4, #32]
 800ecc4:	4b04      	ldr	r3, [pc, #16]	@ (800ecd8 <__sinit+0x2c>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d1f5      	bne.n	800ecb8 <__sinit+0xc>
 800eccc:	f7ff ffc4 	bl	800ec58 <global_stdio_init.part.0>
 800ecd0:	e7f2      	b.n	800ecb8 <__sinit+0xc>
 800ecd2:	bf00      	nop
 800ecd4:	0800ec19 	.word	0x0800ec19
 800ecd8:	20007f04 	.word	0x20007f04

0800ecdc <_fwalk_sglue>:
 800ecdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ece0:	4607      	mov	r7, r0
 800ece2:	4688      	mov	r8, r1
 800ece4:	4614      	mov	r4, r2
 800ece6:	2600      	movs	r6, #0
 800ece8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecec:	f1b9 0901 	subs.w	r9, r9, #1
 800ecf0:	d505      	bpl.n	800ecfe <_fwalk_sglue+0x22>
 800ecf2:	6824      	ldr	r4, [r4, #0]
 800ecf4:	2c00      	cmp	r4, #0
 800ecf6:	d1f7      	bne.n	800ece8 <_fwalk_sglue+0xc>
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecfe:	89ab      	ldrh	r3, [r5, #12]
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d907      	bls.n	800ed14 <_fwalk_sglue+0x38>
 800ed04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed08:	3301      	adds	r3, #1
 800ed0a:	d003      	beq.n	800ed14 <_fwalk_sglue+0x38>
 800ed0c:	4629      	mov	r1, r5
 800ed0e:	4638      	mov	r0, r7
 800ed10:	47c0      	blx	r8
 800ed12:	4306      	orrs	r6, r0
 800ed14:	3568      	adds	r5, #104	@ 0x68
 800ed16:	e7e9      	b.n	800ecec <_fwalk_sglue+0x10>

0800ed18 <iprintf>:
 800ed18:	b40f      	push	{r0, r1, r2, r3}
 800ed1a:	b507      	push	{r0, r1, r2, lr}
 800ed1c:	4906      	ldr	r1, [pc, #24]	@ (800ed38 <iprintf+0x20>)
 800ed1e:	ab04      	add	r3, sp, #16
 800ed20:	6808      	ldr	r0, [r1, #0]
 800ed22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed26:	6881      	ldr	r1, [r0, #8]
 800ed28:	9301      	str	r3, [sp, #4]
 800ed2a:	f000 fa27 	bl	800f17c <_vfiprintf_r>
 800ed2e:	b003      	add	sp, #12
 800ed30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed34:	b004      	add	sp, #16
 800ed36:	4770      	bx	lr
 800ed38:	20000038 	.word	0x20000038

0800ed3c <__sread>:
 800ed3c:	b510      	push	{r4, lr}
 800ed3e:	460c      	mov	r4, r1
 800ed40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed44:	f000 f878 	bl	800ee38 <_read_r>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	bfab      	itete	ge
 800ed4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ed4e:	89a3      	ldrhlt	r3, [r4, #12]
 800ed50:	181b      	addge	r3, r3, r0
 800ed52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ed56:	bfac      	ite	ge
 800ed58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ed5a:	81a3      	strhlt	r3, [r4, #12]
 800ed5c:	bd10      	pop	{r4, pc}

0800ed5e <__swrite>:
 800ed5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed62:	461f      	mov	r7, r3
 800ed64:	898b      	ldrh	r3, [r1, #12]
 800ed66:	05db      	lsls	r3, r3, #23
 800ed68:	4605      	mov	r5, r0
 800ed6a:	460c      	mov	r4, r1
 800ed6c:	4616      	mov	r6, r2
 800ed6e:	d505      	bpl.n	800ed7c <__swrite+0x1e>
 800ed70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed74:	2302      	movs	r3, #2
 800ed76:	2200      	movs	r2, #0
 800ed78:	f000 f84c 	bl	800ee14 <_lseek_r>
 800ed7c:	89a3      	ldrh	r3, [r4, #12]
 800ed7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ed86:	81a3      	strh	r3, [r4, #12]
 800ed88:	4632      	mov	r2, r6
 800ed8a:	463b      	mov	r3, r7
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed92:	f000 b863 	b.w	800ee5c <_write_r>

0800ed96 <__sseek>:
 800ed96:	b510      	push	{r4, lr}
 800ed98:	460c      	mov	r4, r1
 800ed9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed9e:	f000 f839 	bl	800ee14 <_lseek_r>
 800eda2:	1c43      	adds	r3, r0, #1
 800eda4:	89a3      	ldrh	r3, [r4, #12]
 800eda6:	bf15      	itete	ne
 800eda8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800edaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800edae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800edb2:	81a3      	strheq	r3, [r4, #12]
 800edb4:	bf18      	it	ne
 800edb6:	81a3      	strhne	r3, [r4, #12]
 800edb8:	bd10      	pop	{r4, pc}

0800edba <__sclose>:
 800edba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edbe:	f000 b819 	b.w	800edf4 <_close_r>

0800edc2 <memcmp>:
 800edc2:	b510      	push	{r4, lr}
 800edc4:	3901      	subs	r1, #1
 800edc6:	4402      	add	r2, r0
 800edc8:	4290      	cmp	r0, r2
 800edca:	d101      	bne.n	800edd0 <memcmp+0xe>
 800edcc:	2000      	movs	r0, #0
 800edce:	e005      	b.n	800eddc <memcmp+0x1a>
 800edd0:	7803      	ldrb	r3, [r0, #0]
 800edd2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800edd6:	42a3      	cmp	r3, r4
 800edd8:	d001      	beq.n	800edde <memcmp+0x1c>
 800edda:	1b18      	subs	r0, r3, r4
 800eddc:	bd10      	pop	{r4, pc}
 800edde:	3001      	adds	r0, #1
 800ede0:	e7f2      	b.n	800edc8 <memcmp+0x6>

0800ede2 <memset>:
 800ede2:	4402      	add	r2, r0
 800ede4:	4603      	mov	r3, r0
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d100      	bne.n	800edec <memset+0xa>
 800edea:	4770      	bx	lr
 800edec:	f803 1b01 	strb.w	r1, [r3], #1
 800edf0:	e7f9      	b.n	800ede6 <memset+0x4>
	...

0800edf4 <_close_r>:
 800edf4:	b538      	push	{r3, r4, r5, lr}
 800edf6:	4d06      	ldr	r5, [pc, #24]	@ (800ee10 <_close_r+0x1c>)
 800edf8:	2300      	movs	r3, #0
 800edfa:	4604      	mov	r4, r0
 800edfc:	4608      	mov	r0, r1
 800edfe:	602b      	str	r3, [r5, #0]
 800ee00:	f7f2 fa94 	bl	800132c <_close>
 800ee04:	1c43      	adds	r3, r0, #1
 800ee06:	d102      	bne.n	800ee0e <_close_r+0x1a>
 800ee08:	682b      	ldr	r3, [r5, #0]
 800ee0a:	b103      	cbz	r3, 800ee0e <_close_r+0x1a>
 800ee0c:	6023      	str	r3, [r4, #0]
 800ee0e:	bd38      	pop	{r3, r4, r5, pc}
 800ee10:	20007f08 	.word	0x20007f08

0800ee14 <_lseek_r>:
 800ee14:	b538      	push	{r3, r4, r5, lr}
 800ee16:	4d07      	ldr	r5, [pc, #28]	@ (800ee34 <_lseek_r+0x20>)
 800ee18:	4604      	mov	r4, r0
 800ee1a:	4608      	mov	r0, r1
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	2200      	movs	r2, #0
 800ee20:	602a      	str	r2, [r5, #0]
 800ee22:	461a      	mov	r2, r3
 800ee24:	f7f2 faa9 	bl	800137a <_lseek>
 800ee28:	1c43      	adds	r3, r0, #1
 800ee2a:	d102      	bne.n	800ee32 <_lseek_r+0x1e>
 800ee2c:	682b      	ldr	r3, [r5, #0]
 800ee2e:	b103      	cbz	r3, 800ee32 <_lseek_r+0x1e>
 800ee30:	6023      	str	r3, [r4, #0]
 800ee32:	bd38      	pop	{r3, r4, r5, pc}
 800ee34:	20007f08 	.word	0x20007f08

0800ee38 <_read_r>:
 800ee38:	b538      	push	{r3, r4, r5, lr}
 800ee3a:	4d07      	ldr	r5, [pc, #28]	@ (800ee58 <_read_r+0x20>)
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	4608      	mov	r0, r1
 800ee40:	4611      	mov	r1, r2
 800ee42:	2200      	movs	r2, #0
 800ee44:	602a      	str	r2, [r5, #0]
 800ee46:	461a      	mov	r2, r3
 800ee48:	f7f2 fa37 	bl	80012ba <_read>
 800ee4c:	1c43      	adds	r3, r0, #1
 800ee4e:	d102      	bne.n	800ee56 <_read_r+0x1e>
 800ee50:	682b      	ldr	r3, [r5, #0]
 800ee52:	b103      	cbz	r3, 800ee56 <_read_r+0x1e>
 800ee54:	6023      	str	r3, [r4, #0]
 800ee56:	bd38      	pop	{r3, r4, r5, pc}
 800ee58:	20007f08 	.word	0x20007f08

0800ee5c <_write_r>:
 800ee5c:	b538      	push	{r3, r4, r5, lr}
 800ee5e:	4d07      	ldr	r5, [pc, #28]	@ (800ee7c <_write_r+0x20>)
 800ee60:	4604      	mov	r4, r0
 800ee62:	4608      	mov	r0, r1
 800ee64:	4611      	mov	r1, r2
 800ee66:	2200      	movs	r2, #0
 800ee68:	602a      	str	r2, [r5, #0]
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	f7f2 fa42 	bl	80012f4 <_write>
 800ee70:	1c43      	adds	r3, r0, #1
 800ee72:	d102      	bne.n	800ee7a <_write_r+0x1e>
 800ee74:	682b      	ldr	r3, [r5, #0]
 800ee76:	b103      	cbz	r3, 800ee7a <_write_r+0x1e>
 800ee78:	6023      	str	r3, [r4, #0]
 800ee7a:	bd38      	pop	{r3, r4, r5, pc}
 800ee7c:	20007f08 	.word	0x20007f08

0800ee80 <__libc_init_array>:
 800ee80:	b570      	push	{r4, r5, r6, lr}
 800ee82:	4d0d      	ldr	r5, [pc, #52]	@ (800eeb8 <__libc_init_array+0x38>)
 800ee84:	4c0d      	ldr	r4, [pc, #52]	@ (800eebc <__libc_init_array+0x3c>)
 800ee86:	1b64      	subs	r4, r4, r5
 800ee88:	10a4      	asrs	r4, r4, #2
 800ee8a:	2600      	movs	r6, #0
 800ee8c:	42a6      	cmp	r6, r4
 800ee8e:	d109      	bne.n	800eea4 <__libc_init_array+0x24>
 800ee90:	4d0b      	ldr	r5, [pc, #44]	@ (800eec0 <__libc_init_array+0x40>)
 800ee92:	4c0c      	ldr	r4, [pc, #48]	@ (800eec4 <__libc_init_array+0x44>)
 800ee94:	f000 fe4a 	bl	800fb2c <_init>
 800ee98:	1b64      	subs	r4, r4, r5
 800ee9a:	10a4      	asrs	r4, r4, #2
 800ee9c:	2600      	movs	r6, #0
 800ee9e:	42a6      	cmp	r6, r4
 800eea0:	d105      	bne.n	800eeae <__libc_init_array+0x2e>
 800eea2:	bd70      	pop	{r4, r5, r6, pc}
 800eea4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eea8:	4798      	blx	r3
 800eeaa:	3601      	adds	r6, #1
 800eeac:	e7ee      	b.n	800ee8c <__libc_init_array+0xc>
 800eeae:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeb2:	4798      	blx	r3
 800eeb4:	3601      	adds	r6, #1
 800eeb6:	e7f2      	b.n	800ee9e <__libc_init_array+0x1e>
 800eeb8:	08012710 	.word	0x08012710
 800eebc:	08012710 	.word	0x08012710
 800eec0:	08012710 	.word	0x08012710
 800eec4:	08012714 	.word	0x08012714

0800eec8 <__retarget_lock_init_recursive>:
 800eec8:	4770      	bx	lr

0800eeca <__retarget_lock_acquire_recursive>:
 800eeca:	4770      	bx	lr

0800eecc <__retarget_lock_release_recursive>:
 800eecc:	4770      	bx	lr

0800eece <memcpy>:
 800eece:	440a      	add	r2, r1
 800eed0:	4291      	cmp	r1, r2
 800eed2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800eed6:	d100      	bne.n	800eeda <memcpy+0xc>
 800eed8:	4770      	bx	lr
 800eeda:	b510      	push	{r4, lr}
 800eedc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eee4:	4291      	cmp	r1, r2
 800eee6:	d1f9      	bne.n	800eedc <memcpy+0xe>
 800eee8:	bd10      	pop	{r4, pc}
	...

0800eeec <__assert_func>:
 800eeec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eeee:	4614      	mov	r4, r2
 800eef0:	461a      	mov	r2, r3
 800eef2:	4b09      	ldr	r3, [pc, #36]	@ (800ef18 <__assert_func+0x2c>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4605      	mov	r5, r0
 800eef8:	68d8      	ldr	r0, [r3, #12]
 800eefa:	b954      	cbnz	r4, 800ef12 <__assert_func+0x26>
 800eefc:	4b07      	ldr	r3, [pc, #28]	@ (800ef1c <__assert_func+0x30>)
 800eefe:	461c      	mov	r4, r3
 800ef00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef04:	9100      	str	r1, [sp, #0]
 800ef06:	462b      	mov	r3, r5
 800ef08:	4905      	ldr	r1, [pc, #20]	@ (800ef20 <__assert_func+0x34>)
 800ef0a:	f000 fc89 	bl	800f820 <fiprintf>
 800ef0e:	f000 fd3d 	bl	800f98c <abort>
 800ef12:	4b04      	ldr	r3, [pc, #16]	@ (800ef24 <__assert_func+0x38>)
 800ef14:	e7f4      	b.n	800ef00 <__assert_func+0x14>
 800ef16:	bf00      	nop
 800ef18:	20000038 	.word	0x20000038
 800ef1c:	080126d4 	.word	0x080126d4
 800ef20:	080126a6 	.word	0x080126a6
 800ef24:	08012699 	.word	0x08012699

0800ef28 <_free_r>:
 800ef28:	b538      	push	{r3, r4, r5, lr}
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	2900      	cmp	r1, #0
 800ef2e:	d041      	beq.n	800efb4 <_free_r+0x8c>
 800ef30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef34:	1f0c      	subs	r4, r1, #4
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	bfb8      	it	lt
 800ef3a:	18e4      	addlt	r4, r4, r3
 800ef3c:	f000 f8e8 	bl	800f110 <__malloc_lock>
 800ef40:	4a1d      	ldr	r2, [pc, #116]	@ (800efb8 <_free_r+0x90>)
 800ef42:	6813      	ldr	r3, [r2, #0]
 800ef44:	b933      	cbnz	r3, 800ef54 <_free_r+0x2c>
 800ef46:	6063      	str	r3, [r4, #4]
 800ef48:	6014      	str	r4, [r2, #0]
 800ef4a:	4628      	mov	r0, r5
 800ef4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef50:	f000 b8e4 	b.w	800f11c <__malloc_unlock>
 800ef54:	42a3      	cmp	r3, r4
 800ef56:	d908      	bls.n	800ef6a <_free_r+0x42>
 800ef58:	6820      	ldr	r0, [r4, #0]
 800ef5a:	1821      	adds	r1, r4, r0
 800ef5c:	428b      	cmp	r3, r1
 800ef5e:	bf01      	itttt	eq
 800ef60:	6819      	ldreq	r1, [r3, #0]
 800ef62:	685b      	ldreq	r3, [r3, #4]
 800ef64:	1809      	addeq	r1, r1, r0
 800ef66:	6021      	streq	r1, [r4, #0]
 800ef68:	e7ed      	b.n	800ef46 <_free_r+0x1e>
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	b10b      	cbz	r3, 800ef74 <_free_r+0x4c>
 800ef70:	42a3      	cmp	r3, r4
 800ef72:	d9fa      	bls.n	800ef6a <_free_r+0x42>
 800ef74:	6811      	ldr	r1, [r2, #0]
 800ef76:	1850      	adds	r0, r2, r1
 800ef78:	42a0      	cmp	r0, r4
 800ef7a:	d10b      	bne.n	800ef94 <_free_r+0x6c>
 800ef7c:	6820      	ldr	r0, [r4, #0]
 800ef7e:	4401      	add	r1, r0
 800ef80:	1850      	adds	r0, r2, r1
 800ef82:	4283      	cmp	r3, r0
 800ef84:	6011      	str	r1, [r2, #0]
 800ef86:	d1e0      	bne.n	800ef4a <_free_r+0x22>
 800ef88:	6818      	ldr	r0, [r3, #0]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	6053      	str	r3, [r2, #4]
 800ef8e:	4408      	add	r0, r1
 800ef90:	6010      	str	r0, [r2, #0]
 800ef92:	e7da      	b.n	800ef4a <_free_r+0x22>
 800ef94:	d902      	bls.n	800ef9c <_free_r+0x74>
 800ef96:	230c      	movs	r3, #12
 800ef98:	602b      	str	r3, [r5, #0]
 800ef9a:	e7d6      	b.n	800ef4a <_free_r+0x22>
 800ef9c:	6820      	ldr	r0, [r4, #0]
 800ef9e:	1821      	adds	r1, r4, r0
 800efa0:	428b      	cmp	r3, r1
 800efa2:	bf04      	itt	eq
 800efa4:	6819      	ldreq	r1, [r3, #0]
 800efa6:	685b      	ldreq	r3, [r3, #4]
 800efa8:	6063      	str	r3, [r4, #4]
 800efaa:	bf04      	itt	eq
 800efac:	1809      	addeq	r1, r1, r0
 800efae:	6021      	streq	r1, [r4, #0]
 800efb0:	6054      	str	r4, [r2, #4]
 800efb2:	e7ca      	b.n	800ef4a <_free_r+0x22>
 800efb4:	bd38      	pop	{r3, r4, r5, pc}
 800efb6:	bf00      	nop
 800efb8:	20007f14 	.word	0x20007f14

0800efbc <malloc>:
 800efbc:	4b02      	ldr	r3, [pc, #8]	@ (800efc8 <malloc+0xc>)
 800efbe:	4601      	mov	r1, r0
 800efc0:	6818      	ldr	r0, [r3, #0]
 800efc2:	f000 b825 	b.w	800f010 <_malloc_r>
 800efc6:	bf00      	nop
 800efc8:	20000038 	.word	0x20000038

0800efcc <sbrk_aligned>:
 800efcc:	b570      	push	{r4, r5, r6, lr}
 800efce:	4e0f      	ldr	r6, [pc, #60]	@ (800f00c <sbrk_aligned+0x40>)
 800efd0:	460c      	mov	r4, r1
 800efd2:	6831      	ldr	r1, [r6, #0]
 800efd4:	4605      	mov	r5, r0
 800efd6:	b911      	cbnz	r1, 800efde <sbrk_aligned+0x12>
 800efd8:	f000 fcc8 	bl	800f96c <_sbrk_r>
 800efdc:	6030      	str	r0, [r6, #0]
 800efde:	4621      	mov	r1, r4
 800efe0:	4628      	mov	r0, r5
 800efe2:	f000 fcc3 	bl	800f96c <_sbrk_r>
 800efe6:	1c43      	adds	r3, r0, #1
 800efe8:	d103      	bne.n	800eff2 <sbrk_aligned+0x26>
 800efea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800efee:	4620      	mov	r0, r4
 800eff0:	bd70      	pop	{r4, r5, r6, pc}
 800eff2:	1cc4      	adds	r4, r0, #3
 800eff4:	f024 0403 	bic.w	r4, r4, #3
 800eff8:	42a0      	cmp	r0, r4
 800effa:	d0f8      	beq.n	800efee <sbrk_aligned+0x22>
 800effc:	1a21      	subs	r1, r4, r0
 800effe:	4628      	mov	r0, r5
 800f000:	f000 fcb4 	bl	800f96c <_sbrk_r>
 800f004:	3001      	adds	r0, #1
 800f006:	d1f2      	bne.n	800efee <sbrk_aligned+0x22>
 800f008:	e7ef      	b.n	800efea <sbrk_aligned+0x1e>
 800f00a:	bf00      	nop
 800f00c:	20007f10 	.word	0x20007f10

0800f010 <_malloc_r>:
 800f010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f014:	1ccd      	adds	r5, r1, #3
 800f016:	f025 0503 	bic.w	r5, r5, #3
 800f01a:	3508      	adds	r5, #8
 800f01c:	2d0c      	cmp	r5, #12
 800f01e:	bf38      	it	cc
 800f020:	250c      	movcc	r5, #12
 800f022:	2d00      	cmp	r5, #0
 800f024:	4606      	mov	r6, r0
 800f026:	db01      	blt.n	800f02c <_malloc_r+0x1c>
 800f028:	42a9      	cmp	r1, r5
 800f02a:	d904      	bls.n	800f036 <_malloc_r+0x26>
 800f02c:	230c      	movs	r3, #12
 800f02e:	6033      	str	r3, [r6, #0]
 800f030:	2000      	movs	r0, #0
 800f032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f036:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f10c <_malloc_r+0xfc>
 800f03a:	f000 f869 	bl	800f110 <__malloc_lock>
 800f03e:	f8d8 3000 	ldr.w	r3, [r8]
 800f042:	461c      	mov	r4, r3
 800f044:	bb44      	cbnz	r4, 800f098 <_malloc_r+0x88>
 800f046:	4629      	mov	r1, r5
 800f048:	4630      	mov	r0, r6
 800f04a:	f7ff ffbf 	bl	800efcc <sbrk_aligned>
 800f04e:	1c43      	adds	r3, r0, #1
 800f050:	4604      	mov	r4, r0
 800f052:	d158      	bne.n	800f106 <_malloc_r+0xf6>
 800f054:	f8d8 4000 	ldr.w	r4, [r8]
 800f058:	4627      	mov	r7, r4
 800f05a:	2f00      	cmp	r7, #0
 800f05c:	d143      	bne.n	800f0e6 <_malloc_r+0xd6>
 800f05e:	2c00      	cmp	r4, #0
 800f060:	d04b      	beq.n	800f0fa <_malloc_r+0xea>
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	4639      	mov	r1, r7
 800f066:	4630      	mov	r0, r6
 800f068:	eb04 0903 	add.w	r9, r4, r3
 800f06c:	f000 fc7e 	bl	800f96c <_sbrk_r>
 800f070:	4581      	cmp	r9, r0
 800f072:	d142      	bne.n	800f0fa <_malloc_r+0xea>
 800f074:	6821      	ldr	r1, [r4, #0]
 800f076:	1a6d      	subs	r5, r5, r1
 800f078:	4629      	mov	r1, r5
 800f07a:	4630      	mov	r0, r6
 800f07c:	f7ff ffa6 	bl	800efcc <sbrk_aligned>
 800f080:	3001      	adds	r0, #1
 800f082:	d03a      	beq.n	800f0fa <_malloc_r+0xea>
 800f084:	6823      	ldr	r3, [r4, #0]
 800f086:	442b      	add	r3, r5
 800f088:	6023      	str	r3, [r4, #0]
 800f08a:	f8d8 3000 	ldr.w	r3, [r8]
 800f08e:	685a      	ldr	r2, [r3, #4]
 800f090:	bb62      	cbnz	r2, 800f0ec <_malloc_r+0xdc>
 800f092:	f8c8 7000 	str.w	r7, [r8]
 800f096:	e00f      	b.n	800f0b8 <_malloc_r+0xa8>
 800f098:	6822      	ldr	r2, [r4, #0]
 800f09a:	1b52      	subs	r2, r2, r5
 800f09c:	d420      	bmi.n	800f0e0 <_malloc_r+0xd0>
 800f09e:	2a0b      	cmp	r2, #11
 800f0a0:	d917      	bls.n	800f0d2 <_malloc_r+0xc2>
 800f0a2:	1961      	adds	r1, r4, r5
 800f0a4:	42a3      	cmp	r3, r4
 800f0a6:	6025      	str	r5, [r4, #0]
 800f0a8:	bf18      	it	ne
 800f0aa:	6059      	strne	r1, [r3, #4]
 800f0ac:	6863      	ldr	r3, [r4, #4]
 800f0ae:	bf08      	it	eq
 800f0b0:	f8c8 1000 	streq.w	r1, [r8]
 800f0b4:	5162      	str	r2, [r4, r5]
 800f0b6:	604b      	str	r3, [r1, #4]
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	f000 f82f 	bl	800f11c <__malloc_unlock>
 800f0be:	f104 000b 	add.w	r0, r4, #11
 800f0c2:	1d23      	adds	r3, r4, #4
 800f0c4:	f020 0007 	bic.w	r0, r0, #7
 800f0c8:	1ac2      	subs	r2, r0, r3
 800f0ca:	bf1c      	itt	ne
 800f0cc:	1a1b      	subne	r3, r3, r0
 800f0ce:	50a3      	strne	r3, [r4, r2]
 800f0d0:	e7af      	b.n	800f032 <_malloc_r+0x22>
 800f0d2:	6862      	ldr	r2, [r4, #4]
 800f0d4:	42a3      	cmp	r3, r4
 800f0d6:	bf0c      	ite	eq
 800f0d8:	f8c8 2000 	streq.w	r2, [r8]
 800f0dc:	605a      	strne	r2, [r3, #4]
 800f0de:	e7eb      	b.n	800f0b8 <_malloc_r+0xa8>
 800f0e0:	4623      	mov	r3, r4
 800f0e2:	6864      	ldr	r4, [r4, #4]
 800f0e4:	e7ae      	b.n	800f044 <_malloc_r+0x34>
 800f0e6:	463c      	mov	r4, r7
 800f0e8:	687f      	ldr	r7, [r7, #4]
 800f0ea:	e7b6      	b.n	800f05a <_malloc_r+0x4a>
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	42a3      	cmp	r3, r4
 800f0f2:	d1fb      	bne.n	800f0ec <_malloc_r+0xdc>
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	6053      	str	r3, [r2, #4]
 800f0f8:	e7de      	b.n	800f0b8 <_malloc_r+0xa8>
 800f0fa:	230c      	movs	r3, #12
 800f0fc:	6033      	str	r3, [r6, #0]
 800f0fe:	4630      	mov	r0, r6
 800f100:	f000 f80c 	bl	800f11c <__malloc_unlock>
 800f104:	e794      	b.n	800f030 <_malloc_r+0x20>
 800f106:	6005      	str	r5, [r0, #0]
 800f108:	e7d6      	b.n	800f0b8 <_malloc_r+0xa8>
 800f10a:	bf00      	nop
 800f10c:	20007f14 	.word	0x20007f14

0800f110 <__malloc_lock>:
 800f110:	4801      	ldr	r0, [pc, #4]	@ (800f118 <__malloc_lock+0x8>)
 800f112:	f7ff beda 	b.w	800eeca <__retarget_lock_acquire_recursive>
 800f116:	bf00      	nop
 800f118:	20007f0c 	.word	0x20007f0c

0800f11c <__malloc_unlock>:
 800f11c:	4801      	ldr	r0, [pc, #4]	@ (800f124 <__malloc_unlock+0x8>)
 800f11e:	f7ff bed5 	b.w	800eecc <__retarget_lock_release_recursive>
 800f122:	bf00      	nop
 800f124:	20007f0c 	.word	0x20007f0c

0800f128 <__sfputc_r>:
 800f128:	6893      	ldr	r3, [r2, #8]
 800f12a:	3b01      	subs	r3, #1
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	b410      	push	{r4}
 800f130:	6093      	str	r3, [r2, #8]
 800f132:	da08      	bge.n	800f146 <__sfputc_r+0x1e>
 800f134:	6994      	ldr	r4, [r2, #24]
 800f136:	42a3      	cmp	r3, r4
 800f138:	db01      	blt.n	800f13e <__sfputc_r+0x16>
 800f13a:	290a      	cmp	r1, #10
 800f13c:	d103      	bne.n	800f146 <__sfputc_r+0x1e>
 800f13e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f142:	f000 bb7f 	b.w	800f844 <__swbuf_r>
 800f146:	6813      	ldr	r3, [r2, #0]
 800f148:	1c58      	adds	r0, r3, #1
 800f14a:	6010      	str	r0, [r2, #0]
 800f14c:	7019      	strb	r1, [r3, #0]
 800f14e:	4608      	mov	r0, r1
 800f150:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f154:	4770      	bx	lr

0800f156 <__sfputs_r>:
 800f156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f158:	4606      	mov	r6, r0
 800f15a:	460f      	mov	r7, r1
 800f15c:	4614      	mov	r4, r2
 800f15e:	18d5      	adds	r5, r2, r3
 800f160:	42ac      	cmp	r4, r5
 800f162:	d101      	bne.n	800f168 <__sfputs_r+0x12>
 800f164:	2000      	movs	r0, #0
 800f166:	e007      	b.n	800f178 <__sfputs_r+0x22>
 800f168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f16c:	463a      	mov	r2, r7
 800f16e:	4630      	mov	r0, r6
 800f170:	f7ff ffda 	bl	800f128 <__sfputc_r>
 800f174:	1c43      	adds	r3, r0, #1
 800f176:	d1f3      	bne.n	800f160 <__sfputs_r+0xa>
 800f178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f17c <_vfiprintf_r>:
 800f17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f180:	460d      	mov	r5, r1
 800f182:	b09d      	sub	sp, #116	@ 0x74
 800f184:	4614      	mov	r4, r2
 800f186:	4698      	mov	r8, r3
 800f188:	4606      	mov	r6, r0
 800f18a:	b118      	cbz	r0, 800f194 <_vfiprintf_r+0x18>
 800f18c:	6a03      	ldr	r3, [r0, #32]
 800f18e:	b90b      	cbnz	r3, 800f194 <_vfiprintf_r+0x18>
 800f190:	f7ff fd8c 	bl	800ecac <__sinit>
 800f194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f196:	07d9      	lsls	r1, r3, #31
 800f198:	d405      	bmi.n	800f1a6 <_vfiprintf_r+0x2a>
 800f19a:	89ab      	ldrh	r3, [r5, #12]
 800f19c:	059a      	lsls	r2, r3, #22
 800f19e:	d402      	bmi.n	800f1a6 <_vfiprintf_r+0x2a>
 800f1a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1a2:	f7ff fe92 	bl	800eeca <__retarget_lock_acquire_recursive>
 800f1a6:	89ab      	ldrh	r3, [r5, #12]
 800f1a8:	071b      	lsls	r3, r3, #28
 800f1aa:	d501      	bpl.n	800f1b0 <_vfiprintf_r+0x34>
 800f1ac:	692b      	ldr	r3, [r5, #16]
 800f1ae:	b99b      	cbnz	r3, 800f1d8 <_vfiprintf_r+0x5c>
 800f1b0:	4629      	mov	r1, r5
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	f000 fb84 	bl	800f8c0 <__swsetup_r>
 800f1b8:	b170      	cbz	r0, 800f1d8 <_vfiprintf_r+0x5c>
 800f1ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1bc:	07dc      	lsls	r4, r3, #31
 800f1be:	d504      	bpl.n	800f1ca <_vfiprintf_r+0x4e>
 800f1c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f1c4:	b01d      	add	sp, #116	@ 0x74
 800f1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ca:	89ab      	ldrh	r3, [r5, #12]
 800f1cc:	0598      	lsls	r0, r3, #22
 800f1ce:	d4f7      	bmi.n	800f1c0 <_vfiprintf_r+0x44>
 800f1d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1d2:	f7ff fe7b 	bl	800eecc <__retarget_lock_release_recursive>
 800f1d6:	e7f3      	b.n	800f1c0 <_vfiprintf_r+0x44>
 800f1d8:	2300      	movs	r3, #0
 800f1da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1dc:	2320      	movs	r3, #32
 800f1de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f1e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1e6:	2330      	movs	r3, #48	@ 0x30
 800f1e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f398 <_vfiprintf_r+0x21c>
 800f1ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f1f0:	f04f 0901 	mov.w	r9, #1
 800f1f4:	4623      	mov	r3, r4
 800f1f6:	469a      	mov	sl, r3
 800f1f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1fc:	b10a      	cbz	r2, 800f202 <_vfiprintf_r+0x86>
 800f1fe:	2a25      	cmp	r2, #37	@ 0x25
 800f200:	d1f9      	bne.n	800f1f6 <_vfiprintf_r+0x7a>
 800f202:	ebba 0b04 	subs.w	fp, sl, r4
 800f206:	d00b      	beq.n	800f220 <_vfiprintf_r+0xa4>
 800f208:	465b      	mov	r3, fp
 800f20a:	4622      	mov	r2, r4
 800f20c:	4629      	mov	r1, r5
 800f20e:	4630      	mov	r0, r6
 800f210:	f7ff ffa1 	bl	800f156 <__sfputs_r>
 800f214:	3001      	adds	r0, #1
 800f216:	f000 80a7 	beq.w	800f368 <_vfiprintf_r+0x1ec>
 800f21a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f21c:	445a      	add	r2, fp
 800f21e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f220:	f89a 3000 	ldrb.w	r3, [sl]
 800f224:	2b00      	cmp	r3, #0
 800f226:	f000 809f 	beq.w	800f368 <_vfiprintf_r+0x1ec>
 800f22a:	2300      	movs	r3, #0
 800f22c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f234:	f10a 0a01 	add.w	sl, sl, #1
 800f238:	9304      	str	r3, [sp, #16]
 800f23a:	9307      	str	r3, [sp, #28]
 800f23c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f240:	931a      	str	r3, [sp, #104]	@ 0x68
 800f242:	4654      	mov	r4, sl
 800f244:	2205      	movs	r2, #5
 800f246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f24a:	4853      	ldr	r0, [pc, #332]	@ (800f398 <_vfiprintf_r+0x21c>)
 800f24c:	f7f0 ffe0 	bl	8000210 <memchr>
 800f250:	9a04      	ldr	r2, [sp, #16]
 800f252:	b9d8      	cbnz	r0, 800f28c <_vfiprintf_r+0x110>
 800f254:	06d1      	lsls	r1, r2, #27
 800f256:	bf44      	itt	mi
 800f258:	2320      	movmi	r3, #32
 800f25a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f25e:	0713      	lsls	r3, r2, #28
 800f260:	bf44      	itt	mi
 800f262:	232b      	movmi	r3, #43	@ 0x2b
 800f264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f268:	f89a 3000 	ldrb.w	r3, [sl]
 800f26c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f26e:	d015      	beq.n	800f29c <_vfiprintf_r+0x120>
 800f270:	9a07      	ldr	r2, [sp, #28]
 800f272:	4654      	mov	r4, sl
 800f274:	2000      	movs	r0, #0
 800f276:	f04f 0c0a 	mov.w	ip, #10
 800f27a:	4621      	mov	r1, r4
 800f27c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f280:	3b30      	subs	r3, #48	@ 0x30
 800f282:	2b09      	cmp	r3, #9
 800f284:	d94b      	bls.n	800f31e <_vfiprintf_r+0x1a2>
 800f286:	b1b0      	cbz	r0, 800f2b6 <_vfiprintf_r+0x13a>
 800f288:	9207      	str	r2, [sp, #28]
 800f28a:	e014      	b.n	800f2b6 <_vfiprintf_r+0x13a>
 800f28c:	eba0 0308 	sub.w	r3, r0, r8
 800f290:	fa09 f303 	lsl.w	r3, r9, r3
 800f294:	4313      	orrs	r3, r2
 800f296:	9304      	str	r3, [sp, #16]
 800f298:	46a2      	mov	sl, r4
 800f29a:	e7d2      	b.n	800f242 <_vfiprintf_r+0xc6>
 800f29c:	9b03      	ldr	r3, [sp, #12]
 800f29e:	1d19      	adds	r1, r3, #4
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	9103      	str	r1, [sp, #12]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	bfbb      	ittet	lt
 800f2a8:	425b      	neglt	r3, r3
 800f2aa:	f042 0202 	orrlt.w	r2, r2, #2
 800f2ae:	9307      	strge	r3, [sp, #28]
 800f2b0:	9307      	strlt	r3, [sp, #28]
 800f2b2:	bfb8      	it	lt
 800f2b4:	9204      	strlt	r2, [sp, #16]
 800f2b6:	7823      	ldrb	r3, [r4, #0]
 800f2b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2ba:	d10a      	bne.n	800f2d2 <_vfiprintf_r+0x156>
 800f2bc:	7863      	ldrb	r3, [r4, #1]
 800f2be:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2c0:	d132      	bne.n	800f328 <_vfiprintf_r+0x1ac>
 800f2c2:	9b03      	ldr	r3, [sp, #12]
 800f2c4:	1d1a      	adds	r2, r3, #4
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	9203      	str	r2, [sp, #12]
 800f2ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2ce:	3402      	adds	r4, #2
 800f2d0:	9305      	str	r3, [sp, #20]
 800f2d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f3a8 <_vfiprintf_r+0x22c>
 800f2d6:	7821      	ldrb	r1, [r4, #0]
 800f2d8:	2203      	movs	r2, #3
 800f2da:	4650      	mov	r0, sl
 800f2dc:	f7f0 ff98 	bl	8000210 <memchr>
 800f2e0:	b138      	cbz	r0, 800f2f2 <_vfiprintf_r+0x176>
 800f2e2:	9b04      	ldr	r3, [sp, #16]
 800f2e4:	eba0 000a 	sub.w	r0, r0, sl
 800f2e8:	2240      	movs	r2, #64	@ 0x40
 800f2ea:	4082      	lsls	r2, r0
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	3401      	adds	r4, #1
 800f2f0:	9304      	str	r3, [sp, #16]
 800f2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2f6:	4829      	ldr	r0, [pc, #164]	@ (800f39c <_vfiprintf_r+0x220>)
 800f2f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f2fc:	2206      	movs	r2, #6
 800f2fe:	f7f0 ff87 	bl	8000210 <memchr>
 800f302:	2800      	cmp	r0, #0
 800f304:	d03f      	beq.n	800f386 <_vfiprintf_r+0x20a>
 800f306:	4b26      	ldr	r3, [pc, #152]	@ (800f3a0 <_vfiprintf_r+0x224>)
 800f308:	bb1b      	cbnz	r3, 800f352 <_vfiprintf_r+0x1d6>
 800f30a:	9b03      	ldr	r3, [sp, #12]
 800f30c:	3307      	adds	r3, #7
 800f30e:	f023 0307 	bic.w	r3, r3, #7
 800f312:	3308      	adds	r3, #8
 800f314:	9303      	str	r3, [sp, #12]
 800f316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f318:	443b      	add	r3, r7
 800f31a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f31c:	e76a      	b.n	800f1f4 <_vfiprintf_r+0x78>
 800f31e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f322:	460c      	mov	r4, r1
 800f324:	2001      	movs	r0, #1
 800f326:	e7a8      	b.n	800f27a <_vfiprintf_r+0xfe>
 800f328:	2300      	movs	r3, #0
 800f32a:	3401      	adds	r4, #1
 800f32c:	9305      	str	r3, [sp, #20]
 800f32e:	4619      	mov	r1, r3
 800f330:	f04f 0c0a 	mov.w	ip, #10
 800f334:	4620      	mov	r0, r4
 800f336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f33a:	3a30      	subs	r2, #48	@ 0x30
 800f33c:	2a09      	cmp	r2, #9
 800f33e:	d903      	bls.n	800f348 <_vfiprintf_r+0x1cc>
 800f340:	2b00      	cmp	r3, #0
 800f342:	d0c6      	beq.n	800f2d2 <_vfiprintf_r+0x156>
 800f344:	9105      	str	r1, [sp, #20]
 800f346:	e7c4      	b.n	800f2d2 <_vfiprintf_r+0x156>
 800f348:	fb0c 2101 	mla	r1, ip, r1, r2
 800f34c:	4604      	mov	r4, r0
 800f34e:	2301      	movs	r3, #1
 800f350:	e7f0      	b.n	800f334 <_vfiprintf_r+0x1b8>
 800f352:	ab03      	add	r3, sp, #12
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	462a      	mov	r2, r5
 800f358:	4b12      	ldr	r3, [pc, #72]	@ (800f3a4 <_vfiprintf_r+0x228>)
 800f35a:	a904      	add	r1, sp, #16
 800f35c:	4630      	mov	r0, r6
 800f35e:	f3af 8000 	nop.w
 800f362:	4607      	mov	r7, r0
 800f364:	1c78      	adds	r0, r7, #1
 800f366:	d1d6      	bne.n	800f316 <_vfiprintf_r+0x19a>
 800f368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f36a:	07d9      	lsls	r1, r3, #31
 800f36c:	d405      	bmi.n	800f37a <_vfiprintf_r+0x1fe>
 800f36e:	89ab      	ldrh	r3, [r5, #12]
 800f370:	059a      	lsls	r2, r3, #22
 800f372:	d402      	bmi.n	800f37a <_vfiprintf_r+0x1fe>
 800f374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f376:	f7ff fda9 	bl	800eecc <__retarget_lock_release_recursive>
 800f37a:	89ab      	ldrh	r3, [r5, #12]
 800f37c:	065b      	lsls	r3, r3, #25
 800f37e:	f53f af1f 	bmi.w	800f1c0 <_vfiprintf_r+0x44>
 800f382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f384:	e71e      	b.n	800f1c4 <_vfiprintf_r+0x48>
 800f386:	ab03      	add	r3, sp, #12
 800f388:	9300      	str	r3, [sp, #0]
 800f38a:	462a      	mov	r2, r5
 800f38c:	4b05      	ldr	r3, [pc, #20]	@ (800f3a4 <_vfiprintf_r+0x228>)
 800f38e:	a904      	add	r1, sp, #16
 800f390:	4630      	mov	r0, r6
 800f392:	f000 f879 	bl	800f488 <_printf_i>
 800f396:	e7e4      	b.n	800f362 <_vfiprintf_r+0x1e6>
 800f398:	080126d5 	.word	0x080126d5
 800f39c:	080126df 	.word	0x080126df
 800f3a0:	00000000 	.word	0x00000000
 800f3a4:	0800f157 	.word	0x0800f157
 800f3a8:	080126db 	.word	0x080126db

0800f3ac <_printf_common>:
 800f3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3b0:	4616      	mov	r6, r2
 800f3b2:	4698      	mov	r8, r3
 800f3b4:	688a      	ldr	r2, [r1, #8]
 800f3b6:	690b      	ldr	r3, [r1, #16]
 800f3b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	bfb8      	it	lt
 800f3c0:	4613      	movlt	r3, r2
 800f3c2:	6033      	str	r3, [r6, #0]
 800f3c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f3c8:	4607      	mov	r7, r0
 800f3ca:	460c      	mov	r4, r1
 800f3cc:	b10a      	cbz	r2, 800f3d2 <_printf_common+0x26>
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	6033      	str	r3, [r6, #0]
 800f3d2:	6823      	ldr	r3, [r4, #0]
 800f3d4:	0699      	lsls	r1, r3, #26
 800f3d6:	bf42      	ittt	mi
 800f3d8:	6833      	ldrmi	r3, [r6, #0]
 800f3da:	3302      	addmi	r3, #2
 800f3dc:	6033      	strmi	r3, [r6, #0]
 800f3de:	6825      	ldr	r5, [r4, #0]
 800f3e0:	f015 0506 	ands.w	r5, r5, #6
 800f3e4:	d106      	bne.n	800f3f4 <_printf_common+0x48>
 800f3e6:	f104 0a19 	add.w	sl, r4, #25
 800f3ea:	68e3      	ldr	r3, [r4, #12]
 800f3ec:	6832      	ldr	r2, [r6, #0]
 800f3ee:	1a9b      	subs	r3, r3, r2
 800f3f0:	42ab      	cmp	r3, r5
 800f3f2:	dc26      	bgt.n	800f442 <_printf_common+0x96>
 800f3f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f3f8:	6822      	ldr	r2, [r4, #0]
 800f3fa:	3b00      	subs	r3, #0
 800f3fc:	bf18      	it	ne
 800f3fe:	2301      	movne	r3, #1
 800f400:	0692      	lsls	r2, r2, #26
 800f402:	d42b      	bmi.n	800f45c <_printf_common+0xb0>
 800f404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f408:	4641      	mov	r1, r8
 800f40a:	4638      	mov	r0, r7
 800f40c:	47c8      	blx	r9
 800f40e:	3001      	adds	r0, #1
 800f410:	d01e      	beq.n	800f450 <_printf_common+0xa4>
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	6922      	ldr	r2, [r4, #16]
 800f416:	f003 0306 	and.w	r3, r3, #6
 800f41a:	2b04      	cmp	r3, #4
 800f41c:	bf02      	ittt	eq
 800f41e:	68e5      	ldreq	r5, [r4, #12]
 800f420:	6833      	ldreq	r3, [r6, #0]
 800f422:	1aed      	subeq	r5, r5, r3
 800f424:	68a3      	ldr	r3, [r4, #8]
 800f426:	bf0c      	ite	eq
 800f428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f42c:	2500      	movne	r5, #0
 800f42e:	4293      	cmp	r3, r2
 800f430:	bfc4      	itt	gt
 800f432:	1a9b      	subgt	r3, r3, r2
 800f434:	18ed      	addgt	r5, r5, r3
 800f436:	2600      	movs	r6, #0
 800f438:	341a      	adds	r4, #26
 800f43a:	42b5      	cmp	r5, r6
 800f43c:	d11a      	bne.n	800f474 <_printf_common+0xc8>
 800f43e:	2000      	movs	r0, #0
 800f440:	e008      	b.n	800f454 <_printf_common+0xa8>
 800f442:	2301      	movs	r3, #1
 800f444:	4652      	mov	r2, sl
 800f446:	4641      	mov	r1, r8
 800f448:	4638      	mov	r0, r7
 800f44a:	47c8      	blx	r9
 800f44c:	3001      	adds	r0, #1
 800f44e:	d103      	bne.n	800f458 <_printf_common+0xac>
 800f450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f458:	3501      	adds	r5, #1
 800f45a:	e7c6      	b.n	800f3ea <_printf_common+0x3e>
 800f45c:	18e1      	adds	r1, r4, r3
 800f45e:	1c5a      	adds	r2, r3, #1
 800f460:	2030      	movs	r0, #48	@ 0x30
 800f462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f466:	4422      	add	r2, r4
 800f468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f46c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f470:	3302      	adds	r3, #2
 800f472:	e7c7      	b.n	800f404 <_printf_common+0x58>
 800f474:	2301      	movs	r3, #1
 800f476:	4622      	mov	r2, r4
 800f478:	4641      	mov	r1, r8
 800f47a:	4638      	mov	r0, r7
 800f47c:	47c8      	blx	r9
 800f47e:	3001      	adds	r0, #1
 800f480:	d0e6      	beq.n	800f450 <_printf_common+0xa4>
 800f482:	3601      	adds	r6, #1
 800f484:	e7d9      	b.n	800f43a <_printf_common+0x8e>
	...

0800f488 <_printf_i>:
 800f488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f48c:	7e0f      	ldrb	r7, [r1, #24]
 800f48e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f490:	2f78      	cmp	r7, #120	@ 0x78
 800f492:	4691      	mov	r9, r2
 800f494:	4680      	mov	r8, r0
 800f496:	460c      	mov	r4, r1
 800f498:	469a      	mov	sl, r3
 800f49a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f49e:	d807      	bhi.n	800f4b0 <_printf_i+0x28>
 800f4a0:	2f62      	cmp	r7, #98	@ 0x62
 800f4a2:	d80a      	bhi.n	800f4ba <_printf_i+0x32>
 800f4a4:	2f00      	cmp	r7, #0
 800f4a6:	f000 80d2 	beq.w	800f64e <_printf_i+0x1c6>
 800f4aa:	2f58      	cmp	r7, #88	@ 0x58
 800f4ac:	f000 80b9 	beq.w	800f622 <_printf_i+0x19a>
 800f4b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f4b8:	e03a      	b.n	800f530 <_printf_i+0xa8>
 800f4ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f4be:	2b15      	cmp	r3, #21
 800f4c0:	d8f6      	bhi.n	800f4b0 <_printf_i+0x28>
 800f4c2:	a101      	add	r1, pc, #4	@ (adr r1, 800f4c8 <_printf_i+0x40>)
 800f4c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4c8:	0800f521 	.word	0x0800f521
 800f4cc:	0800f535 	.word	0x0800f535
 800f4d0:	0800f4b1 	.word	0x0800f4b1
 800f4d4:	0800f4b1 	.word	0x0800f4b1
 800f4d8:	0800f4b1 	.word	0x0800f4b1
 800f4dc:	0800f4b1 	.word	0x0800f4b1
 800f4e0:	0800f535 	.word	0x0800f535
 800f4e4:	0800f4b1 	.word	0x0800f4b1
 800f4e8:	0800f4b1 	.word	0x0800f4b1
 800f4ec:	0800f4b1 	.word	0x0800f4b1
 800f4f0:	0800f4b1 	.word	0x0800f4b1
 800f4f4:	0800f635 	.word	0x0800f635
 800f4f8:	0800f55f 	.word	0x0800f55f
 800f4fc:	0800f5ef 	.word	0x0800f5ef
 800f500:	0800f4b1 	.word	0x0800f4b1
 800f504:	0800f4b1 	.word	0x0800f4b1
 800f508:	0800f657 	.word	0x0800f657
 800f50c:	0800f4b1 	.word	0x0800f4b1
 800f510:	0800f55f 	.word	0x0800f55f
 800f514:	0800f4b1 	.word	0x0800f4b1
 800f518:	0800f4b1 	.word	0x0800f4b1
 800f51c:	0800f5f7 	.word	0x0800f5f7
 800f520:	6833      	ldr	r3, [r6, #0]
 800f522:	1d1a      	adds	r2, r3, #4
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	6032      	str	r2, [r6, #0]
 800f528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f52c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f530:	2301      	movs	r3, #1
 800f532:	e09d      	b.n	800f670 <_printf_i+0x1e8>
 800f534:	6833      	ldr	r3, [r6, #0]
 800f536:	6820      	ldr	r0, [r4, #0]
 800f538:	1d19      	adds	r1, r3, #4
 800f53a:	6031      	str	r1, [r6, #0]
 800f53c:	0606      	lsls	r6, r0, #24
 800f53e:	d501      	bpl.n	800f544 <_printf_i+0xbc>
 800f540:	681d      	ldr	r5, [r3, #0]
 800f542:	e003      	b.n	800f54c <_printf_i+0xc4>
 800f544:	0645      	lsls	r5, r0, #25
 800f546:	d5fb      	bpl.n	800f540 <_printf_i+0xb8>
 800f548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f54c:	2d00      	cmp	r5, #0
 800f54e:	da03      	bge.n	800f558 <_printf_i+0xd0>
 800f550:	232d      	movs	r3, #45	@ 0x2d
 800f552:	426d      	negs	r5, r5
 800f554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f558:	4859      	ldr	r0, [pc, #356]	@ (800f6c0 <_printf_i+0x238>)
 800f55a:	230a      	movs	r3, #10
 800f55c:	e011      	b.n	800f582 <_printf_i+0xfa>
 800f55e:	6821      	ldr	r1, [r4, #0]
 800f560:	6833      	ldr	r3, [r6, #0]
 800f562:	0608      	lsls	r0, r1, #24
 800f564:	f853 5b04 	ldr.w	r5, [r3], #4
 800f568:	d402      	bmi.n	800f570 <_printf_i+0xe8>
 800f56a:	0649      	lsls	r1, r1, #25
 800f56c:	bf48      	it	mi
 800f56e:	b2ad      	uxthmi	r5, r5
 800f570:	2f6f      	cmp	r7, #111	@ 0x6f
 800f572:	4853      	ldr	r0, [pc, #332]	@ (800f6c0 <_printf_i+0x238>)
 800f574:	6033      	str	r3, [r6, #0]
 800f576:	bf14      	ite	ne
 800f578:	230a      	movne	r3, #10
 800f57a:	2308      	moveq	r3, #8
 800f57c:	2100      	movs	r1, #0
 800f57e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f582:	6866      	ldr	r6, [r4, #4]
 800f584:	60a6      	str	r6, [r4, #8]
 800f586:	2e00      	cmp	r6, #0
 800f588:	bfa2      	ittt	ge
 800f58a:	6821      	ldrge	r1, [r4, #0]
 800f58c:	f021 0104 	bicge.w	r1, r1, #4
 800f590:	6021      	strge	r1, [r4, #0]
 800f592:	b90d      	cbnz	r5, 800f598 <_printf_i+0x110>
 800f594:	2e00      	cmp	r6, #0
 800f596:	d04b      	beq.n	800f630 <_printf_i+0x1a8>
 800f598:	4616      	mov	r6, r2
 800f59a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f59e:	fb03 5711 	mls	r7, r3, r1, r5
 800f5a2:	5dc7      	ldrb	r7, [r0, r7]
 800f5a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f5a8:	462f      	mov	r7, r5
 800f5aa:	42bb      	cmp	r3, r7
 800f5ac:	460d      	mov	r5, r1
 800f5ae:	d9f4      	bls.n	800f59a <_printf_i+0x112>
 800f5b0:	2b08      	cmp	r3, #8
 800f5b2:	d10b      	bne.n	800f5cc <_printf_i+0x144>
 800f5b4:	6823      	ldr	r3, [r4, #0]
 800f5b6:	07df      	lsls	r7, r3, #31
 800f5b8:	d508      	bpl.n	800f5cc <_printf_i+0x144>
 800f5ba:	6923      	ldr	r3, [r4, #16]
 800f5bc:	6861      	ldr	r1, [r4, #4]
 800f5be:	4299      	cmp	r1, r3
 800f5c0:	bfde      	ittt	le
 800f5c2:	2330      	movle	r3, #48	@ 0x30
 800f5c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f5c8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f5cc:	1b92      	subs	r2, r2, r6
 800f5ce:	6122      	str	r2, [r4, #16]
 800f5d0:	f8cd a000 	str.w	sl, [sp]
 800f5d4:	464b      	mov	r3, r9
 800f5d6:	aa03      	add	r2, sp, #12
 800f5d8:	4621      	mov	r1, r4
 800f5da:	4640      	mov	r0, r8
 800f5dc:	f7ff fee6 	bl	800f3ac <_printf_common>
 800f5e0:	3001      	adds	r0, #1
 800f5e2:	d14a      	bne.n	800f67a <_printf_i+0x1f2>
 800f5e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f5e8:	b004      	add	sp, #16
 800f5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ee:	6823      	ldr	r3, [r4, #0]
 800f5f0:	f043 0320 	orr.w	r3, r3, #32
 800f5f4:	6023      	str	r3, [r4, #0]
 800f5f6:	4833      	ldr	r0, [pc, #204]	@ (800f6c4 <_printf_i+0x23c>)
 800f5f8:	2778      	movs	r7, #120	@ 0x78
 800f5fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f5fe:	6823      	ldr	r3, [r4, #0]
 800f600:	6831      	ldr	r1, [r6, #0]
 800f602:	061f      	lsls	r7, r3, #24
 800f604:	f851 5b04 	ldr.w	r5, [r1], #4
 800f608:	d402      	bmi.n	800f610 <_printf_i+0x188>
 800f60a:	065f      	lsls	r7, r3, #25
 800f60c:	bf48      	it	mi
 800f60e:	b2ad      	uxthmi	r5, r5
 800f610:	6031      	str	r1, [r6, #0]
 800f612:	07d9      	lsls	r1, r3, #31
 800f614:	bf44      	itt	mi
 800f616:	f043 0320 	orrmi.w	r3, r3, #32
 800f61a:	6023      	strmi	r3, [r4, #0]
 800f61c:	b11d      	cbz	r5, 800f626 <_printf_i+0x19e>
 800f61e:	2310      	movs	r3, #16
 800f620:	e7ac      	b.n	800f57c <_printf_i+0xf4>
 800f622:	4827      	ldr	r0, [pc, #156]	@ (800f6c0 <_printf_i+0x238>)
 800f624:	e7e9      	b.n	800f5fa <_printf_i+0x172>
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	f023 0320 	bic.w	r3, r3, #32
 800f62c:	6023      	str	r3, [r4, #0]
 800f62e:	e7f6      	b.n	800f61e <_printf_i+0x196>
 800f630:	4616      	mov	r6, r2
 800f632:	e7bd      	b.n	800f5b0 <_printf_i+0x128>
 800f634:	6833      	ldr	r3, [r6, #0]
 800f636:	6825      	ldr	r5, [r4, #0]
 800f638:	6961      	ldr	r1, [r4, #20]
 800f63a:	1d18      	adds	r0, r3, #4
 800f63c:	6030      	str	r0, [r6, #0]
 800f63e:	062e      	lsls	r6, r5, #24
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	d501      	bpl.n	800f648 <_printf_i+0x1c0>
 800f644:	6019      	str	r1, [r3, #0]
 800f646:	e002      	b.n	800f64e <_printf_i+0x1c6>
 800f648:	0668      	lsls	r0, r5, #25
 800f64a:	d5fb      	bpl.n	800f644 <_printf_i+0x1bc>
 800f64c:	8019      	strh	r1, [r3, #0]
 800f64e:	2300      	movs	r3, #0
 800f650:	6123      	str	r3, [r4, #16]
 800f652:	4616      	mov	r6, r2
 800f654:	e7bc      	b.n	800f5d0 <_printf_i+0x148>
 800f656:	6833      	ldr	r3, [r6, #0]
 800f658:	1d1a      	adds	r2, r3, #4
 800f65a:	6032      	str	r2, [r6, #0]
 800f65c:	681e      	ldr	r6, [r3, #0]
 800f65e:	6862      	ldr	r2, [r4, #4]
 800f660:	2100      	movs	r1, #0
 800f662:	4630      	mov	r0, r6
 800f664:	f7f0 fdd4 	bl	8000210 <memchr>
 800f668:	b108      	cbz	r0, 800f66e <_printf_i+0x1e6>
 800f66a:	1b80      	subs	r0, r0, r6
 800f66c:	6060      	str	r0, [r4, #4]
 800f66e:	6863      	ldr	r3, [r4, #4]
 800f670:	6123      	str	r3, [r4, #16]
 800f672:	2300      	movs	r3, #0
 800f674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f678:	e7aa      	b.n	800f5d0 <_printf_i+0x148>
 800f67a:	6923      	ldr	r3, [r4, #16]
 800f67c:	4632      	mov	r2, r6
 800f67e:	4649      	mov	r1, r9
 800f680:	4640      	mov	r0, r8
 800f682:	47d0      	blx	sl
 800f684:	3001      	adds	r0, #1
 800f686:	d0ad      	beq.n	800f5e4 <_printf_i+0x15c>
 800f688:	6823      	ldr	r3, [r4, #0]
 800f68a:	079b      	lsls	r3, r3, #30
 800f68c:	d413      	bmi.n	800f6b6 <_printf_i+0x22e>
 800f68e:	68e0      	ldr	r0, [r4, #12]
 800f690:	9b03      	ldr	r3, [sp, #12]
 800f692:	4298      	cmp	r0, r3
 800f694:	bfb8      	it	lt
 800f696:	4618      	movlt	r0, r3
 800f698:	e7a6      	b.n	800f5e8 <_printf_i+0x160>
 800f69a:	2301      	movs	r3, #1
 800f69c:	4632      	mov	r2, r6
 800f69e:	4649      	mov	r1, r9
 800f6a0:	4640      	mov	r0, r8
 800f6a2:	47d0      	blx	sl
 800f6a4:	3001      	adds	r0, #1
 800f6a6:	d09d      	beq.n	800f5e4 <_printf_i+0x15c>
 800f6a8:	3501      	adds	r5, #1
 800f6aa:	68e3      	ldr	r3, [r4, #12]
 800f6ac:	9903      	ldr	r1, [sp, #12]
 800f6ae:	1a5b      	subs	r3, r3, r1
 800f6b0:	42ab      	cmp	r3, r5
 800f6b2:	dcf2      	bgt.n	800f69a <_printf_i+0x212>
 800f6b4:	e7eb      	b.n	800f68e <_printf_i+0x206>
 800f6b6:	2500      	movs	r5, #0
 800f6b8:	f104 0619 	add.w	r6, r4, #25
 800f6bc:	e7f5      	b.n	800f6aa <_printf_i+0x222>
 800f6be:	bf00      	nop
 800f6c0:	080126e6 	.word	0x080126e6
 800f6c4:	080126f7 	.word	0x080126f7

0800f6c8 <__sflush_r>:
 800f6c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d0:	0716      	lsls	r6, r2, #28
 800f6d2:	4605      	mov	r5, r0
 800f6d4:	460c      	mov	r4, r1
 800f6d6:	d454      	bmi.n	800f782 <__sflush_r+0xba>
 800f6d8:	684b      	ldr	r3, [r1, #4]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	dc02      	bgt.n	800f6e4 <__sflush_r+0x1c>
 800f6de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	dd48      	ble.n	800f776 <__sflush_r+0xae>
 800f6e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f6e6:	2e00      	cmp	r6, #0
 800f6e8:	d045      	beq.n	800f776 <__sflush_r+0xae>
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f6f0:	682f      	ldr	r7, [r5, #0]
 800f6f2:	6a21      	ldr	r1, [r4, #32]
 800f6f4:	602b      	str	r3, [r5, #0]
 800f6f6:	d030      	beq.n	800f75a <__sflush_r+0x92>
 800f6f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f6fa:	89a3      	ldrh	r3, [r4, #12]
 800f6fc:	0759      	lsls	r1, r3, #29
 800f6fe:	d505      	bpl.n	800f70c <__sflush_r+0x44>
 800f700:	6863      	ldr	r3, [r4, #4]
 800f702:	1ad2      	subs	r2, r2, r3
 800f704:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f706:	b10b      	cbz	r3, 800f70c <__sflush_r+0x44>
 800f708:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f70a:	1ad2      	subs	r2, r2, r3
 800f70c:	2300      	movs	r3, #0
 800f70e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f710:	6a21      	ldr	r1, [r4, #32]
 800f712:	4628      	mov	r0, r5
 800f714:	47b0      	blx	r6
 800f716:	1c43      	adds	r3, r0, #1
 800f718:	89a3      	ldrh	r3, [r4, #12]
 800f71a:	d106      	bne.n	800f72a <__sflush_r+0x62>
 800f71c:	6829      	ldr	r1, [r5, #0]
 800f71e:	291d      	cmp	r1, #29
 800f720:	d82b      	bhi.n	800f77a <__sflush_r+0xb2>
 800f722:	4a2a      	ldr	r2, [pc, #168]	@ (800f7cc <__sflush_r+0x104>)
 800f724:	410a      	asrs	r2, r1
 800f726:	07d6      	lsls	r6, r2, #31
 800f728:	d427      	bmi.n	800f77a <__sflush_r+0xb2>
 800f72a:	2200      	movs	r2, #0
 800f72c:	6062      	str	r2, [r4, #4]
 800f72e:	04d9      	lsls	r1, r3, #19
 800f730:	6922      	ldr	r2, [r4, #16]
 800f732:	6022      	str	r2, [r4, #0]
 800f734:	d504      	bpl.n	800f740 <__sflush_r+0x78>
 800f736:	1c42      	adds	r2, r0, #1
 800f738:	d101      	bne.n	800f73e <__sflush_r+0x76>
 800f73a:	682b      	ldr	r3, [r5, #0]
 800f73c:	b903      	cbnz	r3, 800f740 <__sflush_r+0x78>
 800f73e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f742:	602f      	str	r7, [r5, #0]
 800f744:	b1b9      	cbz	r1, 800f776 <__sflush_r+0xae>
 800f746:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f74a:	4299      	cmp	r1, r3
 800f74c:	d002      	beq.n	800f754 <__sflush_r+0x8c>
 800f74e:	4628      	mov	r0, r5
 800f750:	f7ff fbea 	bl	800ef28 <_free_r>
 800f754:	2300      	movs	r3, #0
 800f756:	6363      	str	r3, [r4, #52]	@ 0x34
 800f758:	e00d      	b.n	800f776 <__sflush_r+0xae>
 800f75a:	2301      	movs	r3, #1
 800f75c:	4628      	mov	r0, r5
 800f75e:	47b0      	blx	r6
 800f760:	4602      	mov	r2, r0
 800f762:	1c50      	adds	r0, r2, #1
 800f764:	d1c9      	bne.n	800f6fa <__sflush_r+0x32>
 800f766:	682b      	ldr	r3, [r5, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d0c6      	beq.n	800f6fa <__sflush_r+0x32>
 800f76c:	2b1d      	cmp	r3, #29
 800f76e:	d001      	beq.n	800f774 <__sflush_r+0xac>
 800f770:	2b16      	cmp	r3, #22
 800f772:	d11e      	bne.n	800f7b2 <__sflush_r+0xea>
 800f774:	602f      	str	r7, [r5, #0]
 800f776:	2000      	movs	r0, #0
 800f778:	e022      	b.n	800f7c0 <__sflush_r+0xf8>
 800f77a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f77e:	b21b      	sxth	r3, r3
 800f780:	e01b      	b.n	800f7ba <__sflush_r+0xf2>
 800f782:	690f      	ldr	r7, [r1, #16]
 800f784:	2f00      	cmp	r7, #0
 800f786:	d0f6      	beq.n	800f776 <__sflush_r+0xae>
 800f788:	0793      	lsls	r3, r2, #30
 800f78a:	680e      	ldr	r6, [r1, #0]
 800f78c:	bf08      	it	eq
 800f78e:	694b      	ldreq	r3, [r1, #20]
 800f790:	600f      	str	r7, [r1, #0]
 800f792:	bf18      	it	ne
 800f794:	2300      	movne	r3, #0
 800f796:	eba6 0807 	sub.w	r8, r6, r7
 800f79a:	608b      	str	r3, [r1, #8]
 800f79c:	f1b8 0f00 	cmp.w	r8, #0
 800f7a0:	dde9      	ble.n	800f776 <__sflush_r+0xae>
 800f7a2:	6a21      	ldr	r1, [r4, #32]
 800f7a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f7a6:	4643      	mov	r3, r8
 800f7a8:	463a      	mov	r2, r7
 800f7aa:	4628      	mov	r0, r5
 800f7ac:	47b0      	blx	r6
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	dc08      	bgt.n	800f7c4 <__sflush_r+0xfc>
 800f7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7ba:	81a3      	strh	r3, [r4, #12]
 800f7bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c4:	4407      	add	r7, r0
 800f7c6:	eba8 0800 	sub.w	r8, r8, r0
 800f7ca:	e7e7      	b.n	800f79c <__sflush_r+0xd4>
 800f7cc:	dfbffffe 	.word	0xdfbffffe

0800f7d0 <_fflush_r>:
 800f7d0:	b538      	push	{r3, r4, r5, lr}
 800f7d2:	690b      	ldr	r3, [r1, #16]
 800f7d4:	4605      	mov	r5, r0
 800f7d6:	460c      	mov	r4, r1
 800f7d8:	b913      	cbnz	r3, 800f7e0 <_fflush_r+0x10>
 800f7da:	2500      	movs	r5, #0
 800f7dc:	4628      	mov	r0, r5
 800f7de:	bd38      	pop	{r3, r4, r5, pc}
 800f7e0:	b118      	cbz	r0, 800f7ea <_fflush_r+0x1a>
 800f7e2:	6a03      	ldr	r3, [r0, #32]
 800f7e4:	b90b      	cbnz	r3, 800f7ea <_fflush_r+0x1a>
 800f7e6:	f7ff fa61 	bl	800ecac <__sinit>
 800f7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d0f3      	beq.n	800f7da <_fflush_r+0xa>
 800f7f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f7f4:	07d0      	lsls	r0, r2, #31
 800f7f6:	d404      	bmi.n	800f802 <_fflush_r+0x32>
 800f7f8:	0599      	lsls	r1, r3, #22
 800f7fa:	d402      	bmi.n	800f802 <_fflush_r+0x32>
 800f7fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7fe:	f7ff fb64 	bl	800eeca <__retarget_lock_acquire_recursive>
 800f802:	4628      	mov	r0, r5
 800f804:	4621      	mov	r1, r4
 800f806:	f7ff ff5f 	bl	800f6c8 <__sflush_r>
 800f80a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f80c:	07da      	lsls	r2, r3, #31
 800f80e:	4605      	mov	r5, r0
 800f810:	d4e4      	bmi.n	800f7dc <_fflush_r+0xc>
 800f812:	89a3      	ldrh	r3, [r4, #12]
 800f814:	059b      	lsls	r3, r3, #22
 800f816:	d4e1      	bmi.n	800f7dc <_fflush_r+0xc>
 800f818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f81a:	f7ff fb57 	bl	800eecc <__retarget_lock_release_recursive>
 800f81e:	e7dd      	b.n	800f7dc <_fflush_r+0xc>

0800f820 <fiprintf>:
 800f820:	b40e      	push	{r1, r2, r3}
 800f822:	b503      	push	{r0, r1, lr}
 800f824:	4601      	mov	r1, r0
 800f826:	ab03      	add	r3, sp, #12
 800f828:	4805      	ldr	r0, [pc, #20]	@ (800f840 <fiprintf+0x20>)
 800f82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f82e:	6800      	ldr	r0, [r0, #0]
 800f830:	9301      	str	r3, [sp, #4]
 800f832:	f7ff fca3 	bl	800f17c <_vfiprintf_r>
 800f836:	b002      	add	sp, #8
 800f838:	f85d eb04 	ldr.w	lr, [sp], #4
 800f83c:	b003      	add	sp, #12
 800f83e:	4770      	bx	lr
 800f840:	20000038 	.word	0x20000038

0800f844 <__swbuf_r>:
 800f844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f846:	460e      	mov	r6, r1
 800f848:	4614      	mov	r4, r2
 800f84a:	4605      	mov	r5, r0
 800f84c:	b118      	cbz	r0, 800f856 <__swbuf_r+0x12>
 800f84e:	6a03      	ldr	r3, [r0, #32]
 800f850:	b90b      	cbnz	r3, 800f856 <__swbuf_r+0x12>
 800f852:	f7ff fa2b 	bl	800ecac <__sinit>
 800f856:	69a3      	ldr	r3, [r4, #24]
 800f858:	60a3      	str	r3, [r4, #8]
 800f85a:	89a3      	ldrh	r3, [r4, #12]
 800f85c:	071a      	lsls	r2, r3, #28
 800f85e:	d501      	bpl.n	800f864 <__swbuf_r+0x20>
 800f860:	6923      	ldr	r3, [r4, #16]
 800f862:	b943      	cbnz	r3, 800f876 <__swbuf_r+0x32>
 800f864:	4621      	mov	r1, r4
 800f866:	4628      	mov	r0, r5
 800f868:	f000 f82a 	bl	800f8c0 <__swsetup_r>
 800f86c:	b118      	cbz	r0, 800f876 <__swbuf_r+0x32>
 800f86e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f872:	4638      	mov	r0, r7
 800f874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f876:	6823      	ldr	r3, [r4, #0]
 800f878:	6922      	ldr	r2, [r4, #16]
 800f87a:	1a98      	subs	r0, r3, r2
 800f87c:	6963      	ldr	r3, [r4, #20]
 800f87e:	b2f6      	uxtb	r6, r6
 800f880:	4283      	cmp	r3, r0
 800f882:	4637      	mov	r7, r6
 800f884:	dc05      	bgt.n	800f892 <__swbuf_r+0x4e>
 800f886:	4621      	mov	r1, r4
 800f888:	4628      	mov	r0, r5
 800f88a:	f7ff ffa1 	bl	800f7d0 <_fflush_r>
 800f88e:	2800      	cmp	r0, #0
 800f890:	d1ed      	bne.n	800f86e <__swbuf_r+0x2a>
 800f892:	68a3      	ldr	r3, [r4, #8]
 800f894:	3b01      	subs	r3, #1
 800f896:	60a3      	str	r3, [r4, #8]
 800f898:	6823      	ldr	r3, [r4, #0]
 800f89a:	1c5a      	adds	r2, r3, #1
 800f89c:	6022      	str	r2, [r4, #0]
 800f89e:	701e      	strb	r6, [r3, #0]
 800f8a0:	6962      	ldr	r2, [r4, #20]
 800f8a2:	1c43      	adds	r3, r0, #1
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d004      	beq.n	800f8b2 <__swbuf_r+0x6e>
 800f8a8:	89a3      	ldrh	r3, [r4, #12]
 800f8aa:	07db      	lsls	r3, r3, #31
 800f8ac:	d5e1      	bpl.n	800f872 <__swbuf_r+0x2e>
 800f8ae:	2e0a      	cmp	r6, #10
 800f8b0:	d1df      	bne.n	800f872 <__swbuf_r+0x2e>
 800f8b2:	4621      	mov	r1, r4
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	f7ff ff8b 	bl	800f7d0 <_fflush_r>
 800f8ba:	2800      	cmp	r0, #0
 800f8bc:	d0d9      	beq.n	800f872 <__swbuf_r+0x2e>
 800f8be:	e7d6      	b.n	800f86e <__swbuf_r+0x2a>

0800f8c0 <__swsetup_r>:
 800f8c0:	b538      	push	{r3, r4, r5, lr}
 800f8c2:	4b29      	ldr	r3, [pc, #164]	@ (800f968 <__swsetup_r+0xa8>)
 800f8c4:	4605      	mov	r5, r0
 800f8c6:	6818      	ldr	r0, [r3, #0]
 800f8c8:	460c      	mov	r4, r1
 800f8ca:	b118      	cbz	r0, 800f8d4 <__swsetup_r+0x14>
 800f8cc:	6a03      	ldr	r3, [r0, #32]
 800f8ce:	b90b      	cbnz	r3, 800f8d4 <__swsetup_r+0x14>
 800f8d0:	f7ff f9ec 	bl	800ecac <__sinit>
 800f8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8d8:	0719      	lsls	r1, r3, #28
 800f8da:	d422      	bmi.n	800f922 <__swsetup_r+0x62>
 800f8dc:	06da      	lsls	r2, r3, #27
 800f8de:	d407      	bmi.n	800f8f0 <__swsetup_r+0x30>
 800f8e0:	2209      	movs	r2, #9
 800f8e2:	602a      	str	r2, [r5, #0]
 800f8e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8e8:	81a3      	strh	r3, [r4, #12]
 800f8ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8ee:	e033      	b.n	800f958 <__swsetup_r+0x98>
 800f8f0:	0758      	lsls	r0, r3, #29
 800f8f2:	d512      	bpl.n	800f91a <__swsetup_r+0x5a>
 800f8f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8f6:	b141      	cbz	r1, 800f90a <__swsetup_r+0x4a>
 800f8f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8fc:	4299      	cmp	r1, r3
 800f8fe:	d002      	beq.n	800f906 <__swsetup_r+0x46>
 800f900:	4628      	mov	r0, r5
 800f902:	f7ff fb11 	bl	800ef28 <_free_r>
 800f906:	2300      	movs	r3, #0
 800f908:	6363      	str	r3, [r4, #52]	@ 0x34
 800f90a:	89a3      	ldrh	r3, [r4, #12]
 800f90c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f910:	81a3      	strh	r3, [r4, #12]
 800f912:	2300      	movs	r3, #0
 800f914:	6063      	str	r3, [r4, #4]
 800f916:	6923      	ldr	r3, [r4, #16]
 800f918:	6023      	str	r3, [r4, #0]
 800f91a:	89a3      	ldrh	r3, [r4, #12]
 800f91c:	f043 0308 	orr.w	r3, r3, #8
 800f920:	81a3      	strh	r3, [r4, #12]
 800f922:	6923      	ldr	r3, [r4, #16]
 800f924:	b94b      	cbnz	r3, 800f93a <__swsetup_r+0x7a>
 800f926:	89a3      	ldrh	r3, [r4, #12]
 800f928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f92c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f930:	d003      	beq.n	800f93a <__swsetup_r+0x7a>
 800f932:	4621      	mov	r1, r4
 800f934:	4628      	mov	r0, r5
 800f936:	f000 f856 	bl	800f9e6 <__smakebuf_r>
 800f93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f93e:	f013 0201 	ands.w	r2, r3, #1
 800f942:	d00a      	beq.n	800f95a <__swsetup_r+0x9a>
 800f944:	2200      	movs	r2, #0
 800f946:	60a2      	str	r2, [r4, #8]
 800f948:	6962      	ldr	r2, [r4, #20]
 800f94a:	4252      	negs	r2, r2
 800f94c:	61a2      	str	r2, [r4, #24]
 800f94e:	6922      	ldr	r2, [r4, #16]
 800f950:	b942      	cbnz	r2, 800f964 <__swsetup_r+0xa4>
 800f952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f956:	d1c5      	bne.n	800f8e4 <__swsetup_r+0x24>
 800f958:	bd38      	pop	{r3, r4, r5, pc}
 800f95a:	0799      	lsls	r1, r3, #30
 800f95c:	bf58      	it	pl
 800f95e:	6962      	ldrpl	r2, [r4, #20]
 800f960:	60a2      	str	r2, [r4, #8]
 800f962:	e7f4      	b.n	800f94e <__swsetup_r+0x8e>
 800f964:	2000      	movs	r0, #0
 800f966:	e7f7      	b.n	800f958 <__swsetup_r+0x98>
 800f968:	20000038 	.word	0x20000038

0800f96c <_sbrk_r>:
 800f96c:	b538      	push	{r3, r4, r5, lr}
 800f96e:	4d06      	ldr	r5, [pc, #24]	@ (800f988 <_sbrk_r+0x1c>)
 800f970:	2300      	movs	r3, #0
 800f972:	4604      	mov	r4, r0
 800f974:	4608      	mov	r0, r1
 800f976:	602b      	str	r3, [r5, #0]
 800f978:	f7f1 fd0c 	bl	8001394 <_sbrk>
 800f97c:	1c43      	adds	r3, r0, #1
 800f97e:	d102      	bne.n	800f986 <_sbrk_r+0x1a>
 800f980:	682b      	ldr	r3, [r5, #0]
 800f982:	b103      	cbz	r3, 800f986 <_sbrk_r+0x1a>
 800f984:	6023      	str	r3, [r4, #0]
 800f986:	bd38      	pop	{r3, r4, r5, pc}
 800f988:	20007f08 	.word	0x20007f08

0800f98c <abort>:
 800f98c:	b508      	push	{r3, lr}
 800f98e:	2006      	movs	r0, #6
 800f990:	f000 f88e 	bl	800fab0 <raise>
 800f994:	2001      	movs	r0, #1
 800f996:	f7f1 fc85 	bl	80012a4 <_exit>

0800f99a <__swhatbuf_r>:
 800f99a:	b570      	push	{r4, r5, r6, lr}
 800f99c:	460c      	mov	r4, r1
 800f99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9a2:	2900      	cmp	r1, #0
 800f9a4:	b096      	sub	sp, #88	@ 0x58
 800f9a6:	4615      	mov	r5, r2
 800f9a8:	461e      	mov	r6, r3
 800f9aa:	da0d      	bge.n	800f9c8 <__swhatbuf_r+0x2e>
 800f9ac:	89a3      	ldrh	r3, [r4, #12]
 800f9ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f9b2:	f04f 0100 	mov.w	r1, #0
 800f9b6:	bf14      	ite	ne
 800f9b8:	2340      	movne	r3, #64	@ 0x40
 800f9ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f9be:	2000      	movs	r0, #0
 800f9c0:	6031      	str	r1, [r6, #0]
 800f9c2:	602b      	str	r3, [r5, #0]
 800f9c4:	b016      	add	sp, #88	@ 0x58
 800f9c6:	bd70      	pop	{r4, r5, r6, pc}
 800f9c8:	466a      	mov	r2, sp
 800f9ca:	f000 f879 	bl	800fac0 <_fstat_r>
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	dbec      	blt.n	800f9ac <__swhatbuf_r+0x12>
 800f9d2:	9901      	ldr	r1, [sp, #4]
 800f9d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f9d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f9dc:	4259      	negs	r1, r3
 800f9de:	4159      	adcs	r1, r3
 800f9e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9e4:	e7eb      	b.n	800f9be <__swhatbuf_r+0x24>

0800f9e6 <__smakebuf_r>:
 800f9e6:	898b      	ldrh	r3, [r1, #12]
 800f9e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9ea:	079d      	lsls	r5, r3, #30
 800f9ec:	4606      	mov	r6, r0
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	d507      	bpl.n	800fa02 <__smakebuf_r+0x1c>
 800f9f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f9f6:	6023      	str	r3, [r4, #0]
 800f9f8:	6123      	str	r3, [r4, #16]
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	6163      	str	r3, [r4, #20]
 800f9fe:	b003      	add	sp, #12
 800fa00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa02:	ab01      	add	r3, sp, #4
 800fa04:	466a      	mov	r2, sp
 800fa06:	f7ff ffc8 	bl	800f99a <__swhatbuf_r>
 800fa0a:	9f00      	ldr	r7, [sp, #0]
 800fa0c:	4605      	mov	r5, r0
 800fa0e:	4639      	mov	r1, r7
 800fa10:	4630      	mov	r0, r6
 800fa12:	f7ff fafd 	bl	800f010 <_malloc_r>
 800fa16:	b948      	cbnz	r0, 800fa2c <__smakebuf_r+0x46>
 800fa18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa1c:	059a      	lsls	r2, r3, #22
 800fa1e:	d4ee      	bmi.n	800f9fe <__smakebuf_r+0x18>
 800fa20:	f023 0303 	bic.w	r3, r3, #3
 800fa24:	f043 0302 	orr.w	r3, r3, #2
 800fa28:	81a3      	strh	r3, [r4, #12]
 800fa2a:	e7e2      	b.n	800f9f2 <__smakebuf_r+0xc>
 800fa2c:	89a3      	ldrh	r3, [r4, #12]
 800fa2e:	6020      	str	r0, [r4, #0]
 800fa30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa34:	81a3      	strh	r3, [r4, #12]
 800fa36:	9b01      	ldr	r3, [sp, #4]
 800fa38:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fa3c:	b15b      	cbz	r3, 800fa56 <__smakebuf_r+0x70>
 800fa3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa42:	4630      	mov	r0, r6
 800fa44:	f000 f84e 	bl	800fae4 <_isatty_r>
 800fa48:	b128      	cbz	r0, 800fa56 <__smakebuf_r+0x70>
 800fa4a:	89a3      	ldrh	r3, [r4, #12]
 800fa4c:	f023 0303 	bic.w	r3, r3, #3
 800fa50:	f043 0301 	orr.w	r3, r3, #1
 800fa54:	81a3      	strh	r3, [r4, #12]
 800fa56:	89a3      	ldrh	r3, [r4, #12]
 800fa58:	431d      	orrs	r5, r3
 800fa5a:	81a5      	strh	r5, [r4, #12]
 800fa5c:	e7cf      	b.n	800f9fe <__smakebuf_r+0x18>

0800fa5e <_raise_r>:
 800fa5e:	291f      	cmp	r1, #31
 800fa60:	b538      	push	{r3, r4, r5, lr}
 800fa62:	4605      	mov	r5, r0
 800fa64:	460c      	mov	r4, r1
 800fa66:	d904      	bls.n	800fa72 <_raise_r+0x14>
 800fa68:	2316      	movs	r3, #22
 800fa6a:	6003      	str	r3, [r0, #0]
 800fa6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa70:	bd38      	pop	{r3, r4, r5, pc}
 800fa72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fa74:	b112      	cbz	r2, 800fa7c <_raise_r+0x1e>
 800fa76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa7a:	b94b      	cbnz	r3, 800fa90 <_raise_r+0x32>
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	f000 f853 	bl	800fb28 <_getpid_r>
 800fa82:	4622      	mov	r2, r4
 800fa84:	4601      	mov	r1, r0
 800fa86:	4628      	mov	r0, r5
 800fa88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa8c:	f000 b83a 	b.w	800fb04 <_kill_r>
 800fa90:	2b01      	cmp	r3, #1
 800fa92:	d00a      	beq.n	800faaa <_raise_r+0x4c>
 800fa94:	1c59      	adds	r1, r3, #1
 800fa96:	d103      	bne.n	800faa0 <_raise_r+0x42>
 800fa98:	2316      	movs	r3, #22
 800fa9a:	6003      	str	r3, [r0, #0]
 800fa9c:	2001      	movs	r0, #1
 800fa9e:	e7e7      	b.n	800fa70 <_raise_r+0x12>
 800faa0:	2100      	movs	r1, #0
 800faa2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800faa6:	4620      	mov	r0, r4
 800faa8:	4798      	blx	r3
 800faaa:	2000      	movs	r0, #0
 800faac:	e7e0      	b.n	800fa70 <_raise_r+0x12>
	...

0800fab0 <raise>:
 800fab0:	4b02      	ldr	r3, [pc, #8]	@ (800fabc <raise+0xc>)
 800fab2:	4601      	mov	r1, r0
 800fab4:	6818      	ldr	r0, [r3, #0]
 800fab6:	f7ff bfd2 	b.w	800fa5e <_raise_r>
 800faba:	bf00      	nop
 800fabc:	20000038 	.word	0x20000038

0800fac0 <_fstat_r>:
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4d07      	ldr	r5, [pc, #28]	@ (800fae0 <_fstat_r+0x20>)
 800fac4:	2300      	movs	r3, #0
 800fac6:	4604      	mov	r4, r0
 800fac8:	4608      	mov	r0, r1
 800faca:	4611      	mov	r1, r2
 800facc:	602b      	str	r3, [r5, #0]
 800face:	f7f1 fc39 	bl	8001344 <_fstat>
 800fad2:	1c43      	adds	r3, r0, #1
 800fad4:	d102      	bne.n	800fadc <_fstat_r+0x1c>
 800fad6:	682b      	ldr	r3, [r5, #0]
 800fad8:	b103      	cbz	r3, 800fadc <_fstat_r+0x1c>
 800fada:	6023      	str	r3, [r4, #0]
 800fadc:	bd38      	pop	{r3, r4, r5, pc}
 800fade:	bf00      	nop
 800fae0:	20007f08 	.word	0x20007f08

0800fae4 <_isatty_r>:
 800fae4:	b538      	push	{r3, r4, r5, lr}
 800fae6:	4d06      	ldr	r5, [pc, #24]	@ (800fb00 <_isatty_r+0x1c>)
 800fae8:	2300      	movs	r3, #0
 800faea:	4604      	mov	r4, r0
 800faec:	4608      	mov	r0, r1
 800faee:	602b      	str	r3, [r5, #0]
 800faf0:	f7f1 fc38 	bl	8001364 <_isatty>
 800faf4:	1c43      	adds	r3, r0, #1
 800faf6:	d102      	bne.n	800fafe <_isatty_r+0x1a>
 800faf8:	682b      	ldr	r3, [r5, #0]
 800fafa:	b103      	cbz	r3, 800fafe <_isatty_r+0x1a>
 800fafc:	6023      	str	r3, [r4, #0]
 800fafe:	bd38      	pop	{r3, r4, r5, pc}
 800fb00:	20007f08 	.word	0x20007f08

0800fb04 <_kill_r>:
 800fb04:	b538      	push	{r3, r4, r5, lr}
 800fb06:	4d07      	ldr	r5, [pc, #28]	@ (800fb24 <_kill_r+0x20>)
 800fb08:	2300      	movs	r3, #0
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	4608      	mov	r0, r1
 800fb0e:	4611      	mov	r1, r2
 800fb10:	602b      	str	r3, [r5, #0]
 800fb12:	f7f1 fbb5 	bl	8001280 <_kill>
 800fb16:	1c43      	adds	r3, r0, #1
 800fb18:	d102      	bne.n	800fb20 <_kill_r+0x1c>
 800fb1a:	682b      	ldr	r3, [r5, #0]
 800fb1c:	b103      	cbz	r3, 800fb20 <_kill_r+0x1c>
 800fb1e:	6023      	str	r3, [r4, #0]
 800fb20:	bd38      	pop	{r3, r4, r5, pc}
 800fb22:	bf00      	nop
 800fb24:	20007f08 	.word	0x20007f08

0800fb28 <_getpid_r>:
 800fb28:	f7f1 bba1 	b.w	800126e <_getpid>

0800fb2c <_init>:
 800fb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2e:	bf00      	nop
 800fb30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb32:	bc08      	pop	{r3}
 800fb34:	469e      	mov	lr, r3
 800fb36:	4770      	bx	lr

0800fb38 <_fini>:
 800fb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3a:	bf00      	nop
 800fb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb3e:	bc08      	pop	{r3}
 800fb40:	469e      	mov	lr, r3
 800fb42:	4770      	bx	lr
