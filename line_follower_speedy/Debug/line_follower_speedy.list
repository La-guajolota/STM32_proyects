
line_follower_speedy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac1c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0800adc0  0800adc0  0000bdc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2d0  0800b2d0  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2d0  0800b2d0  0000c2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2d8  0800b2d8  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2d8  0800b2d8  0000c2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2dc  0800b2dc  0000c2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b2e0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200001d8  0800b4b8  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800b4b8  0000d604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107a0  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a7  00000000  00000000  0001d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00020150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc5  00000000  00000000  00021088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019302  00000000  00000000  00021c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011553  00000000  00000000  0003af4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cd3c  00000000  00000000  0004c4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e91de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005340  00000000  00000000  000e9224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ee564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ada4 	.word	0x0800ada4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800ada4 	.word	0x0800ada4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <stop_motors>:

void sleep_driver(){
}

extern TIM_HandleTypeDef htim1;
void stop_motors(){
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	// We stop both motors
	TIM1->CCR1=0;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <stop_motors+0x28>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2=0;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <stop_motors+0x28>)
 8001000:	2200      	movs	r2, #0
 8001002:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3=0;
 8001004:	4b05      	ldr	r3, [pc, #20]	@ (800101c <stop_motors+0x28>)
 8001006:	2200      	movs	r2, #0
 8001008:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM1->CCR4=0;
 800100a:	4b04      	ldr	r3, [pc, #16]	@ (800101c <stop_motors+0x28>)
 800100c:	2200      	movs	r2, #0
 800100e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40010000 	.word	0x40010000

08001020 <motors>:
				TIM1->CCR4=0;
				break;
		}
}

void motors(uint8_t state, uint8_t duty){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	460a      	mov	r2, r1
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	4613      	mov	r3, r2
 800102e:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b03      	cmp	r3, #3
 8001034:	d833      	bhi.n	800109e <motors+0x7e>
 8001036:	a201      	add	r2, pc, #4	@ (adr r2, 800103c <motors+0x1c>)
 8001038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103c:	0800104d 	.word	0x0800104d
 8001040:	08001053 	.word	0x08001053
 8001044:	0800106d 	.word	0x0800106d
 8001048:	08001085 	.word	0x08001085
		    case stop: // Stop one motor
		    	stop_motors();
 800104c:	f7ff ffd2 	bl	8000ff4 <stop_motors>
		    	break;
 8001050:	e025      	b.n	800109e <motors+0x7e>
			case dir_a: // Change direction a and velocity
				TIM1->CCR3=0;
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <motors+0x88>)
 8001054:	2200      	movs	r2, #0
 8001056:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM1->CCR4=duty;
 8001058:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <motors+0x88>)
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	6413      	str	r3, [r2, #64]	@ 0x40
				TIM1->CCR1=duty;
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <motors+0x88>)
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	6353      	str	r3, [r2, #52]	@ 0x34
				TIM1->CCR2=0;
 8001064:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <motors+0x88>)
 8001066:	2200      	movs	r2, #0
 8001068:	639a      	str	r2, [r3, #56]	@ 0x38
				break;
 800106a:	e018      	b.n	800109e <motors+0x7e>
			case dir_b: // Change direction b and velocity
				TIM1->CCR3=duty;
 800106c:	4a0e      	ldr	r2, [pc, #56]	@ (80010a8 <motors+0x88>)
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	63d3      	str	r3, [r2, #60]	@ 0x3c
				TIM1->CCR4=0;
 8001072:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <motors+0x88>)
 8001074:	2200      	movs	r2, #0
 8001076:	641a      	str	r2, [r3, #64]	@ 0x40
				TIM1->CCR3=0;
 8001078:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <motors+0x88>)
 800107a:	2200      	movs	r2, #0
 800107c:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM1->CCR4=duty;
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <motors+0x88>)
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	6413      	str	r3, [r2, #64]	@ 0x40
			case dir_c:
				TIM1->CCR3=0;
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <motors+0x88>)
 8001086:	2200      	movs	r2, #0
 8001088:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM1->CCR4=duty;
 800108a:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <motors+0x88>)
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	6413      	str	r3, [r2, #64]	@ 0x40
				TIM1->CCR3=0;
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <motors+0x88>)
 8001092:	2200      	movs	r2, #0
 8001094:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM1->CCR4=duty;
 8001096:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <motors+0x88>)
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	6413      	str	r3, [r2, #64]	@ 0x40
				break;
 800109c:	bf00      	nop
		}
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40010000 	.word	0x40010000

080010ac <adc_read>:
 * This function starts the ADC conversion, waits for the conversion to complete,
 * stops the ADC, and then returns the ADC conversion result.
 *
 * @return uint16_t The ADC conversion value.
 */
static uint16_t adc_read(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
    // Start ADC conversion
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80010b0:	4808      	ldr	r0, [pc, #32]	@ (80010d4 <adc_read+0x28>)
 80010b2:	f001 faf9 	bl	80026a8 <HAL_ADC_Start>
        // Optionally handle error here
    }

    // Wait for conversion to complete (blocking call)
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 80010b6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010ba:	4806      	ldr	r0, [pc, #24]	@ (80010d4 <adc_read+0x28>)
 80010bc:	f001 fbdb 	bl	8002876 <HAL_ADC_PollForConversion>
        // Optionally handle error here
    }

    // Stop ADC conversion
    if (HAL_ADC_Stop(&hadc1) != HAL_OK) {
 80010c0:	4804      	ldr	r0, [pc, #16]	@ (80010d4 <adc_read+0x28>)
 80010c2:	f001 fba5 	bl	8002810 <HAL_ADC_Stop>
        // Optionally handle error here
    }

    return HAL_ADC_GetValue(&hadc1);
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <adc_read+0x28>)
 80010c8:	f001 fc60 	bl	800298c <HAL_ADC_GetValue>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29b      	uxth	r3, r3
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200001f4 	.word	0x200001f4

080010d8 <select_channel>:
 * the lower 4 bits of the provided channel number using the hardware-accelerated RBIT
 * instruction. This method is both efficient and compact.
 *
 * @param chnn The channel number (0-15) to select.
 */
static void select_channel(uint8_t chnn) {
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
    // Reverse the lower 4 bits of the channel number.
    uint32_t reversed = __RBIT((uint32_t)(chnn & 0x0F)) >> 28;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	fa93 f3a3 	rbit	r3, r3
 80010f0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	0f1b      	lsrs	r3, r3, #28
 80010f6:	617b      	str	r3, [r7, #20]

    // Update PA4-PA7: clear the 4 bits then set them to the reversed value.
    GPIOA->ODR = (GPIOA->ODR & ~(0x0F << 4)) | (reversed << 4);
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <select_channel+0x40>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4904      	ldr	r1, [pc, #16]	@ (8001118 <select_channel+0x40>)
 8001106:	4313      	orrs	r3, r2
 8001108:	614b      	str	r3, [r1, #20]

    // Optional: add a short delay if your multiplexer requires time to settle.
    // HAL_Delay(1);
}
 800110a:	bf00      	nop
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40020000 	.word	0x40020000

0800111c <enable_mux>:
 *
 * This function sets the multiplexer enable pin to the specified logic state.
 *
 * @param state True to enable the multiplexer, False to disable it.
 */
void enable_mux(bool state) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(mux_en_GPIO_Port, mux_en_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	461a      	mov	r2, r3
 800112a:	2108      	movs	r1, #8
 800112c:	4803      	ldr	r0, [pc, #12]	@ (800113c <enable_mux+0x20>)
 800112e:	f002 fd01 	bl	8003b34 <HAL_GPIO_WritePin>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40020000 	.word	0x40020000

08001140 <enable_ldo>:
 * This function first selects the LDO channel on the multiplexer and then sets
 * the LDO enable pin according to the desired state.
 *
 * @param state True to enable the LDO, False to disable it.
 */
void enable_ldo(bool state) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
    select_channel(LDO_CHNN);
 800114a:	2008      	movs	r0, #8
 800114c:	f7ff ffc4 	bl	80010d8 <select_channel>
    HAL_GPIO_WritePin(ttl_ldo_GPIO_Port, ttl_ldo_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	461a      	mov	r2, r3
 8001154:	2104      	movs	r1, #4
 8001156:	4803      	ldr	r0, [pc, #12]	@ (8001164 <enable_ldo+0x24>)
 8001158:	f002 fcec 	bl	8003b34 <HAL_GPIO_WritePin>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40020000 	.word	0x40020000

08001168 <read_array>:
 * the multiplexer, reads the ADC value for that channel, and stores the result
 * in the provided array.
 *
 * @param array_ptr Pointer to an array where the sensor readings will be stored.
 */
void read_array(uint16_t* array_ptr) {
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    for (int chnn = 0; chnn < IR_SENSORS; ++chnn) {
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e00f      	b.n	8001196 <read_array+0x2e>
        select_channel(chnn);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ffac 	bl	80010d8 <select_channel>
        // Optional: small delay after switching channels to allow signals to settle.
        // HAL_Delay(1);
        array_ptr[chnn] = adc_read();
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	18d4      	adds	r4, r2, r3
 8001188:	f7ff ff90 	bl	80010ac <adc_read>
 800118c:	4603      	mov	r3, r0
 800118e:	8023      	strh	r3, [r4, #0]
    for (int chnn = 0; chnn < IR_SENSORS; ++chnn) {
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b07      	cmp	r3, #7
 800119a:	ddec      	ble.n	8001176 <read_array+0xe>
    }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd90      	pop	{r4, r7, pc}

080011a6 <sense_IR>:
 * This high-level function enables the LDO supply, reads all IR sensor values,
 * and then disables the LDO supply.
 *
 * @param IRsarray Pointer to an array where the sensor readings will be stored.
 */
void sense_IR(uint16_t* IRsarray) {
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
    enable_ldo(true);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff ffc6 	bl	8001140 <enable_ldo>
    read_array(IRsarray);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ffd7 	bl	8001168 <read_array>
    enable_ldo(false);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff ffc0 	bl	8001140 <enable_ldo>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <send_command>:
 * @brief Sends an AT command and waits for expected response
 * @param at_cmd The AT command to send (including CRLF)
 * @param at_res Expected response string
 * @return ESP01 status code
 */
static ESP01_StatusTypeDef send_command(const char *at_cmd, const char *at_res){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
	uint8_t rx_byte;
	uint8_t match_pos = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	75fb      	strb	r3, [r7, #23]
	uint8_t expected_len = strlen(at_res);
 80011d6:	6838      	ldr	r0, [r7, #0]
 80011d8:	f7ff f852 	bl	8000280 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	75bb      	strb	r3, [r7, #22]
	uint32_t timeout = HAL_GetTick();
 80011e0:	f001 fa12 	bl	8002608 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

	//Send AT_command to ESP01
	HAL_UART_Transmit(&huart1,(uint8_t*)at_cmd,strlen(at_cmd), HAL_MAX_DELAY);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff f84a 	bl	8000280 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	4817      	ldr	r0, [pc, #92]	@ (8001254 <send_command+0x8c>)
 80011f8:	f004 f98c 	bl	8005514 <HAL_UART_Transmit>

	/* Response detection state machine */
	while(match_pos < expected_len)
 80011fc:	e020      	b.n	8001240 <send_command+0x78>
	{
		if(HAL_UART_Receive(&huart1, &rx_byte, 1, 1) == HAL_OK)
 80011fe:	f107 010f 	add.w	r1, r7, #15
 8001202:	2301      	movs	r3, #1
 8001204:	2201      	movs	r2, #1
 8001206:	4813      	ldr	r0, [pc, #76]	@ (8001254 <send_command+0x8c>)
 8001208:	f004 fa0f 	bl	800562a <HAL_UART_Receive>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10c      	bne.n	800122c <send_command+0x64>
		{
			if(rx_byte == at_res[match_pos])
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	4413      	add	r3, r2
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	429a      	cmp	r2, r3
 800121e:	d103      	bne.n	8001228 <send_command+0x60>
			{
				match_pos++;
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	3301      	adds	r3, #1
 8001224:	75fb      	strb	r3, [r7, #23]
 8001226:	e001      	b.n	800122c <send_command+0x64>
			}
			else
			{
				match_pos = 0; /* Reset on mismatch */
 8001228:	2300      	movs	r3, #0
 800122a:	75fb      	strb	r3, [r7, #23]
			}
		}

		/* Timeout handling */
		if(HAL_GetTick() - timeout > ESP01_DEFAULT_TIMEOUT)
 800122c:	f001 f9ec 	bl	8002608 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800123a:	d901      	bls.n	8001240 <send_command+0x78>
		{
			return ESP01_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e004      	b.n	800124a <send_command+0x82>
	while(match_pos < expected_len)
 8001240:	7dfa      	ldrb	r2, [r7, #23]
 8001242:	7dbb      	ldrb	r3, [r7, #22]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3da      	bcc.n	80011fe <send_command+0x36>
		}
	}

	return ESP01_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200002cc 	.word	0x200002cc

08001258 <esp01_init>:
/**
 * @brief Initializes ESP01 module with basic configuration
 * @return ESP01 status code
 */
ESP01_StatusTypeDef esp01_init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

    //If it is already in UART mode let's get it out
    //if((status = esp01_end_uart_transparent())							!= ESP01_OK) return status;

    /* Module reset sequence */
    if((status = send_command(AT_CMD_RESET, AT_RESP_READY)) 			!= ESP01_OK) return status;
 800125e:	4918      	ldr	r1, [pc, #96]	@ (80012c0 <esp01_init+0x68>)
 8001260:	4818      	ldr	r0, [pc, #96]	@ (80012c4 <esp01_init+0x6c>)
 8001262:	f7ff ffb1 	bl	80011c8 <send_command>
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <esp01_init+0x1c>
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	e021      	b.n	80012b8 <esp01_init+0x60>
    //HAL_Delay(1500); /* Allow time for boot sequence */

    /* Configuration commands */
    if((status = send_command(AT_CMD_ECHO_OFF, AT_RESP_OK))   			!= ESP01_OK) return status;
 8001274:	4914      	ldr	r1, [pc, #80]	@ (80012c8 <esp01_init+0x70>)
 8001276:	4815      	ldr	r0, [pc, #84]	@ (80012cc <esp01_init+0x74>)
 8001278:	f7ff ffa6 	bl	80011c8 <send_command>
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <esp01_init+0x32>
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	e016      	b.n	80012b8 <esp01_init+0x60>
    if((status = send_command(AT_CMD_WIFI_MODE, AT_RESP_OK))  			!= ESP01_OK) return status;
 800128a:	490f      	ldr	r1, [pc, #60]	@ (80012c8 <esp01_init+0x70>)
 800128c:	4810      	ldr	r0, [pc, #64]	@ (80012d0 <esp01_init+0x78>)
 800128e:	f7ff ff9b 	bl	80011c8 <send_command>
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <esp01_init+0x48>
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	e00b      	b.n	80012b8 <esp01_init+0x60>
    if((status = send_command(AT_CMD_SINGLE_CONNECTION, AT_RESP_OK))	!= ESP01_OK) return status;
 80012a0:	4909      	ldr	r1, [pc, #36]	@ (80012c8 <esp01_init+0x70>)
 80012a2:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <esp01_init+0x7c>)
 80012a4:	f7ff ff90 	bl	80011c8 <send_command>
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <esp01_init+0x5e>
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	e000      	b.n	80012b8 <esp01_init+0x60>

    return ESP01_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	0800ae64 	.word	0x0800ae64
 80012c4:	0800add4 	.word	0x0800add4
 80012c8:	0800ae58 	.word	0x0800ae58
 80012cc:	0800ade0 	.word	0x0800ade0
 80012d0:	0800adf8 	.word	0x0800adf8
 80012d4:	0800ade8 	.word	0x0800ade8

080012d8 <esp01_udp_start>:
/**
 * @brief Establishes UDP connection and enables transparent mode
 * @return ESP01 status code
 */
ESP01_StatusTypeDef esp01_udp_start(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
    ESP01_StatusTypeDef status;

    if((status = send_command(AT_CMD_UDP_CONNECTION, AT_RESP_OK))          != ESP01_OK) return status;
 80012de:	490d      	ldr	r1, [pc, #52]	@ (8001314 <esp01_udp_start+0x3c>)
 80012e0:	480d      	ldr	r0, [pc, #52]	@ (8001318 <esp01_udp_start+0x40>)
 80012e2:	f7ff ff71 	bl	80011c8 <send_command>
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <esp01_udp_start+0x1c>
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	e00b      	b.n	800130c <esp01_udp_start+0x34>
    if((status = send_command(AT_CMD_UART_TRANSPARENT, AT_RESP_OK))  	   != ESP01_OK) return status;
 80012f4:	4907      	ldr	r1, [pc, #28]	@ (8001314 <esp01_udp_start+0x3c>)
 80012f6:	4809      	ldr	r0, [pc, #36]	@ (800131c <esp01_udp_start+0x44>)
 80012f8:	f7ff ff66 	bl	80011c8 <send_command>
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <esp01_udp_start+0x32>
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	e000      	b.n	800130c <esp01_udp_start+0x34>

    return ESP01_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	0800ae58 	.word	0x0800ae58
 8001318:	0800ae18 	.word	0x0800ae18
 800131c:	0800ae08 	.word	0x0800ae08

08001320 <esp01_start_uart_transparent>:

ESP01_StatusTypeDef esp01_start_uart_transparent(){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
    ESP01_StatusTypeDef status;

	if ((status = send_command(AT_CMD_SEND_DATA,AR_RESP_OK_UART)) != ESP01_OK) return status;
 8001326:	4908      	ldr	r1, [pc, #32]	@ (8001348 <esp01_start_uart_transparent+0x28>)
 8001328:	4808      	ldr	r0, [pc, #32]	@ (800134c <esp01_start_uart_transparent+0x2c>)
 800132a:	f7ff ff4d 	bl	80011c8 <send_command>
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <esp01_start_uart_transparent+0x1c>
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	e000      	b.n	800133e <esp01_start_uart_transparent+0x1e>

    return ESP01_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	0800ae60 	.word	0x0800ae60
 800134c:	0800ae48 	.word	0x0800ae48

08001350 <normal_min_max>:
 *
 *  Created on: Feb 8, 2025
 *      Author: Adrián Silva Palafox
 */

float normal_min_max(float val, float min, float max){
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	ed87 0a03 	vstr	s0, [r7, #12]
 800135a:	edc7 0a02 	vstr	s1, [r7, #8]
 800135e:	ed87 1a01 	vstr	s2, [r7, #4]
	return (val-min)/(max-min);
 8001362:	ed97 7a03 	vldr	s14, [r7, #12]
 8001366:	edd7 7a02 	vldr	s15, [r7, #8]
 800136a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800136e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001372:	edd7 7a02 	vldr	s15, [r7, #8]
 8001376:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800137a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800137e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001382:	eeb0 0a67 	vmov.f32	s0, s15
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001396:	f001 f8d1 	bl	800253c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139a:	f000 f9ab 	bl	80016f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139e:	f000 fbc7 	bl	8001b30 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a2:	f000 fb9d 	bl	8001ae0 <MX_DMA_Init>
  MX_TIM1_Init();
 80013a6:	f000 fa5f 	bl	8001868 <MX_TIM1_Init>
  MX_ADC1_Init();
 80013aa:	f000 fa0b 	bl	80017c4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80013ae:	f000 fb6d 	bl	8001a8c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80013b2:	f000 fb1d 	bl	80019f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Initiate motors
  /* PWM channels for motor driver */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80013b6:	2100      	movs	r1, #0
 80013b8:	48ac      	ldr	r0, [pc, #688]	@ (800166c <main+0x2dc>)
 80013ba:	f003 f95d 	bl	8004678 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80013be:	2104      	movs	r1, #4
 80013c0:	48aa      	ldr	r0, [pc, #680]	@ (800166c <main+0x2dc>)
 80013c2:	f003 f959 	bl	8004678 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80013c6:	2108      	movs	r1, #8
 80013c8:	48a8      	ldr	r0, [pc, #672]	@ (800166c <main+0x2dc>)
 80013ca:	f003 f955 	bl	8004678 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 80013ce:	210c      	movs	r1, #12
 80013d0:	48a6      	ldr	r0, [pc, #664]	@ (800166c <main+0x2dc>)
 80013d2:	f003 f951 	bl	8004678 <HAL_TIM_PWM_Start>
  stop_motors();
 80013d6:	f7ff fe0d 	bl	8000ff4 <stop_motors>

  //Initiate PID controller
  pid.limMin = -100;    	//Output's minimum limit
 80013da:	4ba5      	ldr	r3, [pc, #660]	@ (8001670 <main+0x2e0>)
 80013dc:	4aa5      	ldr	r2, [pc, #660]	@ (8001674 <main+0x2e4>)
 80013de:	611a      	str	r2, [r3, #16]
  pid.limMax = 100;     	//Output's maximum limit
 80013e0:	4ba3      	ldr	r3, [pc, #652]	@ (8001670 <main+0x2e0>)
 80013e2:	4aa5      	ldr	r2, [pc, #660]	@ (8001678 <main+0x2e8>)
 80013e4:	615a      	str	r2, [r3, #20]
  pid.limMinInt = -10.0;    //Integrator's minimum limit
 80013e6:	4ba2      	ldr	r3, [pc, #648]	@ (8001670 <main+0x2e0>)
 80013e8:	4aa4      	ldr	r2, [pc, #656]	@ (800167c <main+0x2ec>)
 80013ea:	619a      	str	r2, [r3, #24]
  pid.limMaxInt = 10.0;  	//Integrator's maximum limit
 80013ec:	4ba0      	ldr	r3, [pc, #640]	@ (8001670 <main+0x2e0>)
 80013ee:	4aa4      	ldr	r2, [pc, #656]	@ (8001680 <main+0x2f0>)
 80013f0:	61da      	str	r2, [r3, #28]
  pid.T = 0.001;		    //Sample time in seconds
 80013f2:	4b9f      	ldr	r3, [pc, #636]	@ (8001670 <main+0x2e0>)
 80013f4:	4aa3      	ldr	r2, [pc, #652]	@ (8001684 <main+0x2f4>)
 80013f6:	621a      	str	r2, [r3, #32]
  pid.tau = pid.T*0.5;      //Derivative low-pass filter time constant
 80013f8:	4b9d      	ldr	r3, [pc, #628]	@ (8001670 <main+0x2e0>)
 80013fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80013fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001406:	4b9a      	ldr	r3, [pc, #616]	@ (8001670 <main+0x2e0>)
 8001408:	edc3 7a03 	vstr	s15, [r3, #12]
  PIDController_Init(&pid);
 800140c:	4898      	ldr	r0, [pc, #608]	@ (8001670 <main+0x2e0>)
 800140e:	f000 fcb7 	bl	8001d80 <PIDController_Init>

  // Initialize communication with ESP01
  ESP01_StatusTypeDef status = esp01_init();
 8001412:	f7ff ff21 	bl	8001258 <esp01_init>
 8001416:	4603      	mov	r3, r0
 8001418:	73fb      	strb	r3, [r7, #15]
  if(status == ESP01_OK) esp01_udp_start();
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <main+0x94>
 8001420:	f7ff ff5a 	bl	80012d8 <esp01_udp_start>
  if(status == ESP01_OK) esp01_start_uart_transparent();
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <main+0x9e>
 800142a:	f7ff ff79 	bl	8001320 <esp01_start_uart_transparent>
  if(status == ESP01_OK) HAL_UART_Receive_DMA(&huart1, (uint8_t*)RXbuffer, RXuart_size);
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d107      	bne.n	8001444 <main+0xb4>
 8001434:	4b94      	ldr	r3, [pc, #592]	@ (8001688 <main+0x2f8>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	4993      	ldr	r1, [pc, #588]	@ (800168c <main+0x2fc>)
 800143e:	4894      	ldr	r0, [pc, #592]	@ (8001690 <main+0x300>)
 8001440:	f004 f9fa 	bl	8005838 <HAL_UART_Receive_DMA>
	}
	esp01_end_uart_transparent();
  }
  */
  //CALIBRATE
  enable_mux(true);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fe69 	bl	800111c <enable_mux>
  enable_ldo(true);
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff fe78 	bl	8001140 <enable_ldo>
  HAL_TIM_Base_Start_IT(&htim3);
 8001450:	4890      	ldr	r0, [pc, #576]	@ (8001694 <main+0x304>)
 8001452:	f003 f855 	bl	8004500 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // FUZZY PID CONTROLLER
	if (pid_flag) {
 8001456:	4b90      	ldr	r3, [pc, #576]	@ (8001698 <main+0x308>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d07d      	beq.n	800155c <main+0x1cc>
		pid_flag = false;
 8001460:	4b8d      	ldr	r3, [pc, #564]	@ (8001698 <main+0x308>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]

		//Sense IRs
		sense_IR (IRsarray);
 8001466:	488d      	ldr	r0, [pc, #564]	@ (800169c <main+0x30c>)
 8001468:	f7ff fe9d 	bl	80011a6 <sense_IR>

		//NORMALIZATION AND WEIGHTING  ->>  CALCULATE ROBOT POSITION AND ORENTATION
		IRsense = 0;
 800146c:	4b8c      	ldr	r3, [pc, #560]	@ (80016a0 <main+0x310>)
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
		for (int var = 0; var < IR_SENSORS; ++var) {
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e030      	b.n	80014dc <main+0x14c>
			IRsarray_norm[var] = normal_min_max((float)IRsarray[var], 0, 4095) * weights[var];
 800147a:	4a88      	ldr	r2, [pc, #544]	@ (800169c <main+0x30c>)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148a:	ed9f 1a86 	vldr	s2, [pc, #536]	@ 80016a4 <main+0x314>
 800148e:	eddf 0a86 	vldr	s1, [pc, #536]	@ 80016a8 <main+0x318>
 8001492:	eeb0 0a67 	vmov.f32	s0, s15
 8001496:	f7ff ff5b 	bl	8001350 <normal_min_max>
 800149a:	eeb0 7a40 	vmov.f32	s14, s0
 800149e:	4a83      	ldr	r2, [pc, #524]	@ (80016ac <main+0x31c>)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	edd3 7a00 	vldr	s15, [r3]
 80014aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ae:	4a80      	ldr	r2, [pc, #512]	@ (80016b0 <main+0x320>)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	edc3 7a00 	vstr	s15, [r3]
			IRsense += IRsarray_norm[var];
 80014ba:	4a7d      	ldr	r2, [pc, #500]	@ (80016b0 <main+0x320>)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	ed93 7a00 	vldr	s14, [r3]
 80014c6:	4b76      	ldr	r3, [pc, #472]	@ (80016a0 <main+0x310>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d0:	4b73      	ldr	r3, [pc, #460]	@ (80016a0 <main+0x310>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
		for (int var = 0; var < IR_SENSORS; ++var) {
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b07      	cmp	r3, #7
 80014e0:	ddcb      	ble.n	800147a <main+0xea>
		}

		//IR SENSORS PATTERN RECOGNITION
		//Fuzzy
		//PID
		PIDController_Update(&pid, setpoint, IRsense);
 80014e2:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80016a8 <main+0x318>
 80014e6:	4b6e      	ldr	r3, [pc, #440]	@ (80016a0 <main+0x310>)
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	eef0 0a67 	vmov.f32	s1, s15
 80014f0:	eeb0 0a47 	vmov.f32	s0, s14
 80014f4:	485e      	ldr	r0, [pc, #376]	@ (8001670 <main+0x2e0>)
 80014f6:	f000 fc61 	bl	8001dbc <PIDController_Update>

		//ACT ON MOTORS
		motorPWM = (uint8_t)fabsf(pid.out);
 80014fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001670 <main+0x2e0>)
 80014fc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001500:	eef0 7ae7 	vabs.f32	s15, s15
 8001504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001508:	edc7 7a01 	vstr	s15, [r7, #4]
 800150c:	793b      	ldrb	r3, [r7, #4]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b68      	ldr	r3, [pc, #416]	@ (80016b4 <main+0x324>)
 8001512:	701a      	strb	r2, [r3, #0]

		if (IRsense < 0) { // Turn <--
 8001514:	4b62      	ldr	r3, [pc, #392]	@ (80016a0 <main+0x310>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001522:	d506      	bpl.n	8001532 <main+0x1a2>
			motors(dir_a,motorPWM);
 8001524:	4b63      	ldr	r3, [pc, #396]	@ (80016b4 <main+0x324>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	2001      	movs	r0, #1
 800152c:	f7ff fd78 	bl	8001020 <motors>
 8001530:	e014      	b.n	800155c <main+0x1cc>
		} else if (IRsense > 0) { // Turn -->
 8001532:	4b5b      	ldr	r3, [pc, #364]	@ (80016a0 <main+0x310>)
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800153c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001540:	dd06      	ble.n	8001550 <main+0x1c0>
			motors(dir_b,motorPWM);
 8001542:	4b5c      	ldr	r3, [pc, #368]	@ (80016b4 <main+0x324>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4619      	mov	r1, r3
 8001548:	2002      	movs	r0, #2
 800154a:	f7ff fd69 	bl	8001020 <motors>
 800154e:	e005      	b.n	800155c <main+0x1cc>
		} else { // Go forward
			motors(dir_c,motorPWM);
 8001550:	4b58      	ldr	r3, [pc, #352]	@ (80016b4 <main+0x324>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	2003      	movs	r0, #3
 8001558:	f7ff fd62 	bl	8001020 <motors>
		}
	 }

	//Parsing recollected date to send via UDP
	if (status == ESP01_OK && TXuart_flag == true) {
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d152      	bne.n	8001608 <main+0x278>
 8001562:	4b55      	ldr	r3, [pc, #340]	@ (80016b8 <main+0x328>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d04d      	beq.n	8001608 <main+0x278>
		TXuart_flag = false;
 800156c:	4b52      	ldr	r3, [pc, #328]	@ (80016b8 <main+0x328>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
		// Buffer index let us start from "S" on
		pos_buff = snprintf(TXbuffer, sizeof(TXbuffer), "M%dE%.2fS", motorPWM, IRsense);
 8001572:	4b50      	ldr	r3, [pc, #320]	@ (80016b4 <main+0x324>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461c      	mov	r4, r3
 8001578:	4b49      	ldr	r3, [pc, #292]	@ (80016a0 <main+0x310>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffeb 	bl	8000558 <__aeabi_f2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	e9cd 2300 	strd	r2, r3, [sp]
 800158a:	4623      	mov	r3, r4
 800158c:	4a4b      	ldr	r2, [pc, #300]	@ (80016bc <main+0x32c>)
 800158e:	2150      	movs	r1, #80	@ 0x50
 8001590:	484b      	ldr	r0, [pc, #300]	@ (80016c0 <main+0x330>)
 8001592:	f006 fe3b 	bl	800820c <sniprintf>
 8001596:	4603      	mov	r3, r0
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4b4a      	ldr	r3, [pc, #296]	@ (80016c4 <main+0x334>)
 800159c:	701a      	strb	r2, [r3, #0]
		// Append the IRsarray_norm[] values
		for (int i = 0; i < IR_SENSORS; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	e024      	b.n	80015ee <main+0x25e>
			pos_buff += snprintf(TXbuffer + pos_buff, sizeof(TXbuffer) - pos_buff, ",%.2f", IRsarray_norm[i]);
 80015a4:	4b47      	ldr	r3, [pc, #284]	@ (80016c4 <main+0x334>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b45      	ldr	r3, [pc, #276]	@ (80016c0 <main+0x330>)
 80015ac:	18d4      	adds	r4, r2, r3
 80015ae:	4b45      	ldr	r3, [pc, #276]	@ (80016c4 <main+0x334>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	f1c3 0550 	rsb	r5, r3, #80	@ 0x50
 80015b6:	4a3e      	ldr	r2, [pc, #248]	@ (80016b0 <main+0x320>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffc9 	bl	8000558 <__aeabi_f2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	e9cd 2300 	strd	r2, r3, [sp]
 80015ce:	4a3e      	ldr	r2, [pc, #248]	@ (80016c8 <main+0x338>)
 80015d0:	4629      	mov	r1, r5
 80015d2:	4620      	mov	r0, r4
 80015d4:	f006 fe1a 	bl	800820c <sniprintf>
 80015d8:	4603      	mov	r3, r0
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b39      	ldr	r3, [pc, #228]	@ (80016c4 <main+0x334>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b37      	ldr	r3, [pc, #220]	@ (80016c4 <main+0x334>)
 80015e6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < IR_SENSORS; i++) {
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	3301      	adds	r3, #1
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	2b07      	cmp	r3, #7
 80015f2:	ddd7      	ble.n	80015a4 <main+0x214>
		}
		// FOR DEBUGING -> strcat(TXbuffer,RXbuffer);
		HAL_UART_Transmit_DMA(&huart1,(uint8_t*)TXbuffer,strlen(TXbuffer));
 80015f4:	4832      	ldr	r0, [pc, #200]	@ (80016c0 <main+0x330>)
 80015f6:	f7fe fe43 	bl	8000280 <strlen>
 80015fa:	4603      	mov	r3, r0
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	492f      	ldr	r1, [pc, #188]	@ (80016c0 <main+0x330>)
 8001602:	4823      	ldr	r0, [pc, #140]	@ (8001690 <main+0x300>)
 8001604:	f004 f8a8 	bl	8005758 <HAL_UART_Transmit_DMA>
	}

	//Parsing RXbuffer and update PID gains
	if (RXuart_flag == true && RXuart_size == 1) {
 8001608:	4b30      	ldr	r3, [pc, #192]	@ (80016cc <main+0x33c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	f43f af21 	beq.w	8001456 <main+0xc6>
 8001614:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <main+0x2f8>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b01      	cmp	r3, #1
 800161c:	f47f af1b 	bne.w	8001456 <main+0xc6>
		RXuart_flag = false;
 8001620:	4b2a      	ldr	r3, [pc, #168]	@ (80016cc <main+0x33c>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
		switch (RXbuffer[0]) {
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <main+0x2fc>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b50      	cmp	r3, #80	@ 0x50
 800162c:	d007      	beq.n	800163e <main+0x2ae>
 800162e:	2b50      	cmp	r3, #80	@ 0x50
 8001630:	f73f af11 	bgt.w	8001456 <main+0xc6>
 8001634:	2b44      	cmp	r3, #68	@ 0x44
 8001636:	d04d      	beq.n	80016d4 <main+0x344>
 8001638:	2b49      	cmp	r3, #73	@ 0x49
 800163a:	d00b      	beq.n	8001654 <main+0x2c4>
 800163c:	e055      	b.n	80016ea <main+0x35a>
			case 'P':
				pid.Kp = strtof(RXbuffer + 1,NULL);
 800163e:	4b24      	ldr	r3, [pc, #144]	@ (80016d0 <main+0x340>)
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f006 f864 	bl	8007710 <strtof>
 8001648:	eef0 7a40 	vmov.f32	s15, s0
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <main+0x2e0>)
 800164e:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001652:	e04a      	b.n	80016ea <main+0x35a>
			case 'I':
				pid.Ki = strtof(RXbuffer + 1,NULL);
 8001654:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <main+0x340>)
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f006 f859 	bl	8007710 <strtof>
 800165e:	eef0 7a40 	vmov.f32	s15, s0
 8001662:	4b03      	ldr	r3, [pc, #12]	@ (8001670 <main+0x2e0>)
 8001664:	edc3 7a01 	vstr	s15, [r3, #4]
				break;
 8001668:	e03f      	b.n	80016ea <main+0x35a>
 800166a:	bf00      	nop
 800166c:	2000023c 	.word	0x2000023c
 8001670:	2000043c 	.word	0x2000043c
 8001674:	c2c80000 	.word	0xc2c80000
 8001678:	42c80000 	.word	0x42c80000
 800167c:	c1200000 	.word	0xc1200000
 8001680:	41200000 	.word	0x41200000
 8001684:	3a83126f 	.word	0x3a83126f
 8001688:	20000000 	.word	0x20000000
 800168c:	20000424 	.word	0x20000424
 8001690:	200002cc 	.word	0x200002cc
 8001694:	20000284 	.word	0x20000284
 8001698:	20000474 	.word	0x20000474
 800169c:	20000480 	.word	0x20000480
 80016a0:	20000478 	.word	0x20000478
 80016a4:	457ff000 	.word	0x457ff000
 80016a8:	00000000 	.word	0x00000000
 80016ac:	0800ae6c 	.word	0x0800ae6c
 80016b0:	20000490 	.word	0x20000490
 80016b4:	2000047c 	.word	0x2000047c
 80016b8:	20000001 	.word	0x20000001
 80016bc:	0800adc0 	.word	0x0800adc0
 80016c0:	200003d4 	.word	0x200003d4
 80016c4:	20000438 	.word	0x20000438
 80016c8:	0800adcc 	.word	0x0800adcc
 80016cc:	20000439 	.word	0x20000439
 80016d0:	20000425 	.word	0x20000425
			case 'D':
				pid.Kd = strtof(RXbuffer + 1,NULL);
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <main+0x35c>)
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f006 f819 	bl	8007710 <strtof>
 80016de:	eef0 7a40 	vmov.f32	s15, s0
 80016e2:	4b03      	ldr	r3, [pc, #12]	@ (80016f0 <main+0x360>)
 80016e4:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 80016e8:	bf00      	nop
	if (pid_flag) {
 80016ea:	e6b4      	b.n	8001456 <main+0xc6>
 80016ec:	20000425 	.word	0x20000425
 80016f0:	2000043c 	.word	0x2000043c

080016f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b094      	sub	sp, #80	@ 0x50
 80016f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	2230      	movs	r2, #48	@ 0x30
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f006 fdf9 	bl	80082fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	4b27      	ldr	r3, [pc, #156]	@ (80017bc <SystemClock_Config+0xc8>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001720:	4a26      	ldr	r2, [pc, #152]	@ (80017bc <SystemClock_Config+0xc8>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001726:	6413      	str	r3, [r2, #64]	@ 0x40
 8001728:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <SystemClock_Config+0xc8>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <SystemClock_Config+0xcc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a20      	ldr	r2, [pc, #128]	@ (80017c0 <SystemClock_Config+0xcc>)
 800173e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <SystemClock_Config+0xcc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001750:	2301      	movs	r3, #1
 8001752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001754:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175a:	2302      	movs	r3, #2
 800175c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001764:	230c      	movs	r3, #12
 8001766:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001768:	2360      	movs	r3, #96	@ 0x60
 800176a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800176c:	2302      	movs	r3, #2
 800176e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001770:	2304      	movs	r3, #4
 8001772:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001774:	f107 0320 	add.w	r3, r7, #32
 8001778:	4618      	mov	r0, r3
 800177a:	f002 fa19 	bl	8003bb0 <HAL_RCC_OscConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001784:	f000 faf6 	bl	8001d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001788:	230f      	movs	r3, #15
 800178a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178c:	2302      	movs	r3, #2
 800178e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	2103      	movs	r1, #3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f002 fc7b 	bl	80040a0 <HAL_RCC_ClockConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017b0:	f000 fae0 	bl	8001d74 <Error_Handler>
  }
}
 80017b4:	bf00      	nop
 80017b6:	3750      	adds	r7, #80	@ 0x50
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40007000 	.word	0x40007000

080017c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ca:	463b      	mov	r3, r7
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017d6:	4b21      	ldr	r3, [pc, #132]	@ (800185c <MX_ADC1_Init+0x98>)
 80017d8:	4a21      	ldr	r2, [pc, #132]	@ (8001860 <MX_ADC1_Init+0x9c>)
 80017da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017dc:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <MX_ADC1_Init+0x98>)
 80017de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <MX_ADC1_Init+0x98>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017ea:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <MX_ADC1_Init+0x98>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <MX_ADC1_Init+0x98>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017f6:	4b19      	ldr	r3, [pc, #100]	@ (800185c <MX_ADC1_Init+0x98>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017fe:	4b17      	ldr	r3, [pc, #92]	@ (800185c <MX_ADC1_Init+0x98>)
 8001800:	2200      	movs	r2, #0
 8001802:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001804:	4b15      	ldr	r3, [pc, #84]	@ (800185c <MX_ADC1_Init+0x98>)
 8001806:	4a17      	ldr	r2, [pc, #92]	@ (8001864 <MX_ADC1_Init+0xa0>)
 8001808:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <MX_ADC1_Init+0x98>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001810:	4b12      	ldr	r3, [pc, #72]	@ (800185c <MX_ADC1_Init+0x98>)
 8001812:	2201      	movs	r2, #1
 8001814:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001816:	4b11      	ldr	r3, [pc, #68]	@ (800185c <MX_ADC1_Init+0x98>)
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800181e:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <MX_ADC1_Init+0x98>)
 8001820:	2201      	movs	r2, #1
 8001822:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001824:	480d      	ldr	r0, [pc, #52]	@ (800185c <MX_ADC1_Init+0x98>)
 8001826:	f000 fefb 	bl	8002620 <HAL_ADC_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001830:	f000 faa0 	bl	8001d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001834:	2301      	movs	r3, #1
 8001836:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001838:	2301      	movs	r3, #1
 800183a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001840:	463b      	mov	r3, r7
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	@ (800185c <MX_ADC1_Init+0x98>)
 8001846:	f001 f8af 	bl	80029a8 <HAL_ADC_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001850:	f000 fa90 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200001f4 	.word	0x200001f4
 8001860:	40012000 	.word	0x40012000
 8001864:	0f000001 	.word	0x0f000001

08001868 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b096      	sub	sp, #88	@ 0x58
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
 8001896:	615a      	str	r2, [r3, #20]
 8001898:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2220      	movs	r2, #32
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f006 fd2a 	bl	80082fa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018a6:	4b50      	ldr	r3, [pc, #320]	@ (80019e8 <MX_TIM1_Init+0x180>)
 80018a8:	4a50      	ldr	r2, [pc, #320]	@ (80019ec <MX_TIM1_Init+0x184>)
 80018aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 80018ac:	4b4e      	ldr	r3, [pc, #312]	@ (80019e8 <MX_TIM1_Init+0x180>)
 80018ae:	2213      	movs	r2, #19
 80018b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b2:	4b4d      	ldr	r3, [pc, #308]	@ (80019e8 <MX_TIM1_Init+0x180>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80018b8:	4b4b      	ldr	r3, [pc, #300]	@ (80019e8 <MX_TIM1_Init+0x180>)
 80018ba:	2263      	movs	r2, #99	@ 0x63
 80018bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018be:	4b4a      	ldr	r3, [pc, #296]	@ (80019e8 <MX_TIM1_Init+0x180>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018c4:	4b48      	ldr	r3, [pc, #288]	@ (80019e8 <MX_TIM1_Init+0x180>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ca:	4b47      	ldr	r3, [pc, #284]	@ (80019e8 <MX_TIM1_Init+0x180>)
 80018cc:	2280      	movs	r2, #128	@ 0x80
 80018ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018d0:	4845      	ldr	r0, [pc, #276]	@ (80019e8 <MX_TIM1_Init+0x180>)
 80018d2:	f002 fdc5 	bl	8004460 <HAL_TIM_Base_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80018dc:	f000 fa4a 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018ea:	4619      	mov	r1, r3
 80018ec:	483e      	ldr	r0, [pc, #248]	@ (80019e8 <MX_TIM1_Init+0x180>)
 80018ee:	f003 f925 	bl	8004b3c <HAL_TIM_ConfigClockSource>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80018f8:	f000 fa3c 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018fc:	483a      	ldr	r0, [pc, #232]	@ (80019e8 <MX_TIM1_Init+0x180>)
 80018fe:	f002 fe61 	bl	80045c4 <HAL_TIM_PWM_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001908:	f000 fa34 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001914:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001918:	4619      	mov	r1, r3
 800191a:	4833      	ldr	r0, [pc, #204]	@ (80019e8 <MX_TIM1_Init+0x180>)
 800191c:	f003 fcd6 	bl	80052cc <HAL_TIMEx_MasterConfigSynchronization>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001926:	f000 fa25 	bl	8001d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800192a:	2360      	movs	r3, #96	@ 0x60
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001936:	2300      	movs	r3, #0
 8001938:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800194a:	2200      	movs	r2, #0
 800194c:	4619      	mov	r1, r3
 800194e:	4826      	ldr	r0, [pc, #152]	@ (80019e8 <MX_TIM1_Init+0x180>)
 8001950:	f003 f832 	bl	80049b8 <HAL_TIM_PWM_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800195a:	f000 fa0b 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800195e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001962:	2204      	movs	r2, #4
 8001964:	4619      	mov	r1, r3
 8001966:	4820      	ldr	r0, [pc, #128]	@ (80019e8 <MX_TIM1_Init+0x180>)
 8001968:	f003 f826 	bl	80049b8 <HAL_TIM_PWM_ConfigChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001972:	f000 f9ff 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800197a:	2208      	movs	r2, #8
 800197c:	4619      	mov	r1, r3
 800197e:	481a      	ldr	r0, [pc, #104]	@ (80019e8 <MX_TIM1_Init+0x180>)
 8001980:	f003 f81a 	bl	80049b8 <HAL_TIM_PWM_ConfigChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800198a:	f000 f9f3 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800198e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001992:	220c      	movs	r2, #12
 8001994:	4619      	mov	r1, r3
 8001996:	4814      	ldr	r0, [pc, #80]	@ (80019e8 <MX_TIM1_Init+0x180>)
 8001998:	f003 f80e 	bl	80049b8 <HAL_TIM_PWM_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 80019a2:	f000 f9e7 	bl	8001d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4807      	ldr	r0, [pc, #28]	@ (80019e8 <MX_TIM1_Init+0x180>)
 80019ca:	f003 fced 	bl	80053a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80019d4:	f000 f9ce 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019d8:	4803      	ldr	r0, [pc, #12]	@ (80019e8 <MX_TIM1_Init+0x180>)
 80019da:	f000 fb5d 	bl	8002098 <HAL_TIM_MspPostInit>

}
 80019de:	bf00      	nop
 80019e0:	3758      	adds	r7, #88	@ 0x58
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000023c 	.word	0x2000023c
 80019ec:	40010000 	.word	0x40010000

080019f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <MX_TIM3_Init+0x94>)
 8001a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a88 <MX_TIM3_Init+0x98>)
 8001a10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001a12:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <MX_TIM3_Init+0x94>)
 8001a14:	2263      	movs	r2, #99	@ 0x63
 8001a16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <MX_TIM3_Init+0x94>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <MX_TIM3_Init+0x94>)
 8001a20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a26:	4b17      	ldr	r3, [pc, #92]	@ (8001a84 <MX_TIM3_Init+0x94>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <MX_TIM3_Init+0x94>)
 8001a2e:	2280      	movs	r2, #128	@ 0x80
 8001a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a32:	4814      	ldr	r0, [pc, #80]	@ (8001a84 <MX_TIM3_Init+0x94>)
 8001a34:	f002 fd14 	bl	8004460 <HAL_TIM_Base_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a3e:	f000 f999 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a48:	f107 0308 	add.w	r3, r7, #8
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480d      	ldr	r0, [pc, #52]	@ (8001a84 <MX_TIM3_Init+0x94>)
 8001a50:	f003 f874 	bl	8004b3c <HAL_TIM_ConfigClockSource>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a5a:	f000 f98b 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a66:	463b      	mov	r3, r7
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4806      	ldr	r0, [pc, #24]	@ (8001a84 <MX_TIM3_Init+0x94>)
 8001a6c:	f003 fc2e 	bl	80052cc <HAL_TIMEx_MasterConfigSynchronization>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001a76:	f000 f97d 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000284 	.word	0x20000284
 8001a88:	40000400 	.word	0x40000400

08001a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a90:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <MX_USART1_UART_Init+0x48>)
 8001a92:	4a11      	ldr	r2, [pc, #68]	@ (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115273;
 8001a96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <MX_USART1_UART_Init+0x48>)
 8001a98:	4a10      	ldr	r2, [pc, #64]	@ (8001adc <MX_USART1_UART_Init+0x50>)
 8001a9a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <MX_USART1_UART_Init+0x48>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <MX_USART1_UART_Init+0x48>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <MX_USART1_UART_Init+0x48>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <MX_USART1_UART_Init+0x48>)
 8001ab0:	220c      	movs	r2, #12
 8001ab2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <MX_USART1_UART_Init+0x48>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <MX_USART1_UART_Init+0x48>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ac0:	4804      	ldr	r0, [pc, #16]	@ (8001ad4 <MX_USART1_UART_Init+0x48>)
 8001ac2:	f003 fcd7 	bl	8005474 <HAL_UART_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001acc:	f000 f952 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200002cc 	.word	0x200002cc
 8001ad8:	40011000 	.word	0x40011000
 8001adc:	0001c249 	.word	0x0001c249

08001ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <MX_DMA_Init+0x4c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a0f      	ldr	r2, [pc, #60]	@ (8001b2c <MX_DMA_Init+0x4c>)
 8001af0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <MX_DMA_Init+0x4c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2044      	movs	r0, #68	@ 0x44
 8001b08:	f001 fa57 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001b0c:	2044      	movs	r0, #68	@ 0x44
 8001b0e:	f001 fa70 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2046      	movs	r0, #70	@ 0x46
 8001b18:	f001 fa4f 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001b1c:	2046      	movs	r0, #70	@ 0x46
 8001b1e:	f001 fa68 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800

08001b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb4 <MX_GPIO_Init+0x184>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a59      	ldr	r2, [pc, #356]	@ (8001cb4 <MX_GPIO_Init+0x184>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b57      	ldr	r3, [pc, #348]	@ (8001cb4 <MX_GPIO_Init+0x184>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b53      	ldr	r3, [pc, #332]	@ (8001cb4 <MX_GPIO_Init+0x184>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	4a52      	ldr	r2, [pc, #328]	@ (8001cb4 <MX_GPIO_Init+0x184>)
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b72:	4b50      	ldr	r3, [pc, #320]	@ (8001cb4 <MX_GPIO_Init+0x184>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b4c      	ldr	r3, [pc, #304]	@ (8001cb4 <MX_GPIO_Init+0x184>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb4 <MX_GPIO_Init+0x184>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8e:	4b49      	ldr	r3, [pc, #292]	@ (8001cb4 <MX_GPIO_Init+0x184>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	4b45      	ldr	r3, [pc, #276]	@ (8001cb4 <MX_GPIO_Init+0x184>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a44      	ldr	r2, [pc, #272]	@ (8001cb4 <MX_GPIO_Init+0x184>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b42      	ldr	r3, [pc, #264]	@ (8001cb4 <MX_GPIO_Init+0x184>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_user_GPIO_Port, led_user_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bbc:	483e      	ldr	r0, [pc, #248]	@ (8001cb8 <MX_GPIO_Init+0x188>)
 8001bbe:	f001 ffb9 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ttl_ldo_Pin|mux_en_Pin|muxchn_3_Pin|muxchn_2_Pin
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	21fc      	movs	r1, #252	@ 0xfc
 8001bc6:	483d      	ldr	r0, [pc, #244]	@ (8001cbc <MX_GPIO_Init+0x18c>)
 8001bc8:	f001 ffb4 	bl	8003b34 <HAL_GPIO_WritePin>
                          |muxchn_1_Pin|muxchn_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(sleep_mode_GPIO_Port, sleep_mode_Pin, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bd2:	483b      	ldr	r0, [pc, #236]	@ (8001cc0 <MX_GPIO_Init+0x190>)
 8001bd4:	f001 ffae 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_user_Pin */
  GPIO_InitStruct.Pin = led_user_Pin;
 8001bd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_user_GPIO_Port, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4831      	ldr	r0, [pc, #196]	@ (8001cb8 <MX_GPIO_Init+0x188>)
 8001bf2:	f001 fe1b 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : builtint_btn_Pin */
  GPIO_InitStruct.Pin = builtint_btn_Pin;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(builtint_btn_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	482c      	ldr	r0, [pc, #176]	@ (8001cbc <MX_GPIO_Init+0x18c>)
 8001c0a:	f001 fe0f 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pins : ttl_ldo_Pin mux_en_Pin */
  GPIO_InitStruct.Pin = ttl_ldo_Pin|mux_en_Pin;
 8001c0e:	230c      	movs	r3, #12
 8001c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	4825      	ldr	r0, [pc, #148]	@ (8001cbc <MX_GPIO_Init+0x18c>)
 8001c26:	f001 fe01 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pins : muxchn_3_Pin muxchn_2_Pin muxchn_1_Pin muxchn_0_Pin */
  GPIO_InitStruct.Pin = muxchn_3_Pin|muxchn_2_Pin|muxchn_1_Pin|muxchn_0_Pin;
 8001c2a:	23f0      	movs	r3, #240	@ 0xf0
 8001c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	481e      	ldr	r0, [pc, #120]	@ (8001cbc <MX_GPIO_Init+0x18c>)
 8001c42:	f001 fdf3 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : sleep_mode_Pin */
  GPIO_InitStruct.Pin = sleep_mode_Pin;
 8001c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(sleep_mode_GPIO_Port, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4818      	ldr	r0, [pc, #96]	@ (8001cc0 <MX_GPIO_Init+0x190>)
 8001c60:	f001 fde4 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : fault_Pin */
  GPIO_InitStruct.Pin = fault_Pin;
 8001c64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c6a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(fault_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4810      	ldr	r0, [pc, #64]	@ (8001cbc <MX_GPIO_Init+0x18c>)
 8001c7c:	f001 fdd6 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c80:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	480a      	ldr	r0, [pc, #40]	@ (8001cc0 <MX_GPIO_Init+0x190>)
 8001c96:	f001 fdc9 	bl	800382c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2028      	movs	r0, #40	@ 0x28
 8001ca0:	f001 f98b 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ca4:	2028      	movs	r0, #40	@ 0x28
 8001ca6:	f001 f9a4 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001caa:	bf00      	nop
 8001cac:	3728      	adds	r7, #40	@ 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400

08001cc4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

// DMA CALLBACKS
// It is needed to have the NVIC uart activated, otherwise it wont receive the interrupt
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	TXuart_flag = true; //Enables STATE_MACHINE_UDP_SEND
 8001ccc:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <HAL_UART_TxCpltCallback+0x1c>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000001 	.word	0x20000001

08001ce4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

	if (RXuart_flag) {
 8001cec:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <HAL_UART_RxCpltCallback+0x60>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d012      	beq.n	8001d1c <HAL_UART_RxCpltCallback+0x38>
		// We mark the end of valid information to parse
		RXbuffer[RXuart_size] = '\0';
 8001cf6:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <HAL_UART_RxCpltCallback+0x64>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <HAL_UART_RxCpltCallback+0x68>)
 8001d00:	2100      	movs	r1, #0
 8001d02:	5499      	strb	r1, [r3, r2]
		// We receive one byte first to determine the amount of data to be handled
		RXuart_size = 1; // this variable is also used as a flag
 8001d04:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_UART_RxCpltCallback+0x64>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)RXbuffer, RXuart_size);
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <HAL_UART_RxCpltCallback+0x64>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	490e      	ldr	r1, [pc, #56]	@ (8001d4c <HAL_UART_RxCpltCallback+0x68>)
 8001d14:	480e      	ldr	r0, [pc, #56]	@ (8001d50 <HAL_UART_RxCpltCallback+0x6c>)
 8001d16:	f003 fd8f 	bl	8005838 <HAL_UART_Receive_DMA>
	} else {
		RXuart_size = (uint8_t)(RXbuffer[0]);//New data length DMA will wait for
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)RXbuffer, RXuart_size);
		RXuart_flag = true;
	}
}
 8001d1a:	e00e      	b.n	8001d3a <HAL_UART_RxCpltCallback+0x56>
		RXuart_size = (uint8_t)(RXbuffer[0]);//New data length DMA will wait for
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_UART_RxCpltCallback+0x68>)
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_UART_RxCpltCallback+0x64>)
 8001d22:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)RXbuffer, RXuart_size);
 8001d24:	4b08      	ldr	r3, [pc, #32]	@ (8001d48 <HAL_UART_RxCpltCallback+0x64>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4907      	ldr	r1, [pc, #28]	@ (8001d4c <HAL_UART_RxCpltCallback+0x68>)
 8001d2e:	4808      	ldr	r0, [pc, #32]	@ (8001d50 <HAL_UART_RxCpltCallback+0x6c>)
 8001d30:	f003 fd82 	bl	8005838 <HAL_UART_Receive_DMA>
		RXuart_flag = true;
 8001d34:	4b03      	ldr	r3, [pc, #12]	@ (8001d44 <HAL_UART_RxCpltCallback+0x60>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000439 	.word	0x20000439
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000424 	.word	0x20000424
 8001d50:	200002cc 	.word	0x200002cc

08001d54 <HAL_TIM_PeriodElapsedCallback>:

// ISR TIMER
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	pid_flag = true;
 8001d5c:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000474 	.word	0x20000474

08001d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d78:	b672      	cpsid	i
}
 8001d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <Error_Handler+0x8>

08001d80 <PIDController_Init>:
 *      Based on: https://github.com/pms67/PID/tree/master
 */

#include "pid.h"

void PIDController_Init(PIDController *pid) {
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->prevError  = 0.0f;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	629a      	str	r2, [r3, #40]	@ 0x28

	pid->differentiator  = 0.0f;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->prevMeasurement = 0.0f;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	@ 0x30

	pid->out = 0.0f;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dc8:	edc7 0a01 	vstr	s1, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8001dcc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd8:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dea:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dfa:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001dfe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 8001e12:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e16:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3c:	dd04      	ble.n	8001e48 <PIDController_Update+0x8c>

        pid->integrator = pid->limMaxInt;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	69da      	ldr	r2, [r3, #28]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e46:	e00e      	b.n	8001e66 <PIDController_Update+0xaa>

    } else if (pid->integrator < pid->limMinInt) {
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	d503      	bpl.n	8001e66 <PIDController_Update+0xaa>

        pid->integrator = pid->limMinInt;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24

	/*
	* Derivative (band-limited differentiator)
	*/

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e6c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001e76:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e88:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001ea4:	eef1 6a67 	vneg.f32	s13, s15
                        / (2.0f * pid->tau + pid->T);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001ecc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    if (pid->out > pid->limMax) {
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	dd04      	ble.n	8001f04 <PIDController_Update+0x148>

        pid->out = pid->limMax;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f02:	e00e      	b.n	8001f22 <PIDController_Update+0x166>

    } else if (pid->out < pid->limMin) {
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	d503      	bpl.n	8001f22 <PIDController_Update+0x166>

        pid->out = pid->limMin;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	635a      	str	r2, [r3, #52]	@ 0x34

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->prevMeasurement = measurement;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Return controller output */
    return pid->out;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f32:	ee07 3a90 	vmov	s15, r3

}
 8001f36:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <HAL_MspInit+0x4c>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	4a0f      	ldr	r2, [pc, #60]	@ (8001f90 <HAL_MspInit+0x4c>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_MspInit+0x4c>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <HAL_MspInit+0x4c>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	4a08      	ldr	r2, [pc, #32]	@ (8001f90 <HAL_MspInit+0x4c>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_MspInit+0x4c>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800

08001f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	@ 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a17      	ldr	r2, [pc, #92]	@ (8002010 <HAL_ADC_MspInit+0x7c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d127      	bne.n	8002006 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <HAL_ADC_MspInit+0x80>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	4a15      	ldr	r2, [pc, #84]	@ (8002014 <HAL_ADC_MspInit+0x80>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fc6:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <HAL_ADC_MspInit+0x80>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <HAL_ADC_MspInit+0x80>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	4a0e      	ldr	r2, [pc, #56]	@ (8002014 <HAL_ADC_MspInit+0x80>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <HAL_ADC_MspInit+0x80>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	@ (8002018 <HAL_ADC_MspInit+0x84>)
 8002002:	f001 fc13 	bl	800382c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	@ 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40012000 	.word	0x40012000
 8002014:	40023800 	.word	0x40023800
 8002018:	40020000 	.word	0x40020000

0800201c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a18      	ldr	r2, [pc, #96]	@ (800208c <HAL_TIM_Base_MspInit+0x70>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d10e      	bne.n	800204c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <HAL_TIM_Base_MspInit+0x74>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	4a16      	ldr	r2, [pc, #88]	@ (8002090 <HAL_TIM_Base_MspInit+0x74>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6453      	str	r3, [r2, #68]	@ 0x44
 800203e:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <HAL_TIM_Base_MspInit+0x74>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800204a:	e01a      	b.n	8002082 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a10      	ldr	r2, [pc, #64]	@ (8002094 <HAL_TIM_Base_MspInit+0x78>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d115      	bne.n	8002082 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <HAL_TIM_Base_MspInit+0x74>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	4a0c      	ldr	r2, [pc, #48]	@ (8002090 <HAL_TIM_Base_MspInit+0x74>)
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	6413      	str	r3, [r2, #64]	@ 0x40
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <HAL_TIM_Base_MspInit+0x74>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	201d      	movs	r0, #29
 8002078:	f000 ff9f 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800207c:	201d      	movs	r0, #29
 800207e:	f000 ffb8 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40010000 	.word	0x40010000
 8002090:	40023800 	.word	0x40023800
 8002094:	40000400 	.word	0x40000400

08002098 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <HAL_TIM_MspPostInit+0x68>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d11e      	bne.n	80020f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <HAL_TIM_MspPostInit+0x6c>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	4a10      	ldr	r2, [pc, #64]	@ (8002104 <HAL_TIM_MspPostInit+0x6c>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002104 <HAL_TIM_MspPostInit+0x6c>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = M1_1_Pin|M1_0_Pin|M2_0_Pin|M2_1_Pin;
 80020d6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80020da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020e8:	2301      	movs	r3, #1
 80020ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	4619      	mov	r1, r3
 80020f2:	4805      	ldr	r0, [pc, #20]	@ (8002108 <HAL_TIM_MspPostInit+0x70>)
 80020f4:	f001 fb9a 	bl	800382c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020f8:	bf00      	nop
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40010000 	.word	0x40010000
 8002104:	40023800 	.word	0x40023800
 8002108:	40020000 	.word	0x40020000

0800210c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	@ 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a4c      	ldr	r2, [pc, #304]	@ (800225c <HAL_UART_MspInit+0x150>)
 800212a:	4293      	cmp	r3, r2
 800212c:	f040 8092 	bne.w	8002254 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	4b4a      	ldr	r3, [pc, #296]	@ (8002260 <HAL_UART_MspInit+0x154>)
 8002136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002138:	4a49      	ldr	r2, [pc, #292]	@ (8002260 <HAL_UART_MspInit+0x154>)
 800213a:	f043 0310 	orr.w	r3, r3, #16
 800213e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002140:	4b47      	ldr	r3, [pc, #284]	@ (8002260 <HAL_UART_MspInit+0x154>)
 8002142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	4b43      	ldr	r3, [pc, #268]	@ (8002260 <HAL_UART_MspInit+0x154>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	4a42      	ldr	r2, [pc, #264]	@ (8002260 <HAL_UART_MspInit+0x154>)
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	6313      	str	r3, [r2, #48]	@ 0x30
 800215c:	4b40      	ldr	r3, [pc, #256]	@ (8002260 <HAL_UART_MspInit+0x154>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002168:	23c0      	movs	r3, #192	@ 0xc0
 800216a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002174:	2303      	movs	r3, #3
 8002176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002178:	2307      	movs	r3, #7
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	4838      	ldr	r0, [pc, #224]	@ (8002264 <HAL_UART_MspInit+0x158>)
 8002184:	f001 fb52 	bl	800382c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8002188:	4b37      	ldr	r3, [pc, #220]	@ (8002268 <HAL_UART_MspInit+0x15c>)
 800218a:	4a38      	ldr	r2, [pc, #224]	@ (800226c <HAL_UART_MspInit+0x160>)
 800218c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800218e:	4b36      	ldr	r3, [pc, #216]	@ (8002268 <HAL_UART_MspInit+0x15c>)
 8002190:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002194:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002196:	4b34      	ldr	r3, [pc, #208]	@ (8002268 <HAL_UART_MspInit+0x15c>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219c:	4b32      	ldr	r3, [pc, #200]	@ (8002268 <HAL_UART_MspInit+0x15c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021a2:	4b31      	ldr	r3, [pc, #196]	@ (8002268 <HAL_UART_MspInit+0x15c>)
 80021a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002268 <HAL_UART_MspInit+0x15c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <HAL_UART_MspInit+0x15c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80021b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002268 <HAL_UART_MspInit+0x15c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80021bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002268 <HAL_UART_MspInit+0x15c>)
 80021be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021c4:	4b28      	ldr	r3, [pc, #160]	@ (8002268 <HAL_UART_MspInit+0x15c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021ca:	4827      	ldr	r0, [pc, #156]	@ (8002268 <HAL_UART_MspInit+0x15c>)
 80021cc:	f000 ff2c 	bl	8003028 <HAL_DMA_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80021d6:	f7ff fdcd 	bl	8001d74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a22      	ldr	r2, [pc, #136]	@ (8002268 <HAL_UART_MspInit+0x15c>)
 80021de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021e0:	4a21      	ldr	r2, [pc, #132]	@ (8002268 <HAL_UART_MspInit+0x15c>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80021e6:	4b22      	ldr	r3, [pc, #136]	@ (8002270 <HAL_UART_MspInit+0x164>)
 80021e8:	4a22      	ldr	r2, [pc, #136]	@ (8002274 <HAL_UART_MspInit+0x168>)
 80021ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80021ec:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <HAL_UART_MspInit+0x164>)
 80021ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002270 <HAL_UART_MspInit+0x164>)
 80021f6:	2240      	movs	r2, #64	@ 0x40
 80021f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002270 <HAL_UART_MspInit+0x164>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002200:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <HAL_UART_MspInit+0x164>)
 8002202:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002206:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002208:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <HAL_UART_MspInit+0x164>)
 800220a:	2200      	movs	r2, #0
 800220c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800220e:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <HAL_UART_MspInit+0x164>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002214:	4b16      	ldr	r3, [pc, #88]	@ (8002270 <HAL_UART_MspInit+0x164>)
 8002216:	2200      	movs	r2, #0
 8002218:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800221a:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <HAL_UART_MspInit+0x164>)
 800221c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002220:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002222:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <HAL_UART_MspInit+0x164>)
 8002224:	2200      	movs	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002228:	4811      	ldr	r0, [pc, #68]	@ (8002270 <HAL_UART_MspInit+0x164>)
 800222a:	f000 fefd 	bl	8003028 <HAL_DMA_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002234:	f7ff fd9e 	bl	8001d74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0d      	ldr	r2, [pc, #52]	@ (8002270 <HAL_UART_MspInit+0x164>)
 800223c:	639a      	str	r2, [r3, #56]	@ 0x38
 800223e:	4a0c      	ldr	r2, [pc, #48]	@ (8002270 <HAL_UART_MspInit+0x164>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2100      	movs	r1, #0
 8002248:	2025      	movs	r0, #37	@ 0x25
 800224a:	f000 feb6 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800224e:	2025      	movs	r0, #37	@ 0x25
 8002250:	f000 fecf 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	@ 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40011000 	.word	0x40011000
 8002260:	40023800 	.word	0x40023800
 8002264:	40020400 	.word	0x40020400
 8002268:	20000314 	.word	0x20000314
 800226c:	40026488 	.word	0x40026488
 8002270:	20000374 	.word	0x20000374
 8002274:	400264b8 	.word	0x400264b8

08002278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <NMI_Handler+0x4>

08002280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <HardFault_Handler+0x4>

08002288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <MemManage_Handler+0x4>

08002290 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <BusFault_Handler+0x4>

08002298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <UsageFault_Handler+0x4>

080022a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ce:	f000 f987 	bl	80025e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <TIM3_IRQHandler+0x10>)
 80022de:	f002 fa7b 	bl	80047d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000284 	.word	0x20000284

080022ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <USART1_IRQHandler+0x10>)
 80022f2:	f003 fac7 	bl	8005884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200002cc 	.word	0x200002cc

08002300 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(fault_Pin);
 8002304:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002308:	f001 fc2e 	bl	8003b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}

08002310 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002314:	4802      	ldr	r0, [pc, #8]	@ (8002320 <DMA2_Stream5_IRQHandler+0x10>)
 8002316:	f001 f81f 	bl	8003358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000314 	.word	0x20000314

08002324 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002328:	4802      	ldr	r0, [pc, #8]	@ (8002334 <DMA2_Stream7_IRQHandler+0x10>)
 800232a:	f001 f815 	bl	8003358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000374 	.word	0x20000374

08002338 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return 1;
 800233c:	2301      	movs	r3, #1
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <_kill>:

int _kill(int pid, int sig)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002352:	f006 f837 	bl	80083c4 <__errno>
 8002356:	4603      	mov	r3, r0
 8002358:	2216      	movs	r2, #22
 800235a:	601a      	str	r2, [r3, #0]
  return -1;
 800235c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <_exit>:

void _exit (int status)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002370:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ffe7 	bl	8002348 <_kill>
  while (1) {}    /* Make sure we hang here */
 800237a:	bf00      	nop
 800237c:	e7fd      	b.n	800237a <_exit+0x12>

0800237e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	e00a      	b.n	80023a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002390:	f3af 8000 	nop.w
 8002394:	4601      	mov	r1, r0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	60ba      	str	r2, [r7, #8]
 800239c:	b2ca      	uxtb	r2, r1
 800239e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3301      	adds	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	dbf0      	blt.n	8002390 <_read+0x12>
  }

  return len;
 80023ae:	687b      	ldr	r3, [r7, #4]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e009      	b.n	80023de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	60ba      	str	r2, [r7, #8]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3301      	adds	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	dbf1      	blt.n	80023ca <_write+0x12>
  }
  return len;
 80023e6:	687b      	ldr	r3, [r7, #4]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_close>:

int _close(int file)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002418:	605a      	str	r2, [r3, #4]
  return 0;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_isatty>:

int _isatty(int file)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800243e:	b480      	push	{r7}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002460:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <_sbrk+0x5c>)
 8002462:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <_sbrk+0x60>)
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800246c:	4b13      	ldr	r3, [pc, #76]	@ (80024bc <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002474:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <_sbrk+0x64>)
 8002476:	4a12      	ldr	r2, [pc, #72]	@ (80024c0 <_sbrk+0x68>)
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247a:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d207      	bcs.n	8002498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002488:	f005 ff9c 	bl	80083c4 <__errno>
 800248c:	4603      	mov	r3, r0
 800248e:	220c      	movs	r2, #12
 8002490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002496:	e009      	b.n	80024ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002498:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249e:	4b07      	ldr	r3, [pc, #28]	@ (80024bc <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	4a05      	ldr	r2, [pc, #20]	@ (80024bc <_sbrk+0x64>)
 80024a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20020000 	.word	0x20020000
 80024b8:	00000400 	.word	0x00000400
 80024bc:	200004b0 	.word	0x200004b0
 80024c0:	20000608 	.word	0x20000608

080024c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <SystemInit+0x20>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ce:	4a05      	ldr	r2, [pc, #20]	@ (80024e4 <SystemInit+0x20>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002520 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024ec:	f7ff ffea 	bl	80024c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f0:	480c      	ldr	r0, [pc, #48]	@ (8002524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024f2:	490d      	ldr	r1, [pc, #52]	@ (8002528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024f4:	4a0d      	ldr	r2, [pc, #52]	@ (800252c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f8:	e002      	b.n	8002500 <LoopCopyDataInit>

080024fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fe:	3304      	adds	r3, #4

08002500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002504:	d3f9      	bcc.n	80024fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002506:	4a0a      	ldr	r2, [pc, #40]	@ (8002530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002508:	4c0a      	ldr	r4, [pc, #40]	@ (8002534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800250c:	e001      	b.n	8002512 <LoopFillZerobss>

0800250e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002510:	3204      	adds	r2, #4

08002512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002514:	d3fb      	bcc.n	800250e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002516:	f005 ff5b 	bl	80083d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800251a:	f7fe ff39 	bl	8001390 <main>
  bx  lr    
 800251e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002528:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800252c:	0800b2e0 	.word	0x0800b2e0
  ldr r2, =_sbss
 8002530:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002534:	20000604 	.word	0x20000604

08002538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002538:	e7fe      	b.n	8002538 <ADC_IRQHandler>
	...

0800253c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002540:	4b0e      	ldr	r3, [pc, #56]	@ (800257c <HAL_Init+0x40>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0d      	ldr	r2, [pc, #52]	@ (800257c <HAL_Init+0x40>)
 8002546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800254a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_Init+0x40>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <HAL_Init+0x40>)
 8002552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002558:	4b08      	ldr	r3, [pc, #32]	@ (800257c <HAL_Init+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a07      	ldr	r2, [pc, #28]	@ (800257c <HAL_Init+0x40>)
 800255e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002564:	2003      	movs	r0, #3
 8002566:	f000 fd1d 	bl	8002fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256a:	200f      	movs	r0, #15
 800256c:	f000 f808 	bl	8002580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002570:	f7ff fce8 	bl	8001f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023c00 	.word	0x40023c00

08002580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002588:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <HAL_InitTick+0x54>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_InitTick+0x58>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4619      	mov	r1, r3
 8002592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002596:	fbb3 f3f1 	udiv	r3, r3, r1
 800259a:	fbb2 f3f3 	udiv	r3, r2, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fd35 	bl	800300e <HAL_SYSTICK_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00e      	b.n	80025cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b0f      	cmp	r3, #15
 80025b2:	d80a      	bhi.n	80025ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b4:	2200      	movs	r2, #0
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025bc:	f000 fcfd 	bl	8002fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c0:	4a06      	ldr	r2, [pc, #24]	@ (80025dc <HAL_InitTick+0x5c>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e000      	b.n	80025cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000004 	.word	0x20000004
 80025d8:	2000000c 	.word	0x2000000c
 80025dc:	20000008 	.word	0x20000008

080025e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e4:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_IncTick+0x20>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <HAL_IncTick+0x24>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	4a04      	ldr	r2, [pc, #16]	@ (8002604 <HAL_IncTick+0x24>)
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	2000000c 	.word	0x2000000c
 8002604:	200004b4 	.word	0x200004b4

08002608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return uwTick;
 800260c:	4b03      	ldr	r3, [pc, #12]	@ (800261c <HAL_GetTick+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	200004b4 	.word	0x200004b4

08002620 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e033      	b.n	800269e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff fca8 	bl	8001f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	d118      	bne.n	8002690 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002666:	f023 0302 	bic.w	r3, r3, #2
 800266a:	f043 0202 	orr.w	r2, r3, #2
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 faca 	bl	8002c0c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f023 0303 	bic.w	r3, r3, #3
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40
 800268e:	e001      	b.n	8002694 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_Start+0x1a>
 80026be:	2302      	movs	r3, #2
 80026c0:	e097      	b.n	80027f2 <HAL_ADC_Start+0x14a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d018      	beq.n	800270a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026e8:	4b45      	ldr	r3, [pc, #276]	@ (8002800 <HAL_ADC_Start+0x158>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a45      	ldr	r2, [pc, #276]	@ (8002804 <HAL_ADC_Start+0x15c>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0c9a      	lsrs	r2, r3, #18
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026fc:	e002      	b.n	8002704 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3b01      	subs	r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f9      	bne.n	80026fe <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d15f      	bne.n	80027d8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002742:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002756:	d106      	bne.n	8002766 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275c:	f023 0206 	bic.w	r2, r3, #6
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	645a      	str	r2, [r3, #68]	@ 0x44
 8002764:	e002      	b.n	800276c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002774:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <HAL_ADC_Start+0x160>)
 8002776:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002780:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10f      	bne.n	80027ae <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d129      	bne.n	80027f0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e020      	b.n	80027f0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a16      	ldr	r2, [pc, #88]	@ (800280c <HAL_ADC_Start+0x164>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d11b      	bne.n	80027f0 <HAL_ADC_Start+0x148>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d114      	bne.n	80027f0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	e00b      	b.n	80027f0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	f043 0210 	orr.w	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000004 	.word	0x20000004
 8002804:	431bde83 	.word	0x431bde83
 8002808:	40012300 	.word	0x40012300
 800280c:	40012000 	.word	0x40012000

08002810 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_ADC_Stop+0x16>
 8002822:	2302      	movs	r3, #2
 8002824:	e021      	b.n	800286a <HAL_ADC_Stop+0x5a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	f043 0201 	orr.w	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800288e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002892:	d113      	bne.n	80028bc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800289e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028a2:	d10b      	bne.n	80028bc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e063      	b.n	8002984 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80028bc:	f7ff fea4 	bl	8002608 <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028c2:	e021      	b.n	8002908 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028ca:	d01d      	beq.n	8002908 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <HAL_ADC_PollForConversion+0x6c>
 80028d2:	f7ff fe99 	bl	8002608 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d212      	bcs.n	8002908 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d00b      	beq.n	8002908 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f043 0204 	orr.w	r2, r3, #4
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e03d      	b.n	8002984 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d1d6      	bne.n	80028c4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f06f 0212 	mvn.w	r2, #18
 800291e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d123      	bne.n	8002982 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800293e:	2b00      	cmp	r3, #0
 8002940:	d11f      	bne.n	8002982 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800295a:	2b00      	cmp	r3, #0
 800295c:	d111      	bne.n	8002982 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d105      	bne.n	8002982 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x1c>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e113      	b.n	8002bec <HAL_ADC_ConfigChannel+0x244>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b09      	cmp	r3, #9
 80029d2:	d925      	bls.n	8002a20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68d9      	ldr	r1, [r3, #12]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	3b1e      	subs	r3, #30
 80029ea:	2207      	movs	r2, #7
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43da      	mvns	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	400a      	ands	r2, r1
 80029f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68d9      	ldr	r1, [r3, #12]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4403      	add	r3, r0
 8002a12:	3b1e      	subs	r3, #30
 8002a14:	409a      	lsls	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	e022      	b.n	8002a66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6919      	ldr	r1, [r3, #16]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	2207      	movs	r2, #7
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	400a      	ands	r2, r1
 8002a42:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6919      	ldr	r1, [r3, #16]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	4618      	mov	r0, r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4403      	add	r3, r0
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d824      	bhi.n	8002ab8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3b05      	subs	r3, #5
 8002a80:	221f      	movs	r2, #31
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b05      	subs	r3, #5
 8002aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ab6:	e04c      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b0c      	cmp	r3, #12
 8002abe:	d824      	bhi.n	8002b0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b23      	subs	r3, #35	@ 0x23
 8002ad2:	221f      	movs	r2, #31
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	400a      	ands	r2, r1
 8002ae0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	3b23      	subs	r3, #35	@ 0x23
 8002afc:	fa00 f203 	lsl.w	r2, r0, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b08:	e023      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	3b41      	subs	r3, #65	@ 0x41
 8002b1c:	221f      	movs	r2, #31
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	400a      	ands	r2, r1
 8002b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4618      	mov	r0, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	3b41      	subs	r3, #65	@ 0x41
 8002b46:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b52:	4b29      	ldr	r3, [pc, #164]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x250>)
 8002b54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a28      	ldr	r2, [pc, #160]	@ (8002bfc <HAL_ADC_ConfigChannel+0x254>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d10f      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x1d8>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b12      	cmp	r3, #18
 8002b66:	d10b      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1d      	ldr	r2, [pc, #116]	@ (8002bfc <HAL_ADC_ConfigChannel+0x254>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d12b      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x23a>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c00 <HAL_ADC_ConfigChannel+0x258>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d003      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x1f4>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b11      	cmp	r3, #17
 8002b9a:	d122      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a11      	ldr	r2, [pc, #68]	@ (8002c00 <HAL_ADC_ConfigChannel+0x258>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d111      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bbe:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <HAL_ADC_ConfigChannel+0x25c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a11      	ldr	r2, [pc, #68]	@ (8002c08 <HAL_ADC_ConfigChannel+0x260>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	0c9a      	lsrs	r2, r3, #18
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bd4:	e002      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f9      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40012300 	.word	0x40012300
 8002bfc:	40012000 	.word	0x40012000
 8002c00:	10000012 	.word	0x10000012
 8002c04:	20000004 	.word	0x20000004
 8002c08:	431bde83 	.word	0x431bde83

08002c0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c14:	4b79      	ldr	r3, [pc, #484]	@ (8002dfc <ADC_Init+0x1f0>)
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	021a      	lsls	r2, r3, #8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6899      	ldr	r1, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	4a58      	ldr	r2, [pc, #352]	@ (8002e00 <ADC_Init+0x1f4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d022      	beq.n	8002cea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6899      	ldr	r1, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6899      	ldr	r1, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	e00f      	b.n	8002d0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d08:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0202 	bic.w	r2, r2, #2
 8002d18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6899      	ldr	r1, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7e1b      	ldrb	r3, [r3, #24]
 8002d24:	005a      	lsls	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d46:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d62:	3b01      	subs	r3, #1
 8002d64:	035a      	lsls	r2, r3, #13
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	e007      	b.n	8002d80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d7e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	051a      	lsls	r2, r3, #20
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6899      	ldr	r1, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dc2:	025a      	lsls	r2, r3, #9
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6899      	ldr	r1, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	029a      	lsls	r2, r3, #10
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	40012300 	.word	0x40012300
 8002e00:	0f000001 	.word	0x0f000001

08002e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e14:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <__NVIC_SetPriorityGrouping+0x44>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e20:	4013      	ands	r3, r2
 8002e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e36:	4a04      	ldr	r2, [pc, #16]	@ (8002e48 <__NVIC_SetPriorityGrouping+0x44>)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	60d3      	str	r3, [r2, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e50:	4b04      	ldr	r3, [pc, #16]	@ (8002e64 <__NVIC_GetPriorityGrouping+0x18>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	f003 0307 	and.w	r3, r3, #7
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	db0b      	blt.n	8002e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	f003 021f 	and.w	r2, r3, #31
 8002e80:	4907      	ldr	r1, [pc, #28]	@ (8002ea0 <__NVIC_EnableIRQ+0x38>)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	2001      	movs	r0, #1
 8002e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000e100 	.word	0xe000e100

08002ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	6039      	str	r1, [r7, #0]
 8002eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	db0a      	blt.n	8002ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	490c      	ldr	r1, [pc, #48]	@ (8002ef0 <__NVIC_SetPriority+0x4c>)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ecc:	e00a      	b.n	8002ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4908      	ldr	r1, [pc, #32]	@ (8002ef4 <__NVIC_SetPriority+0x50>)
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	3b04      	subs	r3, #4
 8002edc:	0112      	lsls	r2, r2, #4
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	761a      	strb	r2, [r3, #24]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000e100 	.word	0xe000e100
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b089      	sub	sp, #36	@ 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f1c3 0307 	rsb	r3, r3, #7
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	bf28      	it	cs
 8002f16:	2304      	movcs	r3, #4
 8002f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d902      	bls.n	8002f28 <NVIC_EncodePriority+0x30>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3b03      	subs	r3, #3
 8002f26:	e000      	b.n	8002f2a <NVIC_EncodePriority+0x32>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	43d9      	mvns	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	4313      	orrs	r3, r2
         );
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3724      	adds	r7, #36	@ 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f70:	d301      	bcc.n	8002f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00f      	b.n	8002f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f76:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa0 <SysTick_Config+0x40>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f7e:	210f      	movs	r1, #15
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f84:	f7ff ff8e 	bl	8002ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f88:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <SysTick_Config+0x40>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8e:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <SysTick_Config+0x40>)
 8002f90:	2207      	movs	r2, #7
 8002f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	e000e010 	.word	0xe000e010

08002fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff29 	bl	8002e04 <__NVIC_SetPriorityGrouping>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fcc:	f7ff ff3e 	bl	8002e4c <__NVIC_GetPriorityGrouping>
 8002fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	6978      	ldr	r0, [r7, #20]
 8002fd8:	f7ff ff8e 	bl	8002ef8 <NVIC_EncodePriority>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff5d 	bl	8002ea4 <__NVIC_SetPriority>
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff31 	bl	8002e68 <__NVIC_EnableIRQ>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ffa2 	bl	8002f60 <SysTick_Config>
 800301c:	4603      	mov	r3, r0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003034:	f7ff fae8 	bl	8002608 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e099      	b.n	8003178 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003064:	e00f      	b.n	8003086 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003066:	f7ff facf 	bl	8002608 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b05      	cmp	r3, #5
 8003072:	d908      	bls.n	8003086 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2203      	movs	r2, #3
 800307e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e078      	b.n	8003178 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e8      	bne.n	8003066 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4b38      	ldr	r3, [pc, #224]	@ (8003180 <HAL_DMA_Init+0x158>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d107      	bne.n	80030f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	4313      	orrs	r3, r2
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0307 	bic.w	r3, r3, #7
 8003106:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	2b04      	cmp	r3, #4
 8003118:	d117      	bne.n	800314a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00e      	beq.n	800314a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fb01 	bl	8003734 <DMA_CheckFifoParam>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2240      	movs	r2, #64	@ 0x40
 800313c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003146:	2301      	movs	r3, #1
 8003148:	e016      	b.n	8003178 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fab8 	bl	80036c8 <DMA_CalcBaseAndBitshift>
 8003158:	4603      	mov	r3, r0
 800315a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003160:	223f      	movs	r2, #63	@ 0x3f
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	f010803f 	.word	0xf010803f

08003184 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_DMA_Start_IT+0x26>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e040      	b.n	800322c <HAL_DMA_Start_IT+0xa8>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d12f      	bne.n	800321e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fa4a 	bl	800366c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031dc:	223f      	movs	r2, #63	@ 0x3f
 80031de:	409a      	lsls	r2, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0216 	orr.w	r2, r2, #22
 80031f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0208 	orr.w	r2, r2, #8
 800320a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e005      	b.n	800322a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003226:	2302      	movs	r3, #2
 8003228:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800322a:	7dfb      	ldrb	r3, [r7, #23]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003240:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003242:	f7ff f9e1 	bl	8002608 <HAL_GetTick>
 8003246:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d008      	beq.n	8003266 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2280      	movs	r2, #128	@ 0x80
 8003258:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e052      	b.n	800330c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0216 	bic.w	r2, r2, #22
 8003274:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003284:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d103      	bne.n	8003296 <HAL_DMA_Abort+0x62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0208 	bic.w	r2, r2, #8
 80032a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b6:	e013      	b.n	80032e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b8:	f7ff f9a6 	bl	8002608 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d90c      	bls.n	80032e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2203      	movs	r2, #3
 80032d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e015      	b.n	800330c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e4      	bne.n	80032b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f2:	223f      	movs	r2, #63	@ 0x3f
 80032f4:	409a      	lsls	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d004      	beq.n	8003332 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2280      	movs	r2, #128	@ 0x80
 800332c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e00c      	b.n	800334c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2205      	movs	r2, #5
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003364:	4b8e      	ldr	r3, [pc, #568]	@ (80035a0 <HAL_DMA_IRQHandler+0x248>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a8e      	ldr	r2, [pc, #568]	@ (80035a4 <HAL_DMA_IRQHandler+0x24c>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	0a9b      	lsrs	r3, r3, #10
 8003370:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003382:	2208      	movs	r2, #8
 8003384:	409a      	lsls	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01a      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0204 	bic.w	r2, r2, #4
 80033aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b0:	2208      	movs	r2, #8
 80033b2:	409a      	lsls	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c8:	2201      	movs	r2, #1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d012      	beq.n	80033fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e6:	2201      	movs	r2, #1
 80033e8:	409a      	lsls	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f2:	f043 0202 	orr.w	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fe:	2204      	movs	r2, #4
 8003400:	409a      	lsls	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341c:	2204      	movs	r2, #4
 800341e:	409a      	lsls	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003434:	2210      	movs	r2, #16
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d043      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d03c      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003452:	2210      	movs	r2, #16
 8003454:	409a      	lsls	r2, r3
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d018      	beq.n	800349a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d024      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
 8003486:	e01f      	b.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01b      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
 8003498:	e016      	b.n	80034c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0208 	bic.w	r2, r2, #8
 80034b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034cc:	2220      	movs	r2, #32
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 808f 	beq.w	80035f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8087 	beq.w	80035f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ee:	2220      	movs	r2, #32
 80034f0:	409a      	lsls	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b05      	cmp	r3, #5
 8003500:	d136      	bne.n	8003570 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0216 	bic.w	r2, r2, #22
 8003510:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003520:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <HAL_DMA_IRQHandler+0x1da>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003546:	223f      	movs	r2, #63	@ 0x3f
 8003548:	409a      	lsls	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003562:	2b00      	cmp	r3, #0
 8003564:	d07e      	beq.n	8003664 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
        }
        return;
 800356e:	e079      	b.n	8003664 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d01d      	beq.n	80035ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10d      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003590:	2b00      	cmp	r3, #0
 8003592:	d031      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
 800359c:	e02c      	b.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
 800359e:	bf00      	nop
 80035a0:	20000004 	.word	0x20000004
 80035a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d023      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
 80035b8:	e01e      	b.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10f      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0210 	bic.w	r2, r2, #16
 80035d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d032      	beq.n	8003666 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d022      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2205      	movs	r2, #5
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	3301      	adds	r3, #1
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	429a      	cmp	r2, r3
 800362e:	d307      	bcc.n	8003640 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f2      	bne.n	8003624 <HAL_DMA_IRQHandler+0x2cc>
 800363e:	e000      	b.n	8003642 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003640:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4798      	blx	r3
 8003662:	e000      	b.n	8003666 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003664:	bf00      	nop
    }
  }
}
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003688:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b40      	cmp	r3, #64	@ 0x40
 8003698:	d108      	bne.n	80036ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036aa:	e007      	b.n	80036bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	3b10      	subs	r3, #16
 80036d8:	4a14      	ldr	r2, [pc, #80]	@ (800372c <DMA_CalcBaseAndBitshift+0x64>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036e2:	4a13      	ldr	r2, [pc, #76]	@ (8003730 <DMA_CalcBaseAndBitshift+0x68>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d909      	bls.n	800370a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	1d1a      	adds	r2, r3, #4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	659a      	str	r2, [r3, #88]	@ 0x58
 8003708:	e007      	b.n	800371a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	aaaaaaab 	.word	0xaaaaaaab
 8003730:	0800aea4 	.word	0x0800aea4

08003734 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11f      	bne.n	800378e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d856      	bhi.n	8003802 <DMA_CheckFifoParam+0xce>
 8003754:	a201      	add	r2, pc, #4	@ (adr r2, 800375c <DMA_CheckFifoParam+0x28>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	0800376d 	.word	0x0800376d
 8003760:	0800377f 	.word	0x0800377f
 8003764:	0800376d 	.word	0x0800376d
 8003768:	08003803 	.word	0x08003803
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d046      	beq.n	8003806 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377c:	e043      	b.n	8003806 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003786:	d140      	bne.n	800380a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378c:	e03d      	b.n	800380a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003796:	d121      	bne.n	80037dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b03      	cmp	r3, #3
 800379c:	d837      	bhi.n	800380e <DMA_CheckFifoParam+0xda>
 800379e:	a201      	add	r2, pc, #4	@ (adr r2, 80037a4 <DMA_CheckFifoParam+0x70>)
 80037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037bb 	.word	0x080037bb
 80037ac:	080037b5 	.word	0x080037b5
 80037b0:	080037cd 	.word	0x080037cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      break;
 80037b8:	e030      	b.n	800381c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d025      	beq.n	8003812 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ca:	e022      	b.n	8003812 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037d4:	d11f      	bne.n	8003816 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037da:	e01c      	b.n	8003816 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d903      	bls.n	80037ea <DMA_CheckFifoParam+0xb6>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d003      	beq.n	80037f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037e8:	e018      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      break;
 80037ee:	e015      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00e      	beq.n	800381a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003800:	e00b      	b.n	800381a <DMA_CheckFifoParam+0xe6>
      break;
 8003802:	bf00      	nop
 8003804:	e00a      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 8003806:	bf00      	nop
 8003808:	e008      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
 800380c:	e006      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800380e:	bf00      	nop
 8003810:	e004      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 8003812:	bf00      	nop
 8003814:	e002      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;   
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
    }
  } 
  
  return status; 
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop

0800382c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	@ 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e159      	b.n	8003afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	f040 8148 	bne.w	8003af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d005      	beq.n	800387e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	2b02      	cmp	r3, #2
 800387c:	d130      	bne.n	80038e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 0201 	and.w	r2, r3, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d017      	beq.n	800391c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d123      	bne.n	8003970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3208      	adds	r2, #8
 8003930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0203 	and.w	r2, r3, #3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80a2 	beq.w	8003af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4b57      	ldr	r3, [pc, #348]	@ (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	4a56      	ldr	r2, [pc, #344]	@ (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039c2:	4b54      	ldr	r3, [pc, #336]	@ (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ce:	4a52      	ldr	r2, [pc, #328]	@ (8003b18 <HAL_GPIO_Init+0x2ec>)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	3302      	adds	r3, #2
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	220f      	movs	r2, #15
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a49      	ldr	r2, [pc, #292]	@ (8003b1c <HAL_GPIO_Init+0x2f0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d019      	beq.n	8003a2e <HAL_GPIO_Init+0x202>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a48      	ldr	r2, [pc, #288]	@ (8003b20 <HAL_GPIO_Init+0x2f4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_Init+0x1fe>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a47      	ldr	r2, [pc, #284]	@ (8003b24 <HAL_GPIO_Init+0x2f8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00d      	beq.n	8003a26 <HAL_GPIO_Init+0x1fa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a46      	ldr	r2, [pc, #280]	@ (8003b28 <HAL_GPIO_Init+0x2fc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <HAL_GPIO_Init+0x1f6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a45      	ldr	r2, [pc, #276]	@ (8003b2c <HAL_GPIO_Init+0x300>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_GPIO_Init+0x1f2>
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	e008      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a1e:	2307      	movs	r3, #7
 8003a20:	e006      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a22:	2303      	movs	r3, #3
 8003a24:	e004      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e002      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	f002 0203 	and.w	r2, r2, #3
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	4093      	lsls	r3, r2
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a40:	4935      	ldr	r1, [pc, #212]	@ (8003b18 <HAL_GPIO_Init+0x2ec>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a4e:	4b38      	ldr	r3, [pc, #224]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a72:	4a2f      	ldr	r2, [pc, #188]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a78:	4b2d      	ldr	r3, [pc, #180]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a9c:	4a24      	ldr	r2, [pc, #144]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aa2:	4b23      	ldr	r3, [pc, #140]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003acc:	4b18      	ldr	r3, [pc, #96]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003af0:	4a0f      	ldr	r2, [pc, #60]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	f67f aea2 	bls.w	8003848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3724      	adds	r7, #36	@ 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	40020400 	.word	0x40020400
 8003b24:	40020800 	.word	0x40020800
 8003b28:	40020c00 	.word	0x40020c00
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40013c00 	.word	0x40013c00

08003b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]
 8003b40:	4613      	mov	r3, r2
 8003b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b44:	787b      	ldrb	r3, [r7, #1]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b4a:	887a      	ldrh	r2, [r7, #2]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b50:	e003      	b.n	8003b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b52:	887b      	ldrh	r3, [r7, #2]
 8003b54:	041a      	lsls	r2, r3, #16
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	619a      	str	r2, [r3, #24]
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
	...

08003b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b72:	4b08      	ldr	r3, [pc, #32]	@ (8003b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b7e:	4a05      	ldr	r2, [pc, #20]	@ (8003b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f806 	bl	8003b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40013c00 	.word	0x40013c00

08003b98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e267      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d075      	beq.n	8003cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bce:	4b88      	ldr	r3, [pc, #544]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d00c      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bda:	4b85      	ldr	r3, [pc, #532]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d112      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be6:	4b82      	ldr	r3, [pc, #520]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bf2:	d10b      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	4b7e      	ldr	r3, [pc, #504]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05b      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x108>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d157      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e242      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c14:	d106      	bne.n	8003c24 <HAL_RCC_OscConfig+0x74>
 8003c16:	4b76      	ldr	r3, [pc, #472]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a75      	ldr	r2, [pc, #468]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e01d      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x98>
 8003c2e:	4b70      	ldr	r3, [pc, #448]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a6f      	ldr	r2, [pc, #444]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a6c      	ldr	r2, [pc, #432]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c48:	4b69      	ldr	r3, [pc, #420]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a68      	ldr	r2, [pc, #416]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b66      	ldr	r3, [pc, #408]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a65      	ldr	r2, [pc, #404]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fe fcce 	bl	8002608 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fe fcca 	bl	8002608 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	@ 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e207      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	4b5b      	ldr	r3, [pc, #364]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0xc0>
 8003c8e:	e014      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fe fcba 	bl	8002608 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fe fcb6 	bl	8002608 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	@ 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e1f3      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	4b51      	ldr	r3, [pc, #324]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0xe8>
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d063      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cc6:	4b4a      	ldr	r3, [pc, #296]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd2:	4b47      	ldr	r3, [pc, #284]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d11c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cde:	4b44      	ldr	r3, [pc, #272]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d116      	bne.n	8003d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	4b41      	ldr	r3, [pc, #260]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_RCC_OscConfig+0x152>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e1c7      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d02:	4b3b      	ldr	r3, [pc, #236]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4937      	ldr	r1, [pc, #220]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	e03a      	b.n	8003d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d020      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d20:	4b34      	ldr	r3, [pc, #208]	@ (8003df4 <HAL_RCC_OscConfig+0x244>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fe fc6f 	bl	8002608 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2e:	f7fe fc6b 	bl	8002608 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e1a8      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	4b2b      	ldr	r3, [pc, #172]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4c:	4b28      	ldr	r3, [pc, #160]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4925      	ldr	r1, [pc, #148]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	e015      	b.n	8003d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d62:	4b24      	ldr	r3, [pc, #144]	@ (8003df4 <HAL_RCC_OscConfig+0x244>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fe fc4e 	bl	8002608 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d70:	f7fe fc4a 	bl	8002608 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e187      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	4b1b      	ldr	r3, [pc, #108]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d036      	beq.n	8003e08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da2:	4b15      	ldr	r3, [pc, #84]	@ (8003df8 <HAL_RCC_OscConfig+0x248>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da8:	f7fe fc2e 	bl	8002608 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db0:	f7fe fc2a 	bl	8002608 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e167      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x200>
 8003dce:	e01b      	b.n	8003e08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd0:	4b09      	ldr	r3, [pc, #36]	@ (8003df8 <HAL_RCC_OscConfig+0x248>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd6:	f7fe fc17 	bl	8002608 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	e00e      	b.n	8003dfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dde:	f7fe fc13 	bl	8002608 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d907      	bls.n	8003dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e150      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
 8003df0:	40023800 	.word	0x40023800
 8003df4:	42470000 	.word	0x42470000
 8003df8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	4b88      	ldr	r3, [pc, #544]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ea      	bne.n	8003dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8097 	beq.w	8003f44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e16:	2300      	movs	r3, #0
 8003e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1a:	4b81      	ldr	r3, [pc, #516]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10f      	bne.n	8003e46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	4b7d      	ldr	r3, [pc, #500]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	4a7c      	ldr	r2, [pc, #496]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e36:	4b7a      	ldr	r3, [pc, #488]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	4b77      	ldr	r3, [pc, #476]	@ (8004024 <HAL_RCC_OscConfig+0x474>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d118      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e52:	4b74      	ldr	r3, [pc, #464]	@ (8004024 <HAL_RCC_OscConfig+0x474>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a73      	ldr	r2, [pc, #460]	@ (8004024 <HAL_RCC_OscConfig+0x474>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5e:	f7fe fbd3 	bl	8002608 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fe fbcf 	bl	8002608 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e10c      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	4b6a      	ldr	r3, [pc, #424]	@ (8004024 <HAL_RCC_OscConfig+0x474>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCC_OscConfig+0x2ea>
 8003e8c:	4b64      	ldr	r3, [pc, #400]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e90:	4a63      	ldr	r2, [pc, #396]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e98:	e01c      	b.n	8003ed4 <HAL_RCC_OscConfig+0x324>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x30c>
 8003ea2:	4b5f      	ldr	r3, [pc, #380]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea6:	4a5e      	ldr	r2, [pc, #376]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	f043 0304 	orr.w	r3, r3, #4
 8003eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eae:	4b5c      	ldr	r3, [pc, #368]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb2:	4a5b      	ldr	r2, [pc, #364]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eba:	e00b      	b.n	8003ed4 <HAL_RCC_OscConfig+0x324>
 8003ebc:	4b58      	ldr	r3, [pc, #352]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec0:	4a57      	ldr	r2, [pc, #348]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec8:	4b55      	ldr	r3, [pc, #340]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ecc:	4a54      	ldr	r2, [pc, #336]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ece:	f023 0304 	bic.w	r3, r3, #4
 8003ed2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d015      	beq.n	8003f08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fe fb94 	bl	8002608 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fe fb90 	bl	8002608 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e0cb      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efa:	4b49      	ldr	r3, [pc, #292]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0ee      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x334>
 8003f06:	e014      	b.n	8003f32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f08:	f7fe fb7e 	bl	8002608 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fe fb7a 	bl	8002608 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e0b5      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f26:	4b3e      	ldr	r3, [pc, #248]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1ee      	bne.n	8003f10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f38:	4b39      	ldr	r3, [pc, #228]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	4a38      	ldr	r2, [pc, #224]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80a1 	beq.w	8004090 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f4e:	4b34      	ldr	r3, [pc, #208]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d05c      	beq.n	8004014 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d141      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b31      	ldr	r3, [pc, #196]	@ (8004028 <HAL_RCC_OscConfig+0x478>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe fb4e 	bl	8002608 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fe fb4a 	bl	8002608 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e087      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	4b27      	ldr	r3, [pc, #156]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	019b      	lsls	r3, r3, #6
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa4:	085b      	lsrs	r3, r3, #1
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	041b      	lsls	r3, r3, #16
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	491b      	ldr	r1, [pc, #108]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004028 <HAL_RCC_OscConfig+0x478>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbe:	f7fe fb23 	bl	8002608 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc6:	f7fe fb1f 	bl	8002608 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e05c      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd8:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x416>
 8003fe4:	e054      	b.n	8004090 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe6:	4b10      	ldr	r3, [pc, #64]	@ (8004028 <HAL_RCC_OscConfig+0x478>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fe fb0c 	bl	8002608 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fe fb08 	bl	8002608 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e045      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004006:	4b06      	ldr	r3, [pc, #24]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x444>
 8004012:	e03d      	b.n	8004090 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d107      	bne.n	800402c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e038      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
 8004020:	40023800 	.word	0x40023800
 8004024:	40007000 	.word	0x40007000
 8004028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800402c:	4b1b      	ldr	r3, [pc, #108]	@ (800409c <HAL_RCC_OscConfig+0x4ec>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d028      	beq.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d121      	bne.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d11a      	bne.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800405c:	4013      	ands	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004064:	4293      	cmp	r3, r2
 8004066:	d111      	bne.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	3b01      	subs	r3, #1
 8004076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004078:	429a      	cmp	r2, r3
 800407a:	d107      	bne.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800

080040a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0cc      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b4:	4b68      	ldr	r3, [pc, #416]	@ (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d90c      	bls.n	80040dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b65      	ldr	r3, [pc, #404]	@ (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b63      	ldr	r3, [pc, #396]	@ (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0b8      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d020      	beq.n	800412a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f4:	4b59      	ldr	r3, [pc, #356]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4a58      	ldr	r2, [pc, #352]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800410c:	4b53      	ldr	r3, [pc, #332]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a52      	ldr	r2, [pc, #328]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004118:	4b50      	ldr	r3, [pc, #320]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	494d      	ldr	r1, [pc, #308]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d044      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	4b47      	ldr	r3, [pc, #284]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d119      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e07f      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d003      	beq.n	800415e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415a:	2b03      	cmp	r3, #3
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	4b3f      	ldr	r3, [pc, #252]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e06f      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	4b3b      	ldr	r3, [pc, #236]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e067      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800417e:	4b37      	ldr	r3, [pc, #220]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4934      	ldr	r1, [pc, #208]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004190:	f7fe fa3a 	bl	8002608 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	e00a      	b.n	80041ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004198:	f7fe fa36 	bl	8002608 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e04f      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	4b2b      	ldr	r3, [pc, #172]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 020c 	and.w	r2, r3, #12
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	429a      	cmp	r2, r3
 80041be:	d1eb      	bne.n	8004198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c0:	4b25      	ldr	r3, [pc, #148]	@ (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d20c      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ce:	4b22      	ldr	r3, [pc, #136]	@ (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b20      	ldr	r3, [pc, #128]	@ (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e032      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f4:	4b19      	ldr	r3, [pc, #100]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4916      	ldr	r1, [pc, #88]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004212:	4b12      	ldr	r3, [pc, #72]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	490e      	ldr	r1, [pc, #56]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004226:	f000 f821 	bl	800426c <HAL_RCC_GetSysClockFreq>
 800422a:	4602      	mov	r2, r0
 800422c:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	490a      	ldr	r1, [pc, #40]	@ (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 8004238:	5ccb      	ldrb	r3, [r1, r3]
 800423a:	fa22 f303 	lsr.w	r3, r2, r3
 800423e:	4a09      	ldr	r2, [pc, #36]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004242:	4b09      	ldr	r3, [pc, #36]	@ (8004268 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe f99a 	bl	8002580 <HAL_InitTick>

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40023c00 	.word	0x40023c00
 800425c:	40023800 	.word	0x40023800
 8004260:	0800ae8c 	.word	0x0800ae8c
 8004264:	20000004 	.word	0x20000004
 8004268:	20000008 	.word	0x20000008

0800426c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800426c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004270:	b090      	sub	sp, #64	@ 0x40
 8004272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004284:	4b59      	ldr	r3, [pc, #356]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x180>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b08      	cmp	r3, #8
 800428e:	d00d      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x40>
 8004290:	2b08      	cmp	r3, #8
 8004292:	f200 80a1 	bhi.w	80043d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x34>
 800429a:	2b04      	cmp	r3, #4
 800429c:	d003      	beq.n	80042a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800429e:	e09b      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a0:	4b53      	ldr	r3, [pc, #332]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80042a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042a4:	e09b      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042a6:	4b53      	ldr	r3, [pc, #332]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80042a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042aa:	e098      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042ac:	4b4f      	ldr	r3, [pc, #316]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x180>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042b6:	4b4d      	ldr	r3, [pc, #308]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x180>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d028      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c2:	4b4a      	ldr	r3, [pc, #296]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x180>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	099b      	lsrs	r3, r3, #6
 80042c8:	2200      	movs	r2, #0
 80042ca:	623b      	str	r3, [r7, #32]
 80042cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042d4:	2100      	movs	r1, #0
 80042d6:	4b47      	ldr	r3, [pc, #284]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80042d8:	fb03 f201 	mul.w	r2, r3, r1
 80042dc:	2300      	movs	r3, #0
 80042de:	fb00 f303 	mul.w	r3, r0, r3
 80042e2:	4413      	add	r3, r2
 80042e4:	4a43      	ldr	r2, [pc, #268]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80042e6:	fba0 1202 	umull	r1, r2, r0, r2
 80042ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042ec:	460a      	mov	r2, r1
 80042ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80042f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042f2:	4413      	add	r3, r2
 80042f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f8:	2200      	movs	r2, #0
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	61fa      	str	r2, [r7, #28]
 80042fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004302:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004306:	f7fc fcc7 	bl	8000c98 <__aeabi_uldivmod>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4613      	mov	r3, r2
 8004310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004312:	e053      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004314:	4b35      	ldr	r3, [pc, #212]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x180>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	099b      	lsrs	r3, r3, #6
 800431a:	2200      	movs	r2, #0
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	617a      	str	r2, [r7, #20]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004326:	f04f 0b00 	mov.w	fp, #0
 800432a:	4652      	mov	r2, sl
 800432c:	465b      	mov	r3, fp
 800432e:	f04f 0000 	mov.w	r0, #0
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	0159      	lsls	r1, r3, #5
 8004338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800433c:	0150      	lsls	r0, r2, #5
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	ebb2 080a 	subs.w	r8, r2, sl
 8004346:	eb63 090b 	sbc.w	r9, r3, fp
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004356:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800435a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800435e:	ebb2 0408 	subs.w	r4, r2, r8
 8004362:	eb63 0509 	sbc.w	r5, r3, r9
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	00eb      	lsls	r3, r5, #3
 8004370:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004374:	00e2      	lsls	r2, r4, #3
 8004376:	4614      	mov	r4, r2
 8004378:	461d      	mov	r5, r3
 800437a:	eb14 030a 	adds.w	r3, r4, sl
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	eb45 030b 	adc.w	r3, r5, fp
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004392:	4629      	mov	r1, r5
 8004394:	028b      	lsls	r3, r1, #10
 8004396:	4621      	mov	r1, r4
 8004398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800439c:	4621      	mov	r1, r4
 800439e:	028a      	lsls	r2, r1, #10
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a6:	2200      	movs	r2, #0
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	60fa      	str	r2, [r7, #12]
 80043ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043b0:	f7fc fc72 	bl	8000c98 <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4613      	mov	r3, r2
 80043ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043bc:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x180>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	0c1b      	lsrs	r3, r3, #16
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	3301      	adds	r3, #1
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80043cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043d6:	e002      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d8:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80043da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3740      	adds	r7, #64	@ 0x40
 80043e4:	46bd      	mov	sp, r7
 80043e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ea:	bf00      	nop
 80043ec:	40023800 	.word	0x40023800
 80043f0:	00f42400 	.word	0x00f42400
 80043f4:	017d7840 	.word	0x017d7840

080043f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043fc:	4b03      	ldr	r3, [pc, #12]	@ (800440c <HAL_RCC_GetHCLKFreq+0x14>)
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20000004 	.word	0x20000004

08004410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004414:	f7ff fff0 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0a9b      	lsrs	r3, r3, #10
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4903      	ldr	r1, [pc, #12]	@ (8004434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800442c:	4618      	mov	r0, r3
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40023800 	.word	0x40023800
 8004434:	0800ae9c 	.word	0x0800ae9c

08004438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800443c:	f7ff ffdc 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	0b5b      	lsrs	r3, r3, #13
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4903      	ldr	r1, [pc, #12]	@ (800445c <HAL_RCC_GetPCLK2Freq+0x24>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004454:	4618      	mov	r0, r3
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40023800 	.word	0x40023800
 800445c:	0800ae9c 	.word	0x0800ae9c

08004460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e041      	b.n	80044f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fd fdc8 	bl	800201c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f000 fc3c 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d001      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e044      	b.n	80045a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1e      	ldr	r2, [pc, #120]	@ (80045b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d018      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004542:	d013      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1a      	ldr	r2, [pc, #104]	@ (80045b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00e      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a19      	ldr	r2, [pc, #100]	@ (80045b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d009      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a17      	ldr	r2, [pc, #92]	@ (80045bc <HAL_TIM_Base_Start_IT+0xbc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a16      	ldr	r2, [pc, #88]	@ (80045c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d111      	bne.n	8004590 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b06      	cmp	r3, #6
 800457c:	d010      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0201 	orr.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458e:	e007      	b.n	80045a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40010000 	.word	0x40010000
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40000800 	.word	0x40000800
 80045bc:	40000c00 	.word	0x40000c00
 80045c0:	40014000 	.word	0x40014000

080045c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e041      	b.n	800465a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f839 	bl	8004662 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f000 fb8a 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d109      	bne.n	800469c <HAL_TIM_PWM_Start+0x24>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	bf14      	ite	ne
 8004694:	2301      	movne	r3, #1
 8004696:	2300      	moveq	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	e022      	b.n	80046e2 <HAL_TIM_PWM_Start+0x6a>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d109      	bne.n	80046b6 <HAL_TIM_PWM_Start+0x3e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	bf14      	ite	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	2300      	moveq	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	e015      	b.n	80046e2 <HAL_TIM_PWM_Start+0x6a>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d109      	bne.n	80046d0 <HAL_TIM_PWM_Start+0x58>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	bf14      	ite	ne
 80046c8:	2301      	movne	r3, #1
 80046ca:	2300      	moveq	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	e008      	b.n	80046e2 <HAL_TIM_PWM_Start+0x6a>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	bf14      	ite	ne
 80046dc:	2301      	movne	r3, #1
 80046de:	2300      	moveq	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e068      	b.n	80047bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_PWM_Start+0x82>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046f8:	e013      	b.n	8004722 <HAL_TIM_PWM_Start+0xaa>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d104      	bne.n	800470a <HAL_TIM_PWM_Start+0x92>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004708:	e00b      	b.n	8004722 <HAL_TIM_PWM_Start+0xaa>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d104      	bne.n	800471a <HAL_TIM_PWM_Start+0xa2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004718:	e003      	b.n	8004722 <HAL_TIM_PWM_Start+0xaa>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2201      	movs	r2, #1
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fda8 	bl	8005280 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a23      	ldr	r2, [pc, #140]	@ (80047c4 <HAL_TIM_PWM_Start+0x14c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d107      	bne.n	800474a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004748:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1d      	ldr	r2, [pc, #116]	@ (80047c4 <HAL_TIM_PWM_Start+0x14c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d018      	beq.n	8004786 <HAL_TIM_PWM_Start+0x10e>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475c:	d013      	beq.n	8004786 <HAL_TIM_PWM_Start+0x10e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <HAL_TIM_PWM_Start+0x150>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00e      	beq.n	8004786 <HAL_TIM_PWM_Start+0x10e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a17      	ldr	r2, [pc, #92]	@ (80047cc <HAL_TIM_PWM_Start+0x154>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d009      	beq.n	8004786 <HAL_TIM_PWM_Start+0x10e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a16      	ldr	r2, [pc, #88]	@ (80047d0 <HAL_TIM_PWM_Start+0x158>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d004      	beq.n	8004786 <HAL_TIM_PWM_Start+0x10e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a14      	ldr	r2, [pc, #80]	@ (80047d4 <HAL_TIM_PWM_Start+0x15c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d111      	bne.n	80047aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b06      	cmp	r3, #6
 8004796:	d010      	beq.n	80047ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a8:	e007      	b.n	80047ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40014000 	.word	0x40014000

080047d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d020      	beq.n	800483c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01b      	beq.n	800483c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0202 	mvn.w	r2, #2
 800480c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fa5b 	bl	8004cde <HAL_TIM_IC_CaptureCallback>
 8004828:	e005      	b.n	8004836 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa4d 	bl	8004cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fa5e 	bl	8004cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d020      	beq.n	8004888 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01b      	beq.n	8004888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0204 	mvn.w	r2, #4
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fa35 	bl	8004cde <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa27 	bl	8004cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fa38 	bl	8004cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d020      	beq.n	80048d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01b      	beq.n	80048d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0208 	mvn.w	r2, #8
 80048a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2204      	movs	r2, #4
 80048aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa0f 	bl	8004cde <HAL_TIM_IC_CaptureCallback>
 80048c0:	e005      	b.n	80048ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fa01 	bl	8004cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fa12 	bl	8004cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d020      	beq.n	8004920 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01b      	beq.n	8004920 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0210 	mvn.w	r2, #16
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2208      	movs	r2, #8
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f9e9 	bl	8004cde <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f9db 	bl	8004cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f9ec 	bl	8004cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00c      	beq.n	8004944 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0201 	mvn.w	r2, #1
 800493c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fd fa08 	bl	8001d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00c      	beq.n	8004968 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fd7c 	bl	8005460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00c      	beq.n	800498c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f9bd 	bl	8004d06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00c      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0220 	mvn.w	r2, #32
 80049a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fd4e 	bl	800544c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e0ae      	b.n	8004b34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b0c      	cmp	r3, #12
 80049e2:	f200 809f 	bhi.w	8004b24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049e6:	a201      	add	r2, pc, #4	@ (adr r2, 80049ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ec:	08004a21 	.word	0x08004a21
 80049f0:	08004b25 	.word	0x08004b25
 80049f4:	08004b25 	.word	0x08004b25
 80049f8:	08004b25 	.word	0x08004b25
 80049fc:	08004a61 	.word	0x08004a61
 8004a00:	08004b25 	.word	0x08004b25
 8004a04:	08004b25 	.word	0x08004b25
 8004a08:	08004b25 	.word	0x08004b25
 8004a0c:	08004aa3 	.word	0x08004aa3
 8004a10:	08004b25 	.word	0x08004b25
 8004a14:	08004b25 	.word	0x08004b25
 8004a18:	08004b25 	.word	0x08004b25
 8004a1c:	08004ae3 	.word	0x08004ae3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fa04 	bl	8004e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0208 	orr.w	r2, r2, #8
 8004a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0204 	bic.w	r2, r2, #4
 8004a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6999      	ldr	r1, [r3, #24]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	619a      	str	r2, [r3, #24]
      break;
 8004a5e:	e064      	b.n	8004b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fa4a 	bl	8004f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6999      	ldr	r1, [r3, #24]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	021a      	lsls	r2, r3, #8
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	619a      	str	r2, [r3, #24]
      break;
 8004aa0:	e043      	b.n	8004b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fa95 	bl	8004fd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0208 	orr.w	r2, r2, #8
 8004abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0204 	bic.w	r2, r2, #4
 8004acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69d9      	ldr	r1, [r3, #28]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	61da      	str	r2, [r3, #28]
      break;
 8004ae0:	e023      	b.n	8004b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fadf 	bl	80050ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69d9      	ldr	r1, [r3, #28]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	021a      	lsls	r2, r3, #8
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	61da      	str	r2, [r3, #28]
      break;
 8004b22:	e002      	b.n	8004b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	75fb      	strb	r3, [r7, #23]
      break;
 8004b28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_TIM_ConfigClockSource+0x1c>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e0b4      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x186>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b90:	d03e      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0xd4>
 8004b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b96:	f200 8087 	bhi.w	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b9e:	f000 8086 	beq.w	8004cae <HAL_TIM_ConfigClockSource+0x172>
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba6:	d87f      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b70      	cmp	r3, #112	@ 0x70
 8004baa:	d01a      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0xa6>
 8004bac:	2b70      	cmp	r3, #112	@ 0x70
 8004bae:	d87b      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b60      	cmp	r3, #96	@ 0x60
 8004bb2:	d050      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x11a>
 8004bb4:	2b60      	cmp	r3, #96	@ 0x60
 8004bb6:	d877      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b50      	cmp	r3, #80	@ 0x50
 8004bba:	d03c      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0xfa>
 8004bbc:	2b50      	cmp	r3, #80	@ 0x50
 8004bbe:	d873      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b40      	cmp	r3, #64	@ 0x40
 8004bc2:	d058      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x13a>
 8004bc4:	2b40      	cmp	r3, #64	@ 0x40
 8004bc6:	d86f      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b30      	cmp	r3, #48	@ 0x30
 8004bca:	d064      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15a>
 8004bcc:	2b30      	cmp	r3, #48	@ 0x30
 8004bce:	d86b      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d060      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15a>
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d867      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d05c      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15a>
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d05a      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15a>
 8004be0:	e062      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bf2:	f000 fb25 	bl	8005240 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	609a      	str	r2, [r3, #8]
      break;
 8004c0e:	e04f      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c20:	f000 fb0e 	bl	8005240 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c32:	609a      	str	r2, [r3, #8]
      break;
 8004c34:	e03c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c42:	461a      	mov	r2, r3
 8004c44:	f000 fa82 	bl	800514c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2150      	movs	r1, #80	@ 0x50
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fadb 	bl	800520a <TIM_ITRx_SetConfig>
      break;
 8004c54:	e02c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 faa1 	bl	80051aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2160      	movs	r1, #96	@ 0x60
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 facb 	bl	800520a <TIM_ITRx_SetConfig>
      break;
 8004c74:	e01c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c82:	461a      	mov	r2, r3
 8004c84:	f000 fa62 	bl	800514c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2140      	movs	r1, #64	@ 0x40
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fabb 	bl	800520a <TIM_ITRx_SetConfig>
      break;
 8004c94:	e00c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f000 fab2 	bl	800520a <TIM_ITRx_SetConfig>
      break;
 8004ca6:	e003      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cac:	e000      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a3a      	ldr	r2, [pc, #232]	@ (8004e18 <TIM_Base_SetConfig+0xfc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00f      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3a:	d00b      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a37      	ldr	r2, [pc, #220]	@ (8004e1c <TIM_Base_SetConfig+0x100>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a36      	ldr	r2, [pc, #216]	@ (8004e20 <TIM_Base_SetConfig+0x104>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a35      	ldr	r2, [pc, #212]	@ (8004e24 <TIM_Base_SetConfig+0x108>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d108      	bne.n	8004d66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2b      	ldr	r2, [pc, #172]	@ (8004e18 <TIM_Base_SetConfig+0xfc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01b      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d74:	d017      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a28      	ldr	r2, [pc, #160]	@ (8004e1c <TIM_Base_SetConfig+0x100>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a27      	ldr	r2, [pc, #156]	@ (8004e20 <TIM_Base_SetConfig+0x104>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00f      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a26      	ldr	r2, [pc, #152]	@ (8004e24 <TIM_Base_SetConfig+0x108>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a25      	ldr	r2, [pc, #148]	@ (8004e28 <TIM_Base_SetConfig+0x10c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a24      	ldr	r2, [pc, #144]	@ (8004e2c <TIM_Base_SetConfig+0x110>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a23      	ldr	r2, [pc, #140]	@ (8004e30 <TIM_Base_SetConfig+0x114>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d108      	bne.n	8004db8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a0e      	ldr	r2, [pc, #56]	@ (8004e18 <TIM_Base_SetConfig+0xfc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d103      	bne.n	8004dec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d105      	bne.n	8004e0a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f023 0201 	bic.w	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	611a      	str	r2, [r3, #16]
  }
}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40000400 	.word	0x40000400
 8004e20:	40000800 	.word	0x40000800
 8004e24:	40000c00 	.word	0x40000c00
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800

08004e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	f023 0201 	bic.w	r2, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f023 0302 	bic.w	r3, r3, #2
 8004e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004efc <TIM_OC1_SetConfig+0xc8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10c      	bne.n	8004eaa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 0308 	bic.w	r3, r3, #8
 8004e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f023 0304 	bic.w	r3, r3, #4
 8004ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a13      	ldr	r2, [pc, #76]	@ (8004efc <TIM_OC1_SetConfig+0xc8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d111      	bne.n	8004ed6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	621a      	str	r2, [r3, #32]
}
 8004ef0:	bf00      	nop
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	40010000 	.word	0x40010000

08004f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	f023 0210 	bic.w	r2, r3, #16
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f023 0320 	bic.w	r3, r3, #32
 8004f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd4 <TIM_OC2_SetConfig+0xd4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d10d      	bne.n	8004f7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a15      	ldr	r2, [pc, #84]	@ (8004fd4 <TIM_OC2_SetConfig+0xd4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d113      	bne.n	8004fac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40010000 	.word	0x40010000

08004fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0303 	bic.w	r3, r3, #3
 800500e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a1d      	ldr	r2, [pc, #116]	@ (80050a8 <TIM_OC3_SetConfig+0xd0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d10d      	bne.n	8005052 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800503c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a14      	ldr	r2, [pc, #80]	@ (80050a8 <TIM_OC3_SetConfig+0xd0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d113      	bne.n	8005082 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	621a      	str	r2, [r3, #32]
}
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	40010000 	.word	0x40010000

080050ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	031b      	lsls	r3, r3, #12
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a10      	ldr	r2, [pc, #64]	@ (8005148 <TIM_OC4_SetConfig+0x9c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d109      	bne.n	8005120 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	019b      	lsls	r3, r3, #6
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40010000 	.word	0x40010000

0800514c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f023 030a 	bic.w	r3, r3, #10
 8005188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b087      	sub	sp, #28
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	f023 0210 	bic.w	r2, r3, #16
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	031b      	lsls	r3, r3, #12
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005220:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	f043 0307 	orr.w	r3, r3, #7
 800522c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	609a      	str	r2, [r3, #8]
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800525a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	021a      	lsls	r2, r3, #8
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	431a      	orrs	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4313      	orrs	r3, r2
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	609a      	str	r2, [r3, #8]
}
 8005274:	bf00      	nop
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 031f 	and.w	r3, r3, #31
 8005292:	2201      	movs	r2, #1
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a1a      	ldr	r2, [r3, #32]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	43db      	mvns	r3, r3
 80052a2:	401a      	ands	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1a      	ldr	r2, [r3, #32]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 031f 	and.w	r3, r3, #31
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	fa01 f303 	lsl.w	r3, r1, r3
 80052b8:	431a      	orrs	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e050      	b.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800530a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1c      	ldr	r2, [pc, #112]	@ (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d018      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005330:	d013      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a18      	ldr	r2, [pc, #96]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00e      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a16      	ldr	r2, [pc, #88]	@ (800539c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d009      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a15      	ldr	r2, [pc, #84]	@ (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d004      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a13      	ldr	r2, [pc, #76]	@ (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d10c      	bne.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	4313      	orrs	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40010000 	.word	0x40010000
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	40014000 	.word	0x40014000

080053a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e03d      	b.n	8005440 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e042      	b.n	800550c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fc fe36 	bl	800210c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2224      	movs	r2, #36	@ 0x24
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f001 f8b1 	bl	8006620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	@ 0x28
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b20      	cmp	r3, #32
 8005532:	d175      	bne.n	8005620 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <HAL_UART_Transmit+0x2c>
 800553a:	88fb      	ldrh	r3, [r7, #6]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e06e      	b.n	8005622 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2221      	movs	r2, #33	@ 0x21
 800554e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005552:	f7fd f859 	bl	8002608 <HAL_GetTick>
 8005556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	88fa      	ldrh	r2, [r7, #6]
 8005562:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800556c:	d108      	bne.n	8005580 <HAL_UART_Transmit+0x6c>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d104      	bne.n	8005580 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	e003      	b.n	8005588 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005584:	2300      	movs	r3, #0
 8005586:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005588:	e02e      	b.n	80055e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2200      	movs	r2, #0
 8005592:	2180      	movs	r1, #128	@ 0x80
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fd8a 	bl	80060ae <UART_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e03a      	b.n	8005622 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10b      	bne.n	80055ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	3302      	adds	r3, #2
 80055c6:	61bb      	str	r3, [r7, #24]
 80055c8:	e007      	b.n	80055da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	781a      	ldrb	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	3301      	adds	r3, #1
 80055d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1cb      	bne.n	800558a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2200      	movs	r2, #0
 80055fa:	2140      	movs	r1, #64	@ 0x40
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 fd56 	bl	80060ae <UART_WaitOnFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e006      	b.n	8005622 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	e000      	b.n	8005622 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005620:	2302      	movs	r3, #2
  }
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b08a      	sub	sp, #40	@ 0x28
 800562e:	af02      	add	r7, sp, #8
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	603b      	str	r3, [r7, #0]
 8005636:	4613      	mov	r3, r2
 8005638:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b20      	cmp	r3, #32
 8005648:	f040 8081 	bne.w	800574e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_UART_Receive+0x2e>
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e079      	b.n	8005750 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2222      	movs	r2, #34	@ 0x22
 8005666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005670:	f7fc ffca 	bl	8002608 <HAL_GetTick>
 8005674:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800568a:	d108      	bne.n	800569e <HAL_UART_Receive+0x74>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d104      	bne.n	800569e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005694:	2300      	movs	r3, #0
 8005696:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	e003      	b.n	80056a6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80056a6:	e047      	b.n	8005738 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2200      	movs	r2, #0
 80056b0:	2120      	movs	r1, #32
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fcfb 	bl	80060ae <UART_WaitOnFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e042      	b.n	8005750 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10c      	bne.n	80056ea <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056dc:	b29a      	uxth	r2, r3
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	3302      	adds	r3, #2
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	e01f      	b.n	800572a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f2:	d007      	beq.n	8005704 <HAL_UART_Receive+0xda>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <HAL_UART_Receive+0xe8>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d106      	bne.n	8005712 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	b2da      	uxtb	r2, r3
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	e008      	b.n	8005724 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800571e:	b2da      	uxtb	r2, r3
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	3301      	adds	r3, #1
 8005728:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1b2      	bne.n	80056a8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	e000      	b.n	8005750 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800574e:	2302      	movs	r3, #2
  }
}
 8005750:	4618      	mov	r0, r3
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08c      	sub	sp, #48	@ 0x30
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	4613      	mov	r3, r2
 8005764:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b20      	cmp	r3, #32
 8005770:	d156      	bne.n	8005820 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_UART_Transmit_DMA+0x26>
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e04f      	b.n	8005822 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	88fa      	ldrh	r2, [r7, #6]
 800578c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	88fa      	ldrh	r2, [r7, #6]
 8005792:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2221      	movs	r2, #33	@ 0x21
 800579e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a6:	4a21      	ldr	r2, [pc, #132]	@ (800582c <HAL_UART_Transmit_DMA+0xd4>)
 80057a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ae:	4a20      	ldr	r2, [pc, #128]	@ (8005830 <HAL_UART_Transmit_DMA+0xd8>)
 80057b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005834 <HAL_UART_Transmit_DMA+0xdc>)
 80057b8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057be:	2200      	movs	r2, #0
 80057c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80057c2:	f107 0308 	add.w	r3, r7, #8
 80057c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80057cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3304      	adds	r3, #4
 80057d6:	461a      	mov	r2, r3
 80057d8:	88fb      	ldrh	r3, [r7, #6]
 80057da:	f7fd fcd3 	bl	8003184 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3314      	adds	r3, #20
 80057ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	617b      	str	r3, [r7, #20]
   return(result);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3314      	adds	r3, #20
 8005806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005808:	627a      	str	r2, [r7, #36]	@ 0x24
 800580a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6a39      	ldr	r1, [r7, #32]
 800580e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	61fb      	str	r3, [r7, #28]
   return(result);
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e5      	bne.n	80057e8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	e000      	b.n	8005822 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	3730      	adds	r7, #48	@ 0x30
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	08005dfd 	.word	0x08005dfd
 8005830:	08005e97 	.word	0x08005e97
 8005834:	0800601b 	.word	0x0800601b

08005838 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b20      	cmp	r3, #32
 8005850:	d112      	bne.n	8005878 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_UART_Receive_DMA+0x26>
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e00b      	b.n	800587a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005868:	88fb      	ldrh	r3, [r7, #6]
 800586a:	461a      	mov	r2, r3
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 fc76 	bl	8006160 <UART_Start_Receive_DMA>
 8005874:	4603      	mov	r3, r0
 8005876:	e000      	b.n	800587a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005878:	2302      	movs	r3, #2
  }
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b0ba      	sub	sp, #232	@ 0xe8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80058c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10f      	bne.n	80058ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d009      	beq.n	80058ea <HAL_UART_IRQHandler+0x66>
 80058d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fddd 	bl	80064a2 <UART_Receive_IT>
      return;
 80058e8:	e25b      	b.n	8005da2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 80de 	beq.w	8005ab0 <HAL_UART_IRQHandler+0x22c>
 80058f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005904:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 80d1 	beq.w	8005ab0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800590e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00b      	beq.n	8005932 <HAL_UART_IRQHandler+0xae>
 800591a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800591e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d005      	beq.n	8005932 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592a:	f043 0201 	orr.w	r2, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <HAL_UART_IRQHandler+0xd2>
 800593e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594e:	f043 0202 	orr.w	r2, r3, #2
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00b      	beq.n	800597a <HAL_UART_IRQHandler+0xf6>
 8005962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005972:	f043 0204 	orr.w	r2, r3, #4
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800597a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d011      	beq.n	80059aa <HAL_UART_IRQHandler+0x126>
 8005986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	d105      	bne.n	800599e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a2:	f043 0208 	orr.w	r2, r3, #8
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 81f2 	beq.w	8005d98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_UART_IRQHandler+0x14e>
 80059c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fd68 	bl	80064a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059dc:	2b40      	cmp	r3, #64	@ 0x40
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d103      	bne.n	80059fe <HAL_UART_IRQHandler+0x17a>
 80059f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d04f      	beq.n	8005a9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fc70 	bl	80062e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a0e:	2b40      	cmp	r3, #64	@ 0x40
 8005a10:	d141      	bne.n	8005a96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3314      	adds	r3, #20
 8005a18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3314      	adds	r3, #20
 8005a3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1d9      	bne.n	8005a12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d013      	beq.n	8005a8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6a:	4a7e      	ldr	r2, [pc, #504]	@ (8005c64 <HAL_UART_IRQHandler+0x3e0>)
 8005a6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fd fc4e 	bl	8003314 <HAL_DMA_Abort_IT>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d016      	beq.n	8005aac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8c:	e00e      	b.n	8005aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f99e 	bl	8005dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	e00a      	b.n	8005aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f99a 	bl	8005dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	e006      	b.n	8005aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f996 	bl	8005dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005aaa:	e175      	b.n	8005d98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aac:	bf00      	nop
    return;
 8005aae:	e173      	b.n	8005d98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	f040 814f 	bne.w	8005d58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005abe:	f003 0310 	and.w	r3, r3, #16
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 8148 	beq.w	8005d58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 8141 	beq.w	8005d58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60bb      	str	r3, [r7, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	60bb      	str	r3, [r7, #8]
 8005aea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af6:	2b40      	cmp	r3, #64	@ 0x40
 8005af8:	f040 80b6 	bne.w	8005c68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8145 	beq.w	8005d9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	f080 813e 	bcs.w	8005d9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b32:	f000 8088 	beq.w	8005c46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	330c      	adds	r3, #12
 8005b5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005b62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1d9      	bne.n	8005b36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3314      	adds	r3, #20
 8005b88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3314      	adds	r3, #20
 8005ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ba6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005bb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e1      	bne.n	8005b82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3314      	adds	r3, #20
 8005bc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005bce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3314      	adds	r3, #20
 8005bde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005be2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005be4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005be8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005bf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e3      	bne.n	8005bbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	330c      	adds	r3, #12
 8005c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c16:	f023 0310 	bic.w	r3, r3, #16
 8005c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e3      	bne.n	8005c04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fd faf7 	bl	8003234 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f8c1 	bl	8005de4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c62:	e09b      	b.n	8005d9c <HAL_UART_IRQHandler+0x518>
 8005c64:	080063ab 	.word	0x080063ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 808e 	beq.w	8005da0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 8089 	beq.w	8005da0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ca4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	330c      	adds	r3, #12
 8005cae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005cb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005cb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e3      	bne.n	8005c8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3314      	adds	r3, #20
 8005ccc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	623b      	str	r3, [r7, #32]
   return(result);
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	f023 0301 	bic.w	r3, r3, #1
 8005cdc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3314      	adds	r3, #20
 8005ce6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cea:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e3      	bne.n	8005cc6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	330c      	adds	r3, #12
 8005d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0310 	bic.w	r3, r3, #16
 8005d22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	330c      	adds	r3, #12
 8005d2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d30:	61fa      	str	r2, [r7, #28]
 8005d32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	69b9      	ldr	r1, [r7, #24]
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e3      	bne.n	8005d0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f847 	bl	8005de4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d56:	e023      	b.n	8005da0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d009      	beq.n	8005d78 <HAL_UART_IRQHandler+0x4f4>
 8005d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fb2e 	bl	80063d2 <UART_Transmit_IT>
    return;
 8005d76:	e014      	b.n	8005da2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00e      	beq.n	8005da2 <HAL_UART_IRQHandler+0x51e>
 8005d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fb6e 	bl	8006472 <UART_EndTransmit_IT>
    return;
 8005d96:	e004      	b.n	8005da2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005d98:	bf00      	nop
 8005d9a:	e002      	b.n	8005da2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d9c:	bf00      	nop
 8005d9e:	e000      	b.n	8005da2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005da0:	bf00      	nop
  }
}
 8005da2:	37e8      	adds	r7, #232	@ 0xe8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b090      	sub	sp, #64	@ 0x40
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d137      	bne.n	8005e88 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3314      	adds	r3, #20
 8005e24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3314      	adds	r3, #20
 8005e3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e5      	bne.n	8005e1e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	330c      	adds	r3, #12
 8005e58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	330c      	adds	r3, #12
 8005e70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e72:	61fa      	str	r2, [r7, #28]
 8005e74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	69b9      	ldr	r1, [r7, #24]
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e5      	bne.n	8005e52 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e86:	e002      	b.n	8005e8e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005e88:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005e8a:	f7fb ff1b 	bl	8001cc4 <HAL_UART_TxCpltCallback>
}
 8005e8e:	bf00      	nop
 8005e90:	3740      	adds	r7, #64	@ 0x40
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7ff ff7f 	bl	8005da8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eaa:	bf00      	nop
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b09c      	sub	sp, #112	@ 0x70
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ebe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d172      	bne.n	8005fb4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ed4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	330c      	adds	r3, #12
 8005eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ee6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005eea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ef4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ef6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005efa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e5      	bne.n	8005ed4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3314      	adds	r3, #20
 8005f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f1a:	f023 0301 	bic.w	r3, r3, #1
 8005f1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3314      	adds	r3, #20
 8005f26:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f28:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f2a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e5      	bne.n	8005f08 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3314      	adds	r3, #20
 8005f42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f52:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3314      	adds	r3, #20
 8005f5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d119      	bne.n	8005fb4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0310 	bic.w	r3, r3, #16
 8005f96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005fa0:	61fa      	str	r2, [r7, #28]
 8005fa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	69b9      	ldr	r1, [r7, #24]
 8005fa6:	69fa      	ldr	r2, [r7, #28]
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	617b      	str	r3, [r7, #20]
   return(result);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e5      	bne.n	8005f80 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d106      	bne.n	8005fd0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fca:	f7ff ff0b 	bl	8005de4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fce:	e002      	b.n	8005fd6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005fd0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fd2:	f7fb fe87 	bl	8001ce4 <HAL_UART_RxCpltCallback>
}
 8005fd6:	bf00      	nop
 8005fd8:	3770      	adds	r7, #112	@ 0x70
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d108      	bne.n	800600c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ffe:	085b      	lsrs	r3, r3, #1
 8006000:	b29b      	uxth	r3, r3
 8006002:	4619      	mov	r1, r3
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff feed 	bl	8005de4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800600a:	e002      	b.n	8006012 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7ff fed5 	bl	8005dbc <HAL_UART_RxHalfCpltCallback>
}
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006036:	2b80      	cmp	r3, #128	@ 0x80
 8006038:	bf0c      	ite	eq
 800603a:	2301      	moveq	r3, #1
 800603c:	2300      	movne	r3, #0
 800603e:	b2db      	uxtb	r3, r3
 8006040:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b21      	cmp	r3, #33	@ 0x21
 800604c:	d108      	bne.n	8006060 <UART_DMAError+0x46>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2200      	movs	r2, #0
 8006058:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800605a:	68b8      	ldr	r0, [r7, #8]
 800605c:	f000 f91a 	bl	8006294 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606a:	2b40      	cmp	r3, #64	@ 0x40
 800606c:	bf0c      	ite	eq
 800606e:	2301      	moveq	r3, #1
 8006070:	2300      	movne	r3, #0
 8006072:	b2db      	uxtb	r3, r3
 8006074:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b22      	cmp	r3, #34	@ 0x22
 8006080:	d108      	bne.n	8006094 <UART_DMAError+0x7a>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2200      	movs	r2, #0
 800608c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800608e:	68b8      	ldr	r0, [r7, #8]
 8006090:	f000 f928 	bl	80062e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006098:	f043 0210 	orr.w	r2, r3, #16
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060a0:	68b8      	ldr	r0, [r7, #8]
 80060a2:	f7ff fe95 	bl	8005dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060a6:	bf00      	nop
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b086      	sub	sp, #24
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	4613      	mov	r3, r2
 80060bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060be:	e03b      	b.n	8006138 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060c6:	d037      	beq.n	8006138 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c8:	f7fc fa9e 	bl	8002608 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	6a3a      	ldr	r2, [r7, #32]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d302      	bcc.n	80060de <UART_WaitOnFlagUntilTimeout+0x30>
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e03a      	b.n	8006158 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d023      	beq.n	8006138 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b80      	cmp	r3, #128	@ 0x80
 80060f4:	d020      	beq.n	8006138 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b40      	cmp	r3, #64	@ 0x40
 80060fa:	d01d      	beq.n	8006138 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b08      	cmp	r3, #8
 8006108:	d116      	bne.n	8006138 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f8df 	bl	80062e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2208      	movs	r2, #8
 800612a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e00f      	b.n	8006158 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	4013      	ands	r3, r2
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	429a      	cmp	r2, r3
 8006146:	bf0c      	ite	eq
 8006148:	2301      	moveq	r3, #1
 800614a:	2300      	movne	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	429a      	cmp	r2, r3
 8006154:	d0b4      	beq.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b098      	sub	sp, #96	@ 0x60
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	88fa      	ldrh	r2, [r7, #6]
 8006178:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2222      	movs	r2, #34	@ 0x22
 8006184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800618c:	4a3e      	ldr	r2, [pc, #248]	@ (8006288 <UART_Start_Receive_DMA+0x128>)
 800618e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006194:	4a3d      	ldr	r2, [pc, #244]	@ (800628c <UART_Start_Receive_DMA+0x12c>)
 8006196:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800619c:	4a3c      	ldr	r2, [pc, #240]	@ (8006290 <UART_Start_Receive_DMA+0x130>)
 800619e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a4:	2200      	movs	r2, #0
 80061a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80061a8:	f107 0308 	add.w	r3, r7, #8
 80061ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4619      	mov	r1, r3
 80061ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	88fb      	ldrh	r3, [r7, #6]
 80061c0:	f7fc ffe0 	bl	8003184 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80061c4:	2300      	movs	r3, #0
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d019      	beq.n	8006216 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	330c      	adds	r3, #12
 80061e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	330c      	adds	r3, #12
 8006200:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006202:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006204:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006208:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e5      	bne.n	80061e2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3314      	adds	r3, #20
 800621c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006228:	f043 0301 	orr.w	r3, r3, #1
 800622c:	657b      	str	r3, [r7, #84]	@ 0x54
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3314      	adds	r3, #20
 8006234:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006236:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006238:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800623c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e5      	bne.n	8006216 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3314      	adds	r3, #20
 8006250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	617b      	str	r3, [r7, #20]
   return(result);
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006260:	653b      	str	r3, [r7, #80]	@ 0x50
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3314      	adds	r3, #20
 8006268:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800626a:	627a      	str	r2, [r7, #36]	@ 0x24
 800626c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6a39      	ldr	r1, [r7, #32]
 8006270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	61fb      	str	r3, [r7, #28]
   return(result);
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e5      	bne.n	800624a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3760      	adds	r7, #96	@ 0x60
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	08005eb3 	.word	0x08005eb3
 800628c:	08005fdf 	.word	0x08005fdf
 8006290:	0800601b 	.word	0x0800601b

08006294 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b089      	sub	sp, #36	@ 0x24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	61ba      	str	r2, [r7, #24]
 80062be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6979      	ldr	r1, [r7, #20]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e5      	bne.n	800629c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80062d8:	bf00      	nop
 80062da:	3724      	adds	r7, #36	@ 0x24
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b095      	sub	sp, #84	@ 0x54
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800630c:	643a      	str	r2, [r7, #64]	@ 0x40
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006312:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800631a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e5      	bne.n	80062ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3314      	adds	r3, #20
 8006326:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	f023 0301 	bic.w	r3, r3, #1
 8006336:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3314      	adds	r3, #20
 800633e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006340:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006342:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e5      	bne.n	8006320 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006358:	2b01      	cmp	r3, #1
 800635a:	d119      	bne.n	8006390 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	330c      	adds	r3, #12
 8006362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	60bb      	str	r3, [r7, #8]
   return(result);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f023 0310 	bic.w	r3, r3, #16
 8006372:	647b      	str	r3, [r7, #68]	@ 0x44
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800637c:	61ba      	str	r2, [r7, #24]
 800637e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6979      	ldr	r1, [r7, #20]
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	613b      	str	r3, [r7, #16]
   return(result);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e5      	bne.n	800635c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800639e:	bf00      	nop
 80063a0:	3754      	adds	r7, #84	@ 0x54
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7ff fd03 	bl	8005dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b21      	cmp	r3, #33	@ 0x21
 80063e4:	d13e      	bne.n	8006464 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ee:	d114      	bne.n	800641a <UART_Transmit_IT+0x48>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d110      	bne.n	800641a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800640c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	1c9a      	adds	r2, r3, #2
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	621a      	str	r2, [r3, #32]
 8006418:	e008      	b.n	800642c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	1c59      	adds	r1, r3, #1
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6211      	str	r1, [r2, #32]
 8006424:	781a      	ldrb	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29b      	uxth	r3, r3
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	4619      	mov	r1, r3
 800643a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10f      	bne.n	8006460 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800644e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800645e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	e000      	b.n	8006466 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006464:	2302      	movs	r3, #2
  }
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006488:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fb fc16 	bl	8001cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b08c      	sub	sp, #48	@ 0x30
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b22      	cmp	r3, #34	@ 0x22
 80064b4:	f040 80ae 	bne.w	8006614 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064c0:	d117      	bne.n	80064f2 <UART_Receive_IT+0x50>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d113      	bne.n	80064f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ea:	1c9a      	adds	r2, r3, #2
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80064f0:	e026      	b.n	8006540 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006504:	d007      	beq.n	8006516 <UART_Receive_IT+0x74>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <UART_Receive_IT+0x82>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	b2da      	uxtb	r2, r3
 800651e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	e008      	b.n	8006536 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006530:	b2da      	uxtb	r2, r3
 8006532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006534:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29b      	uxth	r3, r3
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	4619      	mov	r1, r3
 800654e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006550:	2b00      	cmp	r3, #0
 8006552:	d15d      	bne.n	8006610 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0220 	bic.w	r2, r2, #32
 8006562:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006572:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695a      	ldr	r2, [r3, #20]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0201 	bic.w	r2, r2, #1
 8006582:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006596:	2b01      	cmp	r3, #1
 8006598:	d135      	bne.n	8006606 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	330c      	adds	r3, #12
 80065a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	613b      	str	r3, [r7, #16]
   return(result);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f023 0310 	bic.w	r3, r3, #16
 80065b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	330c      	adds	r3, #12
 80065be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065c0:	623a      	str	r2, [r7, #32]
 80065c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	69f9      	ldr	r1, [r7, #28]
 80065c6:	6a3a      	ldr	r2, [r7, #32]
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e5      	bne.n	80065a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d10a      	bne.n	80065f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff fbf0 	bl	8005de4 <HAL_UARTEx_RxEventCallback>
 8006604:	e002      	b.n	800660c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fb fb6c 	bl	8001ce4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	e002      	b.n	8006616 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	e000      	b.n	8006616 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006614:	2302      	movs	r3, #2
  }
}
 8006616:	4618      	mov	r0, r3
 8006618:	3730      	adds	r7, #48	@ 0x30
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006624:	b0c0      	sub	sp, #256	@ 0x100
 8006626:	af00      	add	r7, sp, #0
 8006628:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800662c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663c:	68d9      	ldr	r1, [r3, #12]
 800663e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	ea40 0301 	orr.w	r3, r0, r1
 8006648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800664a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	431a      	orrs	r2, r3
 8006658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	431a      	orrs	r2, r3
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	4313      	orrs	r3, r2
 8006668:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006678:	f021 010c 	bic.w	r1, r1, #12
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006686:	430b      	orrs	r3, r1
 8006688:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800668a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669a:	6999      	ldr	r1, [r3, #24]
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	ea40 0301 	orr.w	r3, r0, r1
 80066a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	4b8f      	ldr	r3, [pc, #572]	@ (80068ec <UART_SetConfig+0x2cc>)
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d005      	beq.n	80066c0 <UART_SetConfig+0xa0>
 80066b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	4b8d      	ldr	r3, [pc, #564]	@ (80068f0 <UART_SetConfig+0x2d0>)
 80066bc:	429a      	cmp	r2, r3
 80066be:	d104      	bne.n	80066ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066c0:	f7fd feba 	bl	8004438 <HAL_RCC_GetPCLK2Freq>
 80066c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80066c8:	e003      	b.n	80066d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066ca:	f7fd fea1 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 80066ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066dc:	f040 810c 	bne.w	80068f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80066ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80066f2:	4622      	mov	r2, r4
 80066f4:	462b      	mov	r3, r5
 80066f6:	1891      	adds	r1, r2, r2
 80066f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066fa:	415b      	adcs	r3, r3
 80066fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006702:	4621      	mov	r1, r4
 8006704:	eb12 0801 	adds.w	r8, r2, r1
 8006708:	4629      	mov	r1, r5
 800670a:	eb43 0901 	adc.w	r9, r3, r1
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800671a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800671e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006722:	4690      	mov	r8, r2
 8006724:	4699      	mov	r9, r3
 8006726:	4623      	mov	r3, r4
 8006728:	eb18 0303 	adds.w	r3, r8, r3
 800672c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006730:	462b      	mov	r3, r5
 8006732:	eb49 0303 	adc.w	r3, r9, r3
 8006736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800673a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006746:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800674a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800674e:	460b      	mov	r3, r1
 8006750:	18db      	adds	r3, r3, r3
 8006752:	653b      	str	r3, [r7, #80]	@ 0x50
 8006754:	4613      	mov	r3, r2
 8006756:	eb42 0303 	adc.w	r3, r2, r3
 800675a:	657b      	str	r3, [r7, #84]	@ 0x54
 800675c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006760:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006764:	f7fa fa98 	bl	8000c98 <__aeabi_uldivmod>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4b61      	ldr	r3, [pc, #388]	@ (80068f4 <UART_SetConfig+0x2d4>)
 800676e:	fba3 2302 	umull	r2, r3, r3, r2
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	011c      	lsls	r4, r3, #4
 8006776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800677a:	2200      	movs	r2, #0
 800677c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006780:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006784:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006788:	4642      	mov	r2, r8
 800678a:	464b      	mov	r3, r9
 800678c:	1891      	adds	r1, r2, r2
 800678e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006790:	415b      	adcs	r3, r3
 8006792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006794:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006798:	4641      	mov	r1, r8
 800679a:	eb12 0a01 	adds.w	sl, r2, r1
 800679e:	4649      	mov	r1, r9
 80067a0:	eb43 0b01 	adc.w	fp, r3, r1
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067b8:	4692      	mov	sl, r2
 80067ba:	469b      	mov	fp, r3
 80067bc:	4643      	mov	r3, r8
 80067be:	eb1a 0303 	adds.w	r3, sl, r3
 80067c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067c6:	464b      	mov	r3, r9
 80067c8:	eb4b 0303 	adc.w	r3, fp, r3
 80067cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80067e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067e4:	460b      	mov	r3, r1
 80067e6:	18db      	adds	r3, r3, r3
 80067e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80067ea:	4613      	mov	r3, r2
 80067ec:	eb42 0303 	adc.w	r3, r2, r3
 80067f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80067f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80067fa:	f7fa fa4d 	bl	8000c98 <__aeabi_uldivmod>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4611      	mov	r1, r2
 8006804:	4b3b      	ldr	r3, [pc, #236]	@ (80068f4 <UART_SetConfig+0x2d4>)
 8006806:	fba3 2301 	umull	r2, r3, r3, r1
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	2264      	movs	r2, #100	@ 0x64
 800680e:	fb02 f303 	mul.w	r3, r2, r3
 8006812:	1acb      	subs	r3, r1, r3
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800681a:	4b36      	ldr	r3, [pc, #216]	@ (80068f4 <UART_SetConfig+0x2d4>)
 800681c:	fba3 2302 	umull	r2, r3, r3, r2
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006828:	441c      	add	r4, r3
 800682a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800682e:	2200      	movs	r2, #0
 8006830:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006834:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006838:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800683c:	4642      	mov	r2, r8
 800683e:	464b      	mov	r3, r9
 8006840:	1891      	adds	r1, r2, r2
 8006842:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006844:	415b      	adcs	r3, r3
 8006846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800684c:	4641      	mov	r1, r8
 800684e:	1851      	adds	r1, r2, r1
 8006850:	6339      	str	r1, [r7, #48]	@ 0x30
 8006852:	4649      	mov	r1, r9
 8006854:	414b      	adcs	r3, r1
 8006856:	637b      	str	r3, [r7, #52]	@ 0x34
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006864:	4659      	mov	r1, fp
 8006866:	00cb      	lsls	r3, r1, #3
 8006868:	4651      	mov	r1, sl
 800686a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800686e:	4651      	mov	r1, sl
 8006870:	00ca      	lsls	r2, r1, #3
 8006872:	4610      	mov	r0, r2
 8006874:	4619      	mov	r1, r3
 8006876:	4603      	mov	r3, r0
 8006878:	4642      	mov	r2, r8
 800687a:	189b      	adds	r3, r3, r2
 800687c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006880:	464b      	mov	r3, r9
 8006882:	460a      	mov	r2, r1
 8006884:	eb42 0303 	adc.w	r3, r2, r3
 8006888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800688c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006898:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800689c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068a0:	460b      	mov	r3, r1
 80068a2:	18db      	adds	r3, r3, r3
 80068a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068a6:	4613      	mov	r3, r2
 80068a8:	eb42 0303 	adc.w	r3, r2, r3
 80068ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80068b6:	f7fa f9ef 	bl	8000c98 <__aeabi_uldivmod>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <UART_SetConfig+0x2d4>)
 80068c0:	fba3 1302 	umull	r1, r3, r3, r2
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	2164      	movs	r1, #100	@ 0x64
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	3332      	adds	r3, #50	@ 0x32
 80068d2:	4a08      	ldr	r2, [pc, #32]	@ (80068f4 <UART_SetConfig+0x2d4>)
 80068d4:	fba2 2303 	umull	r2, r3, r2, r3
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	f003 0207 	and.w	r2, r3, #7
 80068de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4422      	add	r2, r4
 80068e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068e8:	e106      	b.n	8006af8 <UART_SetConfig+0x4d8>
 80068ea:	bf00      	nop
 80068ec:	40011000 	.word	0x40011000
 80068f0:	40011400 	.word	0x40011400
 80068f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068fc:	2200      	movs	r2, #0
 80068fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006902:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006906:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800690a:	4642      	mov	r2, r8
 800690c:	464b      	mov	r3, r9
 800690e:	1891      	adds	r1, r2, r2
 8006910:	6239      	str	r1, [r7, #32]
 8006912:	415b      	adcs	r3, r3
 8006914:	627b      	str	r3, [r7, #36]	@ 0x24
 8006916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800691a:	4641      	mov	r1, r8
 800691c:	1854      	adds	r4, r2, r1
 800691e:	4649      	mov	r1, r9
 8006920:	eb43 0501 	adc.w	r5, r3, r1
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	00eb      	lsls	r3, r5, #3
 800692e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006932:	00e2      	lsls	r2, r4, #3
 8006934:	4614      	mov	r4, r2
 8006936:	461d      	mov	r5, r3
 8006938:	4643      	mov	r3, r8
 800693a:	18e3      	adds	r3, r4, r3
 800693c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006940:	464b      	mov	r3, r9
 8006942:	eb45 0303 	adc.w	r3, r5, r3
 8006946:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800694a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006956:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800695a:	f04f 0200 	mov.w	r2, #0
 800695e:	f04f 0300 	mov.w	r3, #0
 8006962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006966:	4629      	mov	r1, r5
 8006968:	008b      	lsls	r3, r1, #2
 800696a:	4621      	mov	r1, r4
 800696c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006970:	4621      	mov	r1, r4
 8006972:	008a      	lsls	r2, r1, #2
 8006974:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006978:	f7fa f98e 	bl	8000c98 <__aeabi_uldivmod>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4b60      	ldr	r3, [pc, #384]	@ (8006b04 <UART_SetConfig+0x4e4>)
 8006982:	fba3 2302 	umull	r2, r3, r3, r2
 8006986:	095b      	lsrs	r3, r3, #5
 8006988:	011c      	lsls	r4, r3, #4
 800698a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800698e:	2200      	movs	r2, #0
 8006990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006994:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006998:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800699c:	4642      	mov	r2, r8
 800699e:	464b      	mov	r3, r9
 80069a0:	1891      	adds	r1, r2, r2
 80069a2:	61b9      	str	r1, [r7, #24]
 80069a4:	415b      	adcs	r3, r3
 80069a6:	61fb      	str	r3, [r7, #28]
 80069a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069ac:	4641      	mov	r1, r8
 80069ae:	1851      	adds	r1, r2, r1
 80069b0:	6139      	str	r1, [r7, #16]
 80069b2:	4649      	mov	r1, r9
 80069b4:	414b      	adcs	r3, r1
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	f04f 0300 	mov.w	r3, #0
 80069c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069c4:	4659      	mov	r1, fp
 80069c6:	00cb      	lsls	r3, r1, #3
 80069c8:	4651      	mov	r1, sl
 80069ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ce:	4651      	mov	r1, sl
 80069d0:	00ca      	lsls	r2, r1, #3
 80069d2:	4610      	mov	r0, r2
 80069d4:	4619      	mov	r1, r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	4642      	mov	r2, r8
 80069da:	189b      	adds	r3, r3, r2
 80069dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069e0:	464b      	mov	r3, r9
 80069e2:	460a      	mov	r2, r1
 80069e4:	eb42 0303 	adc.w	r3, r2, r3
 80069e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a04:	4649      	mov	r1, r9
 8006a06:	008b      	lsls	r3, r1, #2
 8006a08:	4641      	mov	r1, r8
 8006a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a0e:	4641      	mov	r1, r8
 8006a10:	008a      	lsls	r2, r1, #2
 8006a12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a16:	f7fa f93f 	bl	8000c98 <__aeabi_uldivmod>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4611      	mov	r1, r2
 8006a20:	4b38      	ldr	r3, [pc, #224]	@ (8006b04 <UART_SetConfig+0x4e4>)
 8006a22:	fba3 2301 	umull	r2, r3, r3, r1
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	2264      	movs	r2, #100	@ 0x64
 8006a2a:	fb02 f303 	mul.w	r3, r2, r3
 8006a2e:	1acb      	subs	r3, r1, r3
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	3332      	adds	r3, #50	@ 0x32
 8006a34:	4a33      	ldr	r2, [pc, #204]	@ (8006b04 <UART_SetConfig+0x4e4>)
 8006a36:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a40:	441c      	add	r4, r3
 8006a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a46:	2200      	movs	r2, #0
 8006a48:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a50:	4642      	mov	r2, r8
 8006a52:	464b      	mov	r3, r9
 8006a54:	1891      	adds	r1, r2, r2
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	415b      	adcs	r3, r3
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a60:	4641      	mov	r1, r8
 8006a62:	1851      	adds	r1, r2, r1
 8006a64:	6039      	str	r1, [r7, #0]
 8006a66:	4649      	mov	r1, r9
 8006a68:	414b      	adcs	r3, r1
 8006a6a:	607b      	str	r3, [r7, #4]
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	f04f 0300 	mov.w	r3, #0
 8006a74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a78:	4659      	mov	r1, fp
 8006a7a:	00cb      	lsls	r3, r1, #3
 8006a7c:	4651      	mov	r1, sl
 8006a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a82:	4651      	mov	r1, sl
 8006a84:	00ca      	lsls	r2, r1, #3
 8006a86:	4610      	mov	r0, r2
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	189b      	adds	r3, r3, r2
 8006a90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a92:	464b      	mov	r3, r9
 8006a94:	460a      	mov	r2, r1
 8006a96:	eb42 0303 	adc.w	r3, r2, r3
 8006a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006aa6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	008b      	lsls	r3, r1, #2
 8006ab8:	4641      	mov	r1, r8
 8006aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006abe:	4641      	mov	r1, r8
 8006ac0:	008a      	lsls	r2, r1, #2
 8006ac2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006ac6:	f7fa f8e7 	bl	8000c98 <__aeabi_uldivmod>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4b0d      	ldr	r3, [pc, #52]	@ (8006b04 <UART_SetConfig+0x4e4>)
 8006ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	2164      	movs	r1, #100	@ 0x64
 8006ad8:	fb01 f303 	mul.w	r3, r1, r3
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	3332      	adds	r3, #50	@ 0x32
 8006ae2:	4a08      	ldr	r2, [pc, #32]	@ (8006b04 <UART_SetConfig+0x4e4>)
 8006ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae8:	095b      	lsrs	r3, r3, #5
 8006aea:	f003 020f 	and.w	r2, r3, #15
 8006aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4422      	add	r2, r4
 8006af6:	609a      	str	r2, [r3, #8]
}
 8006af8:	bf00      	nop
 8006afa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006afe:	46bd      	mov	sp, r7
 8006b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b04:	51eb851f 	.word	0x51eb851f

08006b08 <sulp>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	460d      	mov	r5, r1
 8006b0e:	ec45 4b10 	vmov	d0, r4, r5
 8006b12:	4616      	mov	r6, r2
 8006b14:	f003 fab0 	bl	800a078 <__ulp>
 8006b18:	ec51 0b10 	vmov	r0, r1, d0
 8006b1c:	b17e      	cbz	r6, 8006b3e <sulp+0x36>
 8006b1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b22:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	dd09      	ble.n	8006b3e <sulp+0x36>
 8006b2a:	051b      	lsls	r3, r3, #20
 8006b2c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006b30:	2400      	movs	r4, #0
 8006b32:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006b36:	4622      	mov	r2, r4
 8006b38:	462b      	mov	r3, r5
 8006b3a:	f7f9 fd65 	bl	8000608 <__aeabi_dmul>
 8006b3e:	ec41 0b10 	vmov	d0, r0, r1
 8006b42:	bd70      	pop	{r4, r5, r6, pc}
 8006b44:	0000      	movs	r0, r0
	...

08006b48 <_strtod_l>:
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	b09f      	sub	sp, #124	@ 0x7c
 8006b4e:	460c      	mov	r4, r1
 8006b50:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006b52:	2200      	movs	r2, #0
 8006b54:	921a      	str	r2, [sp, #104]	@ 0x68
 8006b56:	9005      	str	r0, [sp, #20]
 8006b58:	f04f 0a00 	mov.w	sl, #0
 8006b5c:	f04f 0b00 	mov.w	fp, #0
 8006b60:	460a      	mov	r2, r1
 8006b62:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b64:	7811      	ldrb	r1, [r2, #0]
 8006b66:	292b      	cmp	r1, #43	@ 0x2b
 8006b68:	d04a      	beq.n	8006c00 <_strtod_l+0xb8>
 8006b6a:	d838      	bhi.n	8006bde <_strtod_l+0x96>
 8006b6c:	290d      	cmp	r1, #13
 8006b6e:	d832      	bhi.n	8006bd6 <_strtod_l+0x8e>
 8006b70:	2908      	cmp	r1, #8
 8006b72:	d832      	bhi.n	8006bda <_strtod_l+0x92>
 8006b74:	2900      	cmp	r1, #0
 8006b76:	d03b      	beq.n	8006bf0 <_strtod_l+0xa8>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006b7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006b7e:	782a      	ldrb	r2, [r5, #0]
 8006b80:	2a30      	cmp	r2, #48	@ 0x30
 8006b82:	f040 80b3 	bne.w	8006cec <_strtod_l+0x1a4>
 8006b86:	786a      	ldrb	r2, [r5, #1]
 8006b88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b8c:	2a58      	cmp	r2, #88	@ 0x58
 8006b8e:	d16e      	bne.n	8006c6e <_strtod_l+0x126>
 8006b90:	9302      	str	r3, [sp, #8]
 8006b92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	ab1a      	add	r3, sp, #104	@ 0x68
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	4a8e      	ldr	r2, [pc, #568]	@ (8006dd4 <_strtod_l+0x28c>)
 8006b9c:	9805      	ldr	r0, [sp, #20]
 8006b9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006ba0:	a919      	add	r1, sp, #100	@ 0x64
 8006ba2:	f002 fb5b 	bl	800925c <__gethex>
 8006ba6:	f010 060f 	ands.w	r6, r0, #15
 8006baa:	4604      	mov	r4, r0
 8006bac:	d005      	beq.n	8006bba <_strtod_l+0x72>
 8006bae:	2e06      	cmp	r6, #6
 8006bb0:	d128      	bne.n	8006c04 <_strtod_l+0xbc>
 8006bb2:	3501      	adds	r5, #1
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9519      	str	r5, [sp, #100]	@ 0x64
 8006bb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f040 858e 	bne.w	80076de <_strtod_l+0xb96>
 8006bc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bc4:	b1cb      	cbz	r3, 8006bfa <_strtod_l+0xb2>
 8006bc6:	4652      	mov	r2, sl
 8006bc8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006bcc:	ec43 2b10 	vmov	d0, r2, r3
 8006bd0:	b01f      	add	sp, #124	@ 0x7c
 8006bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd6:	2920      	cmp	r1, #32
 8006bd8:	d1ce      	bne.n	8006b78 <_strtod_l+0x30>
 8006bda:	3201      	adds	r2, #1
 8006bdc:	e7c1      	b.n	8006b62 <_strtod_l+0x1a>
 8006bde:	292d      	cmp	r1, #45	@ 0x2d
 8006be0:	d1ca      	bne.n	8006b78 <_strtod_l+0x30>
 8006be2:	2101      	movs	r1, #1
 8006be4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006be6:	1c51      	adds	r1, r2, #1
 8006be8:	9119      	str	r1, [sp, #100]	@ 0x64
 8006bea:	7852      	ldrb	r2, [r2, #1]
 8006bec:	2a00      	cmp	r2, #0
 8006bee:	d1c5      	bne.n	8006b7c <_strtod_l+0x34>
 8006bf0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bf2:	9419      	str	r4, [sp, #100]	@ 0x64
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f040 8570 	bne.w	80076da <_strtod_l+0xb92>
 8006bfa:	4652      	mov	r2, sl
 8006bfc:	465b      	mov	r3, fp
 8006bfe:	e7e5      	b.n	8006bcc <_strtod_l+0x84>
 8006c00:	2100      	movs	r1, #0
 8006c02:	e7ef      	b.n	8006be4 <_strtod_l+0x9c>
 8006c04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c06:	b13a      	cbz	r2, 8006c18 <_strtod_l+0xd0>
 8006c08:	2135      	movs	r1, #53	@ 0x35
 8006c0a:	a81c      	add	r0, sp, #112	@ 0x70
 8006c0c:	f003 fb2e 	bl	800a26c <__copybits>
 8006c10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c12:	9805      	ldr	r0, [sp, #20]
 8006c14:	f002 fefc 	bl	8009a10 <_Bfree>
 8006c18:	3e01      	subs	r6, #1
 8006c1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006c1c:	2e04      	cmp	r6, #4
 8006c1e:	d806      	bhi.n	8006c2e <_strtod_l+0xe6>
 8006c20:	e8df f006 	tbb	[pc, r6]
 8006c24:	201d0314 	.word	0x201d0314
 8006c28:	14          	.byte	0x14
 8006c29:	00          	.byte	0x00
 8006c2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006c2e:	05e1      	lsls	r1, r4, #23
 8006c30:	bf48      	it	mi
 8006c32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006c36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c3a:	0d1b      	lsrs	r3, r3, #20
 8006c3c:	051b      	lsls	r3, r3, #20
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1bb      	bne.n	8006bba <_strtod_l+0x72>
 8006c42:	f001 fbbf 	bl	80083c4 <__errno>
 8006c46:	2322      	movs	r3, #34	@ 0x22
 8006c48:	6003      	str	r3, [r0, #0]
 8006c4a:	e7b6      	b.n	8006bba <_strtod_l+0x72>
 8006c4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006c50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006c54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006c5c:	e7e7      	b.n	8006c2e <_strtod_l+0xe6>
 8006c5e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006ddc <_strtod_l+0x294>
 8006c62:	e7e4      	b.n	8006c2e <_strtod_l+0xe6>
 8006c64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006c68:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006c6c:	e7df      	b.n	8006c2e <_strtod_l+0xe6>
 8006c6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	2b30      	cmp	r3, #48	@ 0x30
 8006c78:	d0f9      	beq.n	8006c6e <_strtod_l+0x126>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d09d      	beq.n	8006bba <_strtod_l+0x72>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c84:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c86:	2300      	movs	r3, #0
 8006c88:	9308      	str	r3, [sp, #32]
 8006c8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c8c:	461f      	mov	r7, r3
 8006c8e:	220a      	movs	r2, #10
 8006c90:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006c92:	7805      	ldrb	r5, [r0, #0]
 8006c94:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006c98:	b2d9      	uxtb	r1, r3
 8006c9a:	2909      	cmp	r1, #9
 8006c9c:	d928      	bls.n	8006cf0 <_strtod_l+0x1a8>
 8006c9e:	494e      	ldr	r1, [pc, #312]	@ (8006dd8 <_strtod_l+0x290>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f001 fb32 	bl	800830a <strncmp>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d032      	beq.n	8006d10 <_strtod_l+0x1c8>
 8006caa:	2000      	movs	r0, #0
 8006cac:	462a      	mov	r2, r5
 8006cae:	4681      	mov	r9, r0
 8006cb0:	463d      	mov	r5, r7
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2a65      	cmp	r2, #101	@ 0x65
 8006cb6:	d001      	beq.n	8006cbc <_strtod_l+0x174>
 8006cb8:	2a45      	cmp	r2, #69	@ 0x45
 8006cba:	d114      	bne.n	8006ce6 <_strtod_l+0x19e>
 8006cbc:	b91d      	cbnz	r5, 8006cc6 <_strtod_l+0x17e>
 8006cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cc0:	4302      	orrs	r2, r0
 8006cc2:	d095      	beq.n	8006bf0 <_strtod_l+0xa8>
 8006cc4:	2500      	movs	r5, #0
 8006cc6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006cc8:	1c62      	adds	r2, r4, #1
 8006cca:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ccc:	7862      	ldrb	r2, [r4, #1]
 8006cce:	2a2b      	cmp	r2, #43	@ 0x2b
 8006cd0:	d077      	beq.n	8006dc2 <_strtod_l+0x27a>
 8006cd2:	2a2d      	cmp	r2, #45	@ 0x2d
 8006cd4:	d07b      	beq.n	8006dce <_strtod_l+0x286>
 8006cd6:	f04f 0c00 	mov.w	ip, #0
 8006cda:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006cde:	2909      	cmp	r1, #9
 8006ce0:	f240 8082 	bls.w	8006de8 <_strtod_l+0x2a0>
 8006ce4:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ce6:	f04f 0800 	mov.w	r8, #0
 8006cea:	e0a2      	b.n	8006e32 <_strtod_l+0x2ea>
 8006cec:	2300      	movs	r3, #0
 8006cee:	e7c7      	b.n	8006c80 <_strtod_l+0x138>
 8006cf0:	2f08      	cmp	r7, #8
 8006cf2:	bfd5      	itete	le
 8006cf4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006cf6:	9908      	ldrgt	r1, [sp, #32]
 8006cf8:	fb02 3301 	mlale	r3, r2, r1, r3
 8006cfc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006d00:	f100 0001 	add.w	r0, r0, #1
 8006d04:	bfd4      	ite	le
 8006d06:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006d08:	9308      	strgt	r3, [sp, #32]
 8006d0a:	3701      	adds	r7, #1
 8006d0c:	9019      	str	r0, [sp, #100]	@ 0x64
 8006d0e:	e7bf      	b.n	8006c90 <_strtod_l+0x148>
 8006d10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d16:	785a      	ldrb	r2, [r3, #1]
 8006d18:	b37f      	cbz	r7, 8006d7a <_strtod_l+0x232>
 8006d1a:	4681      	mov	r9, r0
 8006d1c:	463d      	mov	r5, r7
 8006d1e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006d22:	2b09      	cmp	r3, #9
 8006d24:	d912      	bls.n	8006d4c <_strtod_l+0x204>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e7c4      	b.n	8006cb4 <_strtod_l+0x16c>
 8006d2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d30:	785a      	ldrb	r2, [r3, #1]
 8006d32:	3001      	adds	r0, #1
 8006d34:	2a30      	cmp	r2, #48	@ 0x30
 8006d36:	d0f8      	beq.n	8006d2a <_strtod_l+0x1e2>
 8006d38:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	f200 84d3 	bhi.w	80076e8 <_strtod_l+0xba0>
 8006d42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d44:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d46:	4681      	mov	r9, r0
 8006d48:	2000      	movs	r0, #0
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	3a30      	subs	r2, #48	@ 0x30
 8006d4e:	f100 0301 	add.w	r3, r0, #1
 8006d52:	d02a      	beq.n	8006daa <_strtod_l+0x262>
 8006d54:	4499      	add	r9, r3
 8006d56:	eb00 0c05 	add.w	ip, r0, r5
 8006d5a:	462b      	mov	r3, r5
 8006d5c:	210a      	movs	r1, #10
 8006d5e:	4563      	cmp	r3, ip
 8006d60:	d10d      	bne.n	8006d7e <_strtod_l+0x236>
 8006d62:	1c69      	adds	r1, r5, #1
 8006d64:	4401      	add	r1, r0
 8006d66:	4428      	add	r0, r5
 8006d68:	2808      	cmp	r0, #8
 8006d6a:	dc16      	bgt.n	8006d9a <_strtod_l+0x252>
 8006d6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d6e:	230a      	movs	r3, #10
 8006d70:	fb03 2300 	mla	r3, r3, r0, r2
 8006d74:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d76:	2300      	movs	r3, #0
 8006d78:	e018      	b.n	8006dac <_strtod_l+0x264>
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	e7da      	b.n	8006d34 <_strtod_l+0x1ec>
 8006d7e:	2b08      	cmp	r3, #8
 8006d80:	f103 0301 	add.w	r3, r3, #1
 8006d84:	dc03      	bgt.n	8006d8e <_strtod_l+0x246>
 8006d86:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006d88:	434e      	muls	r6, r1
 8006d8a:	960a      	str	r6, [sp, #40]	@ 0x28
 8006d8c:	e7e7      	b.n	8006d5e <_strtod_l+0x216>
 8006d8e:	2b10      	cmp	r3, #16
 8006d90:	bfde      	ittt	le
 8006d92:	9e08      	ldrle	r6, [sp, #32]
 8006d94:	434e      	mulle	r6, r1
 8006d96:	9608      	strle	r6, [sp, #32]
 8006d98:	e7e1      	b.n	8006d5e <_strtod_l+0x216>
 8006d9a:	280f      	cmp	r0, #15
 8006d9c:	dceb      	bgt.n	8006d76 <_strtod_l+0x22e>
 8006d9e:	9808      	ldr	r0, [sp, #32]
 8006da0:	230a      	movs	r3, #10
 8006da2:	fb03 2300 	mla	r3, r3, r0, r2
 8006da6:	9308      	str	r3, [sp, #32]
 8006da8:	e7e5      	b.n	8006d76 <_strtod_l+0x22e>
 8006daa:	4629      	mov	r1, r5
 8006dac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006dae:	1c50      	adds	r0, r2, #1
 8006db0:	9019      	str	r0, [sp, #100]	@ 0x64
 8006db2:	7852      	ldrb	r2, [r2, #1]
 8006db4:	4618      	mov	r0, r3
 8006db6:	460d      	mov	r5, r1
 8006db8:	e7b1      	b.n	8006d1e <_strtod_l+0x1d6>
 8006dba:	f04f 0900 	mov.w	r9, #0
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e77d      	b.n	8006cbe <_strtod_l+0x176>
 8006dc2:	f04f 0c00 	mov.w	ip, #0
 8006dc6:	1ca2      	adds	r2, r4, #2
 8006dc8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006dca:	78a2      	ldrb	r2, [r4, #2]
 8006dcc:	e785      	b.n	8006cda <_strtod_l+0x192>
 8006dce:	f04f 0c01 	mov.w	ip, #1
 8006dd2:	e7f8      	b.n	8006dc6 <_strtod_l+0x27e>
 8006dd4:	0800aec4 	.word	0x0800aec4
 8006dd8:	0800aeac 	.word	0x0800aeac
 8006ddc:	7ff00000 	.word	0x7ff00000
 8006de0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006de2:	1c51      	adds	r1, r2, #1
 8006de4:	9119      	str	r1, [sp, #100]	@ 0x64
 8006de6:	7852      	ldrb	r2, [r2, #1]
 8006de8:	2a30      	cmp	r2, #48	@ 0x30
 8006dea:	d0f9      	beq.n	8006de0 <_strtod_l+0x298>
 8006dec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006df0:	2908      	cmp	r1, #8
 8006df2:	f63f af78 	bhi.w	8006ce6 <_strtod_l+0x19e>
 8006df6:	3a30      	subs	r2, #48	@ 0x30
 8006df8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006dfa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006dfc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006dfe:	f04f 080a 	mov.w	r8, #10
 8006e02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e04:	1c56      	adds	r6, r2, #1
 8006e06:	9619      	str	r6, [sp, #100]	@ 0x64
 8006e08:	7852      	ldrb	r2, [r2, #1]
 8006e0a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006e0e:	f1be 0f09 	cmp.w	lr, #9
 8006e12:	d939      	bls.n	8006e88 <_strtod_l+0x340>
 8006e14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e16:	1a76      	subs	r6, r6, r1
 8006e18:	2e08      	cmp	r6, #8
 8006e1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006e1e:	dc03      	bgt.n	8006e28 <_strtod_l+0x2e0>
 8006e20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e22:	4588      	cmp	r8, r1
 8006e24:	bfa8      	it	ge
 8006e26:	4688      	movge	r8, r1
 8006e28:	f1bc 0f00 	cmp.w	ip, #0
 8006e2c:	d001      	beq.n	8006e32 <_strtod_l+0x2ea>
 8006e2e:	f1c8 0800 	rsb	r8, r8, #0
 8006e32:	2d00      	cmp	r5, #0
 8006e34:	d14e      	bne.n	8006ed4 <_strtod_l+0x38c>
 8006e36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e38:	4308      	orrs	r0, r1
 8006e3a:	f47f aebe 	bne.w	8006bba <_strtod_l+0x72>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f47f aed6 	bne.w	8006bf0 <_strtod_l+0xa8>
 8006e44:	2a69      	cmp	r2, #105	@ 0x69
 8006e46:	d028      	beq.n	8006e9a <_strtod_l+0x352>
 8006e48:	dc25      	bgt.n	8006e96 <_strtod_l+0x34e>
 8006e4a:	2a49      	cmp	r2, #73	@ 0x49
 8006e4c:	d025      	beq.n	8006e9a <_strtod_l+0x352>
 8006e4e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006e50:	f47f aece 	bne.w	8006bf0 <_strtod_l+0xa8>
 8006e54:	499b      	ldr	r1, [pc, #620]	@ (80070c4 <_strtod_l+0x57c>)
 8006e56:	a819      	add	r0, sp, #100	@ 0x64
 8006e58:	f002 fc22 	bl	80096a0 <__match>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	f43f aec7 	beq.w	8006bf0 <_strtod_l+0xa8>
 8006e62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b28      	cmp	r3, #40	@ 0x28
 8006e68:	d12e      	bne.n	8006ec8 <_strtod_l+0x380>
 8006e6a:	4997      	ldr	r1, [pc, #604]	@ (80070c8 <_strtod_l+0x580>)
 8006e6c:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e6e:	a819      	add	r0, sp, #100	@ 0x64
 8006e70:	f002 fc2a 	bl	80096c8 <__hexnan>
 8006e74:	2805      	cmp	r0, #5
 8006e76:	d127      	bne.n	8006ec8 <_strtod_l+0x380>
 8006e78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e7a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006e7e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006e82:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006e86:	e698      	b.n	8006bba <_strtod_l+0x72>
 8006e88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e8a:	fb08 2101 	mla	r1, r8, r1, r2
 8006e8e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006e92:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e94:	e7b5      	b.n	8006e02 <_strtod_l+0x2ba>
 8006e96:	2a6e      	cmp	r2, #110	@ 0x6e
 8006e98:	e7da      	b.n	8006e50 <_strtod_l+0x308>
 8006e9a:	498c      	ldr	r1, [pc, #560]	@ (80070cc <_strtod_l+0x584>)
 8006e9c:	a819      	add	r0, sp, #100	@ 0x64
 8006e9e:	f002 fbff 	bl	80096a0 <__match>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	f43f aea4 	beq.w	8006bf0 <_strtod_l+0xa8>
 8006ea8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eaa:	4989      	ldr	r1, [pc, #548]	@ (80070d0 <_strtod_l+0x588>)
 8006eac:	3b01      	subs	r3, #1
 8006eae:	a819      	add	r0, sp, #100	@ 0x64
 8006eb0:	9319      	str	r3, [sp, #100]	@ 0x64
 8006eb2:	f002 fbf5 	bl	80096a0 <__match>
 8006eb6:	b910      	cbnz	r0, 8006ebe <_strtod_l+0x376>
 8006eb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eba:	3301      	adds	r3, #1
 8006ebc:	9319      	str	r3, [sp, #100]	@ 0x64
 8006ebe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80070e0 <_strtod_l+0x598>
 8006ec2:	f04f 0a00 	mov.w	sl, #0
 8006ec6:	e678      	b.n	8006bba <_strtod_l+0x72>
 8006ec8:	4882      	ldr	r0, [pc, #520]	@ (80070d4 <_strtod_l+0x58c>)
 8006eca:	f001 fab9 	bl	8008440 <nan>
 8006ece:	ec5b ab10 	vmov	sl, fp, d0
 8006ed2:	e672      	b.n	8006bba <_strtod_l+0x72>
 8006ed4:	eba8 0309 	sub.w	r3, r8, r9
 8006ed8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8006edc:	2f00      	cmp	r7, #0
 8006ede:	bf08      	it	eq
 8006ee0:	462f      	moveq	r7, r5
 8006ee2:	2d10      	cmp	r5, #16
 8006ee4:	462c      	mov	r4, r5
 8006ee6:	bfa8      	it	ge
 8006ee8:	2410      	movge	r4, #16
 8006eea:	f7f9 fb13 	bl	8000514 <__aeabi_ui2d>
 8006eee:	2d09      	cmp	r5, #9
 8006ef0:	4682      	mov	sl, r0
 8006ef2:	468b      	mov	fp, r1
 8006ef4:	dc13      	bgt.n	8006f1e <_strtod_l+0x3d6>
 8006ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f43f ae5e 	beq.w	8006bba <_strtod_l+0x72>
 8006efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f00:	dd78      	ble.n	8006ff4 <_strtod_l+0x4ac>
 8006f02:	2b16      	cmp	r3, #22
 8006f04:	dc5f      	bgt.n	8006fc6 <_strtod_l+0x47e>
 8006f06:	4974      	ldr	r1, [pc, #464]	@ (80070d8 <_strtod_l+0x590>)
 8006f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f10:	4652      	mov	r2, sl
 8006f12:	465b      	mov	r3, fp
 8006f14:	f7f9 fb78 	bl	8000608 <__aeabi_dmul>
 8006f18:	4682      	mov	sl, r0
 8006f1a:	468b      	mov	fp, r1
 8006f1c:	e64d      	b.n	8006bba <_strtod_l+0x72>
 8006f1e:	4b6e      	ldr	r3, [pc, #440]	@ (80070d8 <_strtod_l+0x590>)
 8006f20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006f28:	f7f9 fb6e 	bl	8000608 <__aeabi_dmul>
 8006f2c:	4682      	mov	sl, r0
 8006f2e:	9808      	ldr	r0, [sp, #32]
 8006f30:	468b      	mov	fp, r1
 8006f32:	f7f9 faef 	bl	8000514 <__aeabi_ui2d>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4650      	mov	r0, sl
 8006f3c:	4659      	mov	r1, fp
 8006f3e:	f7f9 f9ad 	bl	800029c <__adddf3>
 8006f42:	2d0f      	cmp	r5, #15
 8006f44:	4682      	mov	sl, r0
 8006f46:	468b      	mov	fp, r1
 8006f48:	ddd5      	ble.n	8006ef6 <_strtod_l+0x3ae>
 8006f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f4c:	1b2c      	subs	r4, r5, r4
 8006f4e:	441c      	add	r4, r3
 8006f50:	2c00      	cmp	r4, #0
 8006f52:	f340 8096 	ble.w	8007082 <_strtod_l+0x53a>
 8006f56:	f014 030f 	ands.w	r3, r4, #15
 8006f5a:	d00a      	beq.n	8006f72 <_strtod_l+0x42a>
 8006f5c:	495e      	ldr	r1, [pc, #376]	@ (80070d8 <_strtod_l+0x590>)
 8006f5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f62:	4652      	mov	r2, sl
 8006f64:	465b      	mov	r3, fp
 8006f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f6a:	f7f9 fb4d 	bl	8000608 <__aeabi_dmul>
 8006f6e:	4682      	mov	sl, r0
 8006f70:	468b      	mov	fp, r1
 8006f72:	f034 040f 	bics.w	r4, r4, #15
 8006f76:	d073      	beq.n	8007060 <_strtod_l+0x518>
 8006f78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006f7c:	dd48      	ble.n	8007010 <_strtod_l+0x4c8>
 8006f7e:	2400      	movs	r4, #0
 8006f80:	46a0      	mov	r8, r4
 8006f82:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f84:	46a1      	mov	r9, r4
 8006f86:	9a05      	ldr	r2, [sp, #20]
 8006f88:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80070e0 <_strtod_l+0x598>
 8006f8c:	2322      	movs	r3, #34	@ 0x22
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	f04f 0a00 	mov.w	sl, #0
 8006f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f43f ae0f 	beq.w	8006bba <_strtod_l+0x72>
 8006f9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f9e:	9805      	ldr	r0, [sp, #20]
 8006fa0:	f002 fd36 	bl	8009a10 <_Bfree>
 8006fa4:	9805      	ldr	r0, [sp, #20]
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	f002 fd32 	bl	8009a10 <_Bfree>
 8006fac:	9805      	ldr	r0, [sp, #20]
 8006fae:	4641      	mov	r1, r8
 8006fb0:	f002 fd2e 	bl	8009a10 <_Bfree>
 8006fb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fb6:	9805      	ldr	r0, [sp, #20]
 8006fb8:	f002 fd2a 	bl	8009a10 <_Bfree>
 8006fbc:	9805      	ldr	r0, [sp, #20]
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	f002 fd26 	bl	8009a10 <_Bfree>
 8006fc4:	e5f9      	b.n	8006bba <_strtod_l+0x72>
 8006fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fc8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	dbbc      	blt.n	8006f4a <_strtod_l+0x402>
 8006fd0:	4c41      	ldr	r4, [pc, #260]	@ (80070d8 <_strtod_l+0x590>)
 8006fd2:	f1c5 050f 	rsb	r5, r5, #15
 8006fd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006fda:	4652      	mov	r2, sl
 8006fdc:	465b      	mov	r3, fp
 8006fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fe2:	f7f9 fb11 	bl	8000608 <__aeabi_dmul>
 8006fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe8:	1b5d      	subs	r5, r3, r5
 8006fea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006fee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006ff2:	e78f      	b.n	8006f14 <_strtod_l+0x3cc>
 8006ff4:	3316      	adds	r3, #22
 8006ff6:	dba8      	blt.n	8006f4a <_strtod_l+0x402>
 8006ff8:	4b37      	ldr	r3, [pc, #220]	@ (80070d8 <_strtod_l+0x590>)
 8006ffa:	eba9 0808 	sub.w	r8, r9, r8
 8006ffe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007002:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007006:	4650      	mov	r0, sl
 8007008:	4659      	mov	r1, fp
 800700a:	f7f9 fc27 	bl	800085c <__aeabi_ddiv>
 800700e:	e783      	b.n	8006f18 <_strtod_l+0x3d0>
 8007010:	4b32      	ldr	r3, [pc, #200]	@ (80070dc <_strtod_l+0x594>)
 8007012:	9308      	str	r3, [sp, #32]
 8007014:	2300      	movs	r3, #0
 8007016:	1124      	asrs	r4, r4, #4
 8007018:	4650      	mov	r0, sl
 800701a:	4659      	mov	r1, fp
 800701c:	461e      	mov	r6, r3
 800701e:	2c01      	cmp	r4, #1
 8007020:	dc21      	bgt.n	8007066 <_strtod_l+0x51e>
 8007022:	b10b      	cbz	r3, 8007028 <_strtod_l+0x4e0>
 8007024:	4682      	mov	sl, r0
 8007026:	468b      	mov	fp, r1
 8007028:	492c      	ldr	r1, [pc, #176]	@ (80070dc <_strtod_l+0x594>)
 800702a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800702e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007032:	4652      	mov	r2, sl
 8007034:	465b      	mov	r3, fp
 8007036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800703a:	f7f9 fae5 	bl	8000608 <__aeabi_dmul>
 800703e:	4b28      	ldr	r3, [pc, #160]	@ (80070e0 <_strtod_l+0x598>)
 8007040:	460a      	mov	r2, r1
 8007042:	400b      	ands	r3, r1
 8007044:	4927      	ldr	r1, [pc, #156]	@ (80070e4 <_strtod_l+0x59c>)
 8007046:	428b      	cmp	r3, r1
 8007048:	4682      	mov	sl, r0
 800704a:	d898      	bhi.n	8006f7e <_strtod_l+0x436>
 800704c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007050:	428b      	cmp	r3, r1
 8007052:	bf86      	itte	hi
 8007054:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80070e8 <_strtod_l+0x5a0>
 8007058:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800705c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007060:	2300      	movs	r3, #0
 8007062:	9308      	str	r3, [sp, #32]
 8007064:	e07a      	b.n	800715c <_strtod_l+0x614>
 8007066:	07e2      	lsls	r2, r4, #31
 8007068:	d505      	bpl.n	8007076 <_strtod_l+0x52e>
 800706a:	9b08      	ldr	r3, [sp, #32]
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f7f9 faca 	bl	8000608 <__aeabi_dmul>
 8007074:	2301      	movs	r3, #1
 8007076:	9a08      	ldr	r2, [sp, #32]
 8007078:	3208      	adds	r2, #8
 800707a:	3601      	adds	r6, #1
 800707c:	1064      	asrs	r4, r4, #1
 800707e:	9208      	str	r2, [sp, #32]
 8007080:	e7cd      	b.n	800701e <_strtod_l+0x4d6>
 8007082:	d0ed      	beq.n	8007060 <_strtod_l+0x518>
 8007084:	4264      	negs	r4, r4
 8007086:	f014 020f 	ands.w	r2, r4, #15
 800708a:	d00a      	beq.n	80070a2 <_strtod_l+0x55a>
 800708c:	4b12      	ldr	r3, [pc, #72]	@ (80070d8 <_strtod_l+0x590>)
 800708e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007092:	4650      	mov	r0, sl
 8007094:	4659      	mov	r1, fp
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	f7f9 fbdf 	bl	800085c <__aeabi_ddiv>
 800709e:	4682      	mov	sl, r0
 80070a0:	468b      	mov	fp, r1
 80070a2:	1124      	asrs	r4, r4, #4
 80070a4:	d0dc      	beq.n	8007060 <_strtod_l+0x518>
 80070a6:	2c1f      	cmp	r4, #31
 80070a8:	dd20      	ble.n	80070ec <_strtod_l+0x5a4>
 80070aa:	2400      	movs	r4, #0
 80070ac:	46a0      	mov	r8, r4
 80070ae:	940a      	str	r4, [sp, #40]	@ 0x28
 80070b0:	46a1      	mov	r9, r4
 80070b2:	9a05      	ldr	r2, [sp, #20]
 80070b4:	2322      	movs	r3, #34	@ 0x22
 80070b6:	f04f 0a00 	mov.w	sl, #0
 80070ba:	f04f 0b00 	mov.w	fp, #0
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	e768      	b.n	8006f94 <_strtod_l+0x44c>
 80070c2:	bf00      	nop
 80070c4:	0800af0d 	.word	0x0800af0d
 80070c8:	0800aeb0 	.word	0x0800aeb0
 80070cc:	0800af05 	.word	0x0800af05
 80070d0:	0800af3f 	.word	0x0800af3f
 80070d4:	0800b2cd 	.word	0x0800b2cd
 80070d8:	0800b0b8 	.word	0x0800b0b8
 80070dc:	0800b090 	.word	0x0800b090
 80070e0:	7ff00000 	.word	0x7ff00000
 80070e4:	7ca00000 	.word	0x7ca00000
 80070e8:	7fefffff 	.word	0x7fefffff
 80070ec:	f014 0310 	ands.w	r3, r4, #16
 80070f0:	bf18      	it	ne
 80070f2:	236a      	movne	r3, #106	@ 0x6a
 80070f4:	4ea9      	ldr	r6, [pc, #676]	@ (800739c <_strtod_l+0x854>)
 80070f6:	9308      	str	r3, [sp, #32]
 80070f8:	4650      	mov	r0, sl
 80070fa:	4659      	mov	r1, fp
 80070fc:	2300      	movs	r3, #0
 80070fe:	07e2      	lsls	r2, r4, #31
 8007100:	d504      	bpl.n	800710c <_strtod_l+0x5c4>
 8007102:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007106:	f7f9 fa7f 	bl	8000608 <__aeabi_dmul>
 800710a:	2301      	movs	r3, #1
 800710c:	1064      	asrs	r4, r4, #1
 800710e:	f106 0608 	add.w	r6, r6, #8
 8007112:	d1f4      	bne.n	80070fe <_strtod_l+0x5b6>
 8007114:	b10b      	cbz	r3, 800711a <_strtod_l+0x5d2>
 8007116:	4682      	mov	sl, r0
 8007118:	468b      	mov	fp, r1
 800711a:	9b08      	ldr	r3, [sp, #32]
 800711c:	b1b3      	cbz	r3, 800714c <_strtod_l+0x604>
 800711e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007122:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007126:	2b00      	cmp	r3, #0
 8007128:	4659      	mov	r1, fp
 800712a:	dd0f      	ble.n	800714c <_strtod_l+0x604>
 800712c:	2b1f      	cmp	r3, #31
 800712e:	dd55      	ble.n	80071dc <_strtod_l+0x694>
 8007130:	2b34      	cmp	r3, #52	@ 0x34
 8007132:	bfde      	ittt	le
 8007134:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007138:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800713c:	4093      	lslle	r3, r2
 800713e:	f04f 0a00 	mov.w	sl, #0
 8007142:	bfcc      	ite	gt
 8007144:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007148:	ea03 0b01 	andle.w	fp, r3, r1
 800714c:	2200      	movs	r2, #0
 800714e:	2300      	movs	r3, #0
 8007150:	4650      	mov	r0, sl
 8007152:	4659      	mov	r1, fp
 8007154:	f7f9 fcc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007158:	2800      	cmp	r0, #0
 800715a:	d1a6      	bne.n	80070aa <_strtod_l+0x562>
 800715c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007162:	9805      	ldr	r0, [sp, #20]
 8007164:	462b      	mov	r3, r5
 8007166:	463a      	mov	r2, r7
 8007168:	f002 fcba 	bl	8009ae0 <__s2b>
 800716c:	900a      	str	r0, [sp, #40]	@ 0x28
 800716e:	2800      	cmp	r0, #0
 8007170:	f43f af05 	beq.w	8006f7e <_strtod_l+0x436>
 8007174:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007176:	2a00      	cmp	r2, #0
 8007178:	eba9 0308 	sub.w	r3, r9, r8
 800717c:	bfa8      	it	ge
 800717e:	2300      	movge	r3, #0
 8007180:	9312      	str	r3, [sp, #72]	@ 0x48
 8007182:	2400      	movs	r4, #0
 8007184:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007188:	9316      	str	r3, [sp, #88]	@ 0x58
 800718a:	46a0      	mov	r8, r4
 800718c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800718e:	9805      	ldr	r0, [sp, #20]
 8007190:	6859      	ldr	r1, [r3, #4]
 8007192:	f002 fbfd 	bl	8009990 <_Balloc>
 8007196:	4681      	mov	r9, r0
 8007198:	2800      	cmp	r0, #0
 800719a:	f43f aef4 	beq.w	8006f86 <_strtod_l+0x43e>
 800719e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	3202      	adds	r2, #2
 80071a4:	f103 010c 	add.w	r1, r3, #12
 80071a8:	0092      	lsls	r2, r2, #2
 80071aa:	300c      	adds	r0, #12
 80071ac:	f001 f937 	bl	800841e <memcpy>
 80071b0:	ec4b ab10 	vmov	d0, sl, fp
 80071b4:	9805      	ldr	r0, [sp, #20]
 80071b6:	aa1c      	add	r2, sp, #112	@ 0x70
 80071b8:	a91b      	add	r1, sp, #108	@ 0x6c
 80071ba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80071be:	f002 ffcb 	bl	800a158 <__d2b>
 80071c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80071c4:	2800      	cmp	r0, #0
 80071c6:	f43f aede 	beq.w	8006f86 <_strtod_l+0x43e>
 80071ca:	9805      	ldr	r0, [sp, #20]
 80071cc:	2101      	movs	r1, #1
 80071ce:	f002 fd1d 	bl	8009c0c <__i2b>
 80071d2:	4680      	mov	r8, r0
 80071d4:	b948      	cbnz	r0, 80071ea <_strtod_l+0x6a2>
 80071d6:	f04f 0800 	mov.w	r8, #0
 80071da:	e6d4      	b.n	8006f86 <_strtod_l+0x43e>
 80071dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071e0:	fa02 f303 	lsl.w	r3, r2, r3
 80071e4:	ea03 0a0a 	and.w	sl, r3, sl
 80071e8:	e7b0      	b.n	800714c <_strtod_l+0x604>
 80071ea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80071ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	bfab      	itete	ge
 80071f2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80071f4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80071f6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80071f8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80071fa:	bfac      	ite	ge
 80071fc:	18ef      	addge	r7, r5, r3
 80071fe:	1b5e      	sublt	r6, r3, r5
 8007200:	9b08      	ldr	r3, [sp, #32]
 8007202:	1aed      	subs	r5, r5, r3
 8007204:	4415      	add	r5, r2
 8007206:	4b66      	ldr	r3, [pc, #408]	@ (80073a0 <_strtod_l+0x858>)
 8007208:	3d01      	subs	r5, #1
 800720a:	429d      	cmp	r5, r3
 800720c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007210:	da50      	bge.n	80072b4 <_strtod_l+0x76c>
 8007212:	1b5b      	subs	r3, r3, r5
 8007214:	2b1f      	cmp	r3, #31
 8007216:	eba2 0203 	sub.w	r2, r2, r3
 800721a:	f04f 0101 	mov.w	r1, #1
 800721e:	dc3d      	bgt.n	800729c <_strtod_l+0x754>
 8007220:	fa01 f303 	lsl.w	r3, r1, r3
 8007224:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007226:	2300      	movs	r3, #0
 8007228:	9310      	str	r3, [sp, #64]	@ 0x40
 800722a:	18bd      	adds	r5, r7, r2
 800722c:	9b08      	ldr	r3, [sp, #32]
 800722e:	42af      	cmp	r7, r5
 8007230:	4416      	add	r6, r2
 8007232:	441e      	add	r6, r3
 8007234:	463b      	mov	r3, r7
 8007236:	bfa8      	it	ge
 8007238:	462b      	movge	r3, r5
 800723a:	42b3      	cmp	r3, r6
 800723c:	bfa8      	it	ge
 800723e:	4633      	movge	r3, r6
 8007240:	2b00      	cmp	r3, #0
 8007242:	bfc2      	ittt	gt
 8007244:	1aed      	subgt	r5, r5, r3
 8007246:	1af6      	subgt	r6, r6, r3
 8007248:	1aff      	subgt	r7, r7, r3
 800724a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800724c:	2b00      	cmp	r3, #0
 800724e:	dd16      	ble.n	800727e <_strtod_l+0x736>
 8007250:	4641      	mov	r1, r8
 8007252:	9805      	ldr	r0, [sp, #20]
 8007254:	461a      	mov	r2, r3
 8007256:	f002 fd99 	bl	8009d8c <__pow5mult>
 800725a:	4680      	mov	r8, r0
 800725c:	2800      	cmp	r0, #0
 800725e:	d0ba      	beq.n	80071d6 <_strtod_l+0x68e>
 8007260:	4601      	mov	r1, r0
 8007262:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007264:	9805      	ldr	r0, [sp, #20]
 8007266:	f002 fce7 	bl	8009c38 <__multiply>
 800726a:	900e      	str	r0, [sp, #56]	@ 0x38
 800726c:	2800      	cmp	r0, #0
 800726e:	f43f ae8a 	beq.w	8006f86 <_strtod_l+0x43e>
 8007272:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007274:	9805      	ldr	r0, [sp, #20]
 8007276:	f002 fbcb 	bl	8009a10 <_Bfree>
 800727a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800727c:	931a      	str	r3, [sp, #104]	@ 0x68
 800727e:	2d00      	cmp	r5, #0
 8007280:	dc1d      	bgt.n	80072be <_strtod_l+0x776>
 8007282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007284:	2b00      	cmp	r3, #0
 8007286:	dd23      	ble.n	80072d0 <_strtod_l+0x788>
 8007288:	4649      	mov	r1, r9
 800728a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800728c:	9805      	ldr	r0, [sp, #20]
 800728e:	f002 fd7d 	bl	8009d8c <__pow5mult>
 8007292:	4681      	mov	r9, r0
 8007294:	b9e0      	cbnz	r0, 80072d0 <_strtod_l+0x788>
 8007296:	f04f 0900 	mov.w	r9, #0
 800729a:	e674      	b.n	8006f86 <_strtod_l+0x43e>
 800729c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80072a0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80072a4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80072a8:	35e2      	adds	r5, #226	@ 0xe2
 80072aa:	fa01 f305 	lsl.w	r3, r1, r5
 80072ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80072b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80072b2:	e7ba      	b.n	800722a <_strtod_l+0x6e2>
 80072b4:	2300      	movs	r3, #0
 80072b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80072b8:	2301      	movs	r3, #1
 80072ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072bc:	e7b5      	b.n	800722a <_strtod_l+0x6e2>
 80072be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072c0:	9805      	ldr	r0, [sp, #20]
 80072c2:	462a      	mov	r2, r5
 80072c4:	f002 fdbc 	bl	8009e40 <__lshift>
 80072c8:	901a      	str	r0, [sp, #104]	@ 0x68
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d1d9      	bne.n	8007282 <_strtod_l+0x73a>
 80072ce:	e65a      	b.n	8006f86 <_strtod_l+0x43e>
 80072d0:	2e00      	cmp	r6, #0
 80072d2:	dd07      	ble.n	80072e4 <_strtod_l+0x79c>
 80072d4:	4649      	mov	r1, r9
 80072d6:	9805      	ldr	r0, [sp, #20]
 80072d8:	4632      	mov	r2, r6
 80072da:	f002 fdb1 	bl	8009e40 <__lshift>
 80072de:	4681      	mov	r9, r0
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d0d8      	beq.n	8007296 <_strtod_l+0x74e>
 80072e4:	2f00      	cmp	r7, #0
 80072e6:	dd08      	ble.n	80072fa <_strtod_l+0x7b2>
 80072e8:	4641      	mov	r1, r8
 80072ea:	9805      	ldr	r0, [sp, #20]
 80072ec:	463a      	mov	r2, r7
 80072ee:	f002 fda7 	bl	8009e40 <__lshift>
 80072f2:	4680      	mov	r8, r0
 80072f4:	2800      	cmp	r0, #0
 80072f6:	f43f ae46 	beq.w	8006f86 <_strtod_l+0x43e>
 80072fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072fc:	9805      	ldr	r0, [sp, #20]
 80072fe:	464a      	mov	r2, r9
 8007300:	f002 fe26 	bl	8009f50 <__mdiff>
 8007304:	4604      	mov	r4, r0
 8007306:	2800      	cmp	r0, #0
 8007308:	f43f ae3d 	beq.w	8006f86 <_strtod_l+0x43e>
 800730c:	68c3      	ldr	r3, [r0, #12]
 800730e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007310:	2300      	movs	r3, #0
 8007312:	60c3      	str	r3, [r0, #12]
 8007314:	4641      	mov	r1, r8
 8007316:	f002 fdff 	bl	8009f18 <__mcmp>
 800731a:	2800      	cmp	r0, #0
 800731c:	da46      	bge.n	80073ac <_strtod_l+0x864>
 800731e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007320:	ea53 030a 	orrs.w	r3, r3, sl
 8007324:	d16c      	bne.n	8007400 <_strtod_l+0x8b8>
 8007326:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800732a:	2b00      	cmp	r3, #0
 800732c:	d168      	bne.n	8007400 <_strtod_l+0x8b8>
 800732e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007332:	0d1b      	lsrs	r3, r3, #20
 8007334:	051b      	lsls	r3, r3, #20
 8007336:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800733a:	d961      	bls.n	8007400 <_strtod_l+0x8b8>
 800733c:	6963      	ldr	r3, [r4, #20]
 800733e:	b913      	cbnz	r3, 8007346 <_strtod_l+0x7fe>
 8007340:	6923      	ldr	r3, [r4, #16]
 8007342:	2b01      	cmp	r3, #1
 8007344:	dd5c      	ble.n	8007400 <_strtod_l+0x8b8>
 8007346:	4621      	mov	r1, r4
 8007348:	2201      	movs	r2, #1
 800734a:	9805      	ldr	r0, [sp, #20]
 800734c:	f002 fd78 	bl	8009e40 <__lshift>
 8007350:	4641      	mov	r1, r8
 8007352:	4604      	mov	r4, r0
 8007354:	f002 fde0 	bl	8009f18 <__mcmp>
 8007358:	2800      	cmp	r0, #0
 800735a:	dd51      	ble.n	8007400 <_strtod_l+0x8b8>
 800735c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007360:	9a08      	ldr	r2, [sp, #32]
 8007362:	0d1b      	lsrs	r3, r3, #20
 8007364:	051b      	lsls	r3, r3, #20
 8007366:	2a00      	cmp	r2, #0
 8007368:	d06b      	beq.n	8007442 <_strtod_l+0x8fa>
 800736a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800736e:	d868      	bhi.n	8007442 <_strtod_l+0x8fa>
 8007370:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007374:	f67f ae9d 	bls.w	80070b2 <_strtod_l+0x56a>
 8007378:	4b0a      	ldr	r3, [pc, #40]	@ (80073a4 <_strtod_l+0x85c>)
 800737a:	4650      	mov	r0, sl
 800737c:	4659      	mov	r1, fp
 800737e:	2200      	movs	r2, #0
 8007380:	f7f9 f942 	bl	8000608 <__aeabi_dmul>
 8007384:	4b08      	ldr	r3, [pc, #32]	@ (80073a8 <_strtod_l+0x860>)
 8007386:	400b      	ands	r3, r1
 8007388:	4682      	mov	sl, r0
 800738a:	468b      	mov	fp, r1
 800738c:	2b00      	cmp	r3, #0
 800738e:	f47f ae05 	bne.w	8006f9c <_strtod_l+0x454>
 8007392:	9a05      	ldr	r2, [sp, #20]
 8007394:	2322      	movs	r3, #34	@ 0x22
 8007396:	6013      	str	r3, [r2, #0]
 8007398:	e600      	b.n	8006f9c <_strtod_l+0x454>
 800739a:	bf00      	nop
 800739c:	0800aed8 	.word	0x0800aed8
 80073a0:	fffffc02 	.word	0xfffffc02
 80073a4:	39500000 	.word	0x39500000
 80073a8:	7ff00000 	.word	0x7ff00000
 80073ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80073b0:	d165      	bne.n	800747e <_strtod_l+0x936>
 80073b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80073b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073b8:	b35a      	cbz	r2, 8007412 <_strtod_l+0x8ca>
 80073ba:	4a9f      	ldr	r2, [pc, #636]	@ (8007638 <_strtod_l+0xaf0>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d12b      	bne.n	8007418 <_strtod_l+0x8d0>
 80073c0:	9b08      	ldr	r3, [sp, #32]
 80073c2:	4651      	mov	r1, sl
 80073c4:	b303      	cbz	r3, 8007408 <_strtod_l+0x8c0>
 80073c6:	4b9d      	ldr	r3, [pc, #628]	@ (800763c <_strtod_l+0xaf4>)
 80073c8:	465a      	mov	r2, fp
 80073ca:	4013      	ands	r3, r2
 80073cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80073d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073d4:	d81b      	bhi.n	800740e <_strtod_l+0x8c6>
 80073d6:	0d1b      	lsrs	r3, r3, #20
 80073d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80073dc:	fa02 f303 	lsl.w	r3, r2, r3
 80073e0:	4299      	cmp	r1, r3
 80073e2:	d119      	bne.n	8007418 <_strtod_l+0x8d0>
 80073e4:	4b96      	ldr	r3, [pc, #600]	@ (8007640 <_strtod_l+0xaf8>)
 80073e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d102      	bne.n	80073f2 <_strtod_l+0x8aa>
 80073ec:	3101      	adds	r1, #1
 80073ee:	f43f adca 	beq.w	8006f86 <_strtod_l+0x43e>
 80073f2:	4b92      	ldr	r3, [pc, #584]	@ (800763c <_strtod_l+0xaf4>)
 80073f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073f6:	401a      	ands	r2, r3
 80073f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80073fc:	f04f 0a00 	mov.w	sl, #0
 8007400:	9b08      	ldr	r3, [sp, #32]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1b8      	bne.n	8007378 <_strtod_l+0x830>
 8007406:	e5c9      	b.n	8006f9c <_strtod_l+0x454>
 8007408:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800740c:	e7e8      	b.n	80073e0 <_strtod_l+0x898>
 800740e:	4613      	mov	r3, r2
 8007410:	e7e6      	b.n	80073e0 <_strtod_l+0x898>
 8007412:	ea53 030a 	orrs.w	r3, r3, sl
 8007416:	d0a1      	beq.n	800735c <_strtod_l+0x814>
 8007418:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800741a:	b1db      	cbz	r3, 8007454 <_strtod_l+0x90c>
 800741c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800741e:	4213      	tst	r3, r2
 8007420:	d0ee      	beq.n	8007400 <_strtod_l+0x8b8>
 8007422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007424:	9a08      	ldr	r2, [sp, #32]
 8007426:	4650      	mov	r0, sl
 8007428:	4659      	mov	r1, fp
 800742a:	b1bb      	cbz	r3, 800745c <_strtod_l+0x914>
 800742c:	f7ff fb6c 	bl	8006b08 <sulp>
 8007430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007434:	ec53 2b10 	vmov	r2, r3, d0
 8007438:	f7f8 ff30 	bl	800029c <__adddf3>
 800743c:	4682      	mov	sl, r0
 800743e:	468b      	mov	fp, r1
 8007440:	e7de      	b.n	8007400 <_strtod_l+0x8b8>
 8007442:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007446:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800744a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800744e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007452:	e7d5      	b.n	8007400 <_strtod_l+0x8b8>
 8007454:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007456:	ea13 0f0a 	tst.w	r3, sl
 800745a:	e7e1      	b.n	8007420 <_strtod_l+0x8d8>
 800745c:	f7ff fb54 	bl	8006b08 <sulp>
 8007460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007464:	ec53 2b10 	vmov	r2, r3, d0
 8007468:	f7f8 ff16 	bl	8000298 <__aeabi_dsub>
 800746c:	2200      	movs	r2, #0
 800746e:	2300      	movs	r3, #0
 8007470:	4682      	mov	sl, r0
 8007472:	468b      	mov	fp, r1
 8007474:	f7f9 fb30 	bl	8000ad8 <__aeabi_dcmpeq>
 8007478:	2800      	cmp	r0, #0
 800747a:	d0c1      	beq.n	8007400 <_strtod_l+0x8b8>
 800747c:	e619      	b.n	80070b2 <_strtod_l+0x56a>
 800747e:	4641      	mov	r1, r8
 8007480:	4620      	mov	r0, r4
 8007482:	f002 fec1 	bl	800a208 <__ratio>
 8007486:	ec57 6b10 	vmov	r6, r7, d0
 800748a:	2200      	movs	r2, #0
 800748c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007490:	4630      	mov	r0, r6
 8007492:	4639      	mov	r1, r7
 8007494:	f7f9 fb34 	bl	8000b00 <__aeabi_dcmple>
 8007498:	2800      	cmp	r0, #0
 800749a:	d06f      	beq.n	800757c <_strtod_l+0xa34>
 800749c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d17a      	bne.n	8007598 <_strtod_l+0xa50>
 80074a2:	f1ba 0f00 	cmp.w	sl, #0
 80074a6:	d158      	bne.n	800755a <_strtod_l+0xa12>
 80074a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d15a      	bne.n	8007568 <_strtod_l+0xa20>
 80074b2:	4b64      	ldr	r3, [pc, #400]	@ (8007644 <_strtod_l+0xafc>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	4630      	mov	r0, r6
 80074b8:	4639      	mov	r1, r7
 80074ba:	f7f9 fb17 	bl	8000aec <__aeabi_dcmplt>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d159      	bne.n	8007576 <_strtod_l+0xa2e>
 80074c2:	4630      	mov	r0, r6
 80074c4:	4639      	mov	r1, r7
 80074c6:	4b60      	ldr	r3, [pc, #384]	@ (8007648 <_strtod_l+0xb00>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	f7f9 f89d 	bl	8000608 <__aeabi_dmul>
 80074ce:	4606      	mov	r6, r0
 80074d0:	460f      	mov	r7, r1
 80074d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80074d6:	9606      	str	r6, [sp, #24]
 80074d8:	9307      	str	r3, [sp, #28]
 80074da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074de:	4d57      	ldr	r5, [pc, #348]	@ (800763c <_strtod_l+0xaf4>)
 80074e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80074e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074e6:	401d      	ands	r5, r3
 80074e8:	4b58      	ldr	r3, [pc, #352]	@ (800764c <_strtod_l+0xb04>)
 80074ea:	429d      	cmp	r5, r3
 80074ec:	f040 80b2 	bne.w	8007654 <_strtod_l+0xb0c>
 80074f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80074f6:	ec4b ab10 	vmov	d0, sl, fp
 80074fa:	f002 fdbd 	bl	800a078 <__ulp>
 80074fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007502:	ec51 0b10 	vmov	r0, r1, d0
 8007506:	f7f9 f87f 	bl	8000608 <__aeabi_dmul>
 800750a:	4652      	mov	r2, sl
 800750c:	465b      	mov	r3, fp
 800750e:	f7f8 fec5 	bl	800029c <__adddf3>
 8007512:	460b      	mov	r3, r1
 8007514:	4949      	ldr	r1, [pc, #292]	@ (800763c <_strtod_l+0xaf4>)
 8007516:	4a4e      	ldr	r2, [pc, #312]	@ (8007650 <_strtod_l+0xb08>)
 8007518:	4019      	ands	r1, r3
 800751a:	4291      	cmp	r1, r2
 800751c:	4682      	mov	sl, r0
 800751e:	d942      	bls.n	80075a6 <_strtod_l+0xa5e>
 8007520:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007522:	4b47      	ldr	r3, [pc, #284]	@ (8007640 <_strtod_l+0xaf8>)
 8007524:	429a      	cmp	r2, r3
 8007526:	d103      	bne.n	8007530 <_strtod_l+0x9e8>
 8007528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800752a:	3301      	adds	r3, #1
 800752c:	f43f ad2b 	beq.w	8006f86 <_strtod_l+0x43e>
 8007530:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007640 <_strtod_l+0xaf8>
 8007534:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007538:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800753a:	9805      	ldr	r0, [sp, #20]
 800753c:	f002 fa68 	bl	8009a10 <_Bfree>
 8007540:	9805      	ldr	r0, [sp, #20]
 8007542:	4649      	mov	r1, r9
 8007544:	f002 fa64 	bl	8009a10 <_Bfree>
 8007548:	9805      	ldr	r0, [sp, #20]
 800754a:	4641      	mov	r1, r8
 800754c:	f002 fa60 	bl	8009a10 <_Bfree>
 8007550:	9805      	ldr	r0, [sp, #20]
 8007552:	4621      	mov	r1, r4
 8007554:	f002 fa5c 	bl	8009a10 <_Bfree>
 8007558:	e618      	b.n	800718c <_strtod_l+0x644>
 800755a:	f1ba 0f01 	cmp.w	sl, #1
 800755e:	d103      	bne.n	8007568 <_strtod_l+0xa20>
 8007560:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007562:	2b00      	cmp	r3, #0
 8007564:	f43f ada5 	beq.w	80070b2 <_strtod_l+0x56a>
 8007568:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007618 <_strtod_l+0xad0>
 800756c:	4f35      	ldr	r7, [pc, #212]	@ (8007644 <_strtod_l+0xafc>)
 800756e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007572:	2600      	movs	r6, #0
 8007574:	e7b1      	b.n	80074da <_strtod_l+0x992>
 8007576:	4f34      	ldr	r7, [pc, #208]	@ (8007648 <_strtod_l+0xb00>)
 8007578:	2600      	movs	r6, #0
 800757a:	e7aa      	b.n	80074d2 <_strtod_l+0x98a>
 800757c:	4b32      	ldr	r3, [pc, #200]	@ (8007648 <_strtod_l+0xb00>)
 800757e:	4630      	mov	r0, r6
 8007580:	4639      	mov	r1, r7
 8007582:	2200      	movs	r2, #0
 8007584:	f7f9 f840 	bl	8000608 <__aeabi_dmul>
 8007588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800758a:	4606      	mov	r6, r0
 800758c:	460f      	mov	r7, r1
 800758e:	2b00      	cmp	r3, #0
 8007590:	d09f      	beq.n	80074d2 <_strtod_l+0x98a>
 8007592:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007596:	e7a0      	b.n	80074da <_strtod_l+0x992>
 8007598:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007620 <_strtod_l+0xad8>
 800759c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80075a0:	ec57 6b17 	vmov	r6, r7, d7
 80075a4:	e799      	b.n	80074da <_strtod_l+0x992>
 80075a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80075aa:	9b08      	ldr	r3, [sp, #32]
 80075ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1c1      	bne.n	8007538 <_strtod_l+0x9f0>
 80075b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075b8:	0d1b      	lsrs	r3, r3, #20
 80075ba:	051b      	lsls	r3, r3, #20
 80075bc:	429d      	cmp	r5, r3
 80075be:	d1bb      	bne.n	8007538 <_strtod_l+0x9f0>
 80075c0:	4630      	mov	r0, r6
 80075c2:	4639      	mov	r1, r7
 80075c4:	f7f9 fb80 	bl	8000cc8 <__aeabi_d2lz>
 80075c8:	f7f8 fff0 	bl	80005ac <__aeabi_l2d>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4630      	mov	r0, r6
 80075d2:	4639      	mov	r1, r7
 80075d4:	f7f8 fe60 	bl	8000298 <__aeabi_dsub>
 80075d8:	460b      	mov	r3, r1
 80075da:	4602      	mov	r2, r0
 80075dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80075e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80075e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075e6:	ea46 060a 	orr.w	r6, r6, sl
 80075ea:	431e      	orrs	r6, r3
 80075ec:	d06f      	beq.n	80076ce <_strtod_l+0xb86>
 80075ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8007628 <_strtod_l+0xae0>)
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f7f9 fa7a 	bl	8000aec <__aeabi_dcmplt>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	f47f accf 	bne.w	8006f9c <_strtod_l+0x454>
 80075fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8007630 <_strtod_l+0xae8>)
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007608:	f7f9 fa8e 	bl	8000b28 <__aeabi_dcmpgt>
 800760c:	2800      	cmp	r0, #0
 800760e:	d093      	beq.n	8007538 <_strtod_l+0x9f0>
 8007610:	e4c4      	b.n	8006f9c <_strtod_l+0x454>
 8007612:	bf00      	nop
 8007614:	f3af 8000 	nop.w
 8007618:	00000000 	.word	0x00000000
 800761c:	bff00000 	.word	0xbff00000
 8007620:	00000000 	.word	0x00000000
 8007624:	3ff00000 	.word	0x3ff00000
 8007628:	94a03595 	.word	0x94a03595
 800762c:	3fdfffff 	.word	0x3fdfffff
 8007630:	35afe535 	.word	0x35afe535
 8007634:	3fe00000 	.word	0x3fe00000
 8007638:	000fffff 	.word	0x000fffff
 800763c:	7ff00000 	.word	0x7ff00000
 8007640:	7fefffff 	.word	0x7fefffff
 8007644:	3ff00000 	.word	0x3ff00000
 8007648:	3fe00000 	.word	0x3fe00000
 800764c:	7fe00000 	.word	0x7fe00000
 8007650:	7c9fffff 	.word	0x7c9fffff
 8007654:	9b08      	ldr	r3, [sp, #32]
 8007656:	b323      	cbz	r3, 80076a2 <_strtod_l+0xb5a>
 8007658:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800765c:	d821      	bhi.n	80076a2 <_strtod_l+0xb5a>
 800765e:	a328      	add	r3, pc, #160	@ (adr r3, 8007700 <_strtod_l+0xbb8>)
 8007660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007664:	4630      	mov	r0, r6
 8007666:	4639      	mov	r1, r7
 8007668:	f7f9 fa4a 	bl	8000b00 <__aeabi_dcmple>
 800766c:	b1a0      	cbz	r0, 8007698 <_strtod_l+0xb50>
 800766e:	4639      	mov	r1, r7
 8007670:	4630      	mov	r0, r6
 8007672:	f7f9 faa1 	bl	8000bb8 <__aeabi_d2uiz>
 8007676:	2801      	cmp	r0, #1
 8007678:	bf38      	it	cc
 800767a:	2001      	movcc	r0, #1
 800767c:	f7f8 ff4a 	bl	8000514 <__aeabi_ui2d>
 8007680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007682:	4606      	mov	r6, r0
 8007684:	460f      	mov	r7, r1
 8007686:	b9fb      	cbnz	r3, 80076c8 <_strtod_l+0xb80>
 8007688:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800768c:	9014      	str	r0, [sp, #80]	@ 0x50
 800768e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007690:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007694:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007698:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800769a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800769e:	1b5b      	subs	r3, r3, r5
 80076a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80076a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80076a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80076aa:	f002 fce5 	bl	800a078 <__ulp>
 80076ae:	4650      	mov	r0, sl
 80076b0:	ec53 2b10 	vmov	r2, r3, d0
 80076b4:	4659      	mov	r1, fp
 80076b6:	f7f8 ffa7 	bl	8000608 <__aeabi_dmul>
 80076ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80076be:	f7f8 fded 	bl	800029c <__adddf3>
 80076c2:	4682      	mov	sl, r0
 80076c4:	468b      	mov	fp, r1
 80076c6:	e770      	b.n	80075aa <_strtod_l+0xa62>
 80076c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80076cc:	e7e0      	b.n	8007690 <_strtod_l+0xb48>
 80076ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8007708 <_strtod_l+0xbc0>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7f9 fa0a 	bl	8000aec <__aeabi_dcmplt>
 80076d8:	e798      	b.n	800760c <_strtod_l+0xac4>
 80076da:	2300      	movs	r3, #0
 80076dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80076e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	f7ff ba6d 	b.w	8006bc2 <_strtod_l+0x7a>
 80076e8:	2a65      	cmp	r2, #101	@ 0x65
 80076ea:	f43f ab66 	beq.w	8006dba <_strtod_l+0x272>
 80076ee:	2a45      	cmp	r2, #69	@ 0x45
 80076f0:	f43f ab63 	beq.w	8006dba <_strtod_l+0x272>
 80076f4:	2301      	movs	r3, #1
 80076f6:	f7ff bb9e 	b.w	8006e36 <_strtod_l+0x2ee>
 80076fa:	bf00      	nop
 80076fc:	f3af 8000 	nop.w
 8007700:	ffc00000 	.word	0xffc00000
 8007704:	41dfffff 	.word	0x41dfffff
 8007708:	94a03595 	.word	0x94a03595
 800770c:	3fcfffff 	.word	0x3fcfffff

08007710 <strtof>:
 8007710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007714:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 80077d4 <strtof+0xc4>
 8007718:	4b29      	ldr	r3, [pc, #164]	@ (80077c0 <strtof+0xb0>)
 800771a:	460a      	mov	r2, r1
 800771c:	ed2d 8b02 	vpush	{d8}
 8007720:	4601      	mov	r1, r0
 8007722:	f8d8 0000 	ldr.w	r0, [r8]
 8007726:	f7ff fa0f 	bl	8006b48 <_strtod_l>
 800772a:	ec55 4b10 	vmov	r4, r5, d0
 800772e:	4622      	mov	r2, r4
 8007730:	462b      	mov	r3, r5
 8007732:	4620      	mov	r0, r4
 8007734:	4629      	mov	r1, r5
 8007736:	f7f9 fa01 	bl	8000b3c <__aeabi_dcmpun>
 800773a:	b190      	cbz	r0, 8007762 <strtof+0x52>
 800773c:	2d00      	cmp	r5, #0
 800773e:	4821      	ldr	r0, [pc, #132]	@ (80077c4 <strtof+0xb4>)
 8007740:	da09      	bge.n	8007756 <strtof+0x46>
 8007742:	f000 fe85 	bl	8008450 <nanf>
 8007746:	eeb1 8a40 	vneg.f32	s16, s0
 800774a:	eeb0 0a48 	vmov.f32	s0, s16
 800774e:	ecbd 8b02 	vpop	{d8}
 8007752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007756:	ecbd 8b02 	vpop	{d8}
 800775a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800775e:	f000 be77 	b.w	8008450 <nanf>
 8007762:	4620      	mov	r0, r4
 8007764:	4629      	mov	r1, r5
 8007766:	f7f9 fa47 	bl	8000bf8 <__aeabi_d2f>
 800776a:	ee08 0a10 	vmov	s16, r0
 800776e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 80077c8 <strtof+0xb8>
 8007772:	eeb0 7ac8 	vabs.f32	s14, s16
 8007776:	eeb4 7a67 	vcmp.f32	s14, s15
 800777a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800777e:	dd11      	ble.n	80077a4 <strtof+0x94>
 8007780:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8007784:	4b11      	ldr	r3, [pc, #68]	@ (80077cc <strtof+0xbc>)
 8007786:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800778a:	4620      	mov	r0, r4
 800778c:	4639      	mov	r1, r7
 800778e:	f7f9 f9d5 	bl	8000b3c <__aeabi_dcmpun>
 8007792:	b980      	cbnz	r0, 80077b6 <strtof+0xa6>
 8007794:	4b0d      	ldr	r3, [pc, #52]	@ (80077cc <strtof+0xbc>)
 8007796:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800779a:	4620      	mov	r0, r4
 800779c:	4639      	mov	r1, r7
 800779e:	f7f9 f9af 	bl	8000b00 <__aeabi_dcmple>
 80077a2:	b940      	cbnz	r0, 80077b6 <strtof+0xa6>
 80077a4:	ee18 3a10 	vmov	r3, s16
 80077a8:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80077ac:	d1cd      	bne.n	800774a <strtof+0x3a>
 80077ae:	4b08      	ldr	r3, [pc, #32]	@ (80077d0 <strtof+0xc0>)
 80077b0:	402b      	ands	r3, r5
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0c9      	beq.n	800774a <strtof+0x3a>
 80077b6:	f8d8 3000 	ldr.w	r3, [r8]
 80077ba:	2222      	movs	r2, #34	@ 0x22
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	e7c4      	b.n	800774a <strtof+0x3a>
 80077c0:	2000001c 	.word	0x2000001c
 80077c4:	0800b2cd 	.word	0x0800b2cd
 80077c8:	7f7fffff 	.word	0x7f7fffff
 80077cc:	7fefffff 	.word	0x7fefffff
 80077d0:	7ff00000 	.word	0x7ff00000
 80077d4:	20000188 	.word	0x20000188

080077d8 <__cvt>:
 80077d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077dc:	ec57 6b10 	vmov	r6, r7, d0
 80077e0:	2f00      	cmp	r7, #0
 80077e2:	460c      	mov	r4, r1
 80077e4:	4619      	mov	r1, r3
 80077e6:	463b      	mov	r3, r7
 80077e8:	bfbb      	ittet	lt
 80077ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80077ee:	461f      	movlt	r7, r3
 80077f0:	2300      	movge	r3, #0
 80077f2:	232d      	movlt	r3, #45	@ 0x2d
 80077f4:	700b      	strb	r3, [r1, #0]
 80077f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80077fc:	4691      	mov	r9, r2
 80077fe:	f023 0820 	bic.w	r8, r3, #32
 8007802:	bfbc      	itt	lt
 8007804:	4632      	movlt	r2, r6
 8007806:	4616      	movlt	r6, r2
 8007808:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800780c:	d005      	beq.n	800781a <__cvt+0x42>
 800780e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007812:	d100      	bne.n	8007816 <__cvt+0x3e>
 8007814:	3401      	adds	r4, #1
 8007816:	2102      	movs	r1, #2
 8007818:	e000      	b.n	800781c <__cvt+0x44>
 800781a:	2103      	movs	r1, #3
 800781c:	ab03      	add	r3, sp, #12
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	ab02      	add	r3, sp, #8
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	ec47 6b10 	vmov	d0, r6, r7
 8007828:	4653      	mov	r3, sl
 800782a:	4622      	mov	r2, r4
 800782c:	f000 fea0 	bl	8008570 <_dtoa_r>
 8007830:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007834:	4605      	mov	r5, r0
 8007836:	d119      	bne.n	800786c <__cvt+0x94>
 8007838:	f019 0f01 	tst.w	r9, #1
 800783c:	d00e      	beq.n	800785c <__cvt+0x84>
 800783e:	eb00 0904 	add.w	r9, r0, r4
 8007842:	2200      	movs	r2, #0
 8007844:	2300      	movs	r3, #0
 8007846:	4630      	mov	r0, r6
 8007848:	4639      	mov	r1, r7
 800784a:	f7f9 f945 	bl	8000ad8 <__aeabi_dcmpeq>
 800784e:	b108      	cbz	r0, 8007854 <__cvt+0x7c>
 8007850:	f8cd 900c 	str.w	r9, [sp, #12]
 8007854:	2230      	movs	r2, #48	@ 0x30
 8007856:	9b03      	ldr	r3, [sp, #12]
 8007858:	454b      	cmp	r3, r9
 800785a:	d31e      	bcc.n	800789a <__cvt+0xc2>
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007860:	1b5b      	subs	r3, r3, r5
 8007862:	4628      	mov	r0, r5
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	b004      	add	sp, #16
 8007868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800786c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007870:	eb00 0904 	add.w	r9, r0, r4
 8007874:	d1e5      	bne.n	8007842 <__cvt+0x6a>
 8007876:	7803      	ldrb	r3, [r0, #0]
 8007878:	2b30      	cmp	r3, #48	@ 0x30
 800787a:	d10a      	bne.n	8007892 <__cvt+0xba>
 800787c:	2200      	movs	r2, #0
 800787e:	2300      	movs	r3, #0
 8007880:	4630      	mov	r0, r6
 8007882:	4639      	mov	r1, r7
 8007884:	f7f9 f928 	bl	8000ad8 <__aeabi_dcmpeq>
 8007888:	b918      	cbnz	r0, 8007892 <__cvt+0xba>
 800788a:	f1c4 0401 	rsb	r4, r4, #1
 800788e:	f8ca 4000 	str.w	r4, [sl]
 8007892:	f8da 3000 	ldr.w	r3, [sl]
 8007896:	4499      	add	r9, r3
 8007898:	e7d3      	b.n	8007842 <__cvt+0x6a>
 800789a:	1c59      	adds	r1, r3, #1
 800789c:	9103      	str	r1, [sp, #12]
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	e7d9      	b.n	8007856 <__cvt+0x7e>

080078a2 <__exponent>:
 80078a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078a4:	2900      	cmp	r1, #0
 80078a6:	bfba      	itte	lt
 80078a8:	4249      	neglt	r1, r1
 80078aa:	232d      	movlt	r3, #45	@ 0x2d
 80078ac:	232b      	movge	r3, #43	@ 0x2b
 80078ae:	2909      	cmp	r1, #9
 80078b0:	7002      	strb	r2, [r0, #0]
 80078b2:	7043      	strb	r3, [r0, #1]
 80078b4:	dd29      	ble.n	800790a <__exponent+0x68>
 80078b6:	f10d 0307 	add.w	r3, sp, #7
 80078ba:	461d      	mov	r5, r3
 80078bc:	270a      	movs	r7, #10
 80078be:	461a      	mov	r2, r3
 80078c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80078c4:	fb07 1416 	mls	r4, r7, r6, r1
 80078c8:	3430      	adds	r4, #48	@ 0x30
 80078ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078ce:	460c      	mov	r4, r1
 80078d0:	2c63      	cmp	r4, #99	@ 0x63
 80078d2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80078d6:	4631      	mov	r1, r6
 80078d8:	dcf1      	bgt.n	80078be <__exponent+0x1c>
 80078da:	3130      	adds	r1, #48	@ 0x30
 80078dc:	1e94      	subs	r4, r2, #2
 80078de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078e2:	1c41      	adds	r1, r0, #1
 80078e4:	4623      	mov	r3, r4
 80078e6:	42ab      	cmp	r3, r5
 80078e8:	d30a      	bcc.n	8007900 <__exponent+0x5e>
 80078ea:	f10d 0309 	add.w	r3, sp, #9
 80078ee:	1a9b      	subs	r3, r3, r2
 80078f0:	42ac      	cmp	r4, r5
 80078f2:	bf88      	it	hi
 80078f4:	2300      	movhi	r3, #0
 80078f6:	3302      	adds	r3, #2
 80078f8:	4403      	add	r3, r0
 80078fa:	1a18      	subs	r0, r3, r0
 80078fc:	b003      	add	sp, #12
 80078fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007900:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007904:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007908:	e7ed      	b.n	80078e6 <__exponent+0x44>
 800790a:	2330      	movs	r3, #48	@ 0x30
 800790c:	3130      	adds	r1, #48	@ 0x30
 800790e:	7083      	strb	r3, [r0, #2]
 8007910:	70c1      	strb	r1, [r0, #3]
 8007912:	1d03      	adds	r3, r0, #4
 8007914:	e7f1      	b.n	80078fa <__exponent+0x58>
	...

08007918 <_printf_float>:
 8007918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791c:	b08d      	sub	sp, #52	@ 0x34
 800791e:	460c      	mov	r4, r1
 8007920:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007924:	4616      	mov	r6, r2
 8007926:	461f      	mov	r7, r3
 8007928:	4605      	mov	r5, r0
 800792a:	f000 fd01 	bl	8008330 <_localeconv_r>
 800792e:	6803      	ldr	r3, [r0, #0]
 8007930:	9304      	str	r3, [sp, #16]
 8007932:	4618      	mov	r0, r3
 8007934:	f7f8 fca4 	bl	8000280 <strlen>
 8007938:	2300      	movs	r3, #0
 800793a:	930a      	str	r3, [sp, #40]	@ 0x28
 800793c:	f8d8 3000 	ldr.w	r3, [r8]
 8007940:	9005      	str	r0, [sp, #20]
 8007942:	3307      	adds	r3, #7
 8007944:	f023 0307 	bic.w	r3, r3, #7
 8007948:	f103 0208 	add.w	r2, r3, #8
 800794c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007950:	f8d4 b000 	ldr.w	fp, [r4]
 8007954:	f8c8 2000 	str.w	r2, [r8]
 8007958:	e9d3 8900 	ldrd	r8, r9, [r3]
 800795c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007960:	9307      	str	r3, [sp, #28]
 8007962:	f8cd 8018 	str.w	r8, [sp, #24]
 8007966:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800796a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800796e:	4b9c      	ldr	r3, [pc, #624]	@ (8007be0 <_printf_float+0x2c8>)
 8007970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007974:	f7f9 f8e2 	bl	8000b3c <__aeabi_dcmpun>
 8007978:	bb70      	cbnz	r0, 80079d8 <_printf_float+0xc0>
 800797a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800797e:	4b98      	ldr	r3, [pc, #608]	@ (8007be0 <_printf_float+0x2c8>)
 8007980:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007984:	f7f9 f8bc 	bl	8000b00 <__aeabi_dcmple>
 8007988:	bb30      	cbnz	r0, 80079d8 <_printf_float+0xc0>
 800798a:	2200      	movs	r2, #0
 800798c:	2300      	movs	r3, #0
 800798e:	4640      	mov	r0, r8
 8007990:	4649      	mov	r1, r9
 8007992:	f7f9 f8ab 	bl	8000aec <__aeabi_dcmplt>
 8007996:	b110      	cbz	r0, 800799e <_printf_float+0x86>
 8007998:	232d      	movs	r3, #45	@ 0x2d
 800799a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800799e:	4a91      	ldr	r2, [pc, #580]	@ (8007be4 <_printf_float+0x2cc>)
 80079a0:	4b91      	ldr	r3, [pc, #580]	@ (8007be8 <_printf_float+0x2d0>)
 80079a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80079a6:	bf94      	ite	ls
 80079a8:	4690      	movls	r8, r2
 80079aa:	4698      	movhi	r8, r3
 80079ac:	2303      	movs	r3, #3
 80079ae:	6123      	str	r3, [r4, #16]
 80079b0:	f02b 0304 	bic.w	r3, fp, #4
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	f04f 0900 	mov.w	r9, #0
 80079ba:	9700      	str	r7, [sp, #0]
 80079bc:	4633      	mov	r3, r6
 80079be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80079c0:	4621      	mov	r1, r4
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 f9d2 	bl	8007d6c <_printf_common>
 80079c8:	3001      	adds	r0, #1
 80079ca:	f040 808d 	bne.w	8007ae8 <_printf_float+0x1d0>
 80079ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079d2:	b00d      	add	sp, #52	@ 0x34
 80079d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d8:	4642      	mov	r2, r8
 80079da:	464b      	mov	r3, r9
 80079dc:	4640      	mov	r0, r8
 80079de:	4649      	mov	r1, r9
 80079e0:	f7f9 f8ac 	bl	8000b3c <__aeabi_dcmpun>
 80079e4:	b140      	cbz	r0, 80079f8 <_printf_float+0xe0>
 80079e6:	464b      	mov	r3, r9
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	bfbc      	itt	lt
 80079ec:	232d      	movlt	r3, #45	@ 0x2d
 80079ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80079f2:	4a7e      	ldr	r2, [pc, #504]	@ (8007bec <_printf_float+0x2d4>)
 80079f4:	4b7e      	ldr	r3, [pc, #504]	@ (8007bf0 <_printf_float+0x2d8>)
 80079f6:	e7d4      	b.n	80079a2 <_printf_float+0x8a>
 80079f8:	6863      	ldr	r3, [r4, #4]
 80079fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80079fe:	9206      	str	r2, [sp, #24]
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	d13b      	bne.n	8007a7c <_printf_float+0x164>
 8007a04:	2306      	movs	r3, #6
 8007a06:	6063      	str	r3, [r4, #4]
 8007a08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	6022      	str	r2, [r4, #0]
 8007a10:	9303      	str	r3, [sp, #12]
 8007a12:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a14:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a18:	ab09      	add	r3, sp, #36	@ 0x24
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	6861      	ldr	r1, [r4, #4]
 8007a1e:	ec49 8b10 	vmov	d0, r8, r9
 8007a22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a26:	4628      	mov	r0, r5
 8007a28:	f7ff fed6 	bl	80077d8 <__cvt>
 8007a2c:	9b06      	ldr	r3, [sp, #24]
 8007a2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a30:	2b47      	cmp	r3, #71	@ 0x47
 8007a32:	4680      	mov	r8, r0
 8007a34:	d129      	bne.n	8007a8a <_printf_float+0x172>
 8007a36:	1cc8      	adds	r0, r1, #3
 8007a38:	db02      	blt.n	8007a40 <_printf_float+0x128>
 8007a3a:	6863      	ldr	r3, [r4, #4]
 8007a3c:	4299      	cmp	r1, r3
 8007a3e:	dd41      	ble.n	8007ac4 <_printf_float+0x1ac>
 8007a40:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a44:	fa5f fa8a 	uxtb.w	sl, sl
 8007a48:	3901      	subs	r1, #1
 8007a4a:	4652      	mov	r2, sl
 8007a4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a50:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a52:	f7ff ff26 	bl	80078a2 <__exponent>
 8007a56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a58:	1813      	adds	r3, r2, r0
 8007a5a:	2a01      	cmp	r2, #1
 8007a5c:	4681      	mov	r9, r0
 8007a5e:	6123      	str	r3, [r4, #16]
 8007a60:	dc02      	bgt.n	8007a68 <_printf_float+0x150>
 8007a62:	6822      	ldr	r2, [r4, #0]
 8007a64:	07d2      	lsls	r2, r2, #31
 8007a66:	d501      	bpl.n	8007a6c <_printf_float+0x154>
 8007a68:	3301      	adds	r3, #1
 8007a6a:	6123      	str	r3, [r4, #16]
 8007a6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d0a2      	beq.n	80079ba <_printf_float+0xa2>
 8007a74:	232d      	movs	r3, #45	@ 0x2d
 8007a76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a7a:	e79e      	b.n	80079ba <_printf_float+0xa2>
 8007a7c:	9a06      	ldr	r2, [sp, #24]
 8007a7e:	2a47      	cmp	r2, #71	@ 0x47
 8007a80:	d1c2      	bne.n	8007a08 <_printf_float+0xf0>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1c0      	bne.n	8007a08 <_printf_float+0xf0>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e7bd      	b.n	8007a06 <_printf_float+0xee>
 8007a8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a8e:	d9db      	bls.n	8007a48 <_printf_float+0x130>
 8007a90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a94:	d118      	bne.n	8007ac8 <_printf_float+0x1b0>
 8007a96:	2900      	cmp	r1, #0
 8007a98:	6863      	ldr	r3, [r4, #4]
 8007a9a:	dd0b      	ble.n	8007ab4 <_printf_float+0x19c>
 8007a9c:	6121      	str	r1, [r4, #16]
 8007a9e:	b913      	cbnz	r3, 8007aa6 <_printf_float+0x18e>
 8007aa0:	6822      	ldr	r2, [r4, #0]
 8007aa2:	07d0      	lsls	r0, r2, #31
 8007aa4:	d502      	bpl.n	8007aac <_printf_float+0x194>
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	440b      	add	r3, r1
 8007aaa:	6123      	str	r3, [r4, #16]
 8007aac:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007aae:	f04f 0900 	mov.w	r9, #0
 8007ab2:	e7db      	b.n	8007a6c <_printf_float+0x154>
 8007ab4:	b913      	cbnz	r3, 8007abc <_printf_float+0x1a4>
 8007ab6:	6822      	ldr	r2, [r4, #0]
 8007ab8:	07d2      	lsls	r2, r2, #31
 8007aba:	d501      	bpl.n	8007ac0 <_printf_float+0x1a8>
 8007abc:	3302      	adds	r3, #2
 8007abe:	e7f4      	b.n	8007aaa <_printf_float+0x192>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e7f2      	b.n	8007aaa <_printf_float+0x192>
 8007ac4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aca:	4299      	cmp	r1, r3
 8007acc:	db05      	blt.n	8007ada <_printf_float+0x1c2>
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	6121      	str	r1, [r4, #16]
 8007ad2:	07d8      	lsls	r0, r3, #31
 8007ad4:	d5ea      	bpl.n	8007aac <_printf_float+0x194>
 8007ad6:	1c4b      	adds	r3, r1, #1
 8007ad8:	e7e7      	b.n	8007aaa <_printf_float+0x192>
 8007ada:	2900      	cmp	r1, #0
 8007adc:	bfd4      	ite	le
 8007ade:	f1c1 0202 	rsble	r2, r1, #2
 8007ae2:	2201      	movgt	r2, #1
 8007ae4:	4413      	add	r3, r2
 8007ae6:	e7e0      	b.n	8007aaa <_printf_float+0x192>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	055a      	lsls	r2, r3, #21
 8007aec:	d407      	bmi.n	8007afe <_printf_float+0x1e6>
 8007aee:	6923      	ldr	r3, [r4, #16]
 8007af0:	4642      	mov	r2, r8
 8007af2:	4631      	mov	r1, r6
 8007af4:	4628      	mov	r0, r5
 8007af6:	47b8      	blx	r7
 8007af8:	3001      	adds	r0, #1
 8007afa:	d12b      	bne.n	8007b54 <_printf_float+0x23c>
 8007afc:	e767      	b.n	80079ce <_printf_float+0xb6>
 8007afe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b02:	f240 80dd 	bls.w	8007cc0 <_printf_float+0x3a8>
 8007b06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f7f8 ffe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d033      	beq.n	8007b7e <_printf_float+0x266>
 8007b16:	4a37      	ldr	r2, [pc, #220]	@ (8007bf4 <_printf_float+0x2dc>)
 8007b18:	2301      	movs	r3, #1
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	47b8      	blx	r7
 8007b20:	3001      	adds	r0, #1
 8007b22:	f43f af54 	beq.w	80079ce <_printf_float+0xb6>
 8007b26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b2a:	4543      	cmp	r3, r8
 8007b2c:	db02      	blt.n	8007b34 <_printf_float+0x21c>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	07d8      	lsls	r0, r3, #31
 8007b32:	d50f      	bpl.n	8007b54 <_printf_float+0x23c>
 8007b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	47b8      	blx	r7
 8007b3e:	3001      	adds	r0, #1
 8007b40:	f43f af45 	beq.w	80079ce <_printf_float+0xb6>
 8007b44:	f04f 0900 	mov.w	r9, #0
 8007b48:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007b4c:	f104 0a1a 	add.w	sl, r4, #26
 8007b50:	45c8      	cmp	r8, r9
 8007b52:	dc09      	bgt.n	8007b68 <_printf_float+0x250>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	079b      	lsls	r3, r3, #30
 8007b58:	f100 8103 	bmi.w	8007d62 <_printf_float+0x44a>
 8007b5c:	68e0      	ldr	r0, [r4, #12]
 8007b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b60:	4298      	cmp	r0, r3
 8007b62:	bfb8      	it	lt
 8007b64:	4618      	movlt	r0, r3
 8007b66:	e734      	b.n	80079d2 <_printf_float+0xba>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	4652      	mov	r2, sl
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4628      	mov	r0, r5
 8007b70:	47b8      	blx	r7
 8007b72:	3001      	adds	r0, #1
 8007b74:	f43f af2b 	beq.w	80079ce <_printf_float+0xb6>
 8007b78:	f109 0901 	add.w	r9, r9, #1
 8007b7c:	e7e8      	b.n	8007b50 <_printf_float+0x238>
 8007b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dc39      	bgt.n	8007bf8 <_printf_float+0x2e0>
 8007b84:	4a1b      	ldr	r2, [pc, #108]	@ (8007bf4 <_printf_float+0x2dc>)
 8007b86:	2301      	movs	r3, #1
 8007b88:	4631      	mov	r1, r6
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	47b8      	blx	r7
 8007b8e:	3001      	adds	r0, #1
 8007b90:	f43f af1d 	beq.w	80079ce <_printf_float+0xb6>
 8007b94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007b98:	ea59 0303 	orrs.w	r3, r9, r3
 8007b9c:	d102      	bne.n	8007ba4 <_printf_float+0x28c>
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	07d9      	lsls	r1, r3, #31
 8007ba2:	d5d7      	bpl.n	8007b54 <_printf_float+0x23c>
 8007ba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ba8:	4631      	mov	r1, r6
 8007baa:	4628      	mov	r0, r5
 8007bac:	47b8      	blx	r7
 8007bae:	3001      	adds	r0, #1
 8007bb0:	f43f af0d 	beq.w	80079ce <_printf_float+0xb6>
 8007bb4:	f04f 0a00 	mov.w	sl, #0
 8007bb8:	f104 0b1a 	add.w	fp, r4, #26
 8007bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bbe:	425b      	negs	r3, r3
 8007bc0:	4553      	cmp	r3, sl
 8007bc2:	dc01      	bgt.n	8007bc8 <_printf_float+0x2b0>
 8007bc4:	464b      	mov	r3, r9
 8007bc6:	e793      	b.n	8007af0 <_printf_float+0x1d8>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	465a      	mov	r2, fp
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4628      	mov	r0, r5
 8007bd0:	47b8      	blx	r7
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	f43f aefb 	beq.w	80079ce <_printf_float+0xb6>
 8007bd8:	f10a 0a01 	add.w	sl, sl, #1
 8007bdc:	e7ee      	b.n	8007bbc <_printf_float+0x2a4>
 8007bde:	bf00      	nop
 8007be0:	7fefffff 	.word	0x7fefffff
 8007be4:	0800af00 	.word	0x0800af00
 8007be8:	0800af04 	.word	0x0800af04
 8007bec:	0800af08 	.word	0x0800af08
 8007bf0:	0800af0c 	.word	0x0800af0c
 8007bf4:	0800af10 	.word	0x0800af10
 8007bf8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bfa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bfe:	4553      	cmp	r3, sl
 8007c00:	bfa8      	it	ge
 8007c02:	4653      	movge	r3, sl
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	4699      	mov	r9, r3
 8007c08:	dc36      	bgt.n	8007c78 <_printf_float+0x360>
 8007c0a:	f04f 0b00 	mov.w	fp, #0
 8007c0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c12:	f104 021a 	add.w	r2, r4, #26
 8007c16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c18:	9306      	str	r3, [sp, #24]
 8007c1a:	eba3 0309 	sub.w	r3, r3, r9
 8007c1e:	455b      	cmp	r3, fp
 8007c20:	dc31      	bgt.n	8007c86 <_printf_float+0x36e>
 8007c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c24:	459a      	cmp	sl, r3
 8007c26:	dc3a      	bgt.n	8007c9e <_printf_float+0x386>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	07da      	lsls	r2, r3, #31
 8007c2c:	d437      	bmi.n	8007c9e <_printf_float+0x386>
 8007c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c30:	ebaa 0903 	sub.w	r9, sl, r3
 8007c34:	9b06      	ldr	r3, [sp, #24]
 8007c36:	ebaa 0303 	sub.w	r3, sl, r3
 8007c3a:	4599      	cmp	r9, r3
 8007c3c:	bfa8      	it	ge
 8007c3e:	4699      	movge	r9, r3
 8007c40:	f1b9 0f00 	cmp.w	r9, #0
 8007c44:	dc33      	bgt.n	8007cae <_printf_float+0x396>
 8007c46:	f04f 0800 	mov.w	r8, #0
 8007c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c4e:	f104 0b1a 	add.w	fp, r4, #26
 8007c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c54:	ebaa 0303 	sub.w	r3, sl, r3
 8007c58:	eba3 0309 	sub.w	r3, r3, r9
 8007c5c:	4543      	cmp	r3, r8
 8007c5e:	f77f af79 	ble.w	8007b54 <_printf_float+0x23c>
 8007c62:	2301      	movs	r3, #1
 8007c64:	465a      	mov	r2, fp
 8007c66:	4631      	mov	r1, r6
 8007c68:	4628      	mov	r0, r5
 8007c6a:	47b8      	blx	r7
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	f43f aeae 	beq.w	80079ce <_printf_float+0xb6>
 8007c72:	f108 0801 	add.w	r8, r8, #1
 8007c76:	e7ec      	b.n	8007c52 <_printf_float+0x33a>
 8007c78:	4642      	mov	r2, r8
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	d1c2      	bne.n	8007c0a <_printf_float+0x2f2>
 8007c84:	e6a3      	b.n	80079ce <_printf_float+0xb6>
 8007c86:	2301      	movs	r3, #1
 8007c88:	4631      	mov	r1, r6
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	9206      	str	r2, [sp, #24]
 8007c8e:	47b8      	blx	r7
 8007c90:	3001      	adds	r0, #1
 8007c92:	f43f ae9c 	beq.w	80079ce <_printf_float+0xb6>
 8007c96:	9a06      	ldr	r2, [sp, #24]
 8007c98:	f10b 0b01 	add.w	fp, fp, #1
 8007c9c:	e7bb      	b.n	8007c16 <_printf_float+0x2fe>
 8007c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	47b8      	blx	r7
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d1c0      	bne.n	8007c2e <_printf_float+0x316>
 8007cac:	e68f      	b.n	80079ce <_printf_float+0xb6>
 8007cae:	9a06      	ldr	r2, [sp, #24]
 8007cb0:	464b      	mov	r3, r9
 8007cb2:	4442      	add	r2, r8
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	47b8      	blx	r7
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d1c3      	bne.n	8007c46 <_printf_float+0x32e>
 8007cbe:	e686      	b.n	80079ce <_printf_float+0xb6>
 8007cc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007cc4:	f1ba 0f01 	cmp.w	sl, #1
 8007cc8:	dc01      	bgt.n	8007cce <_printf_float+0x3b6>
 8007cca:	07db      	lsls	r3, r3, #31
 8007ccc:	d536      	bpl.n	8007d3c <_printf_float+0x424>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	4642      	mov	r2, r8
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	47b8      	blx	r7
 8007cd8:	3001      	adds	r0, #1
 8007cda:	f43f ae78 	beq.w	80079ce <_printf_float+0xb6>
 8007cde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	47b8      	blx	r7
 8007ce8:	3001      	adds	r0, #1
 8007cea:	f43f ae70 	beq.w	80079ce <_printf_float+0xb6>
 8007cee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007cfa:	f7f8 feed 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cfe:	b9c0      	cbnz	r0, 8007d32 <_printf_float+0x41a>
 8007d00:	4653      	mov	r3, sl
 8007d02:	f108 0201 	add.w	r2, r8, #1
 8007d06:	4631      	mov	r1, r6
 8007d08:	4628      	mov	r0, r5
 8007d0a:	47b8      	blx	r7
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d10c      	bne.n	8007d2a <_printf_float+0x412>
 8007d10:	e65d      	b.n	80079ce <_printf_float+0xb6>
 8007d12:	2301      	movs	r3, #1
 8007d14:	465a      	mov	r2, fp
 8007d16:	4631      	mov	r1, r6
 8007d18:	4628      	mov	r0, r5
 8007d1a:	47b8      	blx	r7
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	f43f ae56 	beq.w	80079ce <_printf_float+0xb6>
 8007d22:	f108 0801 	add.w	r8, r8, #1
 8007d26:	45d0      	cmp	r8, sl
 8007d28:	dbf3      	blt.n	8007d12 <_printf_float+0x3fa>
 8007d2a:	464b      	mov	r3, r9
 8007d2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d30:	e6df      	b.n	8007af2 <_printf_float+0x1da>
 8007d32:	f04f 0800 	mov.w	r8, #0
 8007d36:	f104 0b1a 	add.w	fp, r4, #26
 8007d3a:	e7f4      	b.n	8007d26 <_printf_float+0x40e>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	4642      	mov	r2, r8
 8007d40:	e7e1      	b.n	8007d06 <_printf_float+0x3ee>
 8007d42:	2301      	movs	r3, #1
 8007d44:	464a      	mov	r2, r9
 8007d46:	4631      	mov	r1, r6
 8007d48:	4628      	mov	r0, r5
 8007d4a:	47b8      	blx	r7
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	f43f ae3e 	beq.w	80079ce <_printf_float+0xb6>
 8007d52:	f108 0801 	add.w	r8, r8, #1
 8007d56:	68e3      	ldr	r3, [r4, #12]
 8007d58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d5a:	1a5b      	subs	r3, r3, r1
 8007d5c:	4543      	cmp	r3, r8
 8007d5e:	dcf0      	bgt.n	8007d42 <_printf_float+0x42a>
 8007d60:	e6fc      	b.n	8007b5c <_printf_float+0x244>
 8007d62:	f04f 0800 	mov.w	r8, #0
 8007d66:	f104 0919 	add.w	r9, r4, #25
 8007d6a:	e7f4      	b.n	8007d56 <_printf_float+0x43e>

08007d6c <_printf_common>:
 8007d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d70:	4616      	mov	r6, r2
 8007d72:	4698      	mov	r8, r3
 8007d74:	688a      	ldr	r2, [r1, #8]
 8007d76:	690b      	ldr	r3, [r1, #16]
 8007d78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	bfb8      	it	lt
 8007d80:	4613      	movlt	r3, r2
 8007d82:	6033      	str	r3, [r6, #0]
 8007d84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d88:	4607      	mov	r7, r0
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	b10a      	cbz	r2, 8007d92 <_printf_common+0x26>
 8007d8e:	3301      	adds	r3, #1
 8007d90:	6033      	str	r3, [r6, #0]
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	0699      	lsls	r1, r3, #26
 8007d96:	bf42      	ittt	mi
 8007d98:	6833      	ldrmi	r3, [r6, #0]
 8007d9a:	3302      	addmi	r3, #2
 8007d9c:	6033      	strmi	r3, [r6, #0]
 8007d9e:	6825      	ldr	r5, [r4, #0]
 8007da0:	f015 0506 	ands.w	r5, r5, #6
 8007da4:	d106      	bne.n	8007db4 <_printf_common+0x48>
 8007da6:	f104 0a19 	add.w	sl, r4, #25
 8007daa:	68e3      	ldr	r3, [r4, #12]
 8007dac:	6832      	ldr	r2, [r6, #0]
 8007dae:	1a9b      	subs	r3, r3, r2
 8007db0:	42ab      	cmp	r3, r5
 8007db2:	dc26      	bgt.n	8007e02 <_printf_common+0x96>
 8007db4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007db8:	6822      	ldr	r2, [r4, #0]
 8007dba:	3b00      	subs	r3, #0
 8007dbc:	bf18      	it	ne
 8007dbe:	2301      	movne	r3, #1
 8007dc0:	0692      	lsls	r2, r2, #26
 8007dc2:	d42b      	bmi.n	8007e1c <_printf_common+0xb0>
 8007dc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dc8:	4641      	mov	r1, r8
 8007dca:	4638      	mov	r0, r7
 8007dcc:	47c8      	blx	r9
 8007dce:	3001      	adds	r0, #1
 8007dd0:	d01e      	beq.n	8007e10 <_printf_common+0xa4>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	6922      	ldr	r2, [r4, #16]
 8007dd6:	f003 0306 	and.w	r3, r3, #6
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	bf02      	ittt	eq
 8007dde:	68e5      	ldreq	r5, [r4, #12]
 8007de0:	6833      	ldreq	r3, [r6, #0]
 8007de2:	1aed      	subeq	r5, r5, r3
 8007de4:	68a3      	ldr	r3, [r4, #8]
 8007de6:	bf0c      	ite	eq
 8007de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dec:	2500      	movne	r5, #0
 8007dee:	4293      	cmp	r3, r2
 8007df0:	bfc4      	itt	gt
 8007df2:	1a9b      	subgt	r3, r3, r2
 8007df4:	18ed      	addgt	r5, r5, r3
 8007df6:	2600      	movs	r6, #0
 8007df8:	341a      	adds	r4, #26
 8007dfa:	42b5      	cmp	r5, r6
 8007dfc:	d11a      	bne.n	8007e34 <_printf_common+0xc8>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	e008      	b.n	8007e14 <_printf_common+0xa8>
 8007e02:	2301      	movs	r3, #1
 8007e04:	4652      	mov	r2, sl
 8007e06:	4641      	mov	r1, r8
 8007e08:	4638      	mov	r0, r7
 8007e0a:	47c8      	blx	r9
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	d103      	bne.n	8007e18 <_printf_common+0xac>
 8007e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e18:	3501      	adds	r5, #1
 8007e1a:	e7c6      	b.n	8007daa <_printf_common+0x3e>
 8007e1c:	18e1      	adds	r1, r4, r3
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	2030      	movs	r0, #48	@ 0x30
 8007e22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e26:	4422      	add	r2, r4
 8007e28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e30:	3302      	adds	r3, #2
 8007e32:	e7c7      	b.n	8007dc4 <_printf_common+0x58>
 8007e34:	2301      	movs	r3, #1
 8007e36:	4622      	mov	r2, r4
 8007e38:	4641      	mov	r1, r8
 8007e3a:	4638      	mov	r0, r7
 8007e3c:	47c8      	blx	r9
 8007e3e:	3001      	adds	r0, #1
 8007e40:	d0e6      	beq.n	8007e10 <_printf_common+0xa4>
 8007e42:	3601      	adds	r6, #1
 8007e44:	e7d9      	b.n	8007dfa <_printf_common+0x8e>
	...

08007e48 <_printf_i>:
 8007e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4c:	7e0f      	ldrb	r7, [r1, #24]
 8007e4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e50:	2f78      	cmp	r7, #120	@ 0x78
 8007e52:	4691      	mov	r9, r2
 8007e54:	4680      	mov	r8, r0
 8007e56:	460c      	mov	r4, r1
 8007e58:	469a      	mov	sl, r3
 8007e5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e5e:	d807      	bhi.n	8007e70 <_printf_i+0x28>
 8007e60:	2f62      	cmp	r7, #98	@ 0x62
 8007e62:	d80a      	bhi.n	8007e7a <_printf_i+0x32>
 8007e64:	2f00      	cmp	r7, #0
 8007e66:	f000 80d2 	beq.w	800800e <_printf_i+0x1c6>
 8007e6a:	2f58      	cmp	r7, #88	@ 0x58
 8007e6c:	f000 80b9 	beq.w	8007fe2 <_printf_i+0x19a>
 8007e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e78:	e03a      	b.n	8007ef0 <_printf_i+0xa8>
 8007e7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e7e:	2b15      	cmp	r3, #21
 8007e80:	d8f6      	bhi.n	8007e70 <_printf_i+0x28>
 8007e82:	a101      	add	r1, pc, #4	@ (adr r1, 8007e88 <_printf_i+0x40>)
 8007e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e88:	08007ee1 	.word	0x08007ee1
 8007e8c:	08007ef5 	.word	0x08007ef5
 8007e90:	08007e71 	.word	0x08007e71
 8007e94:	08007e71 	.word	0x08007e71
 8007e98:	08007e71 	.word	0x08007e71
 8007e9c:	08007e71 	.word	0x08007e71
 8007ea0:	08007ef5 	.word	0x08007ef5
 8007ea4:	08007e71 	.word	0x08007e71
 8007ea8:	08007e71 	.word	0x08007e71
 8007eac:	08007e71 	.word	0x08007e71
 8007eb0:	08007e71 	.word	0x08007e71
 8007eb4:	08007ff5 	.word	0x08007ff5
 8007eb8:	08007f1f 	.word	0x08007f1f
 8007ebc:	08007faf 	.word	0x08007faf
 8007ec0:	08007e71 	.word	0x08007e71
 8007ec4:	08007e71 	.word	0x08007e71
 8007ec8:	08008017 	.word	0x08008017
 8007ecc:	08007e71 	.word	0x08007e71
 8007ed0:	08007f1f 	.word	0x08007f1f
 8007ed4:	08007e71 	.word	0x08007e71
 8007ed8:	08007e71 	.word	0x08007e71
 8007edc:	08007fb7 	.word	0x08007fb7
 8007ee0:	6833      	ldr	r3, [r6, #0]
 8007ee2:	1d1a      	adds	r2, r3, #4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6032      	str	r2, [r6, #0]
 8007ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007eec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e09d      	b.n	8008030 <_printf_i+0x1e8>
 8007ef4:	6833      	ldr	r3, [r6, #0]
 8007ef6:	6820      	ldr	r0, [r4, #0]
 8007ef8:	1d19      	adds	r1, r3, #4
 8007efa:	6031      	str	r1, [r6, #0]
 8007efc:	0606      	lsls	r6, r0, #24
 8007efe:	d501      	bpl.n	8007f04 <_printf_i+0xbc>
 8007f00:	681d      	ldr	r5, [r3, #0]
 8007f02:	e003      	b.n	8007f0c <_printf_i+0xc4>
 8007f04:	0645      	lsls	r5, r0, #25
 8007f06:	d5fb      	bpl.n	8007f00 <_printf_i+0xb8>
 8007f08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f0c:	2d00      	cmp	r5, #0
 8007f0e:	da03      	bge.n	8007f18 <_printf_i+0xd0>
 8007f10:	232d      	movs	r3, #45	@ 0x2d
 8007f12:	426d      	negs	r5, r5
 8007f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f18:	4859      	ldr	r0, [pc, #356]	@ (8008080 <_printf_i+0x238>)
 8007f1a:	230a      	movs	r3, #10
 8007f1c:	e011      	b.n	8007f42 <_printf_i+0xfa>
 8007f1e:	6821      	ldr	r1, [r4, #0]
 8007f20:	6833      	ldr	r3, [r6, #0]
 8007f22:	0608      	lsls	r0, r1, #24
 8007f24:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f28:	d402      	bmi.n	8007f30 <_printf_i+0xe8>
 8007f2a:	0649      	lsls	r1, r1, #25
 8007f2c:	bf48      	it	mi
 8007f2e:	b2ad      	uxthmi	r5, r5
 8007f30:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f32:	4853      	ldr	r0, [pc, #332]	@ (8008080 <_printf_i+0x238>)
 8007f34:	6033      	str	r3, [r6, #0]
 8007f36:	bf14      	ite	ne
 8007f38:	230a      	movne	r3, #10
 8007f3a:	2308      	moveq	r3, #8
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f42:	6866      	ldr	r6, [r4, #4]
 8007f44:	60a6      	str	r6, [r4, #8]
 8007f46:	2e00      	cmp	r6, #0
 8007f48:	bfa2      	ittt	ge
 8007f4a:	6821      	ldrge	r1, [r4, #0]
 8007f4c:	f021 0104 	bicge.w	r1, r1, #4
 8007f50:	6021      	strge	r1, [r4, #0]
 8007f52:	b90d      	cbnz	r5, 8007f58 <_printf_i+0x110>
 8007f54:	2e00      	cmp	r6, #0
 8007f56:	d04b      	beq.n	8007ff0 <_printf_i+0x1a8>
 8007f58:	4616      	mov	r6, r2
 8007f5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f5e:	fb03 5711 	mls	r7, r3, r1, r5
 8007f62:	5dc7      	ldrb	r7, [r0, r7]
 8007f64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f68:	462f      	mov	r7, r5
 8007f6a:	42bb      	cmp	r3, r7
 8007f6c:	460d      	mov	r5, r1
 8007f6e:	d9f4      	bls.n	8007f5a <_printf_i+0x112>
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d10b      	bne.n	8007f8c <_printf_i+0x144>
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	07df      	lsls	r7, r3, #31
 8007f78:	d508      	bpl.n	8007f8c <_printf_i+0x144>
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	6861      	ldr	r1, [r4, #4]
 8007f7e:	4299      	cmp	r1, r3
 8007f80:	bfde      	ittt	le
 8007f82:	2330      	movle	r3, #48	@ 0x30
 8007f84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f88:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007f8c:	1b92      	subs	r2, r2, r6
 8007f8e:	6122      	str	r2, [r4, #16]
 8007f90:	f8cd a000 	str.w	sl, [sp]
 8007f94:	464b      	mov	r3, r9
 8007f96:	aa03      	add	r2, sp, #12
 8007f98:	4621      	mov	r1, r4
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	f7ff fee6 	bl	8007d6c <_printf_common>
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d14a      	bne.n	800803a <_printf_i+0x1f2>
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fa8:	b004      	add	sp, #16
 8007faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	f043 0320 	orr.w	r3, r3, #32
 8007fb4:	6023      	str	r3, [r4, #0]
 8007fb6:	4833      	ldr	r0, [pc, #204]	@ (8008084 <_printf_i+0x23c>)
 8007fb8:	2778      	movs	r7, #120	@ 0x78
 8007fba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	6831      	ldr	r1, [r6, #0]
 8007fc2:	061f      	lsls	r7, r3, #24
 8007fc4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fc8:	d402      	bmi.n	8007fd0 <_printf_i+0x188>
 8007fca:	065f      	lsls	r7, r3, #25
 8007fcc:	bf48      	it	mi
 8007fce:	b2ad      	uxthmi	r5, r5
 8007fd0:	6031      	str	r1, [r6, #0]
 8007fd2:	07d9      	lsls	r1, r3, #31
 8007fd4:	bf44      	itt	mi
 8007fd6:	f043 0320 	orrmi.w	r3, r3, #32
 8007fda:	6023      	strmi	r3, [r4, #0]
 8007fdc:	b11d      	cbz	r5, 8007fe6 <_printf_i+0x19e>
 8007fde:	2310      	movs	r3, #16
 8007fe0:	e7ac      	b.n	8007f3c <_printf_i+0xf4>
 8007fe2:	4827      	ldr	r0, [pc, #156]	@ (8008080 <_printf_i+0x238>)
 8007fe4:	e7e9      	b.n	8007fba <_printf_i+0x172>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	f023 0320 	bic.w	r3, r3, #32
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	e7f6      	b.n	8007fde <_printf_i+0x196>
 8007ff0:	4616      	mov	r6, r2
 8007ff2:	e7bd      	b.n	8007f70 <_printf_i+0x128>
 8007ff4:	6833      	ldr	r3, [r6, #0]
 8007ff6:	6825      	ldr	r5, [r4, #0]
 8007ff8:	6961      	ldr	r1, [r4, #20]
 8007ffa:	1d18      	adds	r0, r3, #4
 8007ffc:	6030      	str	r0, [r6, #0]
 8007ffe:	062e      	lsls	r6, r5, #24
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	d501      	bpl.n	8008008 <_printf_i+0x1c0>
 8008004:	6019      	str	r1, [r3, #0]
 8008006:	e002      	b.n	800800e <_printf_i+0x1c6>
 8008008:	0668      	lsls	r0, r5, #25
 800800a:	d5fb      	bpl.n	8008004 <_printf_i+0x1bc>
 800800c:	8019      	strh	r1, [r3, #0]
 800800e:	2300      	movs	r3, #0
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	4616      	mov	r6, r2
 8008014:	e7bc      	b.n	8007f90 <_printf_i+0x148>
 8008016:	6833      	ldr	r3, [r6, #0]
 8008018:	1d1a      	adds	r2, r3, #4
 800801a:	6032      	str	r2, [r6, #0]
 800801c:	681e      	ldr	r6, [r3, #0]
 800801e:	6862      	ldr	r2, [r4, #4]
 8008020:	2100      	movs	r1, #0
 8008022:	4630      	mov	r0, r6
 8008024:	f7f8 f8dc 	bl	80001e0 <memchr>
 8008028:	b108      	cbz	r0, 800802e <_printf_i+0x1e6>
 800802a:	1b80      	subs	r0, r0, r6
 800802c:	6060      	str	r0, [r4, #4]
 800802e:	6863      	ldr	r3, [r4, #4]
 8008030:	6123      	str	r3, [r4, #16]
 8008032:	2300      	movs	r3, #0
 8008034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008038:	e7aa      	b.n	8007f90 <_printf_i+0x148>
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	4632      	mov	r2, r6
 800803e:	4649      	mov	r1, r9
 8008040:	4640      	mov	r0, r8
 8008042:	47d0      	blx	sl
 8008044:	3001      	adds	r0, #1
 8008046:	d0ad      	beq.n	8007fa4 <_printf_i+0x15c>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	079b      	lsls	r3, r3, #30
 800804c:	d413      	bmi.n	8008076 <_printf_i+0x22e>
 800804e:	68e0      	ldr	r0, [r4, #12]
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	4298      	cmp	r0, r3
 8008054:	bfb8      	it	lt
 8008056:	4618      	movlt	r0, r3
 8008058:	e7a6      	b.n	8007fa8 <_printf_i+0x160>
 800805a:	2301      	movs	r3, #1
 800805c:	4632      	mov	r2, r6
 800805e:	4649      	mov	r1, r9
 8008060:	4640      	mov	r0, r8
 8008062:	47d0      	blx	sl
 8008064:	3001      	adds	r0, #1
 8008066:	d09d      	beq.n	8007fa4 <_printf_i+0x15c>
 8008068:	3501      	adds	r5, #1
 800806a:	68e3      	ldr	r3, [r4, #12]
 800806c:	9903      	ldr	r1, [sp, #12]
 800806e:	1a5b      	subs	r3, r3, r1
 8008070:	42ab      	cmp	r3, r5
 8008072:	dcf2      	bgt.n	800805a <_printf_i+0x212>
 8008074:	e7eb      	b.n	800804e <_printf_i+0x206>
 8008076:	2500      	movs	r5, #0
 8008078:	f104 0619 	add.w	r6, r4, #25
 800807c:	e7f5      	b.n	800806a <_printf_i+0x222>
 800807e:	bf00      	nop
 8008080:	0800af12 	.word	0x0800af12
 8008084:	0800af23 	.word	0x0800af23

08008088 <std>:
 8008088:	2300      	movs	r3, #0
 800808a:	b510      	push	{r4, lr}
 800808c:	4604      	mov	r4, r0
 800808e:	e9c0 3300 	strd	r3, r3, [r0]
 8008092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008096:	6083      	str	r3, [r0, #8]
 8008098:	8181      	strh	r1, [r0, #12]
 800809a:	6643      	str	r3, [r0, #100]	@ 0x64
 800809c:	81c2      	strh	r2, [r0, #14]
 800809e:	6183      	str	r3, [r0, #24]
 80080a0:	4619      	mov	r1, r3
 80080a2:	2208      	movs	r2, #8
 80080a4:	305c      	adds	r0, #92	@ 0x5c
 80080a6:	f000 f928 	bl	80082fa <memset>
 80080aa:	4b0d      	ldr	r3, [pc, #52]	@ (80080e0 <std+0x58>)
 80080ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80080ae:	4b0d      	ldr	r3, [pc, #52]	@ (80080e4 <std+0x5c>)
 80080b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080b2:	4b0d      	ldr	r3, [pc, #52]	@ (80080e8 <std+0x60>)
 80080b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080b6:	4b0d      	ldr	r3, [pc, #52]	@ (80080ec <std+0x64>)
 80080b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80080ba:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <std+0x68>)
 80080bc:	6224      	str	r4, [r4, #32]
 80080be:	429c      	cmp	r4, r3
 80080c0:	d006      	beq.n	80080d0 <std+0x48>
 80080c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080c6:	4294      	cmp	r4, r2
 80080c8:	d002      	beq.n	80080d0 <std+0x48>
 80080ca:	33d0      	adds	r3, #208	@ 0xd0
 80080cc:	429c      	cmp	r4, r3
 80080ce:	d105      	bne.n	80080dc <std+0x54>
 80080d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d8:	f000 b99e 	b.w	8008418 <__retarget_lock_init_recursive>
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	bf00      	nop
 80080e0:	08008275 	.word	0x08008275
 80080e4:	08008297 	.word	0x08008297
 80080e8:	080082cf 	.word	0x080082cf
 80080ec:	080082f3 	.word	0x080082f3
 80080f0:	200004b8 	.word	0x200004b8

080080f4 <stdio_exit_handler>:
 80080f4:	4a02      	ldr	r2, [pc, #8]	@ (8008100 <stdio_exit_handler+0xc>)
 80080f6:	4903      	ldr	r1, [pc, #12]	@ (8008104 <stdio_exit_handler+0x10>)
 80080f8:	4803      	ldr	r0, [pc, #12]	@ (8008108 <stdio_exit_handler+0x14>)
 80080fa:	f000 b869 	b.w	80081d0 <_fwalk_sglue>
 80080fe:	bf00      	nop
 8008100:	20000010 	.word	0x20000010
 8008104:	0800a6c5 	.word	0x0800a6c5
 8008108:	2000018c 	.word	0x2000018c

0800810c <cleanup_stdio>:
 800810c:	6841      	ldr	r1, [r0, #4]
 800810e:	4b0c      	ldr	r3, [pc, #48]	@ (8008140 <cleanup_stdio+0x34>)
 8008110:	4299      	cmp	r1, r3
 8008112:	b510      	push	{r4, lr}
 8008114:	4604      	mov	r4, r0
 8008116:	d001      	beq.n	800811c <cleanup_stdio+0x10>
 8008118:	f002 fad4 	bl	800a6c4 <_fflush_r>
 800811c:	68a1      	ldr	r1, [r4, #8]
 800811e:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <cleanup_stdio+0x38>)
 8008120:	4299      	cmp	r1, r3
 8008122:	d002      	beq.n	800812a <cleanup_stdio+0x1e>
 8008124:	4620      	mov	r0, r4
 8008126:	f002 facd 	bl	800a6c4 <_fflush_r>
 800812a:	68e1      	ldr	r1, [r4, #12]
 800812c:	4b06      	ldr	r3, [pc, #24]	@ (8008148 <cleanup_stdio+0x3c>)
 800812e:	4299      	cmp	r1, r3
 8008130:	d004      	beq.n	800813c <cleanup_stdio+0x30>
 8008132:	4620      	mov	r0, r4
 8008134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008138:	f002 bac4 	b.w	800a6c4 <_fflush_r>
 800813c:	bd10      	pop	{r4, pc}
 800813e:	bf00      	nop
 8008140:	200004b8 	.word	0x200004b8
 8008144:	20000520 	.word	0x20000520
 8008148:	20000588 	.word	0x20000588

0800814c <global_stdio_init.part.0>:
 800814c:	b510      	push	{r4, lr}
 800814e:	4b0b      	ldr	r3, [pc, #44]	@ (800817c <global_stdio_init.part.0+0x30>)
 8008150:	4c0b      	ldr	r4, [pc, #44]	@ (8008180 <global_stdio_init.part.0+0x34>)
 8008152:	4a0c      	ldr	r2, [pc, #48]	@ (8008184 <global_stdio_init.part.0+0x38>)
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	4620      	mov	r0, r4
 8008158:	2200      	movs	r2, #0
 800815a:	2104      	movs	r1, #4
 800815c:	f7ff ff94 	bl	8008088 <std>
 8008160:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008164:	2201      	movs	r2, #1
 8008166:	2109      	movs	r1, #9
 8008168:	f7ff ff8e 	bl	8008088 <std>
 800816c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008170:	2202      	movs	r2, #2
 8008172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008176:	2112      	movs	r1, #18
 8008178:	f7ff bf86 	b.w	8008088 <std>
 800817c:	200005f0 	.word	0x200005f0
 8008180:	200004b8 	.word	0x200004b8
 8008184:	080080f5 	.word	0x080080f5

08008188 <__sfp_lock_acquire>:
 8008188:	4801      	ldr	r0, [pc, #4]	@ (8008190 <__sfp_lock_acquire+0x8>)
 800818a:	f000 b946 	b.w	800841a <__retarget_lock_acquire_recursive>
 800818e:	bf00      	nop
 8008190:	200005f9 	.word	0x200005f9

08008194 <__sfp_lock_release>:
 8008194:	4801      	ldr	r0, [pc, #4]	@ (800819c <__sfp_lock_release+0x8>)
 8008196:	f000 b941 	b.w	800841c <__retarget_lock_release_recursive>
 800819a:	bf00      	nop
 800819c:	200005f9 	.word	0x200005f9

080081a0 <__sinit>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4604      	mov	r4, r0
 80081a4:	f7ff fff0 	bl	8008188 <__sfp_lock_acquire>
 80081a8:	6a23      	ldr	r3, [r4, #32]
 80081aa:	b11b      	cbz	r3, 80081b4 <__sinit+0x14>
 80081ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b0:	f7ff bff0 	b.w	8008194 <__sfp_lock_release>
 80081b4:	4b04      	ldr	r3, [pc, #16]	@ (80081c8 <__sinit+0x28>)
 80081b6:	6223      	str	r3, [r4, #32]
 80081b8:	4b04      	ldr	r3, [pc, #16]	@ (80081cc <__sinit+0x2c>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1f5      	bne.n	80081ac <__sinit+0xc>
 80081c0:	f7ff ffc4 	bl	800814c <global_stdio_init.part.0>
 80081c4:	e7f2      	b.n	80081ac <__sinit+0xc>
 80081c6:	bf00      	nop
 80081c8:	0800810d 	.word	0x0800810d
 80081cc:	200005f0 	.word	0x200005f0

080081d0 <_fwalk_sglue>:
 80081d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d4:	4607      	mov	r7, r0
 80081d6:	4688      	mov	r8, r1
 80081d8:	4614      	mov	r4, r2
 80081da:	2600      	movs	r6, #0
 80081dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081e0:	f1b9 0901 	subs.w	r9, r9, #1
 80081e4:	d505      	bpl.n	80081f2 <_fwalk_sglue+0x22>
 80081e6:	6824      	ldr	r4, [r4, #0]
 80081e8:	2c00      	cmp	r4, #0
 80081ea:	d1f7      	bne.n	80081dc <_fwalk_sglue+0xc>
 80081ec:	4630      	mov	r0, r6
 80081ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f2:	89ab      	ldrh	r3, [r5, #12]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d907      	bls.n	8008208 <_fwalk_sglue+0x38>
 80081f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081fc:	3301      	adds	r3, #1
 80081fe:	d003      	beq.n	8008208 <_fwalk_sglue+0x38>
 8008200:	4629      	mov	r1, r5
 8008202:	4638      	mov	r0, r7
 8008204:	47c0      	blx	r8
 8008206:	4306      	orrs	r6, r0
 8008208:	3568      	adds	r5, #104	@ 0x68
 800820a:	e7e9      	b.n	80081e0 <_fwalk_sglue+0x10>

0800820c <sniprintf>:
 800820c:	b40c      	push	{r2, r3}
 800820e:	b530      	push	{r4, r5, lr}
 8008210:	4b17      	ldr	r3, [pc, #92]	@ (8008270 <sniprintf+0x64>)
 8008212:	1e0c      	subs	r4, r1, #0
 8008214:	681d      	ldr	r5, [r3, #0]
 8008216:	b09d      	sub	sp, #116	@ 0x74
 8008218:	da08      	bge.n	800822c <sniprintf+0x20>
 800821a:	238b      	movs	r3, #139	@ 0x8b
 800821c:	602b      	str	r3, [r5, #0]
 800821e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008222:	b01d      	add	sp, #116	@ 0x74
 8008224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008228:	b002      	add	sp, #8
 800822a:	4770      	bx	lr
 800822c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008230:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008234:	bf14      	ite	ne
 8008236:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800823a:	4623      	moveq	r3, r4
 800823c:	9304      	str	r3, [sp, #16]
 800823e:	9307      	str	r3, [sp, #28]
 8008240:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008244:	9002      	str	r0, [sp, #8]
 8008246:	9006      	str	r0, [sp, #24]
 8008248:	f8ad 3016 	strh.w	r3, [sp, #22]
 800824c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800824e:	ab21      	add	r3, sp, #132	@ 0x84
 8008250:	a902      	add	r1, sp, #8
 8008252:	4628      	mov	r0, r5
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	f002 f8b5 	bl	800a3c4 <_svfiprintf_r>
 800825a:	1c43      	adds	r3, r0, #1
 800825c:	bfbc      	itt	lt
 800825e:	238b      	movlt	r3, #139	@ 0x8b
 8008260:	602b      	strlt	r3, [r5, #0]
 8008262:	2c00      	cmp	r4, #0
 8008264:	d0dd      	beq.n	8008222 <sniprintf+0x16>
 8008266:	9b02      	ldr	r3, [sp, #8]
 8008268:	2200      	movs	r2, #0
 800826a:	701a      	strb	r2, [r3, #0]
 800826c:	e7d9      	b.n	8008222 <sniprintf+0x16>
 800826e:	bf00      	nop
 8008270:	20000188 	.word	0x20000188

08008274 <__sread>:
 8008274:	b510      	push	{r4, lr}
 8008276:	460c      	mov	r4, r1
 8008278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827c:	f000 f87e 	bl	800837c <_read_r>
 8008280:	2800      	cmp	r0, #0
 8008282:	bfab      	itete	ge
 8008284:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008286:	89a3      	ldrhlt	r3, [r4, #12]
 8008288:	181b      	addge	r3, r3, r0
 800828a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800828e:	bfac      	ite	ge
 8008290:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008292:	81a3      	strhlt	r3, [r4, #12]
 8008294:	bd10      	pop	{r4, pc}

08008296 <__swrite>:
 8008296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800829a:	461f      	mov	r7, r3
 800829c:	898b      	ldrh	r3, [r1, #12]
 800829e:	05db      	lsls	r3, r3, #23
 80082a0:	4605      	mov	r5, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	4616      	mov	r6, r2
 80082a6:	d505      	bpl.n	80082b4 <__swrite+0x1e>
 80082a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ac:	2302      	movs	r3, #2
 80082ae:	2200      	movs	r2, #0
 80082b0:	f000 f852 	bl	8008358 <_lseek_r>
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082be:	81a3      	strh	r3, [r4, #12]
 80082c0:	4632      	mov	r2, r6
 80082c2:	463b      	mov	r3, r7
 80082c4:	4628      	mov	r0, r5
 80082c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ca:	f000 b869 	b.w	80083a0 <_write_r>

080082ce <__sseek>:
 80082ce:	b510      	push	{r4, lr}
 80082d0:	460c      	mov	r4, r1
 80082d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d6:	f000 f83f 	bl	8008358 <_lseek_r>
 80082da:	1c43      	adds	r3, r0, #1
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	bf15      	itete	ne
 80082e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082ea:	81a3      	strheq	r3, [r4, #12]
 80082ec:	bf18      	it	ne
 80082ee:	81a3      	strhne	r3, [r4, #12]
 80082f0:	bd10      	pop	{r4, pc}

080082f2 <__sclose>:
 80082f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f6:	f000 b81f 	b.w	8008338 <_close_r>

080082fa <memset>:
 80082fa:	4402      	add	r2, r0
 80082fc:	4603      	mov	r3, r0
 80082fe:	4293      	cmp	r3, r2
 8008300:	d100      	bne.n	8008304 <memset+0xa>
 8008302:	4770      	bx	lr
 8008304:	f803 1b01 	strb.w	r1, [r3], #1
 8008308:	e7f9      	b.n	80082fe <memset+0x4>

0800830a <strncmp>:
 800830a:	b510      	push	{r4, lr}
 800830c:	b16a      	cbz	r2, 800832a <strncmp+0x20>
 800830e:	3901      	subs	r1, #1
 8008310:	1884      	adds	r4, r0, r2
 8008312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008316:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800831a:	429a      	cmp	r2, r3
 800831c:	d103      	bne.n	8008326 <strncmp+0x1c>
 800831e:	42a0      	cmp	r0, r4
 8008320:	d001      	beq.n	8008326 <strncmp+0x1c>
 8008322:	2a00      	cmp	r2, #0
 8008324:	d1f5      	bne.n	8008312 <strncmp+0x8>
 8008326:	1ad0      	subs	r0, r2, r3
 8008328:	bd10      	pop	{r4, pc}
 800832a:	4610      	mov	r0, r2
 800832c:	e7fc      	b.n	8008328 <strncmp+0x1e>
	...

08008330 <_localeconv_r>:
 8008330:	4800      	ldr	r0, [pc, #0]	@ (8008334 <_localeconv_r+0x4>)
 8008332:	4770      	bx	lr
 8008334:	2000010c 	.word	0x2000010c

08008338 <_close_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4d06      	ldr	r5, [pc, #24]	@ (8008354 <_close_r+0x1c>)
 800833c:	2300      	movs	r3, #0
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	602b      	str	r3, [r5, #0]
 8008344:	f7fa f854 	bl	80023f0 <_close>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_close_r+0x1a>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_close_r+0x1a>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	200005f4 	.word	0x200005f4

08008358 <_lseek_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4d07      	ldr	r5, [pc, #28]	@ (8008378 <_lseek_r+0x20>)
 800835c:	4604      	mov	r4, r0
 800835e:	4608      	mov	r0, r1
 8008360:	4611      	mov	r1, r2
 8008362:	2200      	movs	r2, #0
 8008364:	602a      	str	r2, [r5, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	f7fa f869 	bl	800243e <_lseek>
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	d102      	bne.n	8008376 <_lseek_r+0x1e>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	b103      	cbz	r3, 8008376 <_lseek_r+0x1e>
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	bd38      	pop	{r3, r4, r5, pc}
 8008378:	200005f4 	.word	0x200005f4

0800837c <_read_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	4d07      	ldr	r5, [pc, #28]	@ (800839c <_read_r+0x20>)
 8008380:	4604      	mov	r4, r0
 8008382:	4608      	mov	r0, r1
 8008384:	4611      	mov	r1, r2
 8008386:	2200      	movs	r2, #0
 8008388:	602a      	str	r2, [r5, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	f7f9 fff7 	bl	800237e <_read>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d102      	bne.n	800839a <_read_r+0x1e>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	b103      	cbz	r3, 800839a <_read_r+0x1e>
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	200005f4 	.word	0x200005f4

080083a0 <_write_r>:
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4d07      	ldr	r5, [pc, #28]	@ (80083c0 <_write_r+0x20>)
 80083a4:	4604      	mov	r4, r0
 80083a6:	4608      	mov	r0, r1
 80083a8:	4611      	mov	r1, r2
 80083aa:	2200      	movs	r2, #0
 80083ac:	602a      	str	r2, [r5, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	f7fa f802 	bl	80023b8 <_write>
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	d102      	bne.n	80083be <_write_r+0x1e>
 80083b8:	682b      	ldr	r3, [r5, #0]
 80083ba:	b103      	cbz	r3, 80083be <_write_r+0x1e>
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	200005f4 	.word	0x200005f4

080083c4 <__errno>:
 80083c4:	4b01      	ldr	r3, [pc, #4]	@ (80083cc <__errno+0x8>)
 80083c6:	6818      	ldr	r0, [r3, #0]
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20000188 	.word	0x20000188

080083d0 <__libc_init_array>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008408 <__libc_init_array+0x38>)
 80083d4:	4c0d      	ldr	r4, [pc, #52]	@ (800840c <__libc_init_array+0x3c>)
 80083d6:	1b64      	subs	r4, r4, r5
 80083d8:	10a4      	asrs	r4, r4, #2
 80083da:	2600      	movs	r6, #0
 80083dc:	42a6      	cmp	r6, r4
 80083de:	d109      	bne.n	80083f4 <__libc_init_array+0x24>
 80083e0:	4d0b      	ldr	r5, [pc, #44]	@ (8008410 <__libc_init_array+0x40>)
 80083e2:	4c0c      	ldr	r4, [pc, #48]	@ (8008414 <__libc_init_array+0x44>)
 80083e4:	f002 fcde 	bl	800ada4 <_init>
 80083e8:	1b64      	subs	r4, r4, r5
 80083ea:	10a4      	asrs	r4, r4, #2
 80083ec:	2600      	movs	r6, #0
 80083ee:	42a6      	cmp	r6, r4
 80083f0:	d105      	bne.n	80083fe <__libc_init_array+0x2e>
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
 80083f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f8:	4798      	blx	r3
 80083fa:	3601      	adds	r6, #1
 80083fc:	e7ee      	b.n	80083dc <__libc_init_array+0xc>
 80083fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008402:	4798      	blx	r3
 8008404:	3601      	adds	r6, #1
 8008406:	e7f2      	b.n	80083ee <__libc_init_array+0x1e>
 8008408:	0800b2d8 	.word	0x0800b2d8
 800840c:	0800b2d8 	.word	0x0800b2d8
 8008410:	0800b2d8 	.word	0x0800b2d8
 8008414:	0800b2dc 	.word	0x0800b2dc

08008418 <__retarget_lock_init_recursive>:
 8008418:	4770      	bx	lr

0800841a <__retarget_lock_acquire_recursive>:
 800841a:	4770      	bx	lr

0800841c <__retarget_lock_release_recursive>:
 800841c:	4770      	bx	lr

0800841e <memcpy>:
 800841e:	440a      	add	r2, r1
 8008420:	4291      	cmp	r1, r2
 8008422:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008426:	d100      	bne.n	800842a <memcpy+0xc>
 8008428:	4770      	bx	lr
 800842a:	b510      	push	{r4, lr}
 800842c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008430:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008434:	4291      	cmp	r1, r2
 8008436:	d1f9      	bne.n	800842c <memcpy+0xe>
 8008438:	bd10      	pop	{r4, pc}
 800843a:	0000      	movs	r0, r0
 800843c:	0000      	movs	r0, r0
	...

08008440 <nan>:
 8008440:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008448 <nan+0x8>
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	00000000 	.word	0x00000000
 800844c:	7ff80000 	.word	0x7ff80000

08008450 <nanf>:
 8008450:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008458 <nanf+0x8>
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	7fc00000 	.word	0x7fc00000

0800845c <quorem>:
 800845c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008460:	6903      	ldr	r3, [r0, #16]
 8008462:	690c      	ldr	r4, [r1, #16]
 8008464:	42a3      	cmp	r3, r4
 8008466:	4607      	mov	r7, r0
 8008468:	db7e      	blt.n	8008568 <quorem+0x10c>
 800846a:	3c01      	subs	r4, #1
 800846c:	f101 0814 	add.w	r8, r1, #20
 8008470:	00a3      	lsls	r3, r4, #2
 8008472:	f100 0514 	add.w	r5, r0, #20
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800847c:	9301      	str	r3, [sp, #4]
 800847e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008486:	3301      	adds	r3, #1
 8008488:	429a      	cmp	r2, r3
 800848a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800848e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008492:	d32e      	bcc.n	80084f2 <quorem+0x96>
 8008494:	f04f 0a00 	mov.w	sl, #0
 8008498:	46c4      	mov	ip, r8
 800849a:	46ae      	mov	lr, r5
 800849c:	46d3      	mov	fp, sl
 800849e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80084a2:	b298      	uxth	r0, r3
 80084a4:	fb06 a000 	mla	r0, r6, r0, sl
 80084a8:	0c02      	lsrs	r2, r0, #16
 80084aa:	0c1b      	lsrs	r3, r3, #16
 80084ac:	fb06 2303 	mla	r3, r6, r3, r2
 80084b0:	f8de 2000 	ldr.w	r2, [lr]
 80084b4:	b280      	uxth	r0, r0
 80084b6:	b292      	uxth	r2, r2
 80084b8:	1a12      	subs	r2, r2, r0
 80084ba:	445a      	add	r2, fp
 80084bc:	f8de 0000 	ldr.w	r0, [lr]
 80084c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80084ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80084ce:	b292      	uxth	r2, r2
 80084d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80084d4:	45e1      	cmp	r9, ip
 80084d6:	f84e 2b04 	str.w	r2, [lr], #4
 80084da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80084de:	d2de      	bcs.n	800849e <quorem+0x42>
 80084e0:	9b00      	ldr	r3, [sp, #0]
 80084e2:	58eb      	ldr	r3, [r5, r3]
 80084e4:	b92b      	cbnz	r3, 80084f2 <quorem+0x96>
 80084e6:	9b01      	ldr	r3, [sp, #4]
 80084e8:	3b04      	subs	r3, #4
 80084ea:	429d      	cmp	r5, r3
 80084ec:	461a      	mov	r2, r3
 80084ee:	d32f      	bcc.n	8008550 <quorem+0xf4>
 80084f0:	613c      	str	r4, [r7, #16]
 80084f2:	4638      	mov	r0, r7
 80084f4:	f001 fd10 	bl	8009f18 <__mcmp>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	db25      	blt.n	8008548 <quorem+0xec>
 80084fc:	4629      	mov	r1, r5
 80084fe:	2000      	movs	r0, #0
 8008500:	f858 2b04 	ldr.w	r2, [r8], #4
 8008504:	f8d1 c000 	ldr.w	ip, [r1]
 8008508:	fa1f fe82 	uxth.w	lr, r2
 800850c:	fa1f f38c 	uxth.w	r3, ip
 8008510:	eba3 030e 	sub.w	r3, r3, lr
 8008514:	4403      	add	r3, r0
 8008516:	0c12      	lsrs	r2, r2, #16
 8008518:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800851c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008520:	b29b      	uxth	r3, r3
 8008522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008526:	45c1      	cmp	r9, r8
 8008528:	f841 3b04 	str.w	r3, [r1], #4
 800852c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008530:	d2e6      	bcs.n	8008500 <quorem+0xa4>
 8008532:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800853a:	b922      	cbnz	r2, 8008546 <quorem+0xea>
 800853c:	3b04      	subs	r3, #4
 800853e:	429d      	cmp	r5, r3
 8008540:	461a      	mov	r2, r3
 8008542:	d30b      	bcc.n	800855c <quorem+0x100>
 8008544:	613c      	str	r4, [r7, #16]
 8008546:	3601      	adds	r6, #1
 8008548:	4630      	mov	r0, r6
 800854a:	b003      	add	sp, #12
 800854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008550:	6812      	ldr	r2, [r2, #0]
 8008552:	3b04      	subs	r3, #4
 8008554:	2a00      	cmp	r2, #0
 8008556:	d1cb      	bne.n	80084f0 <quorem+0x94>
 8008558:	3c01      	subs	r4, #1
 800855a:	e7c6      	b.n	80084ea <quorem+0x8e>
 800855c:	6812      	ldr	r2, [r2, #0]
 800855e:	3b04      	subs	r3, #4
 8008560:	2a00      	cmp	r2, #0
 8008562:	d1ef      	bne.n	8008544 <quorem+0xe8>
 8008564:	3c01      	subs	r4, #1
 8008566:	e7ea      	b.n	800853e <quorem+0xe2>
 8008568:	2000      	movs	r0, #0
 800856a:	e7ee      	b.n	800854a <quorem+0xee>
 800856c:	0000      	movs	r0, r0
	...

08008570 <_dtoa_r>:
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	69c7      	ldr	r7, [r0, #28]
 8008576:	b099      	sub	sp, #100	@ 0x64
 8008578:	ed8d 0b02 	vstr	d0, [sp, #8]
 800857c:	ec55 4b10 	vmov	r4, r5, d0
 8008580:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008582:	9109      	str	r1, [sp, #36]	@ 0x24
 8008584:	4683      	mov	fp, r0
 8008586:	920e      	str	r2, [sp, #56]	@ 0x38
 8008588:	9313      	str	r3, [sp, #76]	@ 0x4c
 800858a:	b97f      	cbnz	r7, 80085ac <_dtoa_r+0x3c>
 800858c:	2010      	movs	r0, #16
 800858e:	f001 f937 	bl	8009800 <malloc>
 8008592:	4602      	mov	r2, r0
 8008594:	f8cb 001c 	str.w	r0, [fp, #28]
 8008598:	b920      	cbnz	r0, 80085a4 <_dtoa_r+0x34>
 800859a:	4ba7      	ldr	r3, [pc, #668]	@ (8008838 <_dtoa_r+0x2c8>)
 800859c:	21ef      	movs	r1, #239	@ 0xef
 800859e:	48a7      	ldr	r0, [pc, #668]	@ (800883c <_dtoa_r+0x2cc>)
 80085a0:	f002 f8e2 	bl	800a768 <__assert_func>
 80085a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80085a8:	6007      	str	r7, [r0, #0]
 80085aa:	60c7      	str	r7, [r0, #12]
 80085ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80085b0:	6819      	ldr	r1, [r3, #0]
 80085b2:	b159      	cbz	r1, 80085cc <_dtoa_r+0x5c>
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	604a      	str	r2, [r1, #4]
 80085b8:	2301      	movs	r3, #1
 80085ba:	4093      	lsls	r3, r2
 80085bc:	608b      	str	r3, [r1, #8]
 80085be:	4658      	mov	r0, fp
 80085c0:	f001 fa26 	bl	8009a10 <_Bfree>
 80085c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	1e2b      	subs	r3, r5, #0
 80085ce:	bfb9      	ittee	lt
 80085d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80085d4:	9303      	strlt	r3, [sp, #12]
 80085d6:	2300      	movge	r3, #0
 80085d8:	6033      	strge	r3, [r6, #0]
 80085da:	9f03      	ldr	r7, [sp, #12]
 80085dc:	4b98      	ldr	r3, [pc, #608]	@ (8008840 <_dtoa_r+0x2d0>)
 80085de:	bfbc      	itt	lt
 80085e0:	2201      	movlt	r2, #1
 80085e2:	6032      	strlt	r2, [r6, #0]
 80085e4:	43bb      	bics	r3, r7
 80085e6:	d112      	bne.n	800860e <_dtoa_r+0x9e>
 80085e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80085ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085f4:	4323      	orrs	r3, r4
 80085f6:	f000 854d 	beq.w	8009094 <_dtoa_r+0xb24>
 80085fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008854 <_dtoa_r+0x2e4>
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 854f 	beq.w	80090a4 <_dtoa_r+0xb34>
 8008606:	f10a 0303 	add.w	r3, sl, #3
 800860a:	f000 bd49 	b.w	80090a0 <_dtoa_r+0xb30>
 800860e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008612:	2200      	movs	r2, #0
 8008614:	ec51 0b17 	vmov	r0, r1, d7
 8008618:	2300      	movs	r3, #0
 800861a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800861e:	f7f8 fa5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008622:	4680      	mov	r8, r0
 8008624:	b158      	cbz	r0, 800863e <_dtoa_r+0xce>
 8008626:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008628:	2301      	movs	r3, #1
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800862e:	b113      	cbz	r3, 8008636 <_dtoa_r+0xc6>
 8008630:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008632:	4b84      	ldr	r3, [pc, #528]	@ (8008844 <_dtoa_r+0x2d4>)
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008858 <_dtoa_r+0x2e8>
 800863a:	f000 bd33 	b.w	80090a4 <_dtoa_r+0xb34>
 800863e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008642:	aa16      	add	r2, sp, #88	@ 0x58
 8008644:	a917      	add	r1, sp, #92	@ 0x5c
 8008646:	4658      	mov	r0, fp
 8008648:	f001 fd86 	bl	800a158 <__d2b>
 800864c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008650:	4681      	mov	r9, r0
 8008652:	2e00      	cmp	r6, #0
 8008654:	d077      	beq.n	8008746 <_dtoa_r+0x1d6>
 8008656:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008658:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800865c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008664:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008668:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800866c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008670:	4619      	mov	r1, r3
 8008672:	2200      	movs	r2, #0
 8008674:	4b74      	ldr	r3, [pc, #464]	@ (8008848 <_dtoa_r+0x2d8>)
 8008676:	f7f7 fe0f 	bl	8000298 <__aeabi_dsub>
 800867a:	a369      	add	r3, pc, #420	@ (adr r3, 8008820 <_dtoa_r+0x2b0>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	f7f7 ffc2 	bl	8000608 <__aeabi_dmul>
 8008684:	a368      	add	r3, pc, #416	@ (adr r3, 8008828 <_dtoa_r+0x2b8>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f7f7 fe07 	bl	800029c <__adddf3>
 800868e:	4604      	mov	r4, r0
 8008690:	4630      	mov	r0, r6
 8008692:	460d      	mov	r5, r1
 8008694:	f7f7 ff4e 	bl	8000534 <__aeabi_i2d>
 8008698:	a365      	add	r3, pc, #404	@ (adr r3, 8008830 <_dtoa_r+0x2c0>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f7f7 ffb3 	bl	8000608 <__aeabi_dmul>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4620      	mov	r0, r4
 80086a8:	4629      	mov	r1, r5
 80086aa:	f7f7 fdf7 	bl	800029c <__adddf3>
 80086ae:	4604      	mov	r4, r0
 80086b0:	460d      	mov	r5, r1
 80086b2:	f7f8 fa59 	bl	8000b68 <__aeabi_d2iz>
 80086b6:	2200      	movs	r2, #0
 80086b8:	4607      	mov	r7, r0
 80086ba:	2300      	movs	r3, #0
 80086bc:	4620      	mov	r0, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	f7f8 fa14 	bl	8000aec <__aeabi_dcmplt>
 80086c4:	b140      	cbz	r0, 80086d8 <_dtoa_r+0x168>
 80086c6:	4638      	mov	r0, r7
 80086c8:	f7f7 ff34 	bl	8000534 <__aeabi_i2d>
 80086cc:	4622      	mov	r2, r4
 80086ce:	462b      	mov	r3, r5
 80086d0:	f7f8 fa02 	bl	8000ad8 <__aeabi_dcmpeq>
 80086d4:	b900      	cbnz	r0, 80086d8 <_dtoa_r+0x168>
 80086d6:	3f01      	subs	r7, #1
 80086d8:	2f16      	cmp	r7, #22
 80086da:	d851      	bhi.n	8008780 <_dtoa_r+0x210>
 80086dc:	4b5b      	ldr	r3, [pc, #364]	@ (800884c <_dtoa_r+0x2dc>)
 80086de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086ea:	f7f8 f9ff 	bl	8000aec <__aeabi_dcmplt>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d048      	beq.n	8008784 <_dtoa_r+0x214>
 80086f2:	3f01      	subs	r7, #1
 80086f4:	2300      	movs	r3, #0
 80086f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80086f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80086fa:	1b9b      	subs	r3, r3, r6
 80086fc:	1e5a      	subs	r2, r3, #1
 80086fe:	bf44      	itt	mi
 8008700:	f1c3 0801 	rsbmi	r8, r3, #1
 8008704:	2300      	movmi	r3, #0
 8008706:	9208      	str	r2, [sp, #32]
 8008708:	bf54      	ite	pl
 800870a:	f04f 0800 	movpl.w	r8, #0
 800870e:	9308      	strmi	r3, [sp, #32]
 8008710:	2f00      	cmp	r7, #0
 8008712:	db39      	blt.n	8008788 <_dtoa_r+0x218>
 8008714:	9b08      	ldr	r3, [sp, #32]
 8008716:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008718:	443b      	add	r3, r7
 800871a:	9308      	str	r3, [sp, #32]
 800871c:	2300      	movs	r3, #0
 800871e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008722:	2b09      	cmp	r3, #9
 8008724:	d864      	bhi.n	80087f0 <_dtoa_r+0x280>
 8008726:	2b05      	cmp	r3, #5
 8008728:	bfc4      	itt	gt
 800872a:	3b04      	subgt	r3, #4
 800872c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800872e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008730:	f1a3 0302 	sub.w	r3, r3, #2
 8008734:	bfcc      	ite	gt
 8008736:	2400      	movgt	r4, #0
 8008738:	2401      	movle	r4, #1
 800873a:	2b03      	cmp	r3, #3
 800873c:	d863      	bhi.n	8008806 <_dtoa_r+0x296>
 800873e:	e8df f003 	tbb	[pc, r3]
 8008742:	372a      	.short	0x372a
 8008744:	5535      	.short	0x5535
 8008746:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800874a:	441e      	add	r6, r3
 800874c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008750:	2b20      	cmp	r3, #32
 8008752:	bfc1      	itttt	gt
 8008754:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008758:	409f      	lslgt	r7, r3
 800875a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800875e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008762:	bfd6      	itet	le
 8008764:	f1c3 0320 	rsble	r3, r3, #32
 8008768:	ea47 0003 	orrgt.w	r0, r7, r3
 800876c:	fa04 f003 	lslle.w	r0, r4, r3
 8008770:	f7f7 fed0 	bl	8000514 <__aeabi_ui2d>
 8008774:	2201      	movs	r2, #1
 8008776:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800877a:	3e01      	subs	r6, #1
 800877c:	9214      	str	r2, [sp, #80]	@ 0x50
 800877e:	e777      	b.n	8008670 <_dtoa_r+0x100>
 8008780:	2301      	movs	r3, #1
 8008782:	e7b8      	b.n	80086f6 <_dtoa_r+0x186>
 8008784:	9012      	str	r0, [sp, #72]	@ 0x48
 8008786:	e7b7      	b.n	80086f8 <_dtoa_r+0x188>
 8008788:	427b      	negs	r3, r7
 800878a:	930a      	str	r3, [sp, #40]	@ 0x28
 800878c:	2300      	movs	r3, #0
 800878e:	eba8 0807 	sub.w	r8, r8, r7
 8008792:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008794:	e7c4      	b.n	8008720 <_dtoa_r+0x1b0>
 8008796:	2300      	movs	r3, #0
 8008798:	930b      	str	r3, [sp, #44]	@ 0x2c
 800879a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800879c:	2b00      	cmp	r3, #0
 800879e:	dc35      	bgt.n	800880c <_dtoa_r+0x29c>
 80087a0:	2301      	movs	r3, #1
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	9307      	str	r3, [sp, #28]
 80087a6:	461a      	mov	r2, r3
 80087a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80087aa:	e00b      	b.n	80087c4 <_dtoa_r+0x254>
 80087ac:	2301      	movs	r3, #1
 80087ae:	e7f3      	b.n	8008798 <_dtoa_r+0x228>
 80087b0:	2300      	movs	r3, #0
 80087b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087b6:	18fb      	adds	r3, r7, r3
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	3301      	adds	r3, #1
 80087bc:	2b01      	cmp	r3, #1
 80087be:	9307      	str	r3, [sp, #28]
 80087c0:	bfb8      	it	lt
 80087c2:	2301      	movlt	r3, #1
 80087c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80087c8:	2100      	movs	r1, #0
 80087ca:	2204      	movs	r2, #4
 80087cc:	f102 0514 	add.w	r5, r2, #20
 80087d0:	429d      	cmp	r5, r3
 80087d2:	d91f      	bls.n	8008814 <_dtoa_r+0x2a4>
 80087d4:	6041      	str	r1, [r0, #4]
 80087d6:	4658      	mov	r0, fp
 80087d8:	f001 f8da 	bl	8009990 <_Balloc>
 80087dc:	4682      	mov	sl, r0
 80087de:	2800      	cmp	r0, #0
 80087e0:	d13c      	bne.n	800885c <_dtoa_r+0x2ec>
 80087e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008850 <_dtoa_r+0x2e0>)
 80087e4:	4602      	mov	r2, r0
 80087e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80087ea:	e6d8      	b.n	800859e <_dtoa_r+0x2e>
 80087ec:	2301      	movs	r3, #1
 80087ee:	e7e0      	b.n	80087b2 <_dtoa_r+0x242>
 80087f0:	2401      	movs	r4, #1
 80087f2:	2300      	movs	r3, #0
 80087f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80087f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	9307      	str	r3, [sp, #28]
 8008800:	2200      	movs	r2, #0
 8008802:	2312      	movs	r3, #18
 8008804:	e7d0      	b.n	80087a8 <_dtoa_r+0x238>
 8008806:	2301      	movs	r3, #1
 8008808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800880a:	e7f5      	b.n	80087f8 <_dtoa_r+0x288>
 800880c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	9307      	str	r3, [sp, #28]
 8008812:	e7d7      	b.n	80087c4 <_dtoa_r+0x254>
 8008814:	3101      	adds	r1, #1
 8008816:	0052      	lsls	r2, r2, #1
 8008818:	e7d8      	b.n	80087cc <_dtoa_r+0x25c>
 800881a:	bf00      	nop
 800881c:	f3af 8000 	nop.w
 8008820:	636f4361 	.word	0x636f4361
 8008824:	3fd287a7 	.word	0x3fd287a7
 8008828:	8b60c8b3 	.word	0x8b60c8b3
 800882c:	3fc68a28 	.word	0x3fc68a28
 8008830:	509f79fb 	.word	0x509f79fb
 8008834:	3fd34413 	.word	0x3fd34413
 8008838:	0800af49 	.word	0x0800af49
 800883c:	0800af60 	.word	0x0800af60
 8008840:	7ff00000 	.word	0x7ff00000
 8008844:	0800af11 	.word	0x0800af11
 8008848:	3ff80000 	.word	0x3ff80000
 800884c:	0800b0b8 	.word	0x0800b0b8
 8008850:	0800afb8 	.word	0x0800afb8
 8008854:	0800af45 	.word	0x0800af45
 8008858:	0800af10 	.word	0x0800af10
 800885c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008860:	6018      	str	r0, [r3, #0]
 8008862:	9b07      	ldr	r3, [sp, #28]
 8008864:	2b0e      	cmp	r3, #14
 8008866:	f200 80a4 	bhi.w	80089b2 <_dtoa_r+0x442>
 800886a:	2c00      	cmp	r4, #0
 800886c:	f000 80a1 	beq.w	80089b2 <_dtoa_r+0x442>
 8008870:	2f00      	cmp	r7, #0
 8008872:	dd33      	ble.n	80088dc <_dtoa_r+0x36c>
 8008874:	4bad      	ldr	r3, [pc, #692]	@ (8008b2c <_dtoa_r+0x5bc>)
 8008876:	f007 020f 	and.w	r2, r7, #15
 800887a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800887e:	ed93 7b00 	vldr	d7, [r3]
 8008882:	05f8      	lsls	r0, r7, #23
 8008884:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008888:	ea4f 1427 	mov.w	r4, r7, asr #4
 800888c:	d516      	bpl.n	80088bc <_dtoa_r+0x34c>
 800888e:	4ba8      	ldr	r3, [pc, #672]	@ (8008b30 <_dtoa_r+0x5c0>)
 8008890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008894:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008898:	f7f7 ffe0 	bl	800085c <__aeabi_ddiv>
 800889c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088a0:	f004 040f 	and.w	r4, r4, #15
 80088a4:	2603      	movs	r6, #3
 80088a6:	4da2      	ldr	r5, [pc, #648]	@ (8008b30 <_dtoa_r+0x5c0>)
 80088a8:	b954      	cbnz	r4, 80088c0 <_dtoa_r+0x350>
 80088aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088b2:	f7f7 ffd3 	bl	800085c <__aeabi_ddiv>
 80088b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ba:	e028      	b.n	800890e <_dtoa_r+0x39e>
 80088bc:	2602      	movs	r6, #2
 80088be:	e7f2      	b.n	80088a6 <_dtoa_r+0x336>
 80088c0:	07e1      	lsls	r1, r4, #31
 80088c2:	d508      	bpl.n	80088d6 <_dtoa_r+0x366>
 80088c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088cc:	f7f7 fe9c 	bl	8000608 <__aeabi_dmul>
 80088d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088d4:	3601      	adds	r6, #1
 80088d6:	1064      	asrs	r4, r4, #1
 80088d8:	3508      	adds	r5, #8
 80088da:	e7e5      	b.n	80088a8 <_dtoa_r+0x338>
 80088dc:	f000 80d2 	beq.w	8008a84 <_dtoa_r+0x514>
 80088e0:	427c      	negs	r4, r7
 80088e2:	4b92      	ldr	r3, [pc, #584]	@ (8008b2c <_dtoa_r+0x5bc>)
 80088e4:	4d92      	ldr	r5, [pc, #584]	@ (8008b30 <_dtoa_r+0x5c0>)
 80088e6:	f004 020f 	and.w	r2, r4, #15
 80088ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088f6:	f7f7 fe87 	bl	8000608 <__aeabi_dmul>
 80088fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088fe:	1124      	asrs	r4, r4, #4
 8008900:	2300      	movs	r3, #0
 8008902:	2602      	movs	r6, #2
 8008904:	2c00      	cmp	r4, #0
 8008906:	f040 80b2 	bne.w	8008a6e <_dtoa_r+0x4fe>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1d3      	bne.n	80088b6 <_dtoa_r+0x346>
 800890e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008910:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 80b7 	beq.w	8008a88 <_dtoa_r+0x518>
 800891a:	4b86      	ldr	r3, [pc, #536]	@ (8008b34 <_dtoa_r+0x5c4>)
 800891c:	2200      	movs	r2, #0
 800891e:	4620      	mov	r0, r4
 8008920:	4629      	mov	r1, r5
 8008922:	f7f8 f8e3 	bl	8000aec <__aeabi_dcmplt>
 8008926:	2800      	cmp	r0, #0
 8008928:	f000 80ae 	beq.w	8008a88 <_dtoa_r+0x518>
 800892c:	9b07      	ldr	r3, [sp, #28]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 80aa 	beq.w	8008a88 <_dtoa_r+0x518>
 8008934:	9b00      	ldr	r3, [sp, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	dd37      	ble.n	80089aa <_dtoa_r+0x43a>
 800893a:	1e7b      	subs	r3, r7, #1
 800893c:	9304      	str	r3, [sp, #16]
 800893e:	4620      	mov	r0, r4
 8008940:	4b7d      	ldr	r3, [pc, #500]	@ (8008b38 <_dtoa_r+0x5c8>)
 8008942:	2200      	movs	r2, #0
 8008944:	4629      	mov	r1, r5
 8008946:	f7f7 fe5f 	bl	8000608 <__aeabi_dmul>
 800894a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800894e:	9c00      	ldr	r4, [sp, #0]
 8008950:	3601      	adds	r6, #1
 8008952:	4630      	mov	r0, r6
 8008954:	f7f7 fdee 	bl	8000534 <__aeabi_i2d>
 8008958:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800895c:	f7f7 fe54 	bl	8000608 <__aeabi_dmul>
 8008960:	4b76      	ldr	r3, [pc, #472]	@ (8008b3c <_dtoa_r+0x5cc>)
 8008962:	2200      	movs	r2, #0
 8008964:	f7f7 fc9a 	bl	800029c <__adddf3>
 8008968:	4605      	mov	r5, r0
 800896a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800896e:	2c00      	cmp	r4, #0
 8008970:	f040 808d 	bne.w	8008a8e <_dtoa_r+0x51e>
 8008974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008978:	4b71      	ldr	r3, [pc, #452]	@ (8008b40 <_dtoa_r+0x5d0>)
 800897a:	2200      	movs	r2, #0
 800897c:	f7f7 fc8c 	bl	8000298 <__aeabi_dsub>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008988:	462a      	mov	r2, r5
 800898a:	4633      	mov	r3, r6
 800898c:	f7f8 f8cc 	bl	8000b28 <__aeabi_dcmpgt>
 8008990:	2800      	cmp	r0, #0
 8008992:	f040 828b 	bne.w	8008eac <_dtoa_r+0x93c>
 8008996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800899a:	462a      	mov	r2, r5
 800899c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80089a0:	f7f8 f8a4 	bl	8000aec <__aeabi_dcmplt>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f040 8128 	bne.w	8008bfa <_dtoa_r+0x68a>
 80089aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80089ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80089b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f2c0 815a 	blt.w	8008c6e <_dtoa_r+0x6fe>
 80089ba:	2f0e      	cmp	r7, #14
 80089bc:	f300 8157 	bgt.w	8008c6e <_dtoa_r+0x6fe>
 80089c0:	4b5a      	ldr	r3, [pc, #360]	@ (8008b2c <_dtoa_r+0x5bc>)
 80089c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089c6:	ed93 7b00 	vldr	d7, [r3]
 80089ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	ed8d 7b00 	vstr	d7, [sp]
 80089d2:	da03      	bge.n	80089dc <_dtoa_r+0x46c>
 80089d4:	9b07      	ldr	r3, [sp, #28]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f340 8101 	ble.w	8008bde <_dtoa_r+0x66e>
 80089dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80089e0:	4656      	mov	r6, sl
 80089e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089e6:	4620      	mov	r0, r4
 80089e8:	4629      	mov	r1, r5
 80089ea:	f7f7 ff37 	bl	800085c <__aeabi_ddiv>
 80089ee:	f7f8 f8bb 	bl	8000b68 <__aeabi_d2iz>
 80089f2:	4680      	mov	r8, r0
 80089f4:	f7f7 fd9e 	bl	8000534 <__aeabi_i2d>
 80089f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089fc:	f7f7 fe04 	bl	8000608 <__aeabi_dmul>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4620      	mov	r0, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008a0c:	f7f7 fc44 	bl	8000298 <__aeabi_dsub>
 8008a10:	f806 4b01 	strb.w	r4, [r6], #1
 8008a14:	9d07      	ldr	r5, [sp, #28]
 8008a16:	eba6 040a 	sub.w	r4, r6, sl
 8008a1a:	42a5      	cmp	r5, r4
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	f040 8117 	bne.w	8008c52 <_dtoa_r+0x6e2>
 8008a24:	f7f7 fc3a 	bl	800029c <__adddf3>
 8008a28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	460d      	mov	r5, r1
 8008a30:	f7f8 f87a 	bl	8000b28 <__aeabi_dcmpgt>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	f040 80f9 	bne.w	8008c2c <_dtoa_r+0x6bc>
 8008a3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a3e:	4620      	mov	r0, r4
 8008a40:	4629      	mov	r1, r5
 8008a42:	f7f8 f849 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a46:	b118      	cbz	r0, 8008a50 <_dtoa_r+0x4e0>
 8008a48:	f018 0f01 	tst.w	r8, #1
 8008a4c:	f040 80ee 	bne.w	8008c2c <_dtoa_r+0x6bc>
 8008a50:	4649      	mov	r1, r9
 8008a52:	4658      	mov	r0, fp
 8008a54:	f000 ffdc 	bl	8009a10 <_Bfree>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	7033      	strb	r3, [r6, #0]
 8008a5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a5e:	3701      	adds	r7, #1
 8008a60:	601f      	str	r7, [r3, #0]
 8008a62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 831d 	beq.w	80090a4 <_dtoa_r+0xb34>
 8008a6a:	601e      	str	r6, [r3, #0]
 8008a6c:	e31a      	b.n	80090a4 <_dtoa_r+0xb34>
 8008a6e:	07e2      	lsls	r2, r4, #31
 8008a70:	d505      	bpl.n	8008a7e <_dtoa_r+0x50e>
 8008a72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a76:	f7f7 fdc7 	bl	8000608 <__aeabi_dmul>
 8008a7a:	3601      	adds	r6, #1
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	1064      	asrs	r4, r4, #1
 8008a80:	3508      	adds	r5, #8
 8008a82:	e73f      	b.n	8008904 <_dtoa_r+0x394>
 8008a84:	2602      	movs	r6, #2
 8008a86:	e742      	b.n	800890e <_dtoa_r+0x39e>
 8008a88:	9c07      	ldr	r4, [sp, #28]
 8008a8a:	9704      	str	r7, [sp, #16]
 8008a8c:	e761      	b.n	8008952 <_dtoa_r+0x3e2>
 8008a8e:	4b27      	ldr	r3, [pc, #156]	@ (8008b2c <_dtoa_r+0x5bc>)
 8008a90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a9a:	4454      	add	r4, sl
 8008a9c:	2900      	cmp	r1, #0
 8008a9e:	d053      	beq.n	8008b48 <_dtoa_r+0x5d8>
 8008aa0:	4928      	ldr	r1, [pc, #160]	@ (8008b44 <_dtoa_r+0x5d4>)
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	f7f7 feda 	bl	800085c <__aeabi_ddiv>
 8008aa8:	4633      	mov	r3, r6
 8008aaa:	462a      	mov	r2, r5
 8008aac:	f7f7 fbf4 	bl	8000298 <__aeabi_dsub>
 8008ab0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ab4:	4656      	mov	r6, sl
 8008ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aba:	f7f8 f855 	bl	8000b68 <__aeabi_d2iz>
 8008abe:	4605      	mov	r5, r0
 8008ac0:	f7f7 fd38 	bl	8000534 <__aeabi_i2d>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008acc:	f7f7 fbe4 	bl	8000298 <__aeabi_dsub>
 8008ad0:	3530      	adds	r5, #48	@ 0x30
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ada:	f806 5b01 	strb.w	r5, [r6], #1
 8008ade:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ae2:	f7f8 f803 	bl	8000aec <__aeabi_dcmplt>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d171      	bne.n	8008bce <_dtoa_r+0x65e>
 8008aea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008aee:	4911      	ldr	r1, [pc, #68]	@ (8008b34 <_dtoa_r+0x5c4>)
 8008af0:	2000      	movs	r0, #0
 8008af2:	f7f7 fbd1 	bl	8000298 <__aeabi_dsub>
 8008af6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008afa:	f7f7 fff7 	bl	8000aec <__aeabi_dcmplt>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	f040 8095 	bne.w	8008c2e <_dtoa_r+0x6be>
 8008b04:	42a6      	cmp	r6, r4
 8008b06:	f43f af50 	beq.w	80089aa <_dtoa_r+0x43a>
 8008b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b38 <_dtoa_r+0x5c8>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	f7f7 fd79 	bl	8000608 <__aeabi_dmul>
 8008b16:	4b08      	ldr	r3, [pc, #32]	@ (8008b38 <_dtoa_r+0x5c8>)
 8008b18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b22:	f7f7 fd71 	bl	8000608 <__aeabi_dmul>
 8008b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b2a:	e7c4      	b.n	8008ab6 <_dtoa_r+0x546>
 8008b2c:	0800b0b8 	.word	0x0800b0b8
 8008b30:	0800b090 	.word	0x0800b090
 8008b34:	3ff00000 	.word	0x3ff00000
 8008b38:	40240000 	.word	0x40240000
 8008b3c:	401c0000 	.word	0x401c0000
 8008b40:	40140000 	.word	0x40140000
 8008b44:	3fe00000 	.word	0x3fe00000
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f7f7 fd5c 	bl	8000608 <__aeabi_dmul>
 8008b50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b54:	9415      	str	r4, [sp, #84]	@ 0x54
 8008b56:	4656      	mov	r6, sl
 8008b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b5c:	f7f8 f804 	bl	8000b68 <__aeabi_d2iz>
 8008b60:	4605      	mov	r5, r0
 8008b62:	f7f7 fce7 	bl	8000534 <__aeabi_i2d>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b6e:	f7f7 fb93 	bl	8000298 <__aeabi_dsub>
 8008b72:	3530      	adds	r5, #48	@ 0x30
 8008b74:	f806 5b01 	strb.w	r5, [r6], #1
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	42a6      	cmp	r6, r4
 8008b7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b82:	f04f 0200 	mov.w	r2, #0
 8008b86:	d124      	bne.n	8008bd2 <_dtoa_r+0x662>
 8008b88:	4bac      	ldr	r3, [pc, #688]	@ (8008e3c <_dtoa_r+0x8cc>)
 8008b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b8e:	f7f7 fb85 	bl	800029c <__adddf3>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b9a:	f7f7 ffc5 	bl	8000b28 <__aeabi_dcmpgt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d145      	bne.n	8008c2e <_dtoa_r+0x6be>
 8008ba2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ba6:	49a5      	ldr	r1, [pc, #660]	@ (8008e3c <_dtoa_r+0x8cc>)
 8008ba8:	2000      	movs	r0, #0
 8008baa:	f7f7 fb75 	bl	8000298 <__aeabi_dsub>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bb6:	f7f7 ff99 	bl	8000aec <__aeabi_dcmplt>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	f43f aef5 	beq.w	80089aa <_dtoa_r+0x43a>
 8008bc0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008bc2:	1e73      	subs	r3, r6, #1
 8008bc4:	9315      	str	r3, [sp, #84]	@ 0x54
 8008bc6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bca:	2b30      	cmp	r3, #48	@ 0x30
 8008bcc:	d0f8      	beq.n	8008bc0 <_dtoa_r+0x650>
 8008bce:	9f04      	ldr	r7, [sp, #16]
 8008bd0:	e73e      	b.n	8008a50 <_dtoa_r+0x4e0>
 8008bd2:	4b9b      	ldr	r3, [pc, #620]	@ (8008e40 <_dtoa_r+0x8d0>)
 8008bd4:	f7f7 fd18 	bl	8000608 <__aeabi_dmul>
 8008bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bdc:	e7bc      	b.n	8008b58 <_dtoa_r+0x5e8>
 8008bde:	d10c      	bne.n	8008bfa <_dtoa_r+0x68a>
 8008be0:	4b98      	ldr	r3, [pc, #608]	@ (8008e44 <_dtoa_r+0x8d4>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008be8:	f7f7 fd0e 	bl	8000608 <__aeabi_dmul>
 8008bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bf0:	f7f7 ff90 	bl	8000b14 <__aeabi_dcmpge>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	f000 8157 	beq.w	8008ea8 <_dtoa_r+0x938>
 8008bfa:	2400      	movs	r4, #0
 8008bfc:	4625      	mov	r5, r4
 8008bfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c00:	43db      	mvns	r3, r3
 8008c02:	9304      	str	r3, [sp, #16]
 8008c04:	4656      	mov	r6, sl
 8008c06:	2700      	movs	r7, #0
 8008c08:	4621      	mov	r1, r4
 8008c0a:	4658      	mov	r0, fp
 8008c0c:	f000 ff00 	bl	8009a10 <_Bfree>
 8008c10:	2d00      	cmp	r5, #0
 8008c12:	d0dc      	beq.n	8008bce <_dtoa_r+0x65e>
 8008c14:	b12f      	cbz	r7, 8008c22 <_dtoa_r+0x6b2>
 8008c16:	42af      	cmp	r7, r5
 8008c18:	d003      	beq.n	8008c22 <_dtoa_r+0x6b2>
 8008c1a:	4639      	mov	r1, r7
 8008c1c:	4658      	mov	r0, fp
 8008c1e:	f000 fef7 	bl	8009a10 <_Bfree>
 8008c22:	4629      	mov	r1, r5
 8008c24:	4658      	mov	r0, fp
 8008c26:	f000 fef3 	bl	8009a10 <_Bfree>
 8008c2a:	e7d0      	b.n	8008bce <_dtoa_r+0x65e>
 8008c2c:	9704      	str	r7, [sp, #16]
 8008c2e:	4633      	mov	r3, r6
 8008c30:	461e      	mov	r6, r3
 8008c32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c36:	2a39      	cmp	r2, #57	@ 0x39
 8008c38:	d107      	bne.n	8008c4a <_dtoa_r+0x6da>
 8008c3a:	459a      	cmp	sl, r3
 8008c3c:	d1f8      	bne.n	8008c30 <_dtoa_r+0x6c0>
 8008c3e:	9a04      	ldr	r2, [sp, #16]
 8008c40:	3201      	adds	r2, #1
 8008c42:	9204      	str	r2, [sp, #16]
 8008c44:	2230      	movs	r2, #48	@ 0x30
 8008c46:	f88a 2000 	strb.w	r2, [sl]
 8008c4a:	781a      	ldrb	r2, [r3, #0]
 8008c4c:	3201      	adds	r2, #1
 8008c4e:	701a      	strb	r2, [r3, #0]
 8008c50:	e7bd      	b.n	8008bce <_dtoa_r+0x65e>
 8008c52:	4b7b      	ldr	r3, [pc, #492]	@ (8008e40 <_dtoa_r+0x8d0>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	f7f7 fcd7 	bl	8000608 <__aeabi_dmul>
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	4604      	mov	r4, r0
 8008c60:	460d      	mov	r5, r1
 8008c62:	f7f7 ff39 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f43f aebb 	beq.w	80089e2 <_dtoa_r+0x472>
 8008c6c:	e6f0      	b.n	8008a50 <_dtoa_r+0x4e0>
 8008c6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c70:	2a00      	cmp	r2, #0
 8008c72:	f000 80db 	beq.w	8008e2c <_dtoa_r+0x8bc>
 8008c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c78:	2a01      	cmp	r2, #1
 8008c7a:	f300 80bf 	bgt.w	8008dfc <_dtoa_r+0x88c>
 8008c7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008c80:	2a00      	cmp	r2, #0
 8008c82:	f000 80b7 	beq.w	8008df4 <_dtoa_r+0x884>
 8008c86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c8c:	4646      	mov	r6, r8
 8008c8e:	9a08      	ldr	r2, [sp, #32]
 8008c90:	2101      	movs	r1, #1
 8008c92:	441a      	add	r2, r3
 8008c94:	4658      	mov	r0, fp
 8008c96:	4498      	add	r8, r3
 8008c98:	9208      	str	r2, [sp, #32]
 8008c9a:	f000 ffb7 	bl	8009c0c <__i2b>
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	b15e      	cbz	r6, 8008cba <_dtoa_r+0x74a>
 8008ca2:	9b08      	ldr	r3, [sp, #32]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	dd08      	ble.n	8008cba <_dtoa_r+0x74a>
 8008ca8:	42b3      	cmp	r3, r6
 8008caa:	9a08      	ldr	r2, [sp, #32]
 8008cac:	bfa8      	it	ge
 8008cae:	4633      	movge	r3, r6
 8008cb0:	eba8 0803 	sub.w	r8, r8, r3
 8008cb4:	1af6      	subs	r6, r6, r3
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	9308      	str	r3, [sp, #32]
 8008cba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cbc:	b1f3      	cbz	r3, 8008cfc <_dtoa_r+0x78c>
 8008cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 80b7 	beq.w	8008e34 <_dtoa_r+0x8c4>
 8008cc6:	b18c      	cbz	r4, 8008cec <_dtoa_r+0x77c>
 8008cc8:	4629      	mov	r1, r5
 8008cca:	4622      	mov	r2, r4
 8008ccc:	4658      	mov	r0, fp
 8008cce:	f001 f85d 	bl	8009d8c <__pow5mult>
 8008cd2:	464a      	mov	r2, r9
 8008cd4:	4601      	mov	r1, r0
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	4658      	mov	r0, fp
 8008cda:	f000 ffad 	bl	8009c38 <__multiply>
 8008cde:	4649      	mov	r1, r9
 8008ce0:	9004      	str	r0, [sp, #16]
 8008ce2:	4658      	mov	r0, fp
 8008ce4:	f000 fe94 	bl	8009a10 <_Bfree>
 8008ce8:	9b04      	ldr	r3, [sp, #16]
 8008cea:	4699      	mov	r9, r3
 8008cec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cee:	1b1a      	subs	r2, r3, r4
 8008cf0:	d004      	beq.n	8008cfc <_dtoa_r+0x78c>
 8008cf2:	4649      	mov	r1, r9
 8008cf4:	4658      	mov	r0, fp
 8008cf6:	f001 f849 	bl	8009d8c <__pow5mult>
 8008cfa:	4681      	mov	r9, r0
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	4658      	mov	r0, fp
 8008d00:	f000 ff84 	bl	8009c0c <__i2b>
 8008d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d06:	4604      	mov	r4, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f000 81cf 	beq.w	80090ac <_dtoa_r+0xb3c>
 8008d0e:	461a      	mov	r2, r3
 8008d10:	4601      	mov	r1, r0
 8008d12:	4658      	mov	r0, fp
 8008d14:	f001 f83a 	bl	8009d8c <__pow5mult>
 8008d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	f300 8095 	bgt.w	8008e4c <_dtoa_r+0x8dc>
 8008d22:	9b02      	ldr	r3, [sp, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f040 8087 	bne.w	8008e38 <_dtoa_r+0x8c8>
 8008d2a:	9b03      	ldr	r3, [sp, #12]
 8008d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f040 8089 	bne.w	8008e48 <_dtoa_r+0x8d8>
 8008d36:	9b03      	ldr	r3, [sp, #12]
 8008d38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d3c:	0d1b      	lsrs	r3, r3, #20
 8008d3e:	051b      	lsls	r3, r3, #20
 8008d40:	b12b      	cbz	r3, 8008d4e <_dtoa_r+0x7de>
 8008d42:	9b08      	ldr	r3, [sp, #32]
 8008d44:	3301      	adds	r3, #1
 8008d46:	9308      	str	r3, [sp, #32]
 8008d48:	f108 0801 	add.w	r8, r8, #1
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 81b0 	beq.w	80090b8 <_dtoa_r+0xb48>
 8008d58:	6923      	ldr	r3, [r4, #16]
 8008d5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d5e:	6918      	ldr	r0, [r3, #16]
 8008d60:	f000 ff08 	bl	8009b74 <__hi0bits>
 8008d64:	f1c0 0020 	rsb	r0, r0, #32
 8008d68:	9b08      	ldr	r3, [sp, #32]
 8008d6a:	4418      	add	r0, r3
 8008d6c:	f010 001f 	ands.w	r0, r0, #31
 8008d70:	d077      	beq.n	8008e62 <_dtoa_r+0x8f2>
 8008d72:	f1c0 0320 	rsb	r3, r0, #32
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	dd6b      	ble.n	8008e52 <_dtoa_r+0x8e2>
 8008d7a:	9b08      	ldr	r3, [sp, #32]
 8008d7c:	f1c0 001c 	rsb	r0, r0, #28
 8008d80:	4403      	add	r3, r0
 8008d82:	4480      	add	r8, r0
 8008d84:	4406      	add	r6, r0
 8008d86:	9308      	str	r3, [sp, #32]
 8008d88:	f1b8 0f00 	cmp.w	r8, #0
 8008d8c:	dd05      	ble.n	8008d9a <_dtoa_r+0x82a>
 8008d8e:	4649      	mov	r1, r9
 8008d90:	4642      	mov	r2, r8
 8008d92:	4658      	mov	r0, fp
 8008d94:	f001 f854 	bl	8009e40 <__lshift>
 8008d98:	4681      	mov	r9, r0
 8008d9a:	9b08      	ldr	r3, [sp, #32]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	dd05      	ble.n	8008dac <_dtoa_r+0x83c>
 8008da0:	4621      	mov	r1, r4
 8008da2:	461a      	mov	r2, r3
 8008da4:	4658      	mov	r0, fp
 8008da6:	f001 f84b 	bl	8009e40 <__lshift>
 8008daa:	4604      	mov	r4, r0
 8008dac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d059      	beq.n	8008e66 <_dtoa_r+0x8f6>
 8008db2:	4621      	mov	r1, r4
 8008db4:	4648      	mov	r0, r9
 8008db6:	f001 f8af 	bl	8009f18 <__mcmp>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	da53      	bge.n	8008e66 <_dtoa_r+0x8f6>
 8008dbe:	1e7b      	subs	r3, r7, #1
 8008dc0:	9304      	str	r3, [sp, #16]
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	220a      	movs	r2, #10
 8008dc8:	4658      	mov	r0, fp
 8008dca:	f000 fe43 	bl	8009a54 <__multadd>
 8008dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dd0:	4681      	mov	r9, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 8172 	beq.w	80090bc <_dtoa_r+0xb4c>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	4629      	mov	r1, r5
 8008ddc:	220a      	movs	r2, #10
 8008dde:	4658      	mov	r0, fp
 8008de0:	f000 fe38 	bl	8009a54 <__multadd>
 8008de4:	9b00      	ldr	r3, [sp, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	4605      	mov	r5, r0
 8008dea:	dc67      	bgt.n	8008ebc <_dtoa_r+0x94c>
 8008dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	dc41      	bgt.n	8008e76 <_dtoa_r+0x906>
 8008df2:	e063      	b.n	8008ebc <_dtoa_r+0x94c>
 8008df4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008df6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008dfa:	e746      	b.n	8008c8a <_dtoa_r+0x71a>
 8008dfc:	9b07      	ldr	r3, [sp, #28]
 8008dfe:	1e5c      	subs	r4, r3, #1
 8008e00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e02:	42a3      	cmp	r3, r4
 8008e04:	bfbf      	itttt	lt
 8008e06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008e08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008e0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008e0c:	1ae3      	sublt	r3, r4, r3
 8008e0e:	bfb4      	ite	lt
 8008e10:	18d2      	addlt	r2, r2, r3
 8008e12:	1b1c      	subge	r4, r3, r4
 8008e14:	9b07      	ldr	r3, [sp, #28]
 8008e16:	bfbc      	itt	lt
 8008e18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008e1a:	2400      	movlt	r4, #0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bfb5      	itete	lt
 8008e20:	eba8 0603 	sublt.w	r6, r8, r3
 8008e24:	9b07      	ldrge	r3, [sp, #28]
 8008e26:	2300      	movlt	r3, #0
 8008e28:	4646      	movge	r6, r8
 8008e2a:	e730      	b.n	8008c8e <_dtoa_r+0x71e>
 8008e2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008e2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008e30:	4646      	mov	r6, r8
 8008e32:	e735      	b.n	8008ca0 <_dtoa_r+0x730>
 8008e34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e36:	e75c      	b.n	8008cf2 <_dtoa_r+0x782>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	e788      	b.n	8008d4e <_dtoa_r+0x7de>
 8008e3c:	3fe00000 	.word	0x3fe00000
 8008e40:	40240000 	.word	0x40240000
 8008e44:	40140000 	.word	0x40140000
 8008e48:	9b02      	ldr	r3, [sp, #8]
 8008e4a:	e780      	b.n	8008d4e <_dtoa_r+0x7de>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e50:	e782      	b.n	8008d58 <_dtoa_r+0x7e8>
 8008e52:	d099      	beq.n	8008d88 <_dtoa_r+0x818>
 8008e54:	9a08      	ldr	r2, [sp, #32]
 8008e56:	331c      	adds	r3, #28
 8008e58:	441a      	add	r2, r3
 8008e5a:	4498      	add	r8, r3
 8008e5c:	441e      	add	r6, r3
 8008e5e:	9208      	str	r2, [sp, #32]
 8008e60:	e792      	b.n	8008d88 <_dtoa_r+0x818>
 8008e62:	4603      	mov	r3, r0
 8008e64:	e7f6      	b.n	8008e54 <_dtoa_r+0x8e4>
 8008e66:	9b07      	ldr	r3, [sp, #28]
 8008e68:	9704      	str	r7, [sp, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	dc20      	bgt.n	8008eb0 <_dtoa_r+0x940>
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	dd1e      	ble.n	8008eb4 <_dtoa_r+0x944>
 8008e76:	9b00      	ldr	r3, [sp, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f47f aec0 	bne.w	8008bfe <_dtoa_r+0x68e>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	2205      	movs	r2, #5
 8008e82:	4658      	mov	r0, fp
 8008e84:	f000 fde6 	bl	8009a54 <__multadd>
 8008e88:	4601      	mov	r1, r0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4648      	mov	r0, r9
 8008e8e:	f001 f843 	bl	8009f18 <__mcmp>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	f77f aeb3 	ble.w	8008bfe <_dtoa_r+0x68e>
 8008e98:	4656      	mov	r6, sl
 8008e9a:	2331      	movs	r3, #49	@ 0x31
 8008e9c:	f806 3b01 	strb.w	r3, [r6], #1
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	9304      	str	r3, [sp, #16]
 8008ea6:	e6ae      	b.n	8008c06 <_dtoa_r+0x696>
 8008ea8:	9c07      	ldr	r4, [sp, #28]
 8008eaa:	9704      	str	r7, [sp, #16]
 8008eac:	4625      	mov	r5, r4
 8008eae:	e7f3      	b.n	8008e98 <_dtoa_r+0x928>
 8008eb0:	9b07      	ldr	r3, [sp, #28]
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 8104 	beq.w	80090c4 <_dtoa_r+0xb54>
 8008ebc:	2e00      	cmp	r6, #0
 8008ebe:	dd05      	ble.n	8008ecc <_dtoa_r+0x95c>
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	4632      	mov	r2, r6
 8008ec4:	4658      	mov	r0, fp
 8008ec6:	f000 ffbb 	bl	8009e40 <__lshift>
 8008eca:	4605      	mov	r5, r0
 8008ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d05a      	beq.n	8008f88 <_dtoa_r+0xa18>
 8008ed2:	6869      	ldr	r1, [r5, #4]
 8008ed4:	4658      	mov	r0, fp
 8008ed6:	f000 fd5b 	bl	8009990 <_Balloc>
 8008eda:	4606      	mov	r6, r0
 8008edc:	b928      	cbnz	r0, 8008eea <_dtoa_r+0x97a>
 8008ede:	4b84      	ldr	r3, [pc, #528]	@ (80090f0 <_dtoa_r+0xb80>)
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008ee6:	f7ff bb5a 	b.w	800859e <_dtoa_r+0x2e>
 8008eea:	692a      	ldr	r2, [r5, #16]
 8008eec:	3202      	adds	r2, #2
 8008eee:	0092      	lsls	r2, r2, #2
 8008ef0:	f105 010c 	add.w	r1, r5, #12
 8008ef4:	300c      	adds	r0, #12
 8008ef6:	f7ff fa92 	bl	800841e <memcpy>
 8008efa:	2201      	movs	r2, #1
 8008efc:	4631      	mov	r1, r6
 8008efe:	4658      	mov	r0, fp
 8008f00:	f000 ff9e 	bl	8009e40 <__lshift>
 8008f04:	f10a 0301 	add.w	r3, sl, #1
 8008f08:	9307      	str	r3, [sp, #28]
 8008f0a:	9b00      	ldr	r3, [sp, #0]
 8008f0c:	4453      	add	r3, sl
 8008f0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f10:	9b02      	ldr	r3, [sp, #8]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	462f      	mov	r7, r5
 8008f18:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	9b07      	ldr	r3, [sp, #28]
 8008f1e:	4621      	mov	r1, r4
 8008f20:	3b01      	subs	r3, #1
 8008f22:	4648      	mov	r0, r9
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	f7ff fa99 	bl	800845c <quorem>
 8008f2a:	4639      	mov	r1, r7
 8008f2c:	9002      	str	r0, [sp, #8]
 8008f2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f32:	4648      	mov	r0, r9
 8008f34:	f000 fff0 	bl	8009f18 <__mcmp>
 8008f38:	462a      	mov	r2, r5
 8008f3a:	9008      	str	r0, [sp, #32]
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	4658      	mov	r0, fp
 8008f40:	f001 f806 	bl	8009f50 <__mdiff>
 8008f44:	68c2      	ldr	r2, [r0, #12]
 8008f46:	4606      	mov	r6, r0
 8008f48:	bb02      	cbnz	r2, 8008f8c <_dtoa_r+0xa1c>
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	4648      	mov	r0, r9
 8008f4e:	f000 ffe3 	bl	8009f18 <__mcmp>
 8008f52:	4602      	mov	r2, r0
 8008f54:	4631      	mov	r1, r6
 8008f56:	4658      	mov	r0, fp
 8008f58:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f5a:	f000 fd59 	bl	8009a10 <_Bfree>
 8008f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f62:	9e07      	ldr	r6, [sp, #28]
 8008f64:	ea43 0102 	orr.w	r1, r3, r2
 8008f68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f6a:	4319      	orrs	r1, r3
 8008f6c:	d110      	bne.n	8008f90 <_dtoa_r+0xa20>
 8008f6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f72:	d029      	beq.n	8008fc8 <_dtoa_r+0xa58>
 8008f74:	9b08      	ldr	r3, [sp, #32]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	dd02      	ble.n	8008f80 <_dtoa_r+0xa10>
 8008f7a:	9b02      	ldr	r3, [sp, #8]
 8008f7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008f80:	9b00      	ldr	r3, [sp, #0]
 8008f82:	f883 8000 	strb.w	r8, [r3]
 8008f86:	e63f      	b.n	8008c08 <_dtoa_r+0x698>
 8008f88:	4628      	mov	r0, r5
 8008f8a:	e7bb      	b.n	8008f04 <_dtoa_r+0x994>
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	e7e1      	b.n	8008f54 <_dtoa_r+0x9e4>
 8008f90:	9b08      	ldr	r3, [sp, #32]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	db04      	blt.n	8008fa0 <_dtoa_r+0xa30>
 8008f96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f98:	430b      	orrs	r3, r1
 8008f9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	d120      	bne.n	8008fe2 <_dtoa_r+0xa72>
 8008fa0:	2a00      	cmp	r2, #0
 8008fa2:	dded      	ble.n	8008f80 <_dtoa_r+0xa10>
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	4658      	mov	r0, fp
 8008faa:	f000 ff49 	bl	8009e40 <__lshift>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4681      	mov	r9, r0
 8008fb2:	f000 ffb1 	bl	8009f18 <__mcmp>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	dc03      	bgt.n	8008fc2 <_dtoa_r+0xa52>
 8008fba:	d1e1      	bne.n	8008f80 <_dtoa_r+0xa10>
 8008fbc:	f018 0f01 	tst.w	r8, #1
 8008fc0:	d0de      	beq.n	8008f80 <_dtoa_r+0xa10>
 8008fc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008fc6:	d1d8      	bne.n	8008f7a <_dtoa_r+0xa0a>
 8008fc8:	9a00      	ldr	r2, [sp, #0]
 8008fca:	2339      	movs	r3, #57	@ 0x39
 8008fcc:	7013      	strb	r3, [r2, #0]
 8008fce:	4633      	mov	r3, r6
 8008fd0:	461e      	mov	r6, r3
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008fd8:	2a39      	cmp	r2, #57	@ 0x39
 8008fda:	d052      	beq.n	8009082 <_dtoa_r+0xb12>
 8008fdc:	3201      	adds	r2, #1
 8008fde:	701a      	strb	r2, [r3, #0]
 8008fe0:	e612      	b.n	8008c08 <_dtoa_r+0x698>
 8008fe2:	2a00      	cmp	r2, #0
 8008fe4:	dd07      	ble.n	8008ff6 <_dtoa_r+0xa86>
 8008fe6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008fea:	d0ed      	beq.n	8008fc8 <_dtoa_r+0xa58>
 8008fec:	9a00      	ldr	r2, [sp, #0]
 8008fee:	f108 0301 	add.w	r3, r8, #1
 8008ff2:	7013      	strb	r3, [r2, #0]
 8008ff4:	e608      	b.n	8008c08 <_dtoa_r+0x698>
 8008ff6:	9b07      	ldr	r3, [sp, #28]
 8008ff8:	9a07      	ldr	r2, [sp, #28]
 8008ffa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009000:	4293      	cmp	r3, r2
 8009002:	d028      	beq.n	8009056 <_dtoa_r+0xae6>
 8009004:	4649      	mov	r1, r9
 8009006:	2300      	movs	r3, #0
 8009008:	220a      	movs	r2, #10
 800900a:	4658      	mov	r0, fp
 800900c:	f000 fd22 	bl	8009a54 <__multadd>
 8009010:	42af      	cmp	r7, r5
 8009012:	4681      	mov	r9, r0
 8009014:	f04f 0300 	mov.w	r3, #0
 8009018:	f04f 020a 	mov.w	r2, #10
 800901c:	4639      	mov	r1, r7
 800901e:	4658      	mov	r0, fp
 8009020:	d107      	bne.n	8009032 <_dtoa_r+0xac2>
 8009022:	f000 fd17 	bl	8009a54 <__multadd>
 8009026:	4607      	mov	r7, r0
 8009028:	4605      	mov	r5, r0
 800902a:	9b07      	ldr	r3, [sp, #28]
 800902c:	3301      	adds	r3, #1
 800902e:	9307      	str	r3, [sp, #28]
 8009030:	e774      	b.n	8008f1c <_dtoa_r+0x9ac>
 8009032:	f000 fd0f 	bl	8009a54 <__multadd>
 8009036:	4629      	mov	r1, r5
 8009038:	4607      	mov	r7, r0
 800903a:	2300      	movs	r3, #0
 800903c:	220a      	movs	r2, #10
 800903e:	4658      	mov	r0, fp
 8009040:	f000 fd08 	bl	8009a54 <__multadd>
 8009044:	4605      	mov	r5, r0
 8009046:	e7f0      	b.n	800902a <_dtoa_r+0xaba>
 8009048:	9b00      	ldr	r3, [sp, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	bfcc      	ite	gt
 800904e:	461e      	movgt	r6, r3
 8009050:	2601      	movle	r6, #1
 8009052:	4456      	add	r6, sl
 8009054:	2700      	movs	r7, #0
 8009056:	4649      	mov	r1, r9
 8009058:	2201      	movs	r2, #1
 800905a:	4658      	mov	r0, fp
 800905c:	f000 fef0 	bl	8009e40 <__lshift>
 8009060:	4621      	mov	r1, r4
 8009062:	4681      	mov	r9, r0
 8009064:	f000 ff58 	bl	8009f18 <__mcmp>
 8009068:	2800      	cmp	r0, #0
 800906a:	dcb0      	bgt.n	8008fce <_dtoa_r+0xa5e>
 800906c:	d102      	bne.n	8009074 <_dtoa_r+0xb04>
 800906e:	f018 0f01 	tst.w	r8, #1
 8009072:	d1ac      	bne.n	8008fce <_dtoa_r+0xa5e>
 8009074:	4633      	mov	r3, r6
 8009076:	461e      	mov	r6, r3
 8009078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800907c:	2a30      	cmp	r2, #48	@ 0x30
 800907e:	d0fa      	beq.n	8009076 <_dtoa_r+0xb06>
 8009080:	e5c2      	b.n	8008c08 <_dtoa_r+0x698>
 8009082:	459a      	cmp	sl, r3
 8009084:	d1a4      	bne.n	8008fd0 <_dtoa_r+0xa60>
 8009086:	9b04      	ldr	r3, [sp, #16]
 8009088:	3301      	adds	r3, #1
 800908a:	9304      	str	r3, [sp, #16]
 800908c:	2331      	movs	r3, #49	@ 0x31
 800908e:	f88a 3000 	strb.w	r3, [sl]
 8009092:	e5b9      	b.n	8008c08 <_dtoa_r+0x698>
 8009094:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009096:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80090f4 <_dtoa_r+0xb84>
 800909a:	b11b      	cbz	r3, 80090a4 <_dtoa_r+0xb34>
 800909c:	f10a 0308 	add.w	r3, sl, #8
 80090a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	4650      	mov	r0, sl
 80090a6:	b019      	add	sp, #100	@ 0x64
 80090a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	f77f ae37 	ble.w	8008d22 <_dtoa_r+0x7b2>
 80090b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090b8:	2001      	movs	r0, #1
 80090ba:	e655      	b.n	8008d68 <_dtoa_r+0x7f8>
 80090bc:	9b00      	ldr	r3, [sp, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f77f aed6 	ble.w	8008e70 <_dtoa_r+0x900>
 80090c4:	4656      	mov	r6, sl
 80090c6:	4621      	mov	r1, r4
 80090c8:	4648      	mov	r0, r9
 80090ca:	f7ff f9c7 	bl	800845c <quorem>
 80090ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80090d2:	f806 8b01 	strb.w	r8, [r6], #1
 80090d6:	9b00      	ldr	r3, [sp, #0]
 80090d8:	eba6 020a 	sub.w	r2, r6, sl
 80090dc:	4293      	cmp	r3, r2
 80090de:	ddb3      	ble.n	8009048 <_dtoa_r+0xad8>
 80090e0:	4649      	mov	r1, r9
 80090e2:	2300      	movs	r3, #0
 80090e4:	220a      	movs	r2, #10
 80090e6:	4658      	mov	r0, fp
 80090e8:	f000 fcb4 	bl	8009a54 <__multadd>
 80090ec:	4681      	mov	r9, r0
 80090ee:	e7ea      	b.n	80090c6 <_dtoa_r+0xb56>
 80090f0:	0800afb8 	.word	0x0800afb8
 80090f4:	0800af3c 	.word	0x0800af3c

080090f8 <_free_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4605      	mov	r5, r0
 80090fc:	2900      	cmp	r1, #0
 80090fe:	d041      	beq.n	8009184 <_free_r+0x8c>
 8009100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009104:	1f0c      	subs	r4, r1, #4
 8009106:	2b00      	cmp	r3, #0
 8009108:	bfb8      	it	lt
 800910a:	18e4      	addlt	r4, r4, r3
 800910c:	f000 fc34 	bl	8009978 <__malloc_lock>
 8009110:	4a1d      	ldr	r2, [pc, #116]	@ (8009188 <_free_r+0x90>)
 8009112:	6813      	ldr	r3, [r2, #0]
 8009114:	b933      	cbnz	r3, 8009124 <_free_r+0x2c>
 8009116:	6063      	str	r3, [r4, #4]
 8009118:	6014      	str	r4, [r2, #0]
 800911a:	4628      	mov	r0, r5
 800911c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009120:	f000 bc30 	b.w	8009984 <__malloc_unlock>
 8009124:	42a3      	cmp	r3, r4
 8009126:	d908      	bls.n	800913a <_free_r+0x42>
 8009128:	6820      	ldr	r0, [r4, #0]
 800912a:	1821      	adds	r1, r4, r0
 800912c:	428b      	cmp	r3, r1
 800912e:	bf01      	itttt	eq
 8009130:	6819      	ldreq	r1, [r3, #0]
 8009132:	685b      	ldreq	r3, [r3, #4]
 8009134:	1809      	addeq	r1, r1, r0
 8009136:	6021      	streq	r1, [r4, #0]
 8009138:	e7ed      	b.n	8009116 <_free_r+0x1e>
 800913a:	461a      	mov	r2, r3
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	b10b      	cbz	r3, 8009144 <_free_r+0x4c>
 8009140:	42a3      	cmp	r3, r4
 8009142:	d9fa      	bls.n	800913a <_free_r+0x42>
 8009144:	6811      	ldr	r1, [r2, #0]
 8009146:	1850      	adds	r0, r2, r1
 8009148:	42a0      	cmp	r0, r4
 800914a:	d10b      	bne.n	8009164 <_free_r+0x6c>
 800914c:	6820      	ldr	r0, [r4, #0]
 800914e:	4401      	add	r1, r0
 8009150:	1850      	adds	r0, r2, r1
 8009152:	4283      	cmp	r3, r0
 8009154:	6011      	str	r1, [r2, #0]
 8009156:	d1e0      	bne.n	800911a <_free_r+0x22>
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	6053      	str	r3, [r2, #4]
 800915e:	4408      	add	r0, r1
 8009160:	6010      	str	r0, [r2, #0]
 8009162:	e7da      	b.n	800911a <_free_r+0x22>
 8009164:	d902      	bls.n	800916c <_free_r+0x74>
 8009166:	230c      	movs	r3, #12
 8009168:	602b      	str	r3, [r5, #0]
 800916a:	e7d6      	b.n	800911a <_free_r+0x22>
 800916c:	6820      	ldr	r0, [r4, #0]
 800916e:	1821      	adds	r1, r4, r0
 8009170:	428b      	cmp	r3, r1
 8009172:	bf04      	itt	eq
 8009174:	6819      	ldreq	r1, [r3, #0]
 8009176:	685b      	ldreq	r3, [r3, #4]
 8009178:	6063      	str	r3, [r4, #4]
 800917a:	bf04      	itt	eq
 800917c:	1809      	addeq	r1, r1, r0
 800917e:	6021      	streq	r1, [r4, #0]
 8009180:	6054      	str	r4, [r2, #4]
 8009182:	e7ca      	b.n	800911a <_free_r+0x22>
 8009184:	bd38      	pop	{r3, r4, r5, pc}
 8009186:	bf00      	nop
 8009188:	20000600 	.word	0x20000600

0800918c <rshift>:
 800918c:	6903      	ldr	r3, [r0, #16]
 800918e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009192:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009196:	ea4f 1261 	mov.w	r2, r1, asr #5
 800919a:	f100 0414 	add.w	r4, r0, #20
 800919e:	dd45      	ble.n	800922c <rshift+0xa0>
 80091a0:	f011 011f 	ands.w	r1, r1, #31
 80091a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091ac:	d10c      	bne.n	80091c8 <rshift+0x3c>
 80091ae:	f100 0710 	add.w	r7, r0, #16
 80091b2:	4629      	mov	r1, r5
 80091b4:	42b1      	cmp	r1, r6
 80091b6:	d334      	bcc.n	8009222 <rshift+0x96>
 80091b8:	1a9b      	subs	r3, r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	1eea      	subs	r2, r5, #3
 80091be:	4296      	cmp	r6, r2
 80091c0:	bf38      	it	cc
 80091c2:	2300      	movcc	r3, #0
 80091c4:	4423      	add	r3, r4
 80091c6:	e015      	b.n	80091f4 <rshift+0x68>
 80091c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80091cc:	f1c1 0820 	rsb	r8, r1, #32
 80091d0:	40cf      	lsrs	r7, r1
 80091d2:	f105 0e04 	add.w	lr, r5, #4
 80091d6:	46a1      	mov	r9, r4
 80091d8:	4576      	cmp	r6, lr
 80091da:	46f4      	mov	ip, lr
 80091dc:	d815      	bhi.n	800920a <rshift+0x7e>
 80091de:	1a9a      	subs	r2, r3, r2
 80091e0:	0092      	lsls	r2, r2, #2
 80091e2:	3a04      	subs	r2, #4
 80091e4:	3501      	adds	r5, #1
 80091e6:	42ae      	cmp	r6, r5
 80091e8:	bf38      	it	cc
 80091ea:	2200      	movcc	r2, #0
 80091ec:	18a3      	adds	r3, r4, r2
 80091ee:	50a7      	str	r7, [r4, r2]
 80091f0:	b107      	cbz	r7, 80091f4 <rshift+0x68>
 80091f2:	3304      	adds	r3, #4
 80091f4:	1b1a      	subs	r2, r3, r4
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80091fc:	bf08      	it	eq
 80091fe:	2300      	moveq	r3, #0
 8009200:	6102      	str	r2, [r0, #16]
 8009202:	bf08      	it	eq
 8009204:	6143      	streq	r3, [r0, #20]
 8009206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800920a:	f8dc c000 	ldr.w	ip, [ip]
 800920e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009212:	ea4c 0707 	orr.w	r7, ip, r7
 8009216:	f849 7b04 	str.w	r7, [r9], #4
 800921a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800921e:	40cf      	lsrs	r7, r1
 8009220:	e7da      	b.n	80091d8 <rshift+0x4c>
 8009222:	f851 cb04 	ldr.w	ip, [r1], #4
 8009226:	f847 cf04 	str.w	ip, [r7, #4]!
 800922a:	e7c3      	b.n	80091b4 <rshift+0x28>
 800922c:	4623      	mov	r3, r4
 800922e:	e7e1      	b.n	80091f4 <rshift+0x68>

08009230 <__hexdig_fun>:
 8009230:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009234:	2b09      	cmp	r3, #9
 8009236:	d802      	bhi.n	800923e <__hexdig_fun+0xe>
 8009238:	3820      	subs	r0, #32
 800923a:	b2c0      	uxtb	r0, r0
 800923c:	4770      	bx	lr
 800923e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009242:	2b05      	cmp	r3, #5
 8009244:	d801      	bhi.n	800924a <__hexdig_fun+0x1a>
 8009246:	3847      	subs	r0, #71	@ 0x47
 8009248:	e7f7      	b.n	800923a <__hexdig_fun+0xa>
 800924a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800924e:	2b05      	cmp	r3, #5
 8009250:	d801      	bhi.n	8009256 <__hexdig_fun+0x26>
 8009252:	3827      	subs	r0, #39	@ 0x27
 8009254:	e7f1      	b.n	800923a <__hexdig_fun+0xa>
 8009256:	2000      	movs	r0, #0
 8009258:	4770      	bx	lr
	...

0800925c <__gethex>:
 800925c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009260:	b085      	sub	sp, #20
 8009262:	468a      	mov	sl, r1
 8009264:	9302      	str	r3, [sp, #8]
 8009266:	680b      	ldr	r3, [r1, #0]
 8009268:	9001      	str	r0, [sp, #4]
 800926a:	4690      	mov	r8, r2
 800926c:	1c9c      	adds	r4, r3, #2
 800926e:	46a1      	mov	r9, r4
 8009270:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009274:	2830      	cmp	r0, #48	@ 0x30
 8009276:	d0fa      	beq.n	800926e <__gethex+0x12>
 8009278:	eba9 0303 	sub.w	r3, r9, r3
 800927c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009280:	f7ff ffd6 	bl	8009230 <__hexdig_fun>
 8009284:	4605      	mov	r5, r0
 8009286:	2800      	cmp	r0, #0
 8009288:	d168      	bne.n	800935c <__gethex+0x100>
 800928a:	49a0      	ldr	r1, [pc, #640]	@ (800950c <__gethex+0x2b0>)
 800928c:	2201      	movs	r2, #1
 800928e:	4648      	mov	r0, r9
 8009290:	f7ff f83b 	bl	800830a <strncmp>
 8009294:	4607      	mov	r7, r0
 8009296:	2800      	cmp	r0, #0
 8009298:	d167      	bne.n	800936a <__gethex+0x10e>
 800929a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800929e:	4626      	mov	r6, r4
 80092a0:	f7ff ffc6 	bl	8009230 <__hexdig_fun>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d062      	beq.n	800936e <__gethex+0x112>
 80092a8:	4623      	mov	r3, r4
 80092aa:	7818      	ldrb	r0, [r3, #0]
 80092ac:	2830      	cmp	r0, #48	@ 0x30
 80092ae:	4699      	mov	r9, r3
 80092b0:	f103 0301 	add.w	r3, r3, #1
 80092b4:	d0f9      	beq.n	80092aa <__gethex+0x4e>
 80092b6:	f7ff ffbb 	bl	8009230 <__hexdig_fun>
 80092ba:	fab0 f580 	clz	r5, r0
 80092be:	096d      	lsrs	r5, r5, #5
 80092c0:	f04f 0b01 	mov.w	fp, #1
 80092c4:	464a      	mov	r2, r9
 80092c6:	4616      	mov	r6, r2
 80092c8:	3201      	adds	r2, #1
 80092ca:	7830      	ldrb	r0, [r6, #0]
 80092cc:	f7ff ffb0 	bl	8009230 <__hexdig_fun>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d1f8      	bne.n	80092c6 <__gethex+0x6a>
 80092d4:	498d      	ldr	r1, [pc, #564]	@ (800950c <__gethex+0x2b0>)
 80092d6:	2201      	movs	r2, #1
 80092d8:	4630      	mov	r0, r6
 80092da:	f7ff f816 	bl	800830a <strncmp>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d13f      	bne.n	8009362 <__gethex+0x106>
 80092e2:	b944      	cbnz	r4, 80092f6 <__gethex+0x9a>
 80092e4:	1c74      	adds	r4, r6, #1
 80092e6:	4622      	mov	r2, r4
 80092e8:	4616      	mov	r6, r2
 80092ea:	3201      	adds	r2, #1
 80092ec:	7830      	ldrb	r0, [r6, #0]
 80092ee:	f7ff ff9f 	bl	8009230 <__hexdig_fun>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d1f8      	bne.n	80092e8 <__gethex+0x8c>
 80092f6:	1ba4      	subs	r4, r4, r6
 80092f8:	00a7      	lsls	r7, r4, #2
 80092fa:	7833      	ldrb	r3, [r6, #0]
 80092fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009300:	2b50      	cmp	r3, #80	@ 0x50
 8009302:	d13e      	bne.n	8009382 <__gethex+0x126>
 8009304:	7873      	ldrb	r3, [r6, #1]
 8009306:	2b2b      	cmp	r3, #43	@ 0x2b
 8009308:	d033      	beq.n	8009372 <__gethex+0x116>
 800930a:	2b2d      	cmp	r3, #45	@ 0x2d
 800930c:	d034      	beq.n	8009378 <__gethex+0x11c>
 800930e:	1c71      	adds	r1, r6, #1
 8009310:	2400      	movs	r4, #0
 8009312:	7808      	ldrb	r0, [r1, #0]
 8009314:	f7ff ff8c 	bl	8009230 <__hexdig_fun>
 8009318:	1e43      	subs	r3, r0, #1
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b18      	cmp	r3, #24
 800931e:	d830      	bhi.n	8009382 <__gethex+0x126>
 8009320:	f1a0 0210 	sub.w	r2, r0, #16
 8009324:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009328:	f7ff ff82 	bl	8009230 <__hexdig_fun>
 800932c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009330:	fa5f fc8c 	uxtb.w	ip, ip
 8009334:	f1bc 0f18 	cmp.w	ip, #24
 8009338:	f04f 030a 	mov.w	r3, #10
 800933c:	d91e      	bls.n	800937c <__gethex+0x120>
 800933e:	b104      	cbz	r4, 8009342 <__gethex+0xe6>
 8009340:	4252      	negs	r2, r2
 8009342:	4417      	add	r7, r2
 8009344:	f8ca 1000 	str.w	r1, [sl]
 8009348:	b1ed      	cbz	r5, 8009386 <__gethex+0x12a>
 800934a:	f1bb 0f00 	cmp.w	fp, #0
 800934e:	bf0c      	ite	eq
 8009350:	2506      	moveq	r5, #6
 8009352:	2500      	movne	r5, #0
 8009354:	4628      	mov	r0, r5
 8009356:	b005      	add	sp, #20
 8009358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800935c:	2500      	movs	r5, #0
 800935e:	462c      	mov	r4, r5
 8009360:	e7b0      	b.n	80092c4 <__gethex+0x68>
 8009362:	2c00      	cmp	r4, #0
 8009364:	d1c7      	bne.n	80092f6 <__gethex+0x9a>
 8009366:	4627      	mov	r7, r4
 8009368:	e7c7      	b.n	80092fa <__gethex+0x9e>
 800936a:	464e      	mov	r6, r9
 800936c:	462f      	mov	r7, r5
 800936e:	2501      	movs	r5, #1
 8009370:	e7c3      	b.n	80092fa <__gethex+0x9e>
 8009372:	2400      	movs	r4, #0
 8009374:	1cb1      	adds	r1, r6, #2
 8009376:	e7cc      	b.n	8009312 <__gethex+0xb6>
 8009378:	2401      	movs	r4, #1
 800937a:	e7fb      	b.n	8009374 <__gethex+0x118>
 800937c:	fb03 0002 	mla	r0, r3, r2, r0
 8009380:	e7ce      	b.n	8009320 <__gethex+0xc4>
 8009382:	4631      	mov	r1, r6
 8009384:	e7de      	b.n	8009344 <__gethex+0xe8>
 8009386:	eba6 0309 	sub.w	r3, r6, r9
 800938a:	3b01      	subs	r3, #1
 800938c:	4629      	mov	r1, r5
 800938e:	2b07      	cmp	r3, #7
 8009390:	dc0a      	bgt.n	80093a8 <__gethex+0x14c>
 8009392:	9801      	ldr	r0, [sp, #4]
 8009394:	f000 fafc 	bl	8009990 <_Balloc>
 8009398:	4604      	mov	r4, r0
 800939a:	b940      	cbnz	r0, 80093ae <__gethex+0x152>
 800939c:	4b5c      	ldr	r3, [pc, #368]	@ (8009510 <__gethex+0x2b4>)
 800939e:	4602      	mov	r2, r0
 80093a0:	21e4      	movs	r1, #228	@ 0xe4
 80093a2:	485c      	ldr	r0, [pc, #368]	@ (8009514 <__gethex+0x2b8>)
 80093a4:	f001 f9e0 	bl	800a768 <__assert_func>
 80093a8:	3101      	adds	r1, #1
 80093aa:	105b      	asrs	r3, r3, #1
 80093ac:	e7ef      	b.n	800938e <__gethex+0x132>
 80093ae:	f100 0a14 	add.w	sl, r0, #20
 80093b2:	2300      	movs	r3, #0
 80093b4:	4655      	mov	r5, sl
 80093b6:	469b      	mov	fp, r3
 80093b8:	45b1      	cmp	r9, r6
 80093ba:	d337      	bcc.n	800942c <__gethex+0x1d0>
 80093bc:	f845 bb04 	str.w	fp, [r5], #4
 80093c0:	eba5 050a 	sub.w	r5, r5, sl
 80093c4:	10ad      	asrs	r5, r5, #2
 80093c6:	6125      	str	r5, [r4, #16]
 80093c8:	4658      	mov	r0, fp
 80093ca:	f000 fbd3 	bl	8009b74 <__hi0bits>
 80093ce:	016d      	lsls	r5, r5, #5
 80093d0:	f8d8 6000 	ldr.w	r6, [r8]
 80093d4:	1a2d      	subs	r5, r5, r0
 80093d6:	42b5      	cmp	r5, r6
 80093d8:	dd54      	ble.n	8009484 <__gethex+0x228>
 80093da:	1bad      	subs	r5, r5, r6
 80093dc:	4629      	mov	r1, r5
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 ff67 	bl	800a2b2 <__any_on>
 80093e4:	4681      	mov	r9, r0
 80093e6:	b178      	cbz	r0, 8009408 <__gethex+0x1ac>
 80093e8:	1e6b      	subs	r3, r5, #1
 80093ea:	1159      	asrs	r1, r3, #5
 80093ec:	f003 021f 	and.w	r2, r3, #31
 80093f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80093f4:	f04f 0901 	mov.w	r9, #1
 80093f8:	fa09 f202 	lsl.w	r2, r9, r2
 80093fc:	420a      	tst	r2, r1
 80093fe:	d003      	beq.n	8009408 <__gethex+0x1ac>
 8009400:	454b      	cmp	r3, r9
 8009402:	dc36      	bgt.n	8009472 <__gethex+0x216>
 8009404:	f04f 0902 	mov.w	r9, #2
 8009408:	4629      	mov	r1, r5
 800940a:	4620      	mov	r0, r4
 800940c:	f7ff febe 	bl	800918c <rshift>
 8009410:	442f      	add	r7, r5
 8009412:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009416:	42bb      	cmp	r3, r7
 8009418:	da42      	bge.n	80094a0 <__gethex+0x244>
 800941a:	9801      	ldr	r0, [sp, #4]
 800941c:	4621      	mov	r1, r4
 800941e:	f000 faf7 	bl	8009a10 <_Bfree>
 8009422:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009424:	2300      	movs	r3, #0
 8009426:	6013      	str	r3, [r2, #0]
 8009428:	25a3      	movs	r5, #163	@ 0xa3
 800942a:	e793      	b.n	8009354 <__gethex+0xf8>
 800942c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009430:	2a2e      	cmp	r2, #46	@ 0x2e
 8009432:	d012      	beq.n	800945a <__gethex+0x1fe>
 8009434:	2b20      	cmp	r3, #32
 8009436:	d104      	bne.n	8009442 <__gethex+0x1e6>
 8009438:	f845 bb04 	str.w	fp, [r5], #4
 800943c:	f04f 0b00 	mov.w	fp, #0
 8009440:	465b      	mov	r3, fp
 8009442:	7830      	ldrb	r0, [r6, #0]
 8009444:	9303      	str	r3, [sp, #12]
 8009446:	f7ff fef3 	bl	8009230 <__hexdig_fun>
 800944a:	9b03      	ldr	r3, [sp, #12]
 800944c:	f000 000f 	and.w	r0, r0, #15
 8009450:	4098      	lsls	r0, r3
 8009452:	ea4b 0b00 	orr.w	fp, fp, r0
 8009456:	3304      	adds	r3, #4
 8009458:	e7ae      	b.n	80093b8 <__gethex+0x15c>
 800945a:	45b1      	cmp	r9, r6
 800945c:	d8ea      	bhi.n	8009434 <__gethex+0x1d8>
 800945e:	492b      	ldr	r1, [pc, #172]	@ (800950c <__gethex+0x2b0>)
 8009460:	9303      	str	r3, [sp, #12]
 8009462:	2201      	movs	r2, #1
 8009464:	4630      	mov	r0, r6
 8009466:	f7fe ff50 	bl	800830a <strncmp>
 800946a:	9b03      	ldr	r3, [sp, #12]
 800946c:	2800      	cmp	r0, #0
 800946e:	d1e1      	bne.n	8009434 <__gethex+0x1d8>
 8009470:	e7a2      	b.n	80093b8 <__gethex+0x15c>
 8009472:	1ea9      	subs	r1, r5, #2
 8009474:	4620      	mov	r0, r4
 8009476:	f000 ff1c 	bl	800a2b2 <__any_on>
 800947a:	2800      	cmp	r0, #0
 800947c:	d0c2      	beq.n	8009404 <__gethex+0x1a8>
 800947e:	f04f 0903 	mov.w	r9, #3
 8009482:	e7c1      	b.n	8009408 <__gethex+0x1ac>
 8009484:	da09      	bge.n	800949a <__gethex+0x23e>
 8009486:	1b75      	subs	r5, r6, r5
 8009488:	4621      	mov	r1, r4
 800948a:	9801      	ldr	r0, [sp, #4]
 800948c:	462a      	mov	r2, r5
 800948e:	f000 fcd7 	bl	8009e40 <__lshift>
 8009492:	1b7f      	subs	r7, r7, r5
 8009494:	4604      	mov	r4, r0
 8009496:	f100 0a14 	add.w	sl, r0, #20
 800949a:	f04f 0900 	mov.w	r9, #0
 800949e:	e7b8      	b.n	8009412 <__gethex+0x1b6>
 80094a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80094a4:	42bd      	cmp	r5, r7
 80094a6:	dd6f      	ble.n	8009588 <__gethex+0x32c>
 80094a8:	1bed      	subs	r5, r5, r7
 80094aa:	42ae      	cmp	r6, r5
 80094ac:	dc34      	bgt.n	8009518 <__gethex+0x2bc>
 80094ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d022      	beq.n	80094fc <__gethex+0x2a0>
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d024      	beq.n	8009504 <__gethex+0x2a8>
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d115      	bne.n	80094ea <__gethex+0x28e>
 80094be:	42ae      	cmp	r6, r5
 80094c0:	d113      	bne.n	80094ea <__gethex+0x28e>
 80094c2:	2e01      	cmp	r6, #1
 80094c4:	d10b      	bne.n	80094de <__gethex+0x282>
 80094c6:	9a02      	ldr	r2, [sp, #8]
 80094c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	2301      	movs	r3, #1
 80094d0:	6123      	str	r3, [r4, #16]
 80094d2:	f8ca 3000 	str.w	r3, [sl]
 80094d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094d8:	2562      	movs	r5, #98	@ 0x62
 80094da:	601c      	str	r4, [r3, #0]
 80094dc:	e73a      	b.n	8009354 <__gethex+0xf8>
 80094de:	1e71      	subs	r1, r6, #1
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fee6 	bl	800a2b2 <__any_on>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d1ed      	bne.n	80094c6 <__gethex+0x26a>
 80094ea:	9801      	ldr	r0, [sp, #4]
 80094ec:	4621      	mov	r1, r4
 80094ee:	f000 fa8f 	bl	8009a10 <_Bfree>
 80094f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094f4:	2300      	movs	r3, #0
 80094f6:	6013      	str	r3, [r2, #0]
 80094f8:	2550      	movs	r5, #80	@ 0x50
 80094fa:	e72b      	b.n	8009354 <__gethex+0xf8>
 80094fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1f3      	bne.n	80094ea <__gethex+0x28e>
 8009502:	e7e0      	b.n	80094c6 <__gethex+0x26a>
 8009504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1dd      	bne.n	80094c6 <__gethex+0x26a>
 800950a:	e7ee      	b.n	80094ea <__gethex+0x28e>
 800950c:	0800aeac 	.word	0x0800aeac
 8009510:	0800afb8 	.word	0x0800afb8
 8009514:	0800afc9 	.word	0x0800afc9
 8009518:	1e6f      	subs	r7, r5, #1
 800951a:	f1b9 0f00 	cmp.w	r9, #0
 800951e:	d130      	bne.n	8009582 <__gethex+0x326>
 8009520:	b127      	cbz	r7, 800952c <__gethex+0x2d0>
 8009522:	4639      	mov	r1, r7
 8009524:	4620      	mov	r0, r4
 8009526:	f000 fec4 	bl	800a2b2 <__any_on>
 800952a:	4681      	mov	r9, r0
 800952c:	117a      	asrs	r2, r7, #5
 800952e:	2301      	movs	r3, #1
 8009530:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009534:	f007 071f 	and.w	r7, r7, #31
 8009538:	40bb      	lsls	r3, r7
 800953a:	4213      	tst	r3, r2
 800953c:	4629      	mov	r1, r5
 800953e:	4620      	mov	r0, r4
 8009540:	bf18      	it	ne
 8009542:	f049 0902 	orrne.w	r9, r9, #2
 8009546:	f7ff fe21 	bl	800918c <rshift>
 800954a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800954e:	1b76      	subs	r6, r6, r5
 8009550:	2502      	movs	r5, #2
 8009552:	f1b9 0f00 	cmp.w	r9, #0
 8009556:	d047      	beq.n	80095e8 <__gethex+0x38c>
 8009558:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800955c:	2b02      	cmp	r3, #2
 800955e:	d015      	beq.n	800958c <__gethex+0x330>
 8009560:	2b03      	cmp	r3, #3
 8009562:	d017      	beq.n	8009594 <__gethex+0x338>
 8009564:	2b01      	cmp	r3, #1
 8009566:	d109      	bne.n	800957c <__gethex+0x320>
 8009568:	f019 0f02 	tst.w	r9, #2
 800956c:	d006      	beq.n	800957c <__gethex+0x320>
 800956e:	f8da 3000 	ldr.w	r3, [sl]
 8009572:	ea49 0903 	orr.w	r9, r9, r3
 8009576:	f019 0f01 	tst.w	r9, #1
 800957a:	d10e      	bne.n	800959a <__gethex+0x33e>
 800957c:	f045 0510 	orr.w	r5, r5, #16
 8009580:	e032      	b.n	80095e8 <__gethex+0x38c>
 8009582:	f04f 0901 	mov.w	r9, #1
 8009586:	e7d1      	b.n	800952c <__gethex+0x2d0>
 8009588:	2501      	movs	r5, #1
 800958a:	e7e2      	b.n	8009552 <__gethex+0x2f6>
 800958c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800958e:	f1c3 0301 	rsb	r3, r3, #1
 8009592:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0f0      	beq.n	800957c <__gethex+0x320>
 800959a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800959e:	f104 0314 	add.w	r3, r4, #20
 80095a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80095a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80095aa:	f04f 0c00 	mov.w	ip, #0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80095b4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80095b8:	d01b      	beq.n	80095f2 <__gethex+0x396>
 80095ba:	3201      	adds	r2, #1
 80095bc:	6002      	str	r2, [r0, #0]
 80095be:	2d02      	cmp	r5, #2
 80095c0:	f104 0314 	add.w	r3, r4, #20
 80095c4:	d13c      	bne.n	8009640 <__gethex+0x3e4>
 80095c6:	f8d8 2000 	ldr.w	r2, [r8]
 80095ca:	3a01      	subs	r2, #1
 80095cc:	42b2      	cmp	r2, r6
 80095ce:	d109      	bne.n	80095e4 <__gethex+0x388>
 80095d0:	1171      	asrs	r1, r6, #5
 80095d2:	2201      	movs	r2, #1
 80095d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095d8:	f006 061f 	and.w	r6, r6, #31
 80095dc:	fa02 f606 	lsl.w	r6, r2, r6
 80095e0:	421e      	tst	r6, r3
 80095e2:	d13a      	bne.n	800965a <__gethex+0x3fe>
 80095e4:	f045 0520 	orr.w	r5, r5, #32
 80095e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095ea:	601c      	str	r4, [r3, #0]
 80095ec:	9b02      	ldr	r3, [sp, #8]
 80095ee:	601f      	str	r7, [r3, #0]
 80095f0:	e6b0      	b.n	8009354 <__gethex+0xf8>
 80095f2:	4299      	cmp	r1, r3
 80095f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80095f8:	d8d9      	bhi.n	80095ae <__gethex+0x352>
 80095fa:	68a3      	ldr	r3, [r4, #8]
 80095fc:	459b      	cmp	fp, r3
 80095fe:	db17      	blt.n	8009630 <__gethex+0x3d4>
 8009600:	6861      	ldr	r1, [r4, #4]
 8009602:	9801      	ldr	r0, [sp, #4]
 8009604:	3101      	adds	r1, #1
 8009606:	f000 f9c3 	bl	8009990 <_Balloc>
 800960a:	4681      	mov	r9, r0
 800960c:	b918      	cbnz	r0, 8009616 <__gethex+0x3ba>
 800960e:	4b1a      	ldr	r3, [pc, #104]	@ (8009678 <__gethex+0x41c>)
 8009610:	4602      	mov	r2, r0
 8009612:	2184      	movs	r1, #132	@ 0x84
 8009614:	e6c5      	b.n	80093a2 <__gethex+0x146>
 8009616:	6922      	ldr	r2, [r4, #16]
 8009618:	3202      	adds	r2, #2
 800961a:	f104 010c 	add.w	r1, r4, #12
 800961e:	0092      	lsls	r2, r2, #2
 8009620:	300c      	adds	r0, #12
 8009622:	f7fe fefc 	bl	800841e <memcpy>
 8009626:	4621      	mov	r1, r4
 8009628:	9801      	ldr	r0, [sp, #4]
 800962a:	f000 f9f1 	bl	8009a10 <_Bfree>
 800962e:	464c      	mov	r4, r9
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009638:	6122      	str	r2, [r4, #16]
 800963a:	2201      	movs	r2, #1
 800963c:	615a      	str	r2, [r3, #20]
 800963e:	e7be      	b.n	80095be <__gethex+0x362>
 8009640:	6922      	ldr	r2, [r4, #16]
 8009642:	455a      	cmp	r2, fp
 8009644:	dd0b      	ble.n	800965e <__gethex+0x402>
 8009646:	2101      	movs	r1, #1
 8009648:	4620      	mov	r0, r4
 800964a:	f7ff fd9f 	bl	800918c <rshift>
 800964e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009652:	3701      	adds	r7, #1
 8009654:	42bb      	cmp	r3, r7
 8009656:	f6ff aee0 	blt.w	800941a <__gethex+0x1be>
 800965a:	2501      	movs	r5, #1
 800965c:	e7c2      	b.n	80095e4 <__gethex+0x388>
 800965e:	f016 061f 	ands.w	r6, r6, #31
 8009662:	d0fa      	beq.n	800965a <__gethex+0x3fe>
 8009664:	4453      	add	r3, sl
 8009666:	f1c6 0620 	rsb	r6, r6, #32
 800966a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800966e:	f000 fa81 	bl	8009b74 <__hi0bits>
 8009672:	42b0      	cmp	r0, r6
 8009674:	dbe7      	blt.n	8009646 <__gethex+0x3ea>
 8009676:	e7f0      	b.n	800965a <__gethex+0x3fe>
 8009678:	0800afb8 	.word	0x0800afb8

0800967c <L_shift>:
 800967c:	f1c2 0208 	rsb	r2, r2, #8
 8009680:	0092      	lsls	r2, r2, #2
 8009682:	b570      	push	{r4, r5, r6, lr}
 8009684:	f1c2 0620 	rsb	r6, r2, #32
 8009688:	6843      	ldr	r3, [r0, #4]
 800968a:	6804      	ldr	r4, [r0, #0]
 800968c:	fa03 f506 	lsl.w	r5, r3, r6
 8009690:	432c      	orrs	r4, r5
 8009692:	40d3      	lsrs	r3, r2
 8009694:	6004      	str	r4, [r0, #0]
 8009696:	f840 3f04 	str.w	r3, [r0, #4]!
 800969a:	4288      	cmp	r0, r1
 800969c:	d3f4      	bcc.n	8009688 <L_shift+0xc>
 800969e:	bd70      	pop	{r4, r5, r6, pc}

080096a0 <__match>:
 80096a0:	b530      	push	{r4, r5, lr}
 80096a2:	6803      	ldr	r3, [r0, #0]
 80096a4:	3301      	adds	r3, #1
 80096a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096aa:	b914      	cbnz	r4, 80096b2 <__match+0x12>
 80096ac:	6003      	str	r3, [r0, #0]
 80096ae:	2001      	movs	r0, #1
 80096b0:	bd30      	pop	{r4, r5, pc}
 80096b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80096ba:	2d19      	cmp	r5, #25
 80096bc:	bf98      	it	ls
 80096be:	3220      	addls	r2, #32
 80096c0:	42a2      	cmp	r2, r4
 80096c2:	d0f0      	beq.n	80096a6 <__match+0x6>
 80096c4:	2000      	movs	r0, #0
 80096c6:	e7f3      	b.n	80096b0 <__match+0x10>

080096c8 <__hexnan>:
 80096c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	680b      	ldr	r3, [r1, #0]
 80096ce:	6801      	ldr	r1, [r0, #0]
 80096d0:	115e      	asrs	r6, r3, #5
 80096d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80096d6:	f013 031f 	ands.w	r3, r3, #31
 80096da:	b087      	sub	sp, #28
 80096dc:	bf18      	it	ne
 80096de:	3604      	addne	r6, #4
 80096e0:	2500      	movs	r5, #0
 80096e2:	1f37      	subs	r7, r6, #4
 80096e4:	4682      	mov	sl, r0
 80096e6:	4690      	mov	r8, r2
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80096ee:	46b9      	mov	r9, r7
 80096f0:	463c      	mov	r4, r7
 80096f2:	9502      	str	r5, [sp, #8]
 80096f4:	46ab      	mov	fp, r5
 80096f6:	784a      	ldrb	r2, [r1, #1]
 80096f8:	1c4b      	adds	r3, r1, #1
 80096fa:	9303      	str	r3, [sp, #12]
 80096fc:	b342      	cbz	r2, 8009750 <__hexnan+0x88>
 80096fe:	4610      	mov	r0, r2
 8009700:	9105      	str	r1, [sp, #20]
 8009702:	9204      	str	r2, [sp, #16]
 8009704:	f7ff fd94 	bl	8009230 <__hexdig_fun>
 8009708:	2800      	cmp	r0, #0
 800970a:	d151      	bne.n	80097b0 <__hexnan+0xe8>
 800970c:	9a04      	ldr	r2, [sp, #16]
 800970e:	9905      	ldr	r1, [sp, #20]
 8009710:	2a20      	cmp	r2, #32
 8009712:	d818      	bhi.n	8009746 <__hexnan+0x7e>
 8009714:	9b02      	ldr	r3, [sp, #8]
 8009716:	459b      	cmp	fp, r3
 8009718:	dd13      	ble.n	8009742 <__hexnan+0x7a>
 800971a:	454c      	cmp	r4, r9
 800971c:	d206      	bcs.n	800972c <__hexnan+0x64>
 800971e:	2d07      	cmp	r5, #7
 8009720:	dc04      	bgt.n	800972c <__hexnan+0x64>
 8009722:	462a      	mov	r2, r5
 8009724:	4649      	mov	r1, r9
 8009726:	4620      	mov	r0, r4
 8009728:	f7ff ffa8 	bl	800967c <L_shift>
 800972c:	4544      	cmp	r4, r8
 800972e:	d952      	bls.n	80097d6 <__hexnan+0x10e>
 8009730:	2300      	movs	r3, #0
 8009732:	f1a4 0904 	sub.w	r9, r4, #4
 8009736:	f844 3c04 	str.w	r3, [r4, #-4]
 800973a:	f8cd b008 	str.w	fp, [sp, #8]
 800973e:	464c      	mov	r4, r9
 8009740:	461d      	mov	r5, r3
 8009742:	9903      	ldr	r1, [sp, #12]
 8009744:	e7d7      	b.n	80096f6 <__hexnan+0x2e>
 8009746:	2a29      	cmp	r2, #41	@ 0x29
 8009748:	d157      	bne.n	80097fa <__hexnan+0x132>
 800974a:	3102      	adds	r1, #2
 800974c:	f8ca 1000 	str.w	r1, [sl]
 8009750:	f1bb 0f00 	cmp.w	fp, #0
 8009754:	d051      	beq.n	80097fa <__hexnan+0x132>
 8009756:	454c      	cmp	r4, r9
 8009758:	d206      	bcs.n	8009768 <__hexnan+0xa0>
 800975a:	2d07      	cmp	r5, #7
 800975c:	dc04      	bgt.n	8009768 <__hexnan+0xa0>
 800975e:	462a      	mov	r2, r5
 8009760:	4649      	mov	r1, r9
 8009762:	4620      	mov	r0, r4
 8009764:	f7ff ff8a 	bl	800967c <L_shift>
 8009768:	4544      	cmp	r4, r8
 800976a:	d936      	bls.n	80097da <__hexnan+0x112>
 800976c:	f1a8 0204 	sub.w	r2, r8, #4
 8009770:	4623      	mov	r3, r4
 8009772:	f853 1b04 	ldr.w	r1, [r3], #4
 8009776:	f842 1f04 	str.w	r1, [r2, #4]!
 800977a:	429f      	cmp	r7, r3
 800977c:	d2f9      	bcs.n	8009772 <__hexnan+0xaa>
 800977e:	1b3b      	subs	r3, r7, r4
 8009780:	f023 0303 	bic.w	r3, r3, #3
 8009784:	3304      	adds	r3, #4
 8009786:	3401      	adds	r4, #1
 8009788:	3e03      	subs	r6, #3
 800978a:	42b4      	cmp	r4, r6
 800978c:	bf88      	it	hi
 800978e:	2304      	movhi	r3, #4
 8009790:	4443      	add	r3, r8
 8009792:	2200      	movs	r2, #0
 8009794:	f843 2b04 	str.w	r2, [r3], #4
 8009798:	429f      	cmp	r7, r3
 800979a:	d2fb      	bcs.n	8009794 <__hexnan+0xcc>
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	b91b      	cbnz	r3, 80097a8 <__hexnan+0xe0>
 80097a0:	4547      	cmp	r7, r8
 80097a2:	d128      	bne.n	80097f6 <__hexnan+0x12e>
 80097a4:	2301      	movs	r3, #1
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	2005      	movs	r0, #5
 80097aa:	b007      	add	sp, #28
 80097ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b0:	3501      	adds	r5, #1
 80097b2:	2d08      	cmp	r5, #8
 80097b4:	f10b 0b01 	add.w	fp, fp, #1
 80097b8:	dd06      	ble.n	80097c8 <__hexnan+0x100>
 80097ba:	4544      	cmp	r4, r8
 80097bc:	d9c1      	bls.n	8009742 <__hexnan+0x7a>
 80097be:	2300      	movs	r3, #0
 80097c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80097c4:	2501      	movs	r5, #1
 80097c6:	3c04      	subs	r4, #4
 80097c8:	6822      	ldr	r2, [r4, #0]
 80097ca:	f000 000f 	and.w	r0, r0, #15
 80097ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80097d2:	6020      	str	r0, [r4, #0]
 80097d4:	e7b5      	b.n	8009742 <__hexnan+0x7a>
 80097d6:	2508      	movs	r5, #8
 80097d8:	e7b3      	b.n	8009742 <__hexnan+0x7a>
 80097da:	9b01      	ldr	r3, [sp, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d0dd      	beq.n	800979c <__hexnan+0xd4>
 80097e0:	f1c3 0320 	rsb	r3, r3, #32
 80097e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097e8:	40da      	lsrs	r2, r3
 80097ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80097ee:	4013      	ands	r3, r2
 80097f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80097f4:	e7d2      	b.n	800979c <__hexnan+0xd4>
 80097f6:	3f04      	subs	r7, #4
 80097f8:	e7d0      	b.n	800979c <__hexnan+0xd4>
 80097fa:	2004      	movs	r0, #4
 80097fc:	e7d5      	b.n	80097aa <__hexnan+0xe2>
	...

08009800 <malloc>:
 8009800:	4b02      	ldr	r3, [pc, #8]	@ (800980c <malloc+0xc>)
 8009802:	4601      	mov	r1, r0
 8009804:	6818      	ldr	r0, [r3, #0]
 8009806:	f000 b825 	b.w	8009854 <_malloc_r>
 800980a:	bf00      	nop
 800980c:	20000188 	.word	0x20000188

08009810 <sbrk_aligned>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	4e0f      	ldr	r6, [pc, #60]	@ (8009850 <sbrk_aligned+0x40>)
 8009814:	460c      	mov	r4, r1
 8009816:	6831      	ldr	r1, [r6, #0]
 8009818:	4605      	mov	r5, r0
 800981a:	b911      	cbnz	r1, 8009822 <sbrk_aligned+0x12>
 800981c:	f000 ff94 	bl	800a748 <_sbrk_r>
 8009820:	6030      	str	r0, [r6, #0]
 8009822:	4621      	mov	r1, r4
 8009824:	4628      	mov	r0, r5
 8009826:	f000 ff8f 	bl	800a748 <_sbrk_r>
 800982a:	1c43      	adds	r3, r0, #1
 800982c:	d103      	bne.n	8009836 <sbrk_aligned+0x26>
 800982e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009832:	4620      	mov	r0, r4
 8009834:	bd70      	pop	{r4, r5, r6, pc}
 8009836:	1cc4      	adds	r4, r0, #3
 8009838:	f024 0403 	bic.w	r4, r4, #3
 800983c:	42a0      	cmp	r0, r4
 800983e:	d0f8      	beq.n	8009832 <sbrk_aligned+0x22>
 8009840:	1a21      	subs	r1, r4, r0
 8009842:	4628      	mov	r0, r5
 8009844:	f000 ff80 	bl	800a748 <_sbrk_r>
 8009848:	3001      	adds	r0, #1
 800984a:	d1f2      	bne.n	8009832 <sbrk_aligned+0x22>
 800984c:	e7ef      	b.n	800982e <sbrk_aligned+0x1e>
 800984e:	bf00      	nop
 8009850:	200005fc 	.word	0x200005fc

08009854 <_malloc_r>:
 8009854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009858:	1ccd      	adds	r5, r1, #3
 800985a:	f025 0503 	bic.w	r5, r5, #3
 800985e:	3508      	adds	r5, #8
 8009860:	2d0c      	cmp	r5, #12
 8009862:	bf38      	it	cc
 8009864:	250c      	movcc	r5, #12
 8009866:	2d00      	cmp	r5, #0
 8009868:	4606      	mov	r6, r0
 800986a:	db01      	blt.n	8009870 <_malloc_r+0x1c>
 800986c:	42a9      	cmp	r1, r5
 800986e:	d904      	bls.n	800987a <_malloc_r+0x26>
 8009870:	230c      	movs	r3, #12
 8009872:	6033      	str	r3, [r6, #0]
 8009874:	2000      	movs	r0, #0
 8009876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800987a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009950 <_malloc_r+0xfc>
 800987e:	f000 f87b 	bl	8009978 <__malloc_lock>
 8009882:	f8d8 3000 	ldr.w	r3, [r8]
 8009886:	461c      	mov	r4, r3
 8009888:	bb44      	cbnz	r4, 80098dc <_malloc_r+0x88>
 800988a:	4629      	mov	r1, r5
 800988c:	4630      	mov	r0, r6
 800988e:	f7ff ffbf 	bl	8009810 <sbrk_aligned>
 8009892:	1c43      	adds	r3, r0, #1
 8009894:	4604      	mov	r4, r0
 8009896:	d158      	bne.n	800994a <_malloc_r+0xf6>
 8009898:	f8d8 4000 	ldr.w	r4, [r8]
 800989c:	4627      	mov	r7, r4
 800989e:	2f00      	cmp	r7, #0
 80098a0:	d143      	bne.n	800992a <_malloc_r+0xd6>
 80098a2:	2c00      	cmp	r4, #0
 80098a4:	d04b      	beq.n	800993e <_malloc_r+0xea>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	4639      	mov	r1, r7
 80098aa:	4630      	mov	r0, r6
 80098ac:	eb04 0903 	add.w	r9, r4, r3
 80098b0:	f000 ff4a 	bl	800a748 <_sbrk_r>
 80098b4:	4581      	cmp	r9, r0
 80098b6:	d142      	bne.n	800993e <_malloc_r+0xea>
 80098b8:	6821      	ldr	r1, [r4, #0]
 80098ba:	1a6d      	subs	r5, r5, r1
 80098bc:	4629      	mov	r1, r5
 80098be:	4630      	mov	r0, r6
 80098c0:	f7ff ffa6 	bl	8009810 <sbrk_aligned>
 80098c4:	3001      	adds	r0, #1
 80098c6:	d03a      	beq.n	800993e <_malloc_r+0xea>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	442b      	add	r3, r5
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	f8d8 3000 	ldr.w	r3, [r8]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	bb62      	cbnz	r2, 8009930 <_malloc_r+0xdc>
 80098d6:	f8c8 7000 	str.w	r7, [r8]
 80098da:	e00f      	b.n	80098fc <_malloc_r+0xa8>
 80098dc:	6822      	ldr	r2, [r4, #0]
 80098de:	1b52      	subs	r2, r2, r5
 80098e0:	d420      	bmi.n	8009924 <_malloc_r+0xd0>
 80098e2:	2a0b      	cmp	r2, #11
 80098e4:	d917      	bls.n	8009916 <_malloc_r+0xc2>
 80098e6:	1961      	adds	r1, r4, r5
 80098e8:	42a3      	cmp	r3, r4
 80098ea:	6025      	str	r5, [r4, #0]
 80098ec:	bf18      	it	ne
 80098ee:	6059      	strne	r1, [r3, #4]
 80098f0:	6863      	ldr	r3, [r4, #4]
 80098f2:	bf08      	it	eq
 80098f4:	f8c8 1000 	streq.w	r1, [r8]
 80098f8:	5162      	str	r2, [r4, r5]
 80098fa:	604b      	str	r3, [r1, #4]
 80098fc:	4630      	mov	r0, r6
 80098fe:	f000 f841 	bl	8009984 <__malloc_unlock>
 8009902:	f104 000b 	add.w	r0, r4, #11
 8009906:	1d23      	adds	r3, r4, #4
 8009908:	f020 0007 	bic.w	r0, r0, #7
 800990c:	1ac2      	subs	r2, r0, r3
 800990e:	bf1c      	itt	ne
 8009910:	1a1b      	subne	r3, r3, r0
 8009912:	50a3      	strne	r3, [r4, r2]
 8009914:	e7af      	b.n	8009876 <_malloc_r+0x22>
 8009916:	6862      	ldr	r2, [r4, #4]
 8009918:	42a3      	cmp	r3, r4
 800991a:	bf0c      	ite	eq
 800991c:	f8c8 2000 	streq.w	r2, [r8]
 8009920:	605a      	strne	r2, [r3, #4]
 8009922:	e7eb      	b.n	80098fc <_malloc_r+0xa8>
 8009924:	4623      	mov	r3, r4
 8009926:	6864      	ldr	r4, [r4, #4]
 8009928:	e7ae      	b.n	8009888 <_malloc_r+0x34>
 800992a:	463c      	mov	r4, r7
 800992c:	687f      	ldr	r7, [r7, #4]
 800992e:	e7b6      	b.n	800989e <_malloc_r+0x4a>
 8009930:	461a      	mov	r2, r3
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	42a3      	cmp	r3, r4
 8009936:	d1fb      	bne.n	8009930 <_malloc_r+0xdc>
 8009938:	2300      	movs	r3, #0
 800993a:	6053      	str	r3, [r2, #4]
 800993c:	e7de      	b.n	80098fc <_malloc_r+0xa8>
 800993e:	230c      	movs	r3, #12
 8009940:	6033      	str	r3, [r6, #0]
 8009942:	4630      	mov	r0, r6
 8009944:	f000 f81e 	bl	8009984 <__malloc_unlock>
 8009948:	e794      	b.n	8009874 <_malloc_r+0x20>
 800994a:	6005      	str	r5, [r0, #0]
 800994c:	e7d6      	b.n	80098fc <_malloc_r+0xa8>
 800994e:	bf00      	nop
 8009950:	20000600 	.word	0x20000600

08009954 <__ascii_mbtowc>:
 8009954:	b082      	sub	sp, #8
 8009956:	b901      	cbnz	r1, 800995a <__ascii_mbtowc+0x6>
 8009958:	a901      	add	r1, sp, #4
 800995a:	b142      	cbz	r2, 800996e <__ascii_mbtowc+0x1a>
 800995c:	b14b      	cbz	r3, 8009972 <__ascii_mbtowc+0x1e>
 800995e:	7813      	ldrb	r3, [r2, #0]
 8009960:	600b      	str	r3, [r1, #0]
 8009962:	7812      	ldrb	r2, [r2, #0]
 8009964:	1e10      	subs	r0, r2, #0
 8009966:	bf18      	it	ne
 8009968:	2001      	movne	r0, #1
 800996a:	b002      	add	sp, #8
 800996c:	4770      	bx	lr
 800996e:	4610      	mov	r0, r2
 8009970:	e7fb      	b.n	800996a <__ascii_mbtowc+0x16>
 8009972:	f06f 0001 	mvn.w	r0, #1
 8009976:	e7f8      	b.n	800996a <__ascii_mbtowc+0x16>

08009978 <__malloc_lock>:
 8009978:	4801      	ldr	r0, [pc, #4]	@ (8009980 <__malloc_lock+0x8>)
 800997a:	f7fe bd4e 	b.w	800841a <__retarget_lock_acquire_recursive>
 800997e:	bf00      	nop
 8009980:	200005f8 	.word	0x200005f8

08009984 <__malloc_unlock>:
 8009984:	4801      	ldr	r0, [pc, #4]	@ (800998c <__malloc_unlock+0x8>)
 8009986:	f7fe bd49 	b.w	800841c <__retarget_lock_release_recursive>
 800998a:	bf00      	nop
 800998c:	200005f8 	.word	0x200005f8

08009990 <_Balloc>:
 8009990:	b570      	push	{r4, r5, r6, lr}
 8009992:	69c6      	ldr	r6, [r0, #28]
 8009994:	4604      	mov	r4, r0
 8009996:	460d      	mov	r5, r1
 8009998:	b976      	cbnz	r6, 80099b8 <_Balloc+0x28>
 800999a:	2010      	movs	r0, #16
 800999c:	f7ff ff30 	bl	8009800 <malloc>
 80099a0:	4602      	mov	r2, r0
 80099a2:	61e0      	str	r0, [r4, #28]
 80099a4:	b920      	cbnz	r0, 80099b0 <_Balloc+0x20>
 80099a6:	4b18      	ldr	r3, [pc, #96]	@ (8009a08 <_Balloc+0x78>)
 80099a8:	4818      	ldr	r0, [pc, #96]	@ (8009a0c <_Balloc+0x7c>)
 80099aa:	216b      	movs	r1, #107	@ 0x6b
 80099ac:	f000 fedc 	bl	800a768 <__assert_func>
 80099b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099b4:	6006      	str	r6, [r0, #0]
 80099b6:	60c6      	str	r6, [r0, #12]
 80099b8:	69e6      	ldr	r6, [r4, #28]
 80099ba:	68f3      	ldr	r3, [r6, #12]
 80099bc:	b183      	cbz	r3, 80099e0 <_Balloc+0x50>
 80099be:	69e3      	ldr	r3, [r4, #28]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099c6:	b9b8      	cbnz	r0, 80099f8 <_Balloc+0x68>
 80099c8:	2101      	movs	r1, #1
 80099ca:	fa01 f605 	lsl.w	r6, r1, r5
 80099ce:	1d72      	adds	r2, r6, #5
 80099d0:	0092      	lsls	r2, r2, #2
 80099d2:	4620      	mov	r0, r4
 80099d4:	f000 fee6 	bl	800a7a4 <_calloc_r>
 80099d8:	b160      	cbz	r0, 80099f4 <_Balloc+0x64>
 80099da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099de:	e00e      	b.n	80099fe <_Balloc+0x6e>
 80099e0:	2221      	movs	r2, #33	@ 0x21
 80099e2:	2104      	movs	r1, #4
 80099e4:	4620      	mov	r0, r4
 80099e6:	f000 fedd 	bl	800a7a4 <_calloc_r>
 80099ea:	69e3      	ldr	r3, [r4, #28]
 80099ec:	60f0      	str	r0, [r6, #12]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e4      	bne.n	80099be <_Balloc+0x2e>
 80099f4:	2000      	movs	r0, #0
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	6802      	ldr	r2, [r0, #0]
 80099fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099fe:	2300      	movs	r3, #0
 8009a00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a04:	e7f7      	b.n	80099f6 <_Balloc+0x66>
 8009a06:	bf00      	nop
 8009a08:	0800af49 	.word	0x0800af49
 8009a0c:	0800b029 	.word	0x0800b029

08009a10 <_Bfree>:
 8009a10:	b570      	push	{r4, r5, r6, lr}
 8009a12:	69c6      	ldr	r6, [r0, #28]
 8009a14:	4605      	mov	r5, r0
 8009a16:	460c      	mov	r4, r1
 8009a18:	b976      	cbnz	r6, 8009a38 <_Bfree+0x28>
 8009a1a:	2010      	movs	r0, #16
 8009a1c:	f7ff fef0 	bl	8009800 <malloc>
 8009a20:	4602      	mov	r2, r0
 8009a22:	61e8      	str	r0, [r5, #28]
 8009a24:	b920      	cbnz	r0, 8009a30 <_Bfree+0x20>
 8009a26:	4b09      	ldr	r3, [pc, #36]	@ (8009a4c <_Bfree+0x3c>)
 8009a28:	4809      	ldr	r0, [pc, #36]	@ (8009a50 <_Bfree+0x40>)
 8009a2a:	218f      	movs	r1, #143	@ 0x8f
 8009a2c:	f000 fe9c 	bl	800a768 <__assert_func>
 8009a30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a34:	6006      	str	r6, [r0, #0]
 8009a36:	60c6      	str	r6, [r0, #12]
 8009a38:	b13c      	cbz	r4, 8009a4a <_Bfree+0x3a>
 8009a3a:	69eb      	ldr	r3, [r5, #28]
 8009a3c:	6862      	ldr	r2, [r4, #4]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a44:	6021      	str	r1, [r4, #0]
 8009a46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a4a:	bd70      	pop	{r4, r5, r6, pc}
 8009a4c:	0800af49 	.word	0x0800af49
 8009a50:	0800b029 	.word	0x0800b029

08009a54 <__multadd>:
 8009a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a58:	690d      	ldr	r5, [r1, #16]
 8009a5a:	4607      	mov	r7, r0
 8009a5c:	460c      	mov	r4, r1
 8009a5e:	461e      	mov	r6, r3
 8009a60:	f101 0c14 	add.w	ip, r1, #20
 8009a64:	2000      	movs	r0, #0
 8009a66:	f8dc 3000 	ldr.w	r3, [ip]
 8009a6a:	b299      	uxth	r1, r3
 8009a6c:	fb02 6101 	mla	r1, r2, r1, r6
 8009a70:	0c1e      	lsrs	r6, r3, #16
 8009a72:	0c0b      	lsrs	r3, r1, #16
 8009a74:	fb02 3306 	mla	r3, r2, r6, r3
 8009a78:	b289      	uxth	r1, r1
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a80:	4285      	cmp	r5, r0
 8009a82:	f84c 1b04 	str.w	r1, [ip], #4
 8009a86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a8a:	dcec      	bgt.n	8009a66 <__multadd+0x12>
 8009a8c:	b30e      	cbz	r6, 8009ad2 <__multadd+0x7e>
 8009a8e:	68a3      	ldr	r3, [r4, #8]
 8009a90:	42ab      	cmp	r3, r5
 8009a92:	dc19      	bgt.n	8009ac8 <__multadd+0x74>
 8009a94:	6861      	ldr	r1, [r4, #4]
 8009a96:	4638      	mov	r0, r7
 8009a98:	3101      	adds	r1, #1
 8009a9a:	f7ff ff79 	bl	8009990 <_Balloc>
 8009a9e:	4680      	mov	r8, r0
 8009aa0:	b928      	cbnz	r0, 8009aae <__multadd+0x5a>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad8 <__multadd+0x84>)
 8009aa6:	480d      	ldr	r0, [pc, #52]	@ (8009adc <__multadd+0x88>)
 8009aa8:	21ba      	movs	r1, #186	@ 0xba
 8009aaa:	f000 fe5d 	bl	800a768 <__assert_func>
 8009aae:	6922      	ldr	r2, [r4, #16]
 8009ab0:	3202      	adds	r2, #2
 8009ab2:	f104 010c 	add.w	r1, r4, #12
 8009ab6:	0092      	lsls	r2, r2, #2
 8009ab8:	300c      	adds	r0, #12
 8009aba:	f7fe fcb0 	bl	800841e <memcpy>
 8009abe:	4621      	mov	r1, r4
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	f7ff ffa5 	bl	8009a10 <_Bfree>
 8009ac6:	4644      	mov	r4, r8
 8009ac8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009acc:	3501      	adds	r5, #1
 8009ace:	615e      	str	r6, [r3, #20]
 8009ad0:	6125      	str	r5, [r4, #16]
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad8:	0800afb8 	.word	0x0800afb8
 8009adc:	0800b029 	.word	0x0800b029

08009ae0 <__s2b>:
 8009ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ae4:	460c      	mov	r4, r1
 8009ae6:	4615      	mov	r5, r2
 8009ae8:	461f      	mov	r7, r3
 8009aea:	2209      	movs	r2, #9
 8009aec:	3308      	adds	r3, #8
 8009aee:	4606      	mov	r6, r0
 8009af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009af4:	2100      	movs	r1, #0
 8009af6:	2201      	movs	r2, #1
 8009af8:	429a      	cmp	r2, r3
 8009afa:	db09      	blt.n	8009b10 <__s2b+0x30>
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7ff ff47 	bl	8009990 <_Balloc>
 8009b02:	b940      	cbnz	r0, 8009b16 <__s2b+0x36>
 8009b04:	4602      	mov	r2, r0
 8009b06:	4b19      	ldr	r3, [pc, #100]	@ (8009b6c <__s2b+0x8c>)
 8009b08:	4819      	ldr	r0, [pc, #100]	@ (8009b70 <__s2b+0x90>)
 8009b0a:	21d3      	movs	r1, #211	@ 0xd3
 8009b0c:	f000 fe2c 	bl	800a768 <__assert_func>
 8009b10:	0052      	lsls	r2, r2, #1
 8009b12:	3101      	adds	r1, #1
 8009b14:	e7f0      	b.n	8009af8 <__s2b+0x18>
 8009b16:	9b08      	ldr	r3, [sp, #32]
 8009b18:	6143      	str	r3, [r0, #20]
 8009b1a:	2d09      	cmp	r5, #9
 8009b1c:	f04f 0301 	mov.w	r3, #1
 8009b20:	6103      	str	r3, [r0, #16]
 8009b22:	dd16      	ble.n	8009b52 <__s2b+0x72>
 8009b24:	f104 0909 	add.w	r9, r4, #9
 8009b28:	46c8      	mov	r8, r9
 8009b2a:	442c      	add	r4, r5
 8009b2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b30:	4601      	mov	r1, r0
 8009b32:	3b30      	subs	r3, #48	@ 0x30
 8009b34:	220a      	movs	r2, #10
 8009b36:	4630      	mov	r0, r6
 8009b38:	f7ff ff8c 	bl	8009a54 <__multadd>
 8009b3c:	45a0      	cmp	r8, r4
 8009b3e:	d1f5      	bne.n	8009b2c <__s2b+0x4c>
 8009b40:	f1a5 0408 	sub.w	r4, r5, #8
 8009b44:	444c      	add	r4, r9
 8009b46:	1b2d      	subs	r5, r5, r4
 8009b48:	1963      	adds	r3, r4, r5
 8009b4a:	42bb      	cmp	r3, r7
 8009b4c:	db04      	blt.n	8009b58 <__s2b+0x78>
 8009b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b52:	340a      	adds	r4, #10
 8009b54:	2509      	movs	r5, #9
 8009b56:	e7f6      	b.n	8009b46 <__s2b+0x66>
 8009b58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b5c:	4601      	mov	r1, r0
 8009b5e:	3b30      	subs	r3, #48	@ 0x30
 8009b60:	220a      	movs	r2, #10
 8009b62:	4630      	mov	r0, r6
 8009b64:	f7ff ff76 	bl	8009a54 <__multadd>
 8009b68:	e7ee      	b.n	8009b48 <__s2b+0x68>
 8009b6a:	bf00      	nop
 8009b6c:	0800afb8 	.word	0x0800afb8
 8009b70:	0800b029 	.word	0x0800b029

08009b74 <__hi0bits>:
 8009b74:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009b78:	4603      	mov	r3, r0
 8009b7a:	bf36      	itet	cc
 8009b7c:	0403      	lslcc	r3, r0, #16
 8009b7e:	2000      	movcs	r0, #0
 8009b80:	2010      	movcc	r0, #16
 8009b82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b86:	bf3c      	itt	cc
 8009b88:	021b      	lslcc	r3, r3, #8
 8009b8a:	3008      	addcc	r0, #8
 8009b8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b90:	bf3c      	itt	cc
 8009b92:	011b      	lslcc	r3, r3, #4
 8009b94:	3004      	addcc	r0, #4
 8009b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b9a:	bf3c      	itt	cc
 8009b9c:	009b      	lslcc	r3, r3, #2
 8009b9e:	3002      	addcc	r0, #2
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	db05      	blt.n	8009bb0 <__hi0bits+0x3c>
 8009ba4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ba8:	f100 0001 	add.w	r0, r0, #1
 8009bac:	bf08      	it	eq
 8009bae:	2020      	moveq	r0, #32
 8009bb0:	4770      	bx	lr

08009bb2 <__lo0bits>:
 8009bb2:	6803      	ldr	r3, [r0, #0]
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	f013 0007 	ands.w	r0, r3, #7
 8009bba:	d00b      	beq.n	8009bd4 <__lo0bits+0x22>
 8009bbc:	07d9      	lsls	r1, r3, #31
 8009bbe:	d421      	bmi.n	8009c04 <__lo0bits+0x52>
 8009bc0:	0798      	lsls	r0, r3, #30
 8009bc2:	bf49      	itett	mi
 8009bc4:	085b      	lsrmi	r3, r3, #1
 8009bc6:	089b      	lsrpl	r3, r3, #2
 8009bc8:	2001      	movmi	r0, #1
 8009bca:	6013      	strmi	r3, [r2, #0]
 8009bcc:	bf5c      	itt	pl
 8009bce:	6013      	strpl	r3, [r2, #0]
 8009bd0:	2002      	movpl	r0, #2
 8009bd2:	4770      	bx	lr
 8009bd4:	b299      	uxth	r1, r3
 8009bd6:	b909      	cbnz	r1, 8009bdc <__lo0bits+0x2a>
 8009bd8:	0c1b      	lsrs	r3, r3, #16
 8009bda:	2010      	movs	r0, #16
 8009bdc:	b2d9      	uxtb	r1, r3
 8009bde:	b909      	cbnz	r1, 8009be4 <__lo0bits+0x32>
 8009be0:	3008      	adds	r0, #8
 8009be2:	0a1b      	lsrs	r3, r3, #8
 8009be4:	0719      	lsls	r1, r3, #28
 8009be6:	bf04      	itt	eq
 8009be8:	091b      	lsreq	r3, r3, #4
 8009bea:	3004      	addeq	r0, #4
 8009bec:	0799      	lsls	r1, r3, #30
 8009bee:	bf04      	itt	eq
 8009bf0:	089b      	lsreq	r3, r3, #2
 8009bf2:	3002      	addeq	r0, #2
 8009bf4:	07d9      	lsls	r1, r3, #31
 8009bf6:	d403      	bmi.n	8009c00 <__lo0bits+0x4e>
 8009bf8:	085b      	lsrs	r3, r3, #1
 8009bfa:	f100 0001 	add.w	r0, r0, #1
 8009bfe:	d003      	beq.n	8009c08 <__lo0bits+0x56>
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	4770      	bx	lr
 8009c04:	2000      	movs	r0, #0
 8009c06:	4770      	bx	lr
 8009c08:	2020      	movs	r0, #32
 8009c0a:	4770      	bx	lr

08009c0c <__i2b>:
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	460c      	mov	r4, r1
 8009c10:	2101      	movs	r1, #1
 8009c12:	f7ff febd 	bl	8009990 <_Balloc>
 8009c16:	4602      	mov	r2, r0
 8009c18:	b928      	cbnz	r0, 8009c26 <__i2b+0x1a>
 8009c1a:	4b05      	ldr	r3, [pc, #20]	@ (8009c30 <__i2b+0x24>)
 8009c1c:	4805      	ldr	r0, [pc, #20]	@ (8009c34 <__i2b+0x28>)
 8009c1e:	f240 1145 	movw	r1, #325	@ 0x145
 8009c22:	f000 fda1 	bl	800a768 <__assert_func>
 8009c26:	2301      	movs	r3, #1
 8009c28:	6144      	str	r4, [r0, #20]
 8009c2a:	6103      	str	r3, [r0, #16]
 8009c2c:	bd10      	pop	{r4, pc}
 8009c2e:	bf00      	nop
 8009c30:	0800afb8 	.word	0x0800afb8
 8009c34:	0800b029 	.word	0x0800b029

08009c38 <__multiply>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	4614      	mov	r4, r2
 8009c3e:	690a      	ldr	r2, [r1, #16]
 8009c40:	6923      	ldr	r3, [r4, #16]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	bfa8      	it	ge
 8009c46:	4623      	movge	r3, r4
 8009c48:	460f      	mov	r7, r1
 8009c4a:	bfa4      	itt	ge
 8009c4c:	460c      	movge	r4, r1
 8009c4e:	461f      	movge	r7, r3
 8009c50:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009c54:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009c58:	68a3      	ldr	r3, [r4, #8]
 8009c5a:	6861      	ldr	r1, [r4, #4]
 8009c5c:	eb0a 0609 	add.w	r6, sl, r9
 8009c60:	42b3      	cmp	r3, r6
 8009c62:	b085      	sub	sp, #20
 8009c64:	bfb8      	it	lt
 8009c66:	3101      	addlt	r1, #1
 8009c68:	f7ff fe92 	bl	8009990 <_Balloc>
 8009c6c:	b930      	cbnz	r0, 8009c7c <__multiply+0x44>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	4b44      	ldr	r3, [pc, #272]	@ (8009d84 <__multiply+0x14c>)
 8009c72:	4845      	ldr	r0, [pc, #276]	@ (8009d88 <__multiply+0x150>)
 8009c74:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009c78:	f000 fd76 	bl	800a768 <__assert_func>
 8009c7c:	f100 0514 	add.w	r5, r0, #20
 8009c80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c84:	462b      	mov	r3, r5
 8009c86:	2200      	movs	r2, #0
 8009c88:	4543      	cmp	r3, r8
 8009c8a:	d321      	bcc.n	8009cd0 <__multiply+0x98>
 8009c8c:	f107 0114 	add.w	r1, r7, #20
 8009c90:	f104 0214 	add.w	r2, r4, #20
 8009c94:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009c98:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009c9c:	9302      	str	r3, [sp, #8]
 8009c9e:	1b13      	subs	r3, r2, r4
 8009ca0:	3b15      	subs	r3, #21
 8009ca2:	f023 0303 	bic.w	r3, r3, #3
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	f104 0715 	add.w	r7, r4, #21
 8009cac:	42ba      	cmp	r2, r7
 8009cae:	bf38      	it	cc
 8009cb0:	2304      	movcc	r3, #4
 8009cb2:	9301      	str	r3, [sp, #4]
 8009cb4:	9b02      	ldr	r3, [sp, #8]
 8009cb6:	9103      	str	r1, [sp, #12]
 8009cb8:	428b      	cmp	r3, r1
 8009cba:	d80c      	bhi.n	8009cd6 <__multiply+0x9e>
 8009cbc:	2e00      	cmp	r6, #0
 8009cbe:	dd03      	ble.n	8009cc8 <__multiply+0x90>
 8009cc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d05b      	beq.n	8009d80 <__multiply+0x148>
 8009cc8:	6106      	str	r6, [r0, #16]
 8009cca:	b005      	add	sp, #20
 8009ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd0:	f843 2b04 	str.w	r2, [r3], #4
 8009cd4:	e7d8      	b.n	8009c88 <__multiply+0x50>
 8009cd6:	f8b1 a000 	ldrh.w	sl, [r1]
 8009cda:	f1ba 0f00 	cmp.w	sl, #0
 8009cde:	d024      	beq.n	8009d2a <__multiply+0xf2>
 8009ce0:	f104 0e14 	add.w	lr, r4, #20
 8009ce4:	46a9      	mov	r9, r5
 8009ce6:	f04f 0c00 	mov.w	ip, #0
 8009cea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009cee:	f8d9 3000 	ldr.w	r3, [r9]
 8009cf2:	fa1f fb87 	uxth.w	fp, r7
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	fb0a 330b 	mla	r3, sl, fp, r3
 8009cfc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009d00:	f8d9 7000 	ldr.w	r7, [r9]
 8009d04:	4463      	add	r3, ip
 8009d06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d0a:	fb0a c70b 	mla	r7, sl, fp, ip
 8009d0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d18:	4572      	cmp	r2, lr
 8009d1a:	f849 3b04 	str.w	r3, [r9], #4
 8009d1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d22:	d8e2      	bhi.n	8009cea <__multiply+0xb2>
 8009d24:	9b01      	ldr	r3, [sp, #4]
 8009d26:	f845 c003 	str.w	ip, [r5, r3]
 8009d2a:	9b03      	ldr	r3, [sp, #12]
 8009d2c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d30:	3104      	adds	r1, #4
 8009d32:	f1b9 0f00 	cmp.w	r9, #0
 8009d36:	d021      	beq.n	8009d7c <__multiply+0x144>
 8009d38:	682b      	ldr	r3, [r5, #0]
 8009d3a:	f104 0c14 	add.w	ip, r4, #20
 8009d3e:	46ae      	mov	lr, r5
 8009d40:	f04f 0a00 	mov.w	sl, #0
 8009d44:	f8bc b000 	ldrh.w	fp, [ip]
 8009d48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009d4c:	fb09 770b 	mla	r7, r9, fp, r7
 8009d50:	4457      	add	r7, sl
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d58:	f84e 3b04 	str.w	r3, [lr], #4
 8009d5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d64:	f8be 3000 	ldrh.w	r3, [lr]
 8009d68:	fb09 330a 	mla	r3, r9, sl, r3
 8009d6c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009d70:	4562      	cmp	r2, ip
 8009d72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d76:	d8e5      	bhi.n	8009d44 <__multiply+0x10c>
 8009d78:	9f01      	ldr	r7, [sp, #4]
 8009d7a:	51eb      	str	r3, [r5, r7]
 8009d7c:	3504      	adds	r5, #4
 8009d7e:	e799      	b.n	8009cb4 <__multiply+0x7c>
 8009d80:	3e01      	subs	r6, #1
 8009d82:	e79b      	b.n	8009cbc <__multiply+0x84>
 8009d84:	0800afb8 	.word	0x0800afb8
 8009d88:	0800b029 	.word	0x0800b029

08009d8c <__pow5mult>:
 8009d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d90:	4615      	mov	r5, r2
 8009d92:	f012 0203 	ands.w	r2, r2, #3
 8009d96:	4607      	mov	r7, r0
 8009d98:	460e      	mov	r6, r1
 8009d9a:	d007      	beq.n	8009dac <__pow5mult+0x20>
 8009d9c:	4c25      	ldr	r4, [pc, #148]	@ (8009e34 <__pow5mult+0xa8>)
 8009d9e:	3a01      	subs	r2, #1
 8009da0:	2300      	movs	r3, #0
 8009da2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009da6:	f7ff fe55 	bl	8009a54 <__multadd>
 8009daa:	4606      	mov	r6, r0
 8009dac:	10ad      	asrs	r5, r5, #2
 8009dae:	d03d      	beq.n	8009e2c <__pow5mult+0xa0>
 8009db0:	69fc      	ldr	r4, [r7, #28]
 8009db2:	b97c      	cbnz	r4, 8009dd4 <__pow5mult+0x48>
 8009db4:	2010      	movs	r0, #16
 8009db6:	f7ff fd23 	bl	8009800 <malloc>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	61f8      	str	r0, [r7, #28]
 8009dbe:	b928      	cbnz	r0, 8009dcc <__pow5mult+0x40>
 8009dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8009e38 <__pow5mult+0xac>)
 8009dc2:	481e      	ldr	r0, [pc, #120]	@ (8009e3c <__pow5mult+0xb0>)
 8009dc4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009dc8:	f000 fcce 	bl	800a768 <__assert_func>
 8009dcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009dd0:	6004      	str	r4, [r0, #0]
 8009dd2:	60c4      	str	r4, [r0, #12]
 8009dd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009dd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ddc:	b94c      	cbnz	r4, 8009df2 <__pow5mult+0x66>
 8009dde:	f240 2171 	movw	r1, #625	@ 0x271
 8009de2:	4638      	mov	r0, r7
 8009de4:	f7ff ff12 	bl	8009c0c <__i2b>
 8009de8:	2300      	movs	r3, #0
 8009dea:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dee:	4604      	mov	r4, r0
 8009df0:	6003      	str	r3, [r0, #0]
 8009df2:	f04f 0900 	mov.w	r9, #0
 8009df6:	07eb      	lsls	r3, r5, #31
 8009df8:	d50a      	bpl.n	8009e10 <__pow5mult+0x84>
 8009dfa:	4631      	mov	r1, r6
 8009dfc:	4622      	mov	r2, r4
 8009dfe:	4638      	mov	r0, r7
 8009e00:	f7ff ff1a 	bl	8009c38 <__multiply>
 8009e04:	4631      	mov	r1, r6
 8009e06:	4680      	mov	r8, r0
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f7ff fe01 	bl	8009a10 <_Bfree>
 8009e0e:	4646      	mov	r6, r8
 8009e10:	106d      	asrs	r5, r5, #1
 8009e12:	d00b      	beq.n	8009e2c <__pow5mult+0xa0>
 8009e14:	6820      	ldr	r0, [r4, #0]
 8009e16:	b938      	cbnz	r0, 8009e28 <__pow5mult+0x9c>
 8009e18:	4622      	mov	r2, r4
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	f7ff ff0b 	bl	8009c38 <__multiply>
 8009e22:	6020      	str	r0, [r4, #0]
 8009e24:	f8c0 9000 	str.w	r9, [r0]
 8009e28:	4604      	mov	r4, r0
 8009e2a:	e7e4      	b.n	8009df6 <__pow5mult+0x6a>
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e32:	bf00      	nop
 8009e34:	0800b084 	.word	0x0800b084
 8009e38:	0800af49 	.word	0x0800af49
 8009e3c:	0800b029 	.word	0x0800b029

08009e40 <__lshift>:
 8009e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e44:	460c      	mov	r4, r1
 8009e46:	6849      	ldr	r1, [r1, #4]
 8009e48:	6923      	ldr	r3, [r4, #16]
 8009e4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e4e:	68a3      	ldr	r3, [r4, #8]
 8009e50:	4607      	mov	r7, r0
 8009e52:	4691      	mov	r9, r2
 8009e54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e58:	f108 0601 	add.w	r6, r8, #1
 8009e5c:	42b3      	cmp	r3, r6
 8009e5e:	db0b      	blt.n	8009e78 <__lshift+0x38>
 8009e60:	4638      	mov	r0, r7
 8009e62:	f7ff fd95 	bl	8009990 <_Balloc>
 8009e66:	4605      	mov	r5, r0
 8009e68:	b948      	cbnz	r0, 8009e7e <__lshift+0x3e>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	4b28      	ldr	r3, [pc, #160]	@ (8009f10 <__lshift+0xd0>)
 8009e6e:	4829      	ldr	r0, [pc, #164]	@ (8009f14 <__lshift+0xd4>)
 8009e70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e74:	f000 fc78 	bl	800a768 <__assert_func>
 8009e78:	3101      	adds	r1, #1
 8009e7a:	005b      	lsls	r3, r3, #1
 8009e7c:	e7ee      	b.n	8009e5c <__lshift+0x1c>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f100 0114 	add.w	r1, r0, #20
 8009e84:	f100 0210 	add.w	r2, r0, #16
 8009e88:	4618      	mov	r0, r3
 8009e8a:	4553      	cmp	r3, sl
 8009e8c:	db33      	blt.n	8009ef6 <__lshift+0xb6>
 8009e8e:	6920      	ldr	r0, [r4, #16]
 8009e90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e94:	f104 0314 	add.w	r3, r4, #20
 8009e98:	f019 091f 	ands.w	r9, r9, #31
 8009e9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ea0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ea4:	d02b      	beq.n	8009efe <__lshift+0xbe>
 8009ea6:	f1c9 0e20 	rsb	lr, r9, #32
 8009eaa:	468a      	mov	sl, r1
 8009eac:	2200      	movs	r2, #0
 8009eae:	6818      	ldr	r0, [r3, #0]
 8009eb0:	fa00 f009 	lsl.w	r0, r0, r9
 8009eb4:	4310      	orrs	r0, r2
 8009eb6:	f84a 0b04 	str.w	r0, [sl], #4
 8009eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ebe:	459c      	cmp	ip, r3
 8009ec0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ec4:	d8f3      	bhi.n	8009eae <__lshift+0x6e>
 8009ec6:	ebac 0304 	sub.w	r3, ip, r4
 8009eca:	3b15      	subs	r3, #21
 8009ecc:	f023 0303 	bic.w	r3, r3, #3
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	f104 0015 	add.w	r0, r4, #21
 8009ed6:	4584      	cmp	ip, r0
 8009ed8:	bf38      	it	cc
 8009eda:	2304      	movcc	r3, #4
 8009edc:	50ca      	str	r2, [r1, r3]
 8009ede:	b10a      	cbz	r2, 8009ee4 <__lshift+0xa4>
 8009ee0:	f108 0602 	add.w	r6, r8, #2
 8009ee4:	3e01      	subs	r6, #1
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	612e      	str	r6, [r5, #16]
 8009eea:	4621      	mov	r1, r4
 8009eec:	f7ff fd90 	bl	8009a10 <_Bfree>
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009efa:	3301      	adds	r3, #1
 8009efc:	e7c5      	b.n	8009e8a <__lshift+0x4a>
 8009efe:	3904      	subs	r1, #4
 8009f00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f04:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f08:	459c      	cmp	ip, r3
 8009f0a:	d8f9      	bhi.n	8009f00 <__lshift+0xc0>
 8009f0c:	e7ea      	b.n	8009ee4 <__lshift+0xa4>
 8009f0e:	bf00      	nop
 8009f10:	0800afb8 	.word	0x0800afb8
 8009f14:	0800b029 	.word	0x0800b029

08009f18 <__mcmp>:
 8009f18:	690a      	ldr	r2, [r1, #16]
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	6900      	ldr	r0, [r0, #16]
 8009f1e:	1a80      	subs	r0, r0, r2
 8009f20:	b530      	push	{r4, r5, lr}
 8009f22:	d10e      	bne.n	8009f42 <__mcmp+0x2a>
 8009f24:	3314      	adds	r3, #20
 8009f26:	3114      	adds	r1, #20
 8009f28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f38:	4295      	cmp	r5, r2
 8009f3a:	d003      	beq.n	8009f44 <__mcmp+0x2c>
 8009f3c:	d205      	bcs.n	8009f4a <__mcmp+0x32>
 8009f3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f42:	bd30      	pop	{r4, r5, pc}
 8009f44:	42a3      	cmp	r3, r4
 8009f46:	d3f3      	bcc.n	8009f30 <__mcmp+0x18>
 8009f48:	e7fb      	b.n	8009f42 <__mcmp+0x2a>
 8009f4a:	2001      	movs	r0, #1
 8009f4c:	e7f9      	b.n	8009f42 <__mcmp+0x2a>
	...

08009f50 <__mdiff>:
 8009f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f54:	4689      	mov	r9, r1
 8009f56:	4606      	mov	r6, r0
 8009f58:	4611      	mov	r1, r2
 8009f5a:	4648      	mov	r0, r9
 8009f5c:	4614      	mov	r4, r2
 8009f5e:	f7ff ffdb 	bl	8009f18 <__mcmp>
 8009f62:	1e05      	subs	r5, r0, #0
 8009f64:	d112      	bne.n	8009f8c <__mdiff+0x3c>
 8009f66:	4629      	mov	r1, r5
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f7ff fd11 	bl	8009990 <_Balloc>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	b928      	cbnz	r0, 8009f7e <__mdiff+0x2e>
 8009f72:	4b3f      	ldr	r3, [pc, #252]	@ (800a070 <__mdiff+0x120>)
 8009f74:	f240 2137 	movw	r1, #567	@ 0x237
 8009f78:	483e      	ldr	r0, [pc, #248]	@ (800a074 <__mdiff+0x124>)
 8009f7a:	f000 fbf5 	bl	800a768 <__assert_func>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f84:	4610      	mov	r0, r2
 8009f86:	b003      	add	sp, #12
 8009f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8c:	bfbc      	itt	lt
 8009f8e:	464b      	movlt	r3, r9
 8009f90:	46a1      	movlt	r9, r4
 8009f92:	4630      	mov	r0, r6
 8009f94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009f98:	bfba      	itte	lt
 8009f9a:	461c      	movlt	r4, r3
 8009f9c:	2501      	movlt	r5, #1
 8009f9e:	2500      	movge	r5, #0
 8009fa0:	f7ff fcf6 	bl	8009990 <_Balloc>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	b918      	cbnz	r0, 8009fb0 <__mdiff+0x60>
 8009fa8:	4b31      	ldr	r3, [pc, #196]	@ (800a070 <__mdiff+0x120>)
 8009faa:	f240 2145 	movw	r1, #581	@ 0x245
 8009fae:	e7e3      	b.n	8009f78 <__mdiff+0x28>
 8009fb0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009fb4:	6926      	ldr	r6, [r4, #16]
 8009fb6:	60c5      	str	r5, [r0, #12]
 8009fb8:	f109 0310 	add.w	r3, r9, #16
 8009fbc:	f109 0514 	add.w	r5, r9, #20
 8009fc0:	f104 0e14 	add.w	lr, r4, #20
 8009fc4:	f100 0b14 	add.w	fp, r0, #20
 8009fc8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009fcc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	46d9      	mov	r9, fp
 8009fd4:	f04f 0c00 	mov.w	ip, #0
 8009fd8:	9b01      	ldr	r3, [sp, #4]
 8009fda:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009fde:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009fe2:	9301      	str	r3, [sp, #4]
 8009fe4:	fa1f f38a 	uxth.w	r3, sl
 8009fe8:	4619      	mov	r1, r3
 8009fea:	b283      	uxth	r3, r0
 8009fec:	1acb      	subs	r3, r1, r3
 8009fee:	0c00      	lsrs	r0, r0, #16
 8009ff0:	4463      	add	r3, ip
 8009ff2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009ff6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a000:	4576      	cmp	r6, lr
 800a002:	f849 3b04 	str.w	r3, [r9], #4
 800a006:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a00a:	d8e5      	bhi.n	8009fd8 <__mdiff+0x88>
 800a00c:	1b33      	subs	r3, r6, r4
 800a00e:	3b15      	subs	r3, #21
 800a010:	f023 0303 	bic.w	r3, r3, #3
 800a014:	3415      	adds	r4, #21
 800a016:	3304      	adds	r3, #4
 800a018:	42a6      	cmp	r6, r4
 800a01a:	bf38      	it	cc
 800a01c:	2304      	movcc	r3, #4
 800a01e:	441d      	add	r5, r3
 800a020:	445b      	add	r3, fp
 800a022:	461e      	mov	r6, r3
 800a024:	462c      	mov	r4, r5
 800a026:	4544      	cmp	r4, r8
 800a028:	d30e      	bcc.n	800a048 <__mdiff+0xf8>
 800a02a:	f108 0103 	add.w	r1, r8, #3
 800a02e:	1b49      	subs	r1, r1, r5
 800a030:	f021 0103 	bic.w	r1, r1, #3
 800a034:	3d03      	subs	r5, #3
 800a036:	45a8      	cmp	r8, r5
 800a038:	bf38      	it	cc
 800a03a:	2100      	movcc	r1, #0
 800a03c:	440b      	add	r3, r1
 800a03e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a042:	b191      	cbz	r1, 800a06a <__mdiff+0x11a>
 800a044:	6117      	str	r7, [r2, #16]
 800a046:	e79d      	b.n	8009f84 <__mdiff+0x34>
 800a048:	f854 1b04 	ldr.w	r1, [r4], #4
 800a04c:	46e6      	mov	lr, ip
 800a04e:	0c08      	lsrs	r0, r1, #16
 800a050:	fa1c fc81 	uxtah	ip, ip, r1
 800a054:	4471      	add	r1, lr
 800a056:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a05a:	b289      	uxth	r1, r1
 800a05c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a060:	f846 1b04 	str.w	r1, [r6], #4
 800a064:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a068:	e7dd      	b.n	800a026 <__mdiff+0xd6>
 800a06a:	3f01      	subs	r7, #1
 800a06c:	e7e7      	b.n	800a03e <__mdiff+0xee>
 800a06e:	bf00      	nop
 800a070:	0800afb8 	.word	0x0800afb8
 800a074:	0800b029 	.word	0x0800b029

0800a078 <__ulp>:
 800a078:	b082      	sub	sp, #8
 800a07a:	ed8d 0b00 	vstr	d0, [sp]
 800a07e:	9a01      	ldr	r2, [sp, #4]
 800a080:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c0 <__ulp+0x48>)
 800a082:	4013      	ands	r3, r2
 800a084:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a088:	2b00      	cmp	r3, #0
 800a08a:	dc08      	bgt.n	800a09e <__ulp+0x26>
 800a08c:	425b      	negs	r3, r3
 800a08e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a092:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a096:	da04      	bge.n	800a0a2 <__ulp+0x2a>
 800a098:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a09c:	4113      	asrs	r3, r2
 800a09e:	2200      	movs	r2, #0
 800a0a0:	e008      	b.n	800a0b4 <__ulp+0x3c>
 800a0a2:	f1a2 0314 	sub.w	r3, r2, #20
 800a0a6:	2b1e      	cmp	r3, #30
 800a0a8:	bfda      	itte	le
 800a0aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a0ae:	40da      	lsrle	r2, r3
 800a0b0:	2201      	movgt	r2, #1
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	ec41 0b10 	vmov	d0, r0, r1
 800a0bc:	b002      	add	sp, #8
 800a0be:	4770      	bx	lr
 800a0c0:	7ff00000 	.word	0x7ff00000

0800a0c4 <__b2d>:
 800a0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c8:	6906      	ldr	r6, [r0, #16]
 800a0ca:	f100 0814 	add.w	r8, r0, #20
 800a0ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a0d2:	1f37      	subs	r7, r6, #4
 800a0d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a0d8:	4610      	mov	r0, r2
 800a0da:	f7ff fd4b 	bl	8009b74 <__hi0bits>
 800a0de:	f1c0 0320 	rsb	r3, r0, #32
 800a0e2:	280a      	cmp	r0, #10
 800a0e4:	600b      	str	r3, [r1, #0]
 800a0e6:	491b      	ldr	r1, [pc, #108]	@ (800a154 <__b2d+0x90>)
 800a0e8:	dc15      	bgt.n	800a116 <__b2d+0x52>
 800a0ea:	f1c0 0c0b 	rsb	ip, r0, #11
 800a0ee:	fa22 f30c 	lsr.w	r3, r2, ip
 800a0f2:	45b8      	cmp	r8, r7
 800a0f4:	ea43 0501 	orr.w	r5, r3, r1
 800a0f8:	bf34      	ite	cc
 800a0fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a0fe:	2300      	movcs	r3, #0
 800a100:	3015      	adds	r0, #21
 800a102:	fa02 f000 	lsl.w	r0, r2, r0
 800a106:	fa23 f30c 	lsr.w	r3, r3, ip
 800a10a:	4303      	orrs	r3, r0
 800a10c:	461c      	mov	r4, r3
 800a10e:	ec45 4b10 	vmov	d0, r4, r5
 800a112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a116:	45b8      	cmp	r8, r7
 800a118:	bf3a      	itte	cc
 800a11a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a11e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a122:	2300      	movcs	r3, #0
 800a124:	380b      	subs	r0, #11
 800a126:	d012      	beq.n	800a14e <__b2d+0x8a>
 800a128:	f1c0 0120 	rsb	r1, r0, #32
 800a12c:	fa23 f401 	lsr.w	r4, r3, r1
 800a130:	4082      	lsls	r2, r0
 800a132:	4322      	orrs	r2, r4
 800a134:	4547      	cmp	r7, r8
 800a136:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a13a:	bf8c      	ite	hi
 800a13c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a140:	2200      	movls	r2, #0
 800a142:	4083      	lsls	r3, r0
 800a144:	40ca      	lsrs	r2, r1
 800a146:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a14a:	4313      	orrs	r3, r2
 800a14c:	e7de      	b.n	800a10c <__b2d+0x48>
 800a14e:	ea42 0501 	orr.w	r5, r2, r1
 800a152:	e7db      	b.n	800a10c <__b2d+0x48>
 800a154:	3ff00000 	.word	0x3ff00000

0800a158 <__d2b>:
 800a158:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a15c:	460f      	mov	r7, r1
 800a15e:	2101      	movs	r1, #1
 800a160:	ec59 8b10 	vmov	r8, r9, d0
 800a164:	4616      	mov	r6, r2
 800a166:	f7ff fc13 	bl	8009990 <_Balloc>
 800a16a:	4604      	mov	r4, r0
 800a16c:	b930      	cbnz	r0, 800a17c <__d2b+0x24>
 800a16e:	4602      	mov	r2, r0
 800a170:	4b23      	ldr	r3, [pc, #140]	@ (800a200 <__d2b+0xa8>)
 800a172:	4824      	ldr	r0, [pc, #144]	@ (800a204 <__d2b+0xac>)
 800a174:	f240 310f 	movw	r1, #783	@ 0x30f
 800a178:	f000 faf6 	bl	800a768 <__assert_func>
 800a17c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a180:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a184:	b10d      	cbz	r5, 800a18a <__d2b+0x32>
 800a186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a18a:	9301      	str	r3, [sp, #4]
 800a18c:	f1b8 0300 	subs.w	r3, r8, #0
 800a190:	d023      	beq.n	800a1da <__d2b+0x82>
 800a192:	4668      	mov	r0, sp
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	f7ff fd0c 	bl	8009bb2 <__lo0bits>
 800a19a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a19e:	b1d0      	cbz	r0, 800a1d6 <__d2b+0x7e>
 800a1a0:	f1c0 0320 	rsb	r3, r0, #32
 800a1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a8:	430b      	orrs	r3, r1
 800a1aa:	40c2      	lsrs	r2, r0
 800a1ac:	6163      	str	r3, [r4, #20]
 800a1ae:	9201      	str	r2, [sp, #4]
 800a1b0:	9b01      	ldr	r3, [sp, #4]
 800a1b2:	61a3      	str	r3, [r4, #24]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	bf0c      	ite	eq
 800a1b8:	2201      	moveq	r2, #1
 800a1ba:	2202      	movne	r2, #2
 800a1bc:	6122      	str	r2, [r4, #16]
 800a1be:	b1a5      	cbz	r5, 800a1ea <__d2b+0x92>
 800a1c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a1c4:	4405      	add	r5, r0
 800a1c6:	603d      	str	r5, [r7, #0]
 800a1c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a1cc:	6030      	str	r0, [r6, #0]
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	b003      	add	sp, #12
 800a1d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1d6:	6161      	str	r1, [r4, #20]
 800a1d8:	e7ea      	b.n	800a1b0 <__d2b+0x58>
 800a1da:	a801      	add	r0, sp, #4
 800a1dc:	f7ff fce9 	bl	8009bb2 <__lo0bits>
 800a1e0:	9b01      	ldr	r3, [sp, #4]
 800a1e2:	6163      	str	r3, [r4, #20]
 800a1e4:	3020      	adds	r0, #32
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	e7e8      	b.n	800a1bc <__d2b+0x64>
 800a1ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a1f2:	6038      	str	r0, [r7, #0]
 800a1f4:	6918      	ldr	r0, [r3, #16]
 800a1f6:	f7ff fcbd 	bl	8009b74 <__hi0bits>
 800a1fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1fe:	e7e5      	b.n	800a1cc <__d2b+0x74>
 800a200:	0800afb8 	.word	0x0800afb8
 800a204:	0800b029 	.word	0x0800b029

0800a208 <__ratio>:
 800a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	b085      	sub	sp, #20
 800a20e:	e9cd 1000 	strd	r1, r0, [sp]
 800a212:	a902      	add	r1, sp, #8
 800a214:	f7ff ff56 	bl	800a0c4 <__b2d>
 800a218:	9800      	ldr	r0, [sp, #0]
 800a21a:	a903      	add	r1, sp, #12
 800a21c:	ec55 4b10 	vmov	r4, r5, d0
 800a220:	f7ff ff50 	bl	800a0c4 <__b2d>
 800a224:	9b01      	ldr	r3, [sp, #4]
 800a226:	6919      	ldr	r1, [r3, #16]
 800a228:	9b00      	ldr	r3, [sp, #0]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	1ac9      	subs	r1, r1, r3
 800a22e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a232:	1a9b      	subs	r3, r3, r2
 800a234:	ec5b ab10 	vmov	sl, fp, d0
 800a238:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	bfce      	itee	gt
 800a240:	462a      	movgt	r2, r5
 800a242:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a246:	465a      	movle	r2, fp
 800a248:	462f      	mov	r7, r5
 800a24a:	46d9      	mov	r9, fp
 800a24c:	bfcc      	ite	gt
 800a24e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a252:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a256:	464b      	mov	r3, r9
 800a258:	4652      	mov	r2, sl
 800a25a:	4620      	mov	r0, r4
 800a25c:	4639      	mov	r1, r7
 800a25e:	f7f6 fafd 	bl	800085c <__aeabi_ddiv>
 800a262:	ec41 0b10 	vmov	d0, r0, r1
 800a266:	b005      	add	sp, #20
 800a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a26c <__copybits>:
 800a26c:	3901      	subs	r1, #1
 800a26e:	b570      	push	{r4, r5, r6, lr}
 800a270:	1149      	asrs	r1, r1, #5
 800a272:	6914      	ldr	r4, [r2, #16]
 800a274:	3101      	adds	r1, #1
 800a276:	f102 0314 	add.w	r3, r2, #20
 800a27a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a27e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a282:	1f05      	subs	r5, r0, #4
 800a284:	42a3      	cmp	r3, r4
 800a286:	d30c      	bcc.n	800a2a2 <__copybits+0x36>
 800a288:	1aa3      	subs	r3, r4, r2
 800a28a:	3b11      	subs	r3, #17
 800a28c:	f023 0303 	bic.w	r3, r3, #3
 800a290:	3211      	adds	r2, #17
 800a292:	42a2      	cmp	r2, r4
 800a294:	bf88      	it	hi
 800a296:	2300      	movhi	r3, #0
 800a298:	4418      	add	r0, r3
 800a29a:	2300      	movs	r3, #0
 800a29c:	4288      	cmp	r0, r1
 800a29e:	d305      	bcc.n	800a2ac <__copybits+0x40>
 800a2a0:	bd70      	pop	{r4, r5, r6, pc}
 800a2a2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a2a6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a2aa:	e7eb      	b.n	800a284 <__copybits+0x18>
 800a2ac:	f840 3b04 	str.w	r3, [r0], #4
 800a2b0:	e7f4      	b.n	800a29c <__copybits+0x30>

0800a2b2 <__any_on>:
 800a2b2:	f100 0214 	add.w	r2, r0, #20
 800a2b6:	6900      	ldr	r0, [r0, #16]
 800a2b8:	114b      	asrs	r3, r1, #5
 800a2ba:	4298      	cmp	r0, r3
 800a2bc:	b510      	push	{r4, lr}
 800a2be:	db11      	blt.n	800a2e4 <__any_on+0x32>
 800a2c0:	dd0a      	ble.n	800a2d8 <__any_on+0x26>
 800a2c2:	f011 011f 	ands.w	r1, r1, #31
 800a2c6:	d007      	beq.n	800a2d8 <__any_on+0x26>
 800a2c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2cc:	fa24 f001 	lsr.w	r0, r4, r1
 800a2d0:	fa00 f101 	lsl.w	r1, r0, r1
 800a2d4:	428c      	cmp	r4, r1
 800a2d6:	d10b      	bne.n	800a2f0 <__any_on+0x3e>
 800a2d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d803      	bhi.n	800a2e8 <__any_on+0x36>
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	bd10      	pop	{r4, pc}
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	e7f7      	b.n	800a2d8 <__any_on+0x26>
 800a2e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2ec:	2900      	cmp	r1, #0
 800a2ee:	d0f5      	beq.n	800a2dc <__any_on+0x2a>
 800a2f0:	2001      	movs	r0, #1
 800a2f2:	e7f6      	b.n	800a2e2 <__any_on+0x30>

0800a2f4 <__ascii_wctomb>:
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	4608      	mov	r0, r1
 800a2f8:	b141      	cbz	r1, 800a30c <__ascii_wctomb+0x18>
 800a2fa:	2aff      	cmp	r2, #255	@ 0xff
 800a2fc:	d904      	bls.n	800a308 <__ascii_wctomb+0x14>
 800a2fe:	228a      	movs	r2, #138	@ 0x8a
 800a300:	601a      	str	r2, [r3, #0]
 800a302:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a306:	4770      	bx	lr
 800a308:	700a      	strb	r2, [r1, #0]
 800a30a:	2001      	movs	r0, #1
 800a30c:	4770      	bx	lr

0800a30e <__ssputs_r>:
 800a30e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a312:	688e      	ldr	r6, [r1, #8]
 800a314:	461f      	mov	r7, r3
 800a316:	42be      	cmp	r6, r7
 800a318:	680b      	ldr	r3, [r1, #0]
 800a31a:	4682      	mov	sl, r0
 800a31c:	460c      	mov	r4, r1
 800a31e:	4690      	mov	r8, r2
 800a320:	d82d      	bhi.n	800a37e <__ssputs_r+0x70>
 800a322:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a326:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a32a:	d026      	beq.n	800a37a <__ssputs_r+0x6c>
 800a32c:	6965      	ldr	r5, [r4, #20]
 800a32e:	6909      	ldr	r1, [r1, #16]
 800a330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a334:	eba3 0901 	sub.w	r9, r3, r1
 800a338:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a33c:	1c7b      	adds	r3, r7, #1
 800a33e:	444b      	add	r3, r9
 800a340:	106d      	asrs	r5, r5, #1
 800a342:	429d      	cmp	r5, r3
 800a344:	bf38      	it	cc
 800a346:	461d      	movcc	r5, r3
 800a348:	0553      	lsls	r3, r2, #21
 800a34a:	d527      	bpl.n	800a39c <__ssputs_r+0x8e>
 800a34c:	4629      	mov	r1, r5
 800a34e:	f7ff fa81 	bl	8009854 <_malloc_r>
 800a352:	4606      	mov	r6, r0
 800a354:	b360      	cbz	r0, 800a3b0 <__ssputs_r+0xa2>
 800a356:	6921      	ldr	r1, [r4, #16]
 800a358:	464a      	mov	r2, r9
 800a35a:	f7fe f860 	bl	800841e <memcpy>
 800a35e:	89a3      	ldrh	r3, [r4, #12]
 800a360:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a368:	81a3      	strh	r3, [r4, #12]
 800a36a:	6126      	str	r6, [r4, #16]
 800a36c:	6165      	str	r5, [r4, #20]
 800a36e:	444e      	add	r6, r9
 800a370:	eba5 0509 	sub.w	r5, r5, r9
 800a374:	6026      	str	r6, [r4, #0]
 800a376:	60a5      	str	r5, [r4, #8]
 800a378:	463e      	mov	r6, r7
 800a37a:	42be      	cmp	r6, r7
 800a37c:	d900      	bls.n	800a380 <__ssputs_r+0x72>
 800a37e:	463e      	mov	r6, r7
 800a380:	6820      	ldr	r0, [r4, #0]
 800a382:	4632      	mov	r2, r6
 800a384:	4641      	mov	r1, r8
 800a386:	f000 f9c5 	bl	800a714 <memmove>
 800a38a:	68a3      	ldr	r3, [r4, #8]
 800a38c:	1b9b      	subs	r3, r3, r6
 800a38e:	60a3      	str	r3, [r4, #8]
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	4433      	add	r3, r6
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	2000      	movs	r0, #0
 800a398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39c:	462a      	mov	r2, r5
 800a39e:	f000 fa15 	bl	800a7cc <_realloc_r>
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d1e0      	bne.n	800a36a <__ssputs_r+0x5c>
 800a3a8:	6921      	ldr	r1, [r4, #16]
 800a3aa:	4650      	mov	r0, sl
 800a3ac:	f7fe fea4 	bl	80090f8 <_free_r>
 800a3b0:	230c      	movs	r3, #12
 800a3b2:	f8ca 3000 	str.w	r3, [sl]
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3bc:	81a3      	strh	r3, [r4, #12]
 800a3be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3c2:	e7e9      	b.n	800a398 <__ssputs_r+0x8a>

0800a3c4 <_svfiprintf_r>:
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	4698      	mov	r8, r3
 800a3ca:	898b      	ldrh	r3, [r1, #12]
 800a3cc:	061b      	lsls	r3, r3, #24
 800a3ce:	b09d      	sub	sp, #116	@ 0x74
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	4614      	mov	r4, r2
 800a3d6:	d510      	bpl.n	800a3fa <_svfiprintf_r+0x36>
 800a3d8:	690b      	ldr	r3, [r1, #16]
 800a3da:	b973      	cbnz	r3, 800a3fa <_svfiprintf_r+0x36>
 800a3dc:	2140      	movs	r1, #64	@ 0x40
 800a3de:	f7ff fa39 	bl	8009854 <_malloc_r>
 800a3e2:	6028      	str	r0, [r5, #0]
 800a3e4:	6128      	str	r0, [r5, #16]
 800a3e6:	b930      	cbnz	r0, 800a3f6 <_svfiprintf_r+0x32>
 800a3e8:	230c      	movs	r3, #12
 800a3ea:	603b      	str	r3, [r7, #0]
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3f0:	b01d      	add	sp, #116	@ 0x74
 800a3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f6:	2340      	movs	r3, #64	@ 0x40
 800a3f8:	616b      	str	r3, [r5, #20]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3fe:	2320      	movs	r3, #32
 800a400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a404:	f8cd 800c 	str.w	r8, [sp, #12]
 800a408:	2330      	movs	r3, #48	@ 0x30
 800a40a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a5a8 <_svfiprintf_r+0x1e4>
 800a40e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a412:	f04f 0901 	mov.w	r9, #1
 800a416:	4623      	mov	r3, r4
 800a418:	469a      	mov	sl, r3
 800a41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a41e:	b10a      	cbz	r2, 800a424 <_svfiprintf_r+0x60>
 800a420:	2a25      	cmp	r2, #37	@ 0x25
 800a422:	d1f9      	bne.n	800a418 <_svfiprintf_r+0x54>
 800a424:	ebba 0b04 	subs.w	fp, sl, r4
 800a428:	d00b      	beq.n	800a442 <_svfiprintf_r+0x7e>
 800a42a:	465b      	mov	r3, fp
 800a42c:	4622      	mov	r2, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	4638      	mov	r0, r7
 800a432:	f7ff ff6c 	bl	800a30e <__ssputs_r>
 800a436:	3001      	adds	r0, #1
 800a438:	f000 80a7 	beq.w	800a58a <_svfiprintf_r+0x1c6>
 800a43c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a43e:	445a      	add	r2, fp
 800a440:	9209      	str	r2, [sp, #36]	@ 0x24
 800a442:	f89a 3000 	ldrb.w	r3, [sl]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 809f 	beq.w	800a58a <_svfiprintf_r+0x1c6>
 800a44c:	2300      	movs	r3, #0
 800a44e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a456:	f10a 0a01 	add.w	sl, sl, #1
 800a45a:	9304      	str	r3, [sp, #16]
 800a45c:	9307      	str	r3, [sp, #28]
 800a45e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a462:	931a      	str	r3, [sp, #104]	@ 0x68
 800a464:	4654      	mov	r4, sl
 800a466:	2205      	movs	r2, #5
 800a468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a46c:	484e      	ldr	r0, [pc, #312]	@ (800a5a8 <_svfiprintf_r+0x1e4>)
 800a46e:	f7f5 feb7 	bl	80001e0 <memchr>
 800a472:	9a04      	ldr	r2, [sp, #16]
 800a474:	b9d8      	cbnz	r0, 800a4ae <_svfiprintf_r+0xea>
 800a476:	06d0      	lsls	r0, r2, #27
 800a478:	bf44      	itt	mi
 800a47a:	2320      	movmi	r3, #32
 800a47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a480:	0711      	lsls	r1, r2, #28
 800a482:	bf44      	itt	mi
 800a484:	232b      	movmi	r3, #43	@ 0x2b
 800a486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a48a:	f89a 3000 	ldrb.w	r3, [sl]
 800a48e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a490:	d015      	beq.n	800a4be <_svfiprintf_r+0xfa>
 800a492:	9a07      	ldr	r2, [sp, #28]
 800a494:	4654      	mov	r4, sl
 800a496:	2000      	movs	r0, #0
 800a498:	f04f 0c0a 	mov.w	ip, #10
 800a49c:	4621      	mov	r1, r4
 800a49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4a2:	3b30      	subs	r3, #48	@ 0x30
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	d94b      	bls.n	800a540 <_svfiprintf_r+0x17c>
 800a4a8:	b1b0      	cbz	r0, 800a4d8 <_svfiprintf_r+0x114>
 800a4aa:	9207      	str	r2, [sp, #28]
 800a4ac:	e014      	b.n	800a4d8 <_svfiprintf_r+0x114>
 800a4ae:	eba0 0308 	sub.w	r3, r0, r8
 800a4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	9304      	str	r3, [sp, #16]
 800a4ba:	46a2      	mov	sl, r4
 800a4bc:	e7d2      	b.n	800a464 <_svfiprintf_r+0xa0>
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	1d19      	adds	r1, r3, #4
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	9103      	str	r1, [sp, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bfbb      	ittet	lt
 800a4ca:	425b      	neglt	r3, r3
 800a4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800a4d0:	9307      	strge	r3, [sp, #28]
 800a4d2:	9307      	strlt	r3, [sp, #28]
 800a4d4:	bfb8      	it	lt
 800a4d6:	9204      	strlt	r2, [sp, #16]
 800a4d8:	7823      	ldrb	r3, [r4, #0]
 800a4da:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4dc:	d10a      	bne.n	800a4f4 <_svfiprintf_r+0x130>
 800a4de:	7863      	ldrb	r3, [r4, #1]
 800a4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4e2:	d132      	bne.n	800a54a <_svfiprintf_r+0x186>
 800a4e4:	9b03      	ldr	r3, [sp, #12]
 800a4e6:	1d1a      	adds	r2, r3, #4
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	9203      	str	r2, [sp, #12]
 800a4ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4f0:	3402      	adds	r4, #2
 800a4f2:	9305      	str	r3, [sp, #20]
 800a4f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a5b8 <_svfiprintf_r+0x1f4>
 800a4f8:	7821      	ldrb	r1, [r4, #0]
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	4650      	mov	r0, sl
 800a4fe:	f7f5 fe6f 	bl	80001e0 <memchr>
 800a502:	b138      	cbz	r0, 800a514 <_svfiprintf_r+0x150>
 800a504:	9b04      	ldr	r3, [sp, #16]
 800a506:	eba0 000a 	sub.w	r0, r0, sl
 800a50a:	2240      	movs	r2, #64	@ 0x40
 800a50c:	4082      	lsls	r2, r0
 800a50e:	4313      	orrs	r3, r2
 800a510:	3401      	adds	r4, #1
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a518:	4824      	ldr	r0, [pc, #144]	@ (800a5ac <_svfiprintf_r+0x1e8>)
 800a51a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a51e:	2206      	movs	r2, #6
 800a520:	f7f5 fe5e 	bl	80001e0 <memchr>
 800a524:	2800      	cmp	r0, #0
 800a526:	d036      	beq.n	800a596 <_svfiprintf_r+0x1d2>
 800a528:	4b21      	ldr	r3, [pc, #132]	@ (800a5b0 <_svfiprintf_r+0x1ec>)
 800a52a:	bb1b      	cbnz	r3, 800a574 <_svfiprintf_r+0x1b0>
 800a52c:	9b03      	ldr	r3, [sp, #12]
 800a52e:	3307      	adds	r3, #7
 800a530:	f023 0307 	bic.w	r3, r3, #7
 800a534:	3308      	adds	r3, #8
 800a536:	9303      	str	r3, [sp, #12]
 800a538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a53a:	4433      	add	r3, r6
 800a53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a53e:	e76a      	b.n	800a416 <_svfiprintf_r+0x52>
 800a540:	fb0c 3202 	mla	r2, ip, r2, r3
 800a544:	460c      	mov	r4, r1
 800a546:	2001      	movs	r0, #1
 800a548:	e7a8      	b.n	800a49c <_svfiprintf_r+0xd8>
 800a54a:	2300      	movs	r3, #0
 800a54c:	3401      	adds	r4, #1
 800a54e:	9305      	str	r3, [sp, #20]
 800a550:	4619      	mov	r1, r3
 800a552:	f04f 0c0a 	mov.w	ip, #10
 800a556:	4620      	mov	r0, r4
 800a558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a55c:	3a30      	subs	r2, #48	@ 0x30
 800a55e:	2a09      	cmp	r2, #9
 800a560:	d903      	bls.n	800a56a <_svfiprintf_r+0x1a6>
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0c6      	beq.n	800a4f4 <_svfiprintf_r+0x130>
 800a566:	9105      	str	r1, [sp, #20]
 800a568:	e7c4      	b.n	800a4f4 <_svfiprintf_r+0x130>
 800a56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a56e:	4604      	mov	r4, r0
 800a570:	2301      	movs	r3, #1
 800a572:	e7f0      	b.n	800a556 <_svfiprintf_r+0x192>
 800a574:	ab03      	add	r3, sp, #12
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	462a      	mov	r2, r5
 800a57a:	4b0e      	ldr	r3, [pc, #56]	@ (800a5b4 <_svfiprintf_r+0x1f0>)
 800a57c:	a904      	add	r1, sp, #16
 800a57e:	4638      	mov	r0, r7
 800a580:	f7fd f9ca 	bl	8007918 <_printf_float>
 800a584:	1c42      	adds	r2, r0, #1
 800a586:	4606      	mov	r6, r0
 800a588:	d1d6      	bne.n	800a538 <_svfiprintf_r+0x174>
 800a58a:	89ab      	ldrh	r3, [r5, #12]
 800a58c:	065b      	lsls	r3, r3, #25
 800a58e:	f53f af2d 	bmi.w	800a3ec <_svfiprintf_r+0x28>
 800a592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a594:	e72c      	b.n	800a3f0 <_svfiprintf_r+0x2c>
 800a596:	ab03      	add	r3, sp, #12
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	462a      	mov	r2, r5
 800a59c:	4b05      	ldr	r3, [pc, #20]	@ (800a5b4 <_svfiprintf_r+0x1f0>)
 800a59e:	a904      	add	r1, sp, #16
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	f7fd fc51 	bl	8007e48 <_printf_i>
 800a5a6:	e7ed      	b.n	800a584 <_svfiprintf_r+0x1c0>
 800a5a8:	0800b281 	.word	0x0800b281
 800a5ac:	0800b28b 	.word	0x0800b28b
 800a5b0:	08007919 	.word	0x08007919
 800a5b4:	0800a30f 	.word	0x0800a30f
 800a5b8:	0800b287 	.word	0x0800b287

0800a5bc <__sflush_r>:
 800a5bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c4:	0716      	lsls	r6, r2, #28
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	460c      	mov	r4, r1
 800a5ca:	d454      	bmi.n	800a676 <__sflush_r+0xba>
 800a5cc:	684b      	ldr	r3, [r1, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	dc02      	bgt.n	800a5d8 <__sflush_r+0x1c>
 800a5d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	dd48      	ble.n	800a66a <__sflush_r+0xae>
 800a5d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5da:	2e00      	cmp	r6, #0
 800a5dc:	d045      	beq.n	800a66a <__sflush_r+0xae>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a5e4:	682f      	ldr	r7, [r5, #0]
 800a5e6:	6a21      	ldr	r1, [r4, #32]
 800a5e8:	602b      	str	r3, [r5, #0]
 800a5ea:	d030      	beq.n	800a64e <__sflush_r+0x92>
 800a5ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	0759      	lsls	r1, r3, #29
 800a5f2:	d505      	bpl.n	800a600 <__sflush_r+0x44>
 800a5f4:	6863      	ldr	r3, [r4, #4]
 800a5f6:	1ad2      	subs	r2, r2, r3
 800a5f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a5fa:	b10b      	cbz	r3, 800a600 <__sflush_r+0x44>
 800a5fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a5fe:	1ad2      	subs	r2, r2, r3
 800a600:	2300      	movs	r3, #0
 800a602:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a604:	6a21      	ldr	r1, [r4, #32]
 800a606:	4628      	mov	r0, r5
 800a608:	47b0      	blx	r6
 800a60a:	1c43      	adds	r3, r0, #1
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	d106      	bne.n	800a61e <__sflush_r+0x62>
 800a610:	6829      	ldr	r1, [r5, #0]
 800a612:	291d      	cmp	r1, #29
 800a614:	d82b      	bhi.n	800a66e <__sflush_r+0xb2>
 800a616:	4a2a      	ldr	r2, [pc, #168]	@ (800a6c0 <__sflush_r+0x104>)
 800a618:	410a      	asrs	r2, r1
 800a61a:	07d6      	lsls	r6, r2, #31
 800a61c:	d427      	bmi.n	800a66e <__sflush_r+0xb2>
 800a61e:	2200      	movs	r2, #0
 800a620:	6062      	str	r2, [r4, #4]
 800a622:	04d9      	lsls	r1, r3, #19
 800a624:	6922      	ldr	r2, [r4, #16]
 800a626:	6022      	str	r2, [r4, #0]
 800a628:	d504      	bpl.n	800a634 <__sflush_r+0x78>
 800a62a:	1c42      	adds	r2, r0, #1
 800a62c:	d101      	bne.n	800a632 <__sflush_r+0x76>
 800a62e:	682b      	ldr	r3, [r5, #0]
 800a630:	b903      	cbnz	r3, 800a634 <__sflush_r+0x78>
 800a632:	6560      	str	r0, [r4, #84]	@ 0x54
 800a634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a636:	602f      	str	r7, [r5, #0]
 800a638:	b1b9      	cbz	r1, 800a66a <__sflush_r+0xae>
 800a63a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a63e:	4299      	cmp	r1, r3
 800a640:	d002      	beq.n	800a648 <__sflush_r+0x8c>
 800a642:	4628      	mov	r0, r5
 800a644:	f7fe fd58 	bl	80090f8 <_free_r>
 800a648:	2300      	movs	r3, #0
 800a64a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a64c:	e00d      	b.n	800a66a <__sflush_r+0xae>
 800a64e:	2301      	movs	r3, #1
 800a650:	4628      	mov	r0, r5
 800a652:	47b0      	blx	r6
 800a654:	4602      	mov	r2, r0
 800a656:	1c50      	adds	r0, r2, #1
 800a658:	d1c9      	bne.n	800a5ee <__sflush_r+0x32>
 800a65a:	682b      	ldr	r3, [r5, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d0c6      	beq.n	800a5ee <__sflush_r+0x32>
 800a660:	2b1d      	cmp	r3, #29
 800a662:	d001      	beq.n	800a668 <__sflush_r+0xac>
 800a664:	2b16      	cmp	r3, #22
 800a666:	d11e      	bne.n	800a6a6 <__sflush_r+0xea>
 800a668:	602f      	str	r7, [r5, #0]
 800a66a:	2000      	movs	r0, #0
 800a66c:	e022      	b.n	800a6b4 <__sflush_r+0xf8>
 800a66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a672:	b21b      	sxth	r3, r3
 800a674:	e01b      	b.n	800a6ae <__sflush_r+0xf2>
 800a676:	690f      	ldr	r7, [r1, #16]
 800a678:	2f00      	cmp	r7, #0
 800a67a:	d0f6      	beq.n	800a66a <__sflush_r+0xae>
 800a67c:	0793      	lsls	r3, r2, #30
 800a67e:	680e      	ldr	r6, [r1, #0]
 800a680:	bf08      	it	eq
 800a682:	694b      	ldreq	r3, [r1, #20]
 800a684:	600f      	str	r7, [r1, #0]
 800a686:	bf18      	it	ne
 800a688:	2300      	movne	r3, #0
 800a68a:	eba6 0807 	sub.w	r8, r6, r7
 800a68e:	608b      	str	r3, [r1, #8]
 800a690:	f1b8 0f00 	cmp.w	r8, #0
 800a694:	dde9      	ble.n	800a66a <__sflush_r+0xae>
 800a696:	6a21      	ldr	r1, [r4, #32]
 800a698:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a69a:	4643      	mov	r3, r8
 800a69c:	463a      	mov	r2, r7
 800a69e:	4628      	mov	r0, r5
 800a6a0:	47b0      	blx	r6
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	dc08      	bgt.n	800a6b8 <__sflush_r+0xfc>
 800a6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6ae:	81a3      	strh	r3, [r4, #12]
 800a6b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b8:	4407      	add	r7, r0
 800a6ba:	eba8 0800 	sub.w	r8, r8, r0
 800a6be:	e7e7      	b.n	800a690 <__sflush_r+0xd4>
 800a6c0:	dfbffffe 	.word	0xdfbffffe

0800a6c4 <_fflush_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	690b      	ldr	r3, [r1, #16]
 800a6c8:	4605      	mov	r5, r0
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	b913      	cbnz	r3, 800a6d4 <_fflush_r+0x10>
 800a6ce:	2500      	movs	r5, #0
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	b118      	cbz	r0, 800a6de <_fflush_r+0x1a>
 800a6d6:	6a03      	ldr	r3, [r0, #32]
 800a6d8:	b90b      	cbnz	r3, 800a6de <_fflush_r+0x1a>
 800a6da:	f7fd fd61 	bl	80081a0 <__sinit>
 800a6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d0f3      	beq.n	800a6ce <_fflush_r+0xa>
 800a6e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a6e8:	07d0      	lsls	r0, r2, #31
 800a6ea:	d404      	bmi.n	800a6f6 <_fflush_r+0x32>
 800a6ec:	0599      	lsls	r1, r3, #22
 800a6ee:	d402      	bmi.n	800a6f6 <_fflush_r+0x32>
 800a6f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6f2:	f7fd fe92 	bl	800841a <__retarget_lock_acquire_recursive>
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	f7ff ff5f 	bl	800a5bc <__sflush_r>
 800a6fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a700:	07da      	lsls	r2, r3, #31
 800a702:	4605      	mov	r5, r0
 800a704:	d4e4      	bmi.n	800a6d0 <_fflush_r+0xc>
 800a706:	89a3      	ldrh	r3, [r4, #12]
 800a708:	059b      	lsls	r3, r3, #22
 800a70a:	d4e1      	bmi.n	800a6d0 <_fflush_r+0xc>
 800a70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a70e:	f7fd fe85 	bl	800841c <__retarget_lock_release_recursive>
 800a712:	e7dd      	b.n	800a6d0 <_fflush_r+0xc>

0800a714 <memmove>:
 800a714:	4288      	cmp	r0, r1
 800a716:	b510      	push	{r4, lr}
 800a718:	eb01 0402 	add.w	r4, r1, r2
 800a71c:	d902      	bls.n	800a724 <memmove+0x10>
 800a71e:	4284      	cmp	r4, r0
 800a720:	4623      	mov	r3, r4
 800a722:	d807      	bhi.n	800a734 <memmove+0x20>
 800a724:	1e43      	subs	r3, r0, #1
 800a726:	42a1      	cmp	r1, r4
 800a728:	d008      	beq.n	800a73c <memmove+0x28>
 800a72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a732:	e7f8      	b.n	800a726 <memmove+0x12>
 800a734:	4402      	add	r2, r0
 800a736:	4601      	mov	r1, r0
 800a738:	428a      	cmp	r2, r1
 800a73a:	d100      	bne.n	800a73e <memmove+0x2a>
 800a73c:	bd10      	pop	{r4, pc}
 800a73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a746:	e7f7      	b.n	800a738 <memmove+0x24>

0800a748 <_sbrk_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4d06      	ldr	r5, [pc, #24]	@ (800a764 <_sbrk_r+0x1c>)
 800a74c:	2300      	movs	r3, #0
 800a74e:	4604      	mov	r4, r0
 800a750:	4608      	mov	r0, r1
 800a752:	602b      	str	r3, [r5, #0]
 800a754:	f7f7 fe80 	bl	8002458 <_sbrk>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_sbrk_r+0x1a>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_sbrk_r+0x1a>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	200005f4 	.word	0x200005f4

0800a768 <__assert_func>:
 800a768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a76a:	4614      	mov	r4, r2
 800a76c:	461a      	mov	r2, r3
 800a76e:	4b09      	ldr	r3, [pc, #36]	@ (800a794 <__assert_func+0x2c>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4605      	mov	r5, r0
 800a774:	68d8      	ldr	r0, [r3, #12]
 800a776:	b954      	cbnz	r4, 800a78e <__assert_func+0x26>
 800a778:	4b07      	ldr	r3, [pc, #28]	@ (800a798 <__assert_func+0x30>)
 800a77a:	461c      	mov	r4, r3
 800a77c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a780:	9100      	str	r1, [sp, #0]
 800a782:	462b      	mov	r3, r5
 800a784:	4905      	ldr	r1, [pc, #20]	@ (800a79c <__assert_func+0x34>)
 800a786:	f000 f84f 	bl	800a828 <fiprintf>
 800a78a:	f000 f85f 	bl	800a84c <abort>
 800a78e:	4b04      	ldr	r3, [pc, #16]	@ (800a7a0 <__assert_func+0x38>)
 800a790:	e7f4      	b.n	800a77c <__assert_func+0x14>
 800a792:	bf00      	nop
 800a794:	20000188 	.word	0x20000188
 800a798:	0800b2cd 	.word	0x0800b2cd
 800a79c:	0800b29f 	.word	0x0800b29f
 800a7a0:	0800b292 	.word	0x0800b292

0800a7a4 <_calloc_r>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	fba1 5402 	umull	r5, r4, r1, r2
 800a7aa:	b93c      	cbnz	r4, 800a7bc <_calloc_r+0x18>
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	f7ff f851 	bl	8009854 <_malloc_r>
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	b928      	cbnz	r0, 800a7c2 <_calloc_r+0x1e>
 800a7b6:	2600      	movs	r6, #0
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	bd70      	pop	{r4, r5, r6, pc}
 800a7bc:	220c      	movs	r2, #12
 800a7be:	6002      	str	r2, [r0, #0]
 800a7c0:	e7f9      	b.n	800a7b6 <_calloc_r+0x12>
 800a7c2:	462a      	mov	r2, r5
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	f7fd fd98 	bl	80082fa <memset>
 800a7ca:	e7f5      	b.n	800a7b8 <_calloc_r+0x14>

0800a7cc <_realloc_r>:
 800a7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d0:	4680      	mov	r8, r0
 800a7d2:	4615      	mov	r5, r2
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	b921      	cbnz	r1, 800a7e2 <_realloc_r+0x16>
 800a7d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7dc:	4611      	mov	r1, r2
 800a7de:	f7ff b839 	b.w	8009854 <_malloc_r>
 800a7e2:	b92a      	cbnz	r2, 800a7f0 <_realloc_r+0x24>
 800a7e4:	f7fe fc88 	bl	80090f8 <_free_r>
 800a7e8:	2400      	movs	r4, #0
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f0:	f000 f833 	bl	800a85a <_malloc_usable_size_r>
 800a7f4:	4285      	cmp	r5, r0
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	d802      	bhi.n	800a800 <_realloc_r+0x34>
 800a7fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a7fe:	d8f4      	bhi.n	800a7ea <_realloc_r+0x1e>
 800a800:	4629      	mov	r1, r5
 800a802:	4640      	mov	r0, r8
 800a804:	f7ff f826 	bl	8009854 <_malloc_r>
 800a808:	4607      	mov	r7, r0
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d0ec      	beq.n	800a7e8 <_realloc_r+0x1c>
 800a80e:	42b5      	cmp	r5, r6
 800a810:	462a      	mov	r2, r5
 800a812:	4621      	mov	r1, r4
 800a814:	bf28      	it	cs
 800a816:	4632      	movcs	r2, r6
 800a818:	f7fd fe01 	bl	800841e <memcpy>
 800a81c:	4621      	mov	r1, r4
 800a81e:	4640      	mov	r0, r8
 800a820:	f7fe fc6a 	bl	80090f8 <_free_r>
 800a824:	463c      	mov	r4, r7
 800a826:	e7e0      	b.n	800a7ea <_realloc_r+0x1e>

0800a828 <fiprintf>:
 800a828:	b40e      	push	{r1, r2, r3}
 800a82a:	b503      	push	{r0, r1, lr}
 800a82c:	4601      	mov	r1, r0
 800a82e:	ab03      	add	r3, sp, #12
 800a830:	4805      	ldr	r0, [pc, #20]	@ (800a848 <fiprintf+0x20>)
 800a832:	f853 2b04 	ldr.w	r2, [r3], #4
 800a836:	6800      	ldr	r0, [r0, #0]
 800a838:	9301      	str	r3, [sp, #4]
 800a83a:	f000 f83f 	bl	800a8bc <_vfiprintf_r>
 800a83e:	b002      	add	sp, #8
 800a840:	f85d eb04 	ldr.w	lr, [sp], #4
 800a844:	b003      	add	sp, #12
 800a846:	4770      	bx	lr
 800a848:	20000188 	.word	0x20000188

0800a84c <abort>:
 800a84c:	b508      	push	{r3, lr}
 800a84e:	2006      	movs	r0, #6
 800a850:	f000 fa08 	bl	800ac64 <raise>
 800a854:	2001      	movs	r0, #1
 800a856:	f7f7 fd87 	bl	8002368 <_exit>

0800a85a <_malloc_usable_size_r>:
 800a85a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a85e:	1f18      	subs	r0, r3, #4
 800a860:	2b00      	cmp	r3, #0
 800a862:	bfbc      	itt	lt
 800a864:	580b      	ldrlt	r3, [r1, r0]
 800a866:	18c0      	addlt	r0, r0, r3
 800a868:	4770      	bx	lr

0800a86a <__sfputc_r>:
 800a86a:	6893      	ldr	r3, [r2, #8]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	2b00      	cmp	r3, #0
 800a870:	b410      	push	{r4}
 800a872:	6093      	str	r3, [r2, #8]
 800a874:	da08      	bge.n	800a888 <__sfputc_r+0x1e>
 800a876:	6994      	ldr	r4, [r2, #24]
 800a878:	42a3      	cmp	r3, r4
 800a87a:	db01      	blt.n	800a880 <__sfputc_r+0x16>
 800a87c:	290a      	cmp	r1, #10
 800a87e:	d103      	bne.n	800a888 <__sfputc_r+0x1e>
 800a880:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a884:	f000 b932 	b.w	800aaec <__swbuf_r>
 800a888:	6813      	ldr	r3, [r2, #0]
 800a88a:	1c58      	adds	r0, r3, #1
 800a88c:	6010      	str	r0, [r2, #0]
 800a88e:	7019      	strb	r1, [r3, #0]
 800a890:	4608      	mov	r0, r1
 800a892:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <__sfputs_r>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	4606      	mov	r6, r0
 800a89c:	460f      	mov	r7, r1
 800a89e:	4614      	mov	r4, r2
 800a8a0:	18d5      	adds	r5, r2, r3
 800a8a2:	42ac      	cmp	r4, r5
 800a8a4:	d101      	bne.n	800a8aa <__sfputs_r+0x12>
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	e007      	b.n	800a8ba <__sfputs_r+0x22>
 800a8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ae:	463a      	mov	r2, r7
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	f7ff ffda 	bl	800a86a <__sfputc_r>
 800a8b6:	1c43      	adds	r3, r0, #1
 800a8b8:	d1f3      	bne.n	800a8a2 <__sfputs_r+0xa>
 800a8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a8bc <_vfiprintf_r>:
 800a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	460d      	mov	r5, r1
 800a8c2:	b09d      	sub	sp, #116	@ 0x74
 800a8c4:	4614      	mov	r4, r2
 800a8c6:	4698      	mov	r8, r3
 800a8c8:	4606      	mov	r6, r0
 800a8ca:	b118      	cbz	r0, 800a8d4 <_vfiprintf_r+0x18>
 800a8cc:	6a03      	ldr	r3, [r0, #32]
 800a8ce:	b90b      	cbnz	r3, 800a8d4 <_vfiprintf_r+0x18>
 800a8d0:	f7fd fc66 	bl	80081a0 <__sinit>
 800a8d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8d6:	07d9      	lsls	r1, r3, #31
 800a8d8:	d405      	bmi.n	800a8e6 <_vfiprintf_r+0x2a>
 800a8da:	89ab      	ldrh	r3, [r5, #12]
 800a8dc:	059a      	lsls	r2, r3, #22
 800a8de:	d402      	bmi.n	800a8e6 <_vfiprintf_r+0x2a>
 800a8e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8e2:	f7fd fd9a 	bl	800841a <__retarget_lock_acquire_recursive>
 800a8e6:	89ab      	ldrh	r3, [r5, #12]
 800a8e8:	071b      	lsls	r3, r3, #28
 800a8ea:	d501      	bpl.n	800a8f0 <_vfiprintf_r+0x34>
 800a8ec:	692b      	ldr	r3, [r5, #16]
 800a8ee:	b99b      	cbnz	r3, 800a918 <_vfiprintf_r+0x5c>
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	f000 f938 	bl	800ab68 <__swsetup_r>
 800a8f8:	b170      	cbz	r0, 800a918 <_vfiprintf_r+0x5c>
 800a8fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8fc:	07dc      	lsls	r4, r3, #31
 800a8fe:	d504      	bpl.n	800a90a <_vfiprintf_r+0x4e>
 800a900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a904:	b01d      	add	sp, #116	@ 0x74
 800a906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90a:	89ab      	ldrh	r3, [r5, #12]
 800a90c:	0598      	lsls	r0, r3, #22
 800a90e:	d4f7      	bmi.n	800a900 <_vfiprintf_r+0x44>
 800a910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a912:	f7fd fd83 	bl	800841c <__retarget_lock_release_recursive>
 800a916:	e7f3      	b.n	800a900 <_vfiprintf_r+0x44>
 800a918:	2300      	movs	r3, #0
 800a91a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a91c:	2320      	movs	r3, #32
 800a91e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a922:	f8cd 800c 	str.w	r8, [sp, #12]
 800a926:	2330      	movs	r3, #48	@ 0x30
 800a928:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aad8 <_vfiprintf_r+0x21c>
 800a92c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a930:	f04f 0901 	mov.w	r9, #1
 800a934:	4623      	mov	r3, r4
 800a936:	469a      	mov	sl, r3
 800a938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a93c:	b10a      	cbz	r2, 800a942 <_vfiprintf_r+0x86>
 800a93e:	2a25      	cmp	r2, #37	@ 0x25
 800a940:	d1f9      	bne.n	800a936 <_vfiprintf_r+0x7a>
 800a942:	ebba 0b04 	subs.w	fp, sl, r4
 800a946:	d00b      	beq.n	800a960 <_vfiprintf_r+0xa4>
 800a948:	465b      	mov	r3, fp
 800a94a:	4622      	mov	r2, r4
 800a94c:	4629      	mov	r1, r5
 800a94e:	4630      	mov	r0, r6
 800a950:	f7ff ffa2 	bl	800a898 <__sfputs_r>
 800a954:	3001      	adds	r0, #1
 800a956:	f000 80a7 	beq.w	800aaa8 <_vfiprintf_r+0x1ec>
 800a95a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a95c:	445a      	add	r2, fp
 800a95e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a960:	f89a 3000 	ldrb.w	r3, [sl]
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 809f 	beq.w	800aaa8 <_vfiprintf_r+0x1ec>
 800a96a:	2300      	movs	r3, #0
 800a96c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a974:	f10a 0a01 	add.w	sl, sl, #1
 800a978:	9304      	str	r3, [sp, #16]
 800a97a:	9307      	str	r3, [sp, #28]
 800a97c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a980:	931a      	str	r3, [sp, #104]	@ 0x68
 800a982:	4654      	mov	r4, sl
 800a984:	2205      	movs	r2, #5
 800a986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98a:	4853      	ldr	r0, [pc, #332]	@ (800aad8 <_vfiprintf_r+0x21c>)
 800a98c:	f7f5 fc28 	bl	80001e0 <memchr>
 800a990:	9a04      	ldr	r2, [sp, #16]
 800a992:	b9d8      	cbnz	r0, 800a9cc <_vfiprintf_r+0x110>
 800a994:	06d1      	lsls	r1, r2, #27
 800a996:	bf44      	itt	mi
 800a998:	2320      	movmi	r3, #32
 800a99a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a99e:	0713      	lsls	r3, r2, #28
 800a9a0:	bf44      	itt	mi
 800a9a2:	232b      	movmi	r3, #43	@ 0x2b
 800a9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9ae:	d015      	beq.n	800a9dc <_vfiprintf_r+0x120>
 800a9b0:	9a07      	ldr	r2, [sp, #28]
 800a9b2:	4654      	mov	r4, sl
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	f04f 0c0a 	mov.w	ip, #10
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c0:	3b30      	subs	r3, #48	@ 0x30
 800a9c2:	2b09      	cmp	r3, #9
 800a9c4:	d94b      	bls.n	800aa5e <_vfiprintf_r+0x1a2>
 800a9c6:	b1b0      	cbz	r0, 800a9f6 <_vfiprintf_r+0x13a>
 800a9c8:	9207      	str	r2, [sp, #28]
 800a9ca:	e014      	b.n	800a9f6 <_vfiprintf_r+0x13a>
 800a9cc:	eba0 0308 	sub.w	r3, r0, r8
 800a9d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	9304      	str	r3, [sp, #16]
 800a9d8:	46a2      	mov	sl, r4
 800a9da:	e7d2      	b.n	800a982 <_vfiprintf_r+0xc6>
 800a9dc:	9b03      	ldr	r3, [sp, #12]
 800a9de:	1d19      	adds	r1, r3, #4
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	9103      	str	r1, [sp, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	bfbb      	ittet	lt
 800a9e8:	425b      	neglt	r3, r3
 800a9ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a9ee:	9307      	strge	r3, [sp, #28]
 800a9f0:	9307      	strlt	r3, [sp, #28]
 800a9f2:	bfb8      	it	lt
 800a9f4:	9204      	strlt	r2, [sp, #16]
 800a9f6:	7823      	ldrb	r3, [r4, #0]
 800a9f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9fa:	d10a      	bne.n	800aa12 <_vfiprintf_r+0x156>
 800a9fc:	7863      	ldrb	r3, [r4, #1]
 800a9fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa00:	d132      	bne.n	800aa68 <_vfiprintf_r+0x1ac>
 800aa02:	9b03      	ldr	r3, [sp, #12]
 800aa04:	1d1a      	adds	r2, r3, #4
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	9203      	str	r2, [sp, #12]
 800aa0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa0e:	3402      	adds	r4, #2
 800aa10:	9305      	str	r3, [sp, #20]
 800aa12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aae8 <_vfiprintf_r+0x22c>
 800aa16:	7821      	ldrb	r1, [r4, #0]
 800aa18:	2203      	movs	r2, #3
 800aa1a:	4650      	mov	r0, sl
 800aa1c:	f7f5 fbe0 	bl	80001e0 <memchr>
 800aa20:	b138      	cbz	r0, 800aa32 <_vfiprintf_r+0x176>
 800aa22:	9b04      	ldr	r3, [sp, #16]
 800aa24:	eba0 000a 	sub.w	r0, r0, sl
 800aa28:	2240      	movs	r2, #64	@ 0x40
 800aa2a:	4082      	lsls	r2, r0
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	3401      	adds	r4, #1
 800aa30:	9304      	str	r3, [sp, #16]
 800aa32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa36:	4829      	ldr	r0, [pc, #164]	@ (800aadc <_vfiprintf_r+0x220>)
 800aa38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa3c:	2206      	movs	r2, #6
 800aa3e:	f7f5 fbcf 	bl	80001e0 <memchr>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d03f      	beq.n	800aac6 <_vfiprintf_r+0x20a>
 800aa46:	4b26      	ldr	r3, [pc, #152]	@ (800aae0 <_vfiprintf_r+0x224>)
 800aa48:	bb1b      	cbnz	r3, 800aa92 <_vfiprintf_r+0x1d6>
 800aa4a:	9b03      	ldr	r3, [sp, #12]
 800aa4c:	3307      	adds	r3, #7
 800aa4e:	f023 0307 	bic.w	r3, r3, #7
 800aa52:	3308      	adds	r3, #8
 800aa54:	9303      	str	r3, [sp, #12]
 800aa56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa58:	443b      	add	r3, r7
 800aa5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa5c:	e76a      	b.n	800a934 <_vfiprintf_r+0x78>
 800aa5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa62:	460c      	mov	r4, r1
 800aa64:	2001      	movs	r0, #1
 800aa66:	e7a8      	b.n	800a9ba <_vfiprintf_r+0xfe>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	3401      	adds	r4, #1
 800aa6c:	9305      	str	r3, [sp, #20]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	f04f 0c0a 	mov.w	ip, #10
 800aa74:	4620      	mov	r0, r4
 800aa76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa7a:	3a30      	subs	r2, #48	@ 0x30
 800aa7c:	2a09      	cmp	r2, #9
 800aa7e:	d903      	bls.n	800aa88 <_vfiprintf_r+0x1cc>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d0c6      	beq.n	800aa12 <_vfiprintf_r+0x156>
 800aa84:	9105      	str	r1, [sp, #20]
 800aa86:	e7c4      	b.n	800aa12 <_vfiprintf_r+0x156>
 800aa88:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e7f0      	b.n	800aa74 <_vfiprintf_r+0x1b8>
 800aa92:	ab03      	add	r3, sp, #12
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	462a      	mov	r2, r5
 800aa98:	4b12      	ldr	r3, [pc, #72]	@ (800aae4 <_vfiprintf_r+0x228>)
 800aa9a:	a904      	add	r1, sp, #16
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7fc ff3b 	bl	8007918 <_printf_float>
 800aaa2:	4607      	mov	r7, r0
 800aaa4:	1c78      	adds	r0, r7, #1
 800aaa6:	d1d6      	bne.n	800aa56 <_vfiprintf_r+0x19a>
 800aaa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aaaa:	07d9      	lsls	r1, r3, #31
 800aaac:	d405      	bmi.n	800aaba <_vfiprintf_r+0x1fe>
 800aaae:	89ab      	ldrh	r3, [r5, #12]
 800aab0:	059a      	lsls	r2, r3, #22
 800aab2:	d402      	bmi.n	800aaba <_vfiprintf_r+0x1fe>
 800aab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aab6:	f7fd fcb1 	bl	800841c <__retarget_lock_release_recursive>
 800aaba:	89ab      	ldrh	r3, [r5, #12]
 800aabc:	065b      	lsls	r3, r3, #25
 800aabe:	f53f af1f 	bmi.w	800a900 <_vfiprintf_r+0x44>
 800aac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aac4:	e71e      	b.n	800a904 <_vfiprintf_r+0x48>
 800aac6:	ab03      	add	r3, sp, #12
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	462a      	mov	r2, r5
 800aacc:	4b05      	ldr	r3, [pc, #20]	@ (800aae4 <_vfiprintf_r+0x228>)
 800aace:	a904      	add	r1, sp, #16
 800aad0:	4630      	mov	r0, r6
 800aad2:	f7fd f9b9 	bl	8007e48 <_printf_i>
 800aad6:	e7e4      	b.n	800aaa2 <_vfiprintf_r+0x1e6>
 800aad8:	0800b281 	.word	0x0800b281
 800aadc:	0800b28b 	.word	0x0800b28b
 800aae0:	08007919 	.word	0x08007919
 800aae4:	0800a899 	.word	0x0800a899
 800aae8:	0800b287 	.word	0x0800b287

0800aaec <__swbuf_r>:
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	460e      	mov	r6, r1
 800aaf0:	4614      	mov	r4, r2
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	b118      	cbz	r0, 800aafe <__swbuf_r+0x12>
 800aaf6:	6a03      	ldr	r3, [r0, #32]
 800aaf8:	b90b      	cbnz	r3, 800aafe <__swbuf_r+0x12>
 800aafa:	f7fd fb51 	bl	80081a0 <__sinit>
 800aafe:	69a3      	ldr	r3, [r4, #24]
 800ab00:	60a3      	str	r3, [r4, #8]
 800ab02:	89a3      	ldrh	r3, [r4, #12]
 800ab04:	071a      	lsls	r2, r3, #28
 800ab06:	d501      	bpl.n	800ab0c <__swbuf_r+0x20>
 800ab08:	6923      	ldr	r3, [r4, #16]
 800ab0a:	b943      	cbnz	r3, 800ab1e <__swbuf_r+0x32>
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	4628      	mov	r0, r5
 800ab10:	f000 f82a 	bl	800ab68 <__swsetup_r>
 800ab14:	b118      	cbz	r0, 800ab1e <__swbuf_r+0x32>
 800ab16:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	6922      	ldr	r2, [r4, #16]
 800ab22:	1a98      	subs	r0, r3, r2
 800ab24:	6963      	ldr	r3, [r4, #20]
 800ab26:	b2f6      	uxtb	r6, r6
 800ab28:	4283      	cmp	r3, r0
 800ab2a:	4637      	mov	r7, r6
 800ab2c:	dc05      	bgt.n	800ab3a <__swbuf_r+0x4e>
 800ab2e:	4621      	mov	r1, r4
 800ab30:	4628      	mov	r0, r5
 800ab32:	f7ff fdc7 	bl	800a6c4 <_fflush_r>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d1ed      	bne.n	800ab16 <__swbuf_r+0x2a>
 800ab3a:	68a3      	ldr	r3, [r4, #8]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	60a3      	str	r3, [r4, #8]
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	6022      	str	r2, [r4, #0]
 800ab46:	701e      	strb	r6, [r3, #0]
 800ab48:	6962      	ldr	r2, [r4, #20]
 800ab4a:	1c43      	adds	r3, r0, #1
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d004      	beq.n	800ab5a <__swbuf_r+0x6e>
 800ab50:	89a3      	ldrh	r3, [r4, #12]
 800ab52:	07db      	lsls	r3, r3, #31
 800ab54:	d5e1      	bpl.n	800ab1a <__swbuf_r+0x2e>
 800ab56:	2e0a      	cmp	r6, #10
 800ab58:	d1df      	bne.n	800ab1a <__swbuf_r+0x2e>
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	f7ff fdb1 	bl	800a6c4 <_fflush_r>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d0d9      	beq.n	800ab1a <__swbuf_r+0x2e>
 800ab66:	e7d6      	b.n	800ab16 <__swbuf_r+0x2a>

0800ab68 <__swsetup_r>:
 800ab68:	b538      	push	{r3, r4, r5, lr}
 800ab6a:	4b29      	ldr	r3, [pc, #164]	@ (800ac10 <__swsetup_r+0xa8>)
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	6818      	ldr	r0, [r3, #0]
 800ab70:	460c      	mov	r4, r1
 800ab72:	b118      	cbz	r0, 800ab7c <__swsetup_r+0x14>
 800ab74:	6a03      	ldr	r3, [r0, #32]
 800ab76:	b90b      	cbnz	r3, 800ab7c <__swsetup_r+0x14>
 800ab78:	f7fd fb12 	bl	80081a0 <__sinit>
 800ab7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab80:	0719      	lsls	r1, r3, #28
 800ab82:	d422      	bmi.n	800abca <__swsetup_r+0x62>
 800ab84:	06da      	lsls	r2, r3, #27
 800ab86:	d407      	bmi.n	800ab98 <__swsetup_r+0x30>
 800ab88:	2209      	movs	r2, #9
 800ab8a:	602a      	str	r2, [r5, #0]
 800ab8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab90:	81a3      	strh	r3, [r4, #12]
 800ab92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab96:	e033      	b.n	800ac00 <__swsetup_r+0x98>
 800ab98:	0758      	lsls	r0, r3, #29
 800ab9a:	d512      	bpl.n	800abc2 <__swsetup_r+0x5a>
 800ab9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab9e:	b141      	cbz	r1, 800abb2 <__swsetup_r+0x4a>
 800aba0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aba4:	4299      	cmp	r1, r3
 800aba6:	d002      	beq.n	800abae <__swsetup_r+0x46>
 800aba8:	4628      	mov	r0, r5
 800abaa:	f7fe faa5 	bl	80090f8 <_free_r>
 800abae:	2300      	movs	r3, #0
 800abb0:	6363      	str	r3, [r4, #52]	@ 0x34
 800abb2:	89a3      	ldrh	r3, [r4, #12]
 800abb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800abb8:	81a3      	strh	r3, [r4, #12]
 800abba:	2300      	movs	r3, #0
 800abbc:	6063      	str	r3, [r4, #4]
 800abbe:	6923      	ldr	r3, [r4, #16]
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	f043 0308 	orr.w	r3, r3, #8
 800abc8:	81a3      	strh	r3, [r4, #12]
 800abca:	6923      	ldr	r3, [r4, #16]
 800abcc:	b94b      	cbnz	r3, 800abe2 <__swsetup_r+0x7a>
 800abce:	89a3      	ldrh	r3, [r4, #12]
 800abd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800abd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abd8:	d003      	beq.n	800abe2 <__swsetup_r+0x7a>
 800abda:	4621      	mov	r1, r4
 800abdc:	4628      	mov	r0, r5
 800abde:	f000 f883 	bl	800ace8 <__smakebuf_r>
 800abe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abe6:	f013 0201 	ands.w	r2, r3, #1
 800abea:	d00a      	beq.n	800ac02 <__swsetup_r+0x9a>
 800abec:	2200      	movs	r2, #0
 800abee:	60a2      	str	r2, [r4, #8]
 800abf0:	6962      	ldr	r2, [r4, #20]
 800abf2:	4252      	negs	r2, r2
 800abf4:	61a2      	str	r2, [r4, #24]
 800abf6:	6922      	ldr	r2, [r4, #16]
 800abf8:	b942      	cbnz	r2, 800ac0c <__swsetup_r+0xa4>
 800abfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800abfe:	d1c5      	bne.n	800ab8c <__swsetup_r+0x24>
 800ac00:	bd38      	pop	{r3, r4, r5, pc}
 800ac02:	0799      	lsls	r1, r3, #30
 800ac04:	bf58      	it	pl
 800ac06:	6962      	ldrpl	r2, [r4, #20]
 800ac08:	60a2      	str	r2, [r4, #8]
 800ac0a:	e7f4      	b.n	800abf6 <__swsetup_r+0x8e>
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	e7f7      	b.n	800ac00 <__swsetup_r+0x98>
 800ac10:	20000188 	.word	0x20000188

0800ac14 <_raise_r>:
 800ac14:	291f      	cmp	r1, #31
 800ac16:	b538      	push	{r3, r4, r5, lr}
 800ac18:	4605      	mov	r5, r0
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	d904      	bls.n	800ac28 <_raise_r+0x14>
 800ac1e:	2316      	movs	r3, #22
 800ac20:	6003      	str	r3, [r0, #0]
 800ac22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac26:	bd38      	pop	{r3, r4, r5, pc}
 800ac28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ac2a:	b112      	cbz	r2, 800ac32 <_raise_r+0x1e>
 800ac2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac30:	b94b      	cbnz	r3, 800ac46 <_raise_r+0x32>
 800ac32:	4628      	mov	r0, r5
 800ac34:	f000 f830 	bl	800ac98 <_getpid_r>
 800ac38:	4622      	mov	r2, r4
 800ac3a:	4601      	mov	r1, r0
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac42:	f000 b817 	b.w	800ac74 <_kill_r>
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d00a      	beq.n	800ac60 <_raise_r+0x4c>
 800ac4a:	1c59      	adds	r1, r3, #1
 800ac4c:	d103      	bne.n	800ac56 <_raise_r+0x42>
 800ac4e:	2316      	movs	r3, #22
 800ac50:	6003      	str	r3, [r0, #0]
 800ac52:	2001      	movs	r0, #1
 800ac54:	e7e7      	b.n	800ac26 <_raise_r+0x12>
 800ac56:	2100      	movs	r1, #0
 800ac58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	4798      	blx	r3
 800ac60:	2000      	movs	r0, #0
 800ac62:	e7e0      	b.n	800ac26 <_raise_r+0x12>

0800ac64 <raise>:
 800ac64:	4b02      	ldr	r3, [pc, #8]	@ (800ac70 <raise+0xc>)
 800ac66:	4601      	mov	r1, r0
 800ac68:	6818      	ldr	r0, [r3, #0]
 800ac6a:	f7ff bfd3 	b.w	800ac14 <_raise_r>
 800ac6e:	bf00      	nop
 800ac70:	20000188 	.word	0x20000188

0800ac74 <_kill_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	4d07      	ldr	r5, [pc, #28]	@ (800ac94 <_kill_r+0x20>)
 800ac78:	2300      	movs	r3, #0
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	4608      	mov	r0, r1
 800ac7e:	4611      	mov	r1, r2
 800ac80:	602b      	str	r3, [r5, #0]
 800ac82:	f7f7 fb61 	bl	8002348 <_kill>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	d102      	bne.n	800ac90 <_kill_r+0x1c>
 800ac8a:	682b      	ldr	r3, [r5, #0]
 800ac8c:	b103      	cbz	r3, 800ac90 <_kill_r+0x1c>
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	bd38      	pop	{r3, r4, r5, pc}
 800ac92:	bf00      	nop
 800ac94:	200005f4 	.word	0x200005f4

0800ac98 <_getpid_r>:
 800ac98:	f7f7 bb4e 	b.w	8002338 <_getpid>

0800ac9c <__swhatbuf_r>:
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	460c      	mov	r4, r1
 800aca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca4:	2900      	cmp	r1, #0
 800aca6:	b096      	sub	sp, #88	@ 0x58
 800aca8:	4615      	mov	r5, r2
 800acaa:	461e      	mov	r6, r3
 800acac:	da0d      	bge.n	800acca <__swhatbuf_r+0x2e>
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800acb4:	f04f 0100 	mov.w	r1, #0
 800acb8:	bf14      	ite	ne
 800acba:	2340      	movne	r3, #64	@ 0x40
 800acbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800acc0:	2000      	movs	r0, #0
 800acc2:	6031      	str	r1, [r6, #0]
 800acc4:	602b      	str	r3, [r5, #0]
 800acc6:	b016      	add	sp, #88	@ 0x58
 800acc8:	bd70      	pop	{r4, r5, r6, pc}
 800acca:	466a      	mov	r2, sp
 800accc:	f000 f848 	bl	800ad60 <_fstat_r>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	dbec      	blt.n	800acae <__swhatbuf_r+0x12>
 800acd4:	9901      	ldr	r1, [sp, #4]
 800acd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800acda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800acde:	4259      	negs	r1, r3
 800ace0:	4159      	adcs	r1, r3
 800ace2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ace6:	e7eb      	b.n	800acc0 <__swhatbuf_r+0x24>

0800ace8 <__smakebuf_r>:
 800ace8:	898b      	ldrh	r3, [r1, #12]
 800acea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acec:	079d      	lsls	r5, r3, #30
 800acee:	4606      	mov	r6, r0
 800acf0:	460c      	mov	r4, r1
 800acf2:	d507      	bpl.n	800ad04 <__smakebuf_r+0x1c>
 800acf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	6123      	str	r3, [r4, #16]
 800acfc:	2301      	movs	r3, #1
 800acfe:	6163      	str	r3, [r4, #20]
 800ad00:	b003      	add	sp, #12
 800ad02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad04:	ab01      	add	r3, sp, #4
 800ad06:	466a      	mov	r2, sp
 800ad08:	f7ff ffc8 	bl	800ac9c <__swhatbuf_r>
 800ad0c:	9f00      	ldr	r7, [sp, #0]
 800ad0e:	4605      	mov	r5, r0
 800ad10:	4639      	mov	r1, r7
 800ad12:	4630      	mov	r0, r6
 800ad14:	f7fe fd9e 	bl	8009854 <_malloc_r>
 800ad18:	b948      	cbnz	r0, 800ad2e <__smakebuf_r+0x46>
 800ad1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad1e:	059a      	lsls	r2, r3, #22
 800ad20:	d4ee      	bmi.n	800ad00 <__smakebuf_r+0x18>
 800ad22:	f023 0303 	bic.w	r3, r3, #3
 800ad26:	f043 0302 	orr.w	r3, r3, #2
 800ad2a:	81a3      	strh	r3, [r4, #12]
 800ad2c:	e7e2      	b.n	800acf4 <__smakebuf_r+0xc>
 800ad2e:	89a3      	ldrh	r3, [r4, #12]
 800ad30:	6020      	str	r0, [r4, #0]
 800ad32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad36:	81a3      	strh	r3, [r4, #12]
 800ad38:	9b01      	ldr	r3, [sp, #4]
 800ad3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ad3e:	b15b      	cbz	r3, 800ad58 <__smakebuf_r+0x70>
 800ad40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad44:	4630      	mov	r0, r6
 800ad46:	f000 f81d 	bl	800ad84 <_isatty_r>
 800ad4a:	b128      	cbz	r0, 800ad58 <__smakebuf_r+0x70>
 800ad4c:	89a3      	ldrh	r3, [r4, #12]
 800ad4e:	f023 0303 	bic.w	r3, r3, #3
 800ad52:	f043 0301 	orr.w	r3, r3, #1
 800ad56:	81a3      	strh	r3, [r4, #12]
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	431d      	orrs	r5, r3
 800ad5c:	81a5      	strh	r5, [r4, #12]
 800ad5e:	e7cf      	b.n	800ad00 <__smakebuf_r+0x18>

0800ad60 <_fstat_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d07      	ldr	r5, [pc, #28]	@ (800ad80 <_fstat_r+0x20>)
 800ad64:	2300      	movs	r3, #0
 800ad66:	4604      	mov	r4, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	602b      	str	r3, [r5, #0]
 800ad6e:	f7f7 fb4b 	bl	8002408 <_fstat>
 800ad72:	1c43      	adds	r3, r0, #1
 800ad74:	d102      	bne.n	800ad7c <_fstat_r+0x1c>
 800ad76:	682b      	ldr	r3, [r5, #0]
 800ad78:	b103      	cbz	r3, 800ad7c <_fstat_r+0x1c>
 800ad7a:	6023      	str	r3, [r4, #0]
 800ad7c:	bd38      	pop	{r3, r4, r5, pc}
 800ad7e:	bf00      	nop
 800ad80:	200005f4 	.word	0x200005f4

0800ad84 <_isatty_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4d06      	ldr	r5, [pc, #24]	@ (800ada0 <_isatty_r+0x1c>)
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	4608      	mov	r0, r1
 800ad8e:	602b      	str	r3, [r5, #0]
 800ad90:	f7f7 fb4a 	bl	8002428 <_isatty>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d102      	bne.n	800ad9e <_isatty_r+0x1a>
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	b103      	cbz	r3, 800ad9e <_isatty_r+0x1a>
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	200005f4 	.word	0x200005f4

0800ada4 <_init>:
 800ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada6:	bf00      	nop
 800ada8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adaa:	bc08      	pop	{r3}
 800adac:	469e      	mov	lr, r3
 800adae:	4770      	bx	lr

0800adb0 <_fini>:
 800adb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb2:	bf00      	nop
 800adb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb6:	bc08      	pop	{r3}
 800adb8:	469e      	mov	lr, r3
 800adba:	4770      	bx	lr
