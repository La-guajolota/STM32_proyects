
modbus_tcp_ip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a80  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08013c50  08013c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013cf8  08013cf8  000151c0  2**0
                  CONTENTS
  4 .ARM          00000008  08013cf8  08013cf8  00014cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d00  08013d00  000151c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d00  08013d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013d04  08013d04  00014d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08013d08  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000080  08013d88  00015080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000120  08013e28  00015120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009638  200001c0  08013ec8  000151c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200097f8  08013ec8  000157f8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000151c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003e84a  00000000  00000000  000151f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000085f5  00000000  00000000  00053a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000033d0  00000000  00000000  0005c030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000281b  00000000  00000000  0005f400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003684c  00000000  00000000  00061c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004420d  00000000  00000000  00098467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012acad  00000000  00000000  000dc674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00207321  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e024  00000000  00000000  00207364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  00215388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c0 	.word	0x200001c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013c38 	.word	0x08013c38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c4 	.word	0x200001c4
 800020c:	08013c38 	.word	0x08013c38

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
	...

08000534 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	4a07      	ldr	r2, [pc, #28]	@ (8000560 <vApplicationGetIdleTaskMemory+0x2c>)
 8000544:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	4a06      	ldr	r2, [pc, #24]	@ (8000564 <vApplicationGetIdleTaskMemory+0x30>)
 800054a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2280      	movs	r2, #128	@ 0x80
 8000550:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	200001dc 	.word	0x200001dc
 8000564:	20000234 	.word	0x20000234

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f002 fc2c 	bl	8002dca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f84d 	bl	8000610 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000576:	f000 f8bd 	bl	80006f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f001 f87b 	bl	8001674 <MX_GPIO_Init>
  MX_ADC3_Init();
 800057e:	f000 f8eb 	bl	8000758 <MX_ADC3_Init>
  MX_CRC_Init();
 8000582:	f000 f93b 	bl	80007fc <MX_CRC_Init>
  MX_DCMI_Init();
 8000586:	f000 f95b 	bl	8000840 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800058a:	f000 f98d 	bl	80008a8 <MX_DMA2D_Init>
  MX_ETH_Init();
 800058e:	f000 f9bd 	bl	800090c <MX_ETH_Init>
  MX_FMC_Init();
 8000592:	f001 f81f 	bl	80015d4 <MX_FMC_Init>
  MX_I2C1_Init();
 8000596:	f000 fa07 	bl	80009a8 <MX_I2C1_Init>
  MX_I2C3_Init();
 800059a:	f000 fa45 	bl	8000a28 <MX_I2C3_Init>
  MX_LTDC_Init();
 800059e:	f000 fa83 	bl	8000aa8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80005a2:	f000 fb03 	bl	8000bac <MX_QUADSPI_Init>
  MX_RTC_Init();
 80005a6:	f000 fb2d 	bl	8000c04 <MX_RTC_Init>
  MX_SAI2_Init();
 80005aa:	f000 fbcf 	bl	8000d4c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80005ae:	f000 fc75 	bl	8000e9c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80005b2:	f000 fc95 	bl	8000ee0 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80005b6:	f000 fcc3 	bl	8000f40 <MX_SPI2_Init>
  MX_TIM1_Init();
 80005ba:	f000 fcff 	bl	8000fbc <MX_TIM1_Init>
  MX_TIM2_Init();
 80005be:	f000 fda9 	bl	8001114 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005c2:	f000 fe1d 	bl	8001200 <MX_TIM3_Init>
  MX_TIM5_Init();
 80005c6:	f000 fe93 	bl	80012f0 <MX_TIM5_Init>
  MX_TIM8_Init();
 80005ca:	f000 ff09 	bl	80013e0 <MX_TIM8_Init>
  MX_TIM12_Init();
 80005ce:	f000 ff5b 	bl	8001488 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80005d2:	f000 ff9f 	bl	8001514 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005d6:	f000 ffcd 	bl	8001574 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80005da:	f00d fe09 	bl	800e1f0 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80005de:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <main+0xa0>)
 80005e0:	1d3c      	adds	r4, r7, #4
 80005e2:	461d      	mov	r5, r3
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f010 fbd1 	bl	8010d9c <osThreadCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a03      	ldr	r2, [pc, #12]	@ (800060c <main+0xa4>)
 80005fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000600:	f010 fba9 	bl	8010d56 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <main+0x9c>
 8000608:	08013c5c 	.word	0x08013c5c
 800060c:	20000d1c 	.word	0x20000d1c

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	@ 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f013 fa6e 	bl	8013b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000634:	f006 fe66 	bl	8007304 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	4b2c      	ldr	r3, [pc, #176]	@ (80006ec <SystemClock_Config+0xdc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a2b      	ldr	r2, [pc, #172]	@ (80006ec <SystemClock_Config+0xdc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <SystemClock_Config+0xdc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <SystemClock_Config+0xe0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a26      	ldr	r2, [pc, #152]	@ (80006f0 <SystemClock_Config+0xe0>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <SystemClock_Config+0xe0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000668:	2309      	movs	r3, #9
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000672:	2301      	movs	r3, #1
 8000674:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000680:	2319      	movs	r3, #25
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000684:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800068e:	2309      	movs	r3, #9
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	4618      	mov	r0, r3
 8000698:	f006 ff56 	bl	8007548 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a2:	f001 f9c1 	bl	8001a28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a6:	f006 fe3d 	bl	8007324 <HAL_PWREx_EnableOverDrive>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006b0:	f001 f9ba 	bl	8001a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2106      	movs	r1, #6
 80006d2:	4618      	mov	r0, r3
 80006d4:	f007 f9dc 	bl	8007a90 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006de:	f001 f9a3 	bl	8001a28 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b0a2      	sub	sp, #136	@ 0x88
 80006f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2284      	movs	r2, #132	@ 0x84
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f013 f9fd 	bl	8013b00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <PeriphCommonClock_Config+0x60>)
 8000708:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800070a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800070e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000710:	2305      	movs	r3, #5
 8000712:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000718:	2303      	movs	r3, #3
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000720:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000724:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000726:	2300      	movs	r3, #0
 8000728:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800072a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800072e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4618      	mov	r0, r3
 800073c:	f007 fbc0 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000746:	f001 f96f 	bl	8001a28 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3788      	adds	r7, #136	@ 0x88
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	00b00008 	.word	0x00b00008

08000758 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800076a:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <MX_ADC3_Init+0x98>)
 800076c:	4a21      	ldr	r2, [pc, #132]	@ (80007f4 <MX_ADC3_Init+0x9c>)
 800076e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <MX_ADC3_Init+0x98>)
 8000772:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000776:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000778:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_ADC3_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <MX_ADC3_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000784:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_ADC3_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <MX_ADC3_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000792:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_ADC3_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000798:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_ADC3_Init+0x98>)
 800079a:	4a17      	ldr	r2, [pc, #92]	@ (80007f8 <MX_ADC3_Init+0xa0>)
 800079c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_ADC3_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_ADC3_Init+0x98>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_ADC3_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_ADC3_Init+0x98>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007b8:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <MX_ADC3_Init+0x98>)
 80007ba:	f002 fb57 	bl	8002e6c <HAL_ADC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80007c4:	f001 f930 	bl	8001a28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007cc:	2301      	movs	r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_ADC3_Init+0x98>)
 80007da:	f002 fb8b 	bl	8002ef4 <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80007e4:	f001 f920 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000046c 	.word	0x2000046c
 80007f4:	40012200 	.word	0x40012200
 80007f8:	0f000001 	.word	0x0f000001

080007fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000800:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <MX_CRC_Init+0x3c>)
 8000802:	4a0e      	ldr	r2, [pc, #56]	@ (800083c <MX_CRC_Init+0x40>)
 8000804:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_CRC_Init+0x3c>)
 8000808:	2200      	movs	r2, #0
 800080a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <MX_CRC_Init+0x3c>)
 800080e:	2200      	movs	r2, #0
 8000810:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_CRC_Init+0x3c>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <MX_CRC_Init+0x3c>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_CRC_Init+0x3c>)
 8000820:	2201      	movs	r2, #1
 8000822:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_CRC_Init+0x3c>)
 8000826:	f002 fe97 	bl	8003558 <HAL_CRC_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000830:	f001 f8fa 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200004b4 	.word	0x200004b4
 800083c:	40023000 	.word	0x40023000

08000840 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000844:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_DCMI_Init+0x60>)
 8000846:	4a17      	ldr	r2, [pc, #92]	@ (80008a4 <MX_DCMI_Init+0x64>)
 8000848:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <MX_DCMI_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000850:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_DCMI_Init+0x60>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000856:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_DCMI_Init+0x60>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <MX_DCMI_Init+0x60>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_DCMI_Init+0x60>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000868:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <MX_DCMI_Init+0x60>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_DCMI_Init+0x60>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <MX_DCMI_Init+0x60>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_DCMI_Init+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <MX_DCMI_Init+0x60>)
 8000882:	2200      	movs	r2, #0
 8000884:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_DCMI_Init+0x60>)
 8000888:	2200      	movs	r2, #0
 800088a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_DCMI_Init+0x60>)
 800088e:	f002 ff55 	bl	800373c <HAL_DCMI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000898:	f001 f8c6 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200004d8 	.word	0x200004d8
 80008a4:	50050000 	.word	0x50050000

080008a8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ae:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <MX_DMA2D_Init+0x60>)
 80008b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008de:	f003 f841 	bl	8003964 <HAL_DMA2D_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008e8:	f001 f89e 	bl	8001a28 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008ec:	2101      	movs	r1, #1
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008f0:	f003 f992 	bl	8003c18 <HAL_DMA2D_ConfigLayer>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008fa:	f001 f895 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000528 	.word	0x20000528
 8000908:	4002b000 	.word	0x4002b000

0800090c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000910:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_ETH_Init+0x84>)
 8000912:	4a20      	ldr	r2, [pc, #128]	@ (8000994 <MX_ETH_Init+0x88>)
 8000914:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000916:	4b20      	ldr	r3, [pc, #128]	@ (8000998 <MX_ETH_Init+0x8c>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800091c:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <MX_ETH_Init+0x8c>)
 800091e:	2280      	movs	r2, #128	@ 0x80
 8000920:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000922:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <MX_ETH_Init+0x8c>)
 8000924:	22e1      	movs	r2, #225	@ 0xe1
 8000926:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <MX_ETH_Init+0x8c>)
 800092a:	2200      	movs	r2, #0
 800092c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_ETH_Init+0x8c>)
 8000930:	2200      	movs	r2, #0
 8000932:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000934:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_ETH_Init+0x8c>)
 8000936:	2200      	movs	r2, #0
 8000938:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_ETH_Init+0x84>)
 800093c:	4a16      	ldr	r2, [pc, #88]	@ (8000998 <MX_ETH_Init+0x8c>)
 800093e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000940:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_ETH_Init+0x84>)
 8000942:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000946:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_ETH_Init+0x84>)
 800094a:	4a14      	ldr	r2, [pc, #80]	@ (800099c <MX_ETH_Init+0x90>)
 800094c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <MX_ETH_Init+0x84>)
 8000950:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <MX_ETH_Init+0x94>)
 8000952:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000954:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_ETH_Init+0x84>)
 8000956:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800095a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <MX_ETH_Init+0x84>)
 800095e:	f003 f9ed 	bl	8003d3c <HAL_ETH_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000968:	f001 f85e 	bl	8001a28 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800096c:	2238      	movs	r2, #56	@ 0x38
 800096e:	2100      	movs	r1, #0
 8000970:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <MX_ETH_Init+0x98>)
 8000972:	f013 f8c5 	bl	8013b00 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <MX_ETH_Init+0x98>)
 8000978:	2221      	movs	r2, #33	@ 0x21
 800097a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_ETH_Init+0x98>)
 800097e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000982:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <MX_ETH_Init+0x98>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000568 	.word	0x20000568
 8000994:	40028000 	.word	0x40028000
 8000998:	20000d20 	.word	0x20000d20
 800099c:	20000120 	.word	0x20000120
 80009a0:	20000080 	.word	0x20000080
 80009a4:	20000434 	.word	0x20000434

080009a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000a20 <MX_I2C1_Init+0x78>)
 80009b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a24 <MX_I2C1_Init+0x7c>)
 80009b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009b8:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009be:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e2:	480e      	ldr	r0, [pc, #56]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009e4:	f005 fff0 	bl	80069c8 <HAL_I2C_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ee:	f001 f81b 	bl	8001a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009f6:	f006 f883 	bl	8006b00 <HAL_I2CEx_ConfigAnalogFilter>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a00:	f001 f812 	bl	8001a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_I2C1_Init+0x74>)
 8000a08:	f006 f8c5 	bl	8006b96 <HAL_I2CEx_ConfigDigitalFilter>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a12:	f001 f809 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000618 	.word	0x20000618
 8000a20:	40005400 	.word	0x40005400
 8000a24:	00c0eaff 	.word	0x00c0eaff

08000a28 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a9c <MX_I2C3_Init+0x74>)
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa0 <MX_I2C3_Init+0x78>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <MX_I2C3_Init+0x74>)
 8000a34:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa4 <MX_I2C3_Init+0x7c>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a38:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <MX_I2C3_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_I2C3_Init+0x74>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_I2C3_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_I2C3_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_I2C3_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_I2C3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_I2C3_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a62:	480e      	ldr	r0, [pc, #56]	@ (8000a9c <MX_I2C3_Init+0x74>)
 8000a64:	f005 ffb0 	bl	80069c8 <HAL_I2C_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a6e:	f000 ffdb 	bl	8001a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a72:	2100      	movs	r1, #0
 8000a74:	4809      	ldr	r0, [pc, #36]	@ (8000a9c <MX_I2C3_Init+0x74>)
 8000a76:	f006 f843 	bl	8006b00 <HAL_I2CEx_ConfigAnalogFilter>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a80:	f000 ffd2 	bl	8001a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_I2C3_Init+0x74>)
 8000a88:	f006 f885 	bl	8006b96 <HAL_I2CEx_ConfigDigitalFilter>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a92:	f000 ffc9 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000066c 	.word	0x2000066c
 8000aa0:	40005c00 	.word	0x40005c00
 8000aa4:	00c0eaff 	.word	0x00c0eaff

08000aa8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	@ 0x38
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2234      	movs	r2, #52	@ 0x34
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f013 f823 	bl	8013b00 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000aba:	4b3a      	ldr	r3, [pc, #232]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000abc:	4a3a      	ldr	r2, [pc, #232]	@ (8000ba8 <MX_LTDC_Init+0x100>)
 8000abe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ac0:	4b38      	ldr	r3, [pc, #224]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ac6:	4b37      	ldr	r3, [pc, #220]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000acc:	4b35      	ldr	r3, [pc, #212]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ad2:	4b34      	ldr	r3, [pc, #208]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000ad8:	4b32      	ldr	r3, [pc, #200]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000ada:	2228      	movs	r2, #40	@ 0x28
 8000adc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000ade:	4b31      	ldr	r3, [pc, #196]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000ae0:	2209      	movs	r2, #9
 8000ae2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000ae6:	2235      	movs	r2, #53	@ 0x35
 8000ae8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000aea:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000aec:	220b      	movs	r2, #11
 8000aee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000af0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000af2:	f240 2215 	movw	r2, #533	@ 0x215
 8000af6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000afa:	f240 121b 	movw	r2, #283	@ 0x11b
 8000afe:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8000b00:	4b28      	ldr	r3, [pc, #160]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000b02:	f240 2235 	movw	r2, #565	@ 0x235
 8000b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000b08:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000b0a:	f240 121d 	movw	r2, #285	@ 0x11d
 8000b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b10:	4b24      	ldr	r3, [pc, #144]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b18:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b20:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b28:	481e      	ldr	r0, [pc, #120]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000b2a:	f006 f881 	bl	8006c30 <HAL_LTDC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000b34:	f000 ff78 	bl	8001a28 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000b3c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b40:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000b46:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000b4a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b50:	23ff      	movs	r3, #255	@ 0xff
 8000b52:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b58:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b5c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b62:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8000b68:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8000b6e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000b72:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000b8e:	f006 f9e1 	bl	8006f54 <HAL_LTDC_ConfigLayer>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000b98:	f000 ff46 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	3738      	adds	r7, #56	@ 0x38
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200006c0 	.word	0x200006c0
 8000ba8:	40016800 	.word	0x40016800

08000bac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <MX_QUADSPI_Init+0x50>)
 8000bb2:	4a13      	ldr	r2, [pc, #76]	@ (8000c00 <MX_QUADSPI_Init+0x54>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <MX_QUADSPI_Init+0x50>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <MX_QUADSPI_Init+0x50>)
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_QUADSPI_Init+0x50>)
 8000bc4:	2210      	movs	r2, #16
 8000bc6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <MX_QUADSPI_Init+0x50>)
 8000bca:	2218      	movs	r2, #24
 8000bcc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <MX_QUADSPI_Init+0x50>)
 8000bd0:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000bd4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <MX_QUADSPI_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <MX_QUADSPI_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <MX_QUADSPI_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	@ (8000bfc <MX_QUADSPI_Init+0x50>)
 8000bea:	f006 fbeb 	bl	80073c4 <HAL_QSPI_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000bf4:	f000 ff18 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000768 	.word	0x20000768
 8000c00:	a0001000 	.word	0xa0001000

08000c04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b090      	sub	sp, #64	@ 0x40
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2228      	movs	r2, #40	@ 0x28
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f012 ff6b 	bl	8013b00 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c2a:	4b46      	ldr	r3, [pc, #280]	@ (8000d44 <MX_RTC_Init+0x140>)
 8000c2c:	4a46      	ldr	r2, [pc, #280]	@ (8000d48 <MX_RTC_Init+0x144>)
 8000c2e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c30:	4b44      	ldr	r3, [pc, #272]	@ (8000d44 <MX_RTC_Init+0x140>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c36:	4b43      	ldr	r3, [pc, #268]	@ (8000d44 <MX_RTC_Init+0x140>)
 8000c38:	227f      	movs	r2, #127	@ 0x7f
 8000c3a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c3c:	4b41      	ldr	r3, [pc, #260]	@ (8000d44 <MX_RTC_Init+0x140>)
 8000c3e:	22ff      	movs	r2, #255	@ 0xff
 8000c40:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c42:	4b40      	ldr	r3, [pc, #256]	@ (8000d44 <MX_RTC_Init+0x140>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c48:	4b3e      	ldr	r3, [pc, #248]	@ (8000d44 <MX_RTC_Init+0x140>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d44 <MX_RTC_Init+0x140>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c54:	483b      	ldr	r0, [pc, #236]	@ (8000d44 <MX_RTC_Init+0x140>)
 8000c56:	f007 fe63 	bl	8008920 <HAL_RTC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000c60:	f000 fee2 	bl	8001a28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c82:	2201      	movs	r2, #1
 8000c84:	4619      	mov	r1, r3
 8000c86:	482f      	ldr	r0, [pc, #188]	@ (8000d44 <MX_RTC_Init+0x140>)
 8000c88:	f007 fece 	bl	8008a28 <HAL_RTC_SetTime>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000c92:	f000 fec9 	bl	8001a28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c96:	2301      	movs	r3, #1
 8000c98:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4823      	ldr	r0, [pc, #140]	@ (8000d44 <MX_RTC_Init+0x140>)
 8000cb8:	f007 ff50 	bl	8008b5c <HAL_RTC_SetDate>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000cc2:	f000 feb1 	bl	8001a28 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000cf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4811      	ldr	r0, [pc, #68]	@ (8000d44 <MX_RTC_Init+0x140>)
 8000cfe:	f007 ffb1 	bl	8008c64 <HAL_RTC_SetAlarm>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000d08:	f000 fe8e 	bl	8001a28 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000d0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d12:	463b      	mov	r3, r7
 8000d14:	2201      	movs	r2, #1
 8000d16:	4619      	mov	r1, r3
 8000d18:	480a      	ldr	r0, [pc, #40]	@ (8000d44 <MX_RTC_Init+0x140>)
 8000d1a:	f007 ffa3 	bl	8008c64 <HAL_RTC_SetAlarm>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000d24:	f000 fe80 	bl	8001a28 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_RTC_Init+0x140>)
 8000d2e:	f008 f963 	bl	8008ff8 <HAL_RTCEx_SetTimeStamp>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000d38:	f000 fe76 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	3740      	adds	r7, #64	@ 0x40
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200007b4 	.word	0x200007b4
 8000d48:	40002800 	.word	0x40002800

08000d4c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d50:	4b4d      	ldr	r3, [pc, #308]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000d52:	4a4e      	ldr	r2, [pc, #312]	@ (8000e8c <MX_SAI2_Init+0x140>)
 8000d54:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d56:	4b4c      	ldr	r3, [pc, #304]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d62:	4b49      	ldr	r3, [pc, #292]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000d64:	2240      	movs	r2, #64	@ 0x40
 8000d66:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d68:	4b47      	ldr	r3, [pc, #284]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d6e:	4b46      	ldr	r3, [pc, #280]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d74:	4b44      	ldr	r3, [pc, #272]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d7a:	4b43      	ldr	r3, [pc, #268]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d80:	4b41      	ldr	r3, [pc, #260]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d86:	4b40      	ldr	r3, [pc, #256]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000d8e:	4a40      	ldr	r2, [pc, #256]	@ (8000e90 <MX_SAI2_Init+0x144>)
 8000d90:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d92:	4b3d      	ldr	r3, [pc, #244]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d98:	4b3b      	ldr	r3, [pc, #236]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d9e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000da4:	4b38      	ldr	r3, [pc, #224]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000daa:	4b37      	ldr	r3, [pc, #220]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000dac:	2208      	movs	r2, #8
 8000dae:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000db0:	4b35      	ldr	r3, [pc, #212]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000db6:	4b34      	ldr	r3, [pc, #208]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000dbc:	4b32      	ldr	r3, [pc, #200]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000dc2:	4b31      	ldr	r3, [pc, #196]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000dce:	4b2e      	ldr	r3, [pc, #184]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000dda:	4b2b      	ldr	r3, [pc, #172]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000de0:	4829      	ldr	r0, [pc, #164]	@ (8000e88 <MX_SAI2_Init+0x13c>)
 8000de2:	f008 f971 	bl	80090c8 <HAL_SAI_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000dec:	f000 fe1c 	bl	8001a28 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000df0:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000df2:	4a29      	ldr	r2, [pc, #164]	@ (8000e98 <MX_SAI2_Init+0x14c>)
 8000df4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000df6:	4b27      	ldr	r3, [pc, #156]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000dfc:	4b25      	ldr	r3, [pc, #148]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000dfe:	2203      	movs	r2, #3
 8000e00:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000e02:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e04:	2240      	movs	r2, #64	@ 0x40
 8000e06:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e40:	2208      	movs	r2, #8
 8000e42:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000e44:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e4a:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e50:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e56:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000e74:	4807      	ldr	r0, [pc, #28]	@ (8000e94 <MX_SAI2_Init+0x148>)
 8000e76:	f008 f927 	bl	80090c8 <HAL_SAI_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000e80:	f000 fdd2 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200007d4 	.word	0x200007d4
 8000e8c:	40015c04 	.word	0x40015c04
 8000e90:	0002ee00 	.word	0x0002ee00
 8000e94:	20000858 	.word	0x20000858
 8000e98:	40015c24 	.word	0x40015c24

08000e9c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8000edc <MX_SDMMC1_SD_Init+0x40>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <MX_SDMMC1_SD_Init+0x3c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <MX_SDMMC1_SD_Init+0x3c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <MX_SDMMC1_SD_Init+0x3c>)
 8000eba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ebe:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000ec6:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200008dc 	.word	0x200008dc
 8000edc:	40012c00 	.word	0x40012c00

08000ee0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <MX_SPDIFRX_Init+0x5c>)
 8000ee6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000eea:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <MX_SPDIFRX_Init+0x5c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000ef2:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_SPDIFRX_Init+0x5c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <MX_SPDIFRX_Init+0x5c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_SPDIFRX_Init+0x5c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000f04:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <MX_SPDIFRX_Init+0x5c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MX_SPDIFRX_Init+0x5c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <MX_SPDIFRX_Init+0x5c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_SPDIFRX_Init+0x5c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <MX_SPDIFRX_Init+0x5c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <MX_SPDIFRX_Init+0x5c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000f28:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <MX_SPDIFRX_Init+0x5c>)
 8000f2a:	f009 fb59 	bl	800a5e0 <HAL_SPDIFRX_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000f34:	f000 fd78 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000960 	.word	0x20000960

08000f40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f46:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb8 <MX_SPI2_Init+0x78>)
 8000f48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f52:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f58:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f5a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f5e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f60:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f66:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f72:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f8e:	2207      	movs	r2, #7
 8000f90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f9e:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_SPI2_Init+0x74>)
 8000fa0:	f009 fb7a 	bl	800a698 <HAL_SPI_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000faa:	f000 fd3d 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200009ac 	.word	0x200009ac
 8000fb8:	40003800 	.word	0x40003800

08000fbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b09a      	sub	sp, #104	@ 0x68
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fdc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
 8000fec:	615a      	str	r2, [r3, #20]
 8000fee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	222c      	movs	r2, #44	@ 0x2c
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f012 fd82 	bl	8013b00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ffc:	4b43      	ldr	r3, [pc, #268]	@ (800110c <MX_TIM1_Init+0x150>)
 8000ffe:	4a44      	ldr	r2, [pc, #272]	@ (8001110 <MX_TIM1_Init+0x154>)
 8001000:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001002:	4b42      	ldr	r3, [pc, #264]	@ (800110c <MX_TIM1_Init+0x150>)
 8001004:	2200      	movs	r2, #0
 8001006:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b40      	ldr	r3, [pc, #256]	@ (800110c <MX_TIM1_Init+0x150>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800100e:	4b3f      	ldr	r3, [pc, #252]	@ (800110c <MX_TIM1_Init+0x150>)
 8001010:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001014:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001016:	4b3d      	ldr	r3, [pc, #244]	@ (800110c <MX_TIM1_Init+0x150>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800101c:	4b3b      	ldr	r3, [pc, #236]	@ (800110c <MX_TIM1_Init+0x150>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b3a      	ldr	r3, [pc, #232]	@ (800110c <MX_TIM1_Init+0x150>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001028:	4838      	ldr	r0, [pc, #224]	@ (800110c <MX_TIM1_Init+0x150>)
 800102a:	f009 fbe0 	bl	800a7ee <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001034:	f000 fcf8 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800103e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001042:	4619      	mov	r1, r3
 8001044:	4831      	ldr	r0, [pc, #196]	@ (800110c <MX_TIM1_Init+0x150>)
 8001046:	f009 ff13 	bl	800ae70 <HAL_TIM_ConfigClockSource>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001050:	f000 fcea 	bl	8001a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001054:	482d      	ldr	r0, [pc, #180]	@ (800110c <MX_TIM1_Init+0x150>)
 8001056:	f009 fc99 	bl	800a98c <HAL_TIM_PWM_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001060:	f000 fce2 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001068:	2300      	movs	r3, #0
 800106a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001070:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001074:	4619      	mov	r1, r3
 8001076:	4825      	ldr	r0, [pc, #148]	@ (800110c <MX_TIM1_Init+0x150>)
 8001078:	f00a fb90 	bl	800b79c <HAL_TIMEx_MasterConfigSynchronization>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001082:	f000 fcd1 	bl	8001a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001086:	2360      	movs	r3, #96	@ 0x60
 8001088:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108e:	2300      	movs	r3, #0
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001092:	2300      	movs	r3, #0
 8001094:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	4818      	ldr	r0, [pc, #96]	@ (800110c <MX_TIM1_Init+0x150>)
 80010ac:	f009 fdcc 	bl	800ac48 <HAL_TIM_PWM_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010b6:	f000 fcb7 	bl	8001a28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	4807      	ldr	r0, [pc, #28]	@ (800110c <MX_TIM1_Init+0x150>)
 80010f0:	f00a fbe2 	bl	800b8b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80010fa:	f000 fc95 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010fe:	4803      	ldr	r0, [pc, #12]	@ (800110c <MX_TIM1_Init+0x150>)
 8001100:	f001 fa9a 	bl	8002638 <HAL_TIM_MspPostInit>

}
 8001104:	bf00      	nop
 8001106:	3768      	adds	r7, #104	@ 0x68
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000a10 	.word	0x20000a10
 8001110:	40010000 	.word	0x40010000

08001114 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08e      	sub	sp, #56	@ 0x38
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
 8001142:	615a      	str	r2, [r3, #20]
 8001144:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001146:	4b2d      	ldr	r3, [pc, #180]	@ (80011fc <MX_TIM2_Init+0xe8>)
 8001148:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800114c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800114e:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <MX_TIM2_Init+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <MX_TIM2_Init+0xe8>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <MX_TIM2_Init+0xe8>)
 800115c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001160:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001162:	4b26      	ldr	r3, [pc, #152]	@ (80011fc <MX_TIM2_Init+0xe8>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <MX_TIM2_Init+0xe8>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800116e:	4823      	ldr	r0, [pc, #140]	@ (80011fc <MX_TIM2_Init+0xe8>)
 8001170:	f009 fb3d 	bl	800a7ee <HAL_TIM_Base_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800117a:	f000 fc55 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001184:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001188:	4619      	mov	r1, r3
 800118a:	481c      	ldr	r0, [pc, #112]	@ (80011fc <MX_TIM2_Init+0xe8>)
 800118c:	f009 fe70 	bl	800ae70 <HAL_TIM_ConfigClockSource>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001196:	f000 fc47 	bl	8001a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800119a:	4818      	ldr	r0, [pc, #96]	@ (80011fc <MX_TIM2_Init+0xe8>)
 800119c:	f009 fbf6 	bl	800a98c <HAL_TIM_PWM_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011a6:	f000 fc3f 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4810      	ldr	r0, [pc, #64]	@ (80011fc <MX_TIM2_Init+0xe8>)
 80011ba:	f00a faef 	bl	800b79c <HAL_TIMEx_MasterConfigSynchronization>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011c4:	f000 fc30 	bl	8001a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c8:	2360      	movs	r3, #96	@ 0x60
 80011ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	4619      	mov	r1, r3
 80011de:	4807      	ldr	r0, [pc, #28]	@ (80011fc <MX_TIM2_Init+0xe8>)
 80011e0:	f009 fd32 	bl	800ac48 <HAL_TIM_PWM_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80011ea:	f000 fc1d 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011ee:	4803      	ldr	r0, [pc, #12]	@ (80011fc <MX_TIM2_Init+0xe8>)
 80011f0:	f001 fa22 	bl	8002638 <HAL_TIM_MspPostInit>

}
 80011f4:	bf00      	nop
 80011f6:	3738      	adds	r7, #56	@ 0x38
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000a5c 	.word	0x20000a5c

08001200 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	@ 0x38
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001232:	4b2d      	ldr	r3, [pc, #180]	@ (80012e8 <MX_TIM3_Init+0xe8>)
 8001234:	4a2d      	ldr	r2, [pc, #180]	@ (80012ec <MX_TIM3_Init+0xec>)
 8001236:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001238:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <MX_TIM3_Init+0xe8>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <MX_TIM3_Init+0xe8>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001244:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <MX_TIM3_Init+0xe8>)
 8001246:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800124a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <MX_TIM3_Init+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <MX_TIM3_Init+0xe8>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001258:	4823      	ldr	r0, [pc, #140]	@ (80012e8 <MX_TIM3_Init+0xe8>)
 800125a:	f009 fac8 	bl	800a7ee <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001264:	f000 fbe0 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800126e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001272:	4619      	mov	r1, r3
 8001274:	481c      	ldr	r0, [pc, #112]	@ (80012e8 <MX_TIM3_Init+0xe8>)
 8001276:	f009 fdfb 	bl	800ae70 <HAL_TIM_ConfigClockSource>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001280:	f000 fbd2 	bl	8001a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001284:	4818      	ldr	r0, [pc, #96]	@ (80012e8 <MX_TIM3_Init+0xe8>)
 8001286:	f009 fb81 	bl	800a98c <HAL_TIM_PWM_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001290:	f000 fbca 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4811      	ldr	r0, [pc, #68]	@ (80012e8 <MX_TIM3_Init+0xe8>)
 80012a4:	f00a fa7a 	bl	800b79c <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012ae:	f000 fbbb 	bl	8001a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b2:	2360      	movs	r3, #96	@ 0x60
 80012b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <MX_TIM3_Init+0xe8>)
 80012ca:	f009 fcbd 	bl	800ac48 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80012d4:	f000 fba8 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <MX_TIM3_Init+0xe8>)
 80012da:	f001 f9ad 	bl	8002638 <HAL_TIM_MspPostInit>

}
 80012de:	bf00      	nop
 80012e0:	3738      	adds	r7, #56	@ 0x38
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000aa8 	.word	0x20000aa8
 80012ec:	40000400 	.word	0x40000400

080012f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08e      	sub	sp, #56	@ 0x38
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001310:	463b      	mov	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001322:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <MX_TIM5_Init+0xe8>)
 8001324:	4a2d      	ldr	r2, [pc, #180]	@ (80013dc <MX_TIM5_Init+0xec>)
 8001326:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001328:	4b2b      	ldr	r3, [pc, #172]	@ (80013d8 <MX_TIM5_Init+0xe8>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b2a      	ldr	r3, [pc, #168]	@ (80013d8 <MX_TIM5_Init+0xe8>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001334:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <MX_TIM5_Init+0xe8>)
 8001336:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800133a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b26      	ldr	r3, [pc, #152]	@ (80013d8 <MX_TIM5_Init+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <MX_TIM5_Init+0xe8>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001348:	4823      	ldr	r0, [pc, #140]	@ (80013d8 <MX_TIM5_Init+0xe8>)
 800134a:	f009 fa50 	bl	800a7ee <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001354:	f000 fb68 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800135e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001362:	4619      	mov	r1, r3
 8001364:	481c      	ldr	r0, [pc, #112]	@ (80013d8 <MX_TIM5_Init+0xe8>)
 8001366:	f009 fd83 	bl	800ae70 <HAL_TIM_ConfigClockSource>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001370:	f000 fb5a 	bl	8001a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001374:	4818      	ldr	r0, [pc, #96]	@ (80013d8 <MX_TIM5_Init+0xe8>)
 8001376:	f009 fb09 	bl	800a98c <HAL_TIM_PWM_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001380:	f000 fb52 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4811      	ldr	r0, [pc, #68]	@ (80013d8 <MX_TIM5_Init+0xe8>)
 8001394:	f00a fa02 	bl	800b79c <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800139e:	f000 fb43 	bl	8001a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a2:	2360      	movs	r3, #96	@ 0x60
 80013a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	220c      	movs	r2, #12
 80013b6:	4619      	mov	r1, r3
 80013b8:	4807      	ldr	r0, [pc, #28]	@ (80013d8 <MX_TIM5_Init+0xe8>)
 80013ba:	f009 fc45 	bl	800ac48 <HAL_TIM_PWM_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80013c4:	f000 fb30 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013c8:	4803      	ldr	r0, [pc, #12]	@ (80013d8 <MX_TIM5_Init+0xe8>)
 80013ca:	f001 f935 	bl	8002638 <HAL_TIM_MspPostInit>

}
 80013ce:	bf00      	nop
 80013d0:	3738      	adds	r7, #56	@ 0x38
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000af4 	.word	0x20000af4
 80013dc:	40000c00 	.word	0x40000c00

080013e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <MX_TIM8_Init+0xa0>)
 8001400:	4a20      	ldr	r2, [pc, #128]	@ (8001484 <MX_TIM8_Init+0xa4>)
 8001402:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001404:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <MX_TIM8_Init+0xa0>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <MX_TIM8_Init+0xa0>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <MX_TIM8_Init+0xa0>)
 8001412:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001416:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <MX_TIM8_Init+0xa0>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800141e:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <MX_TIM8_Init+0xa0>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_TIM8_Init+0xa0>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800142a:	4815      	ldr	r0, [pc, #84]	@ (8001480 <MX_TIM8_Init+0xa0>)
 800142c:	f009 f9df 	bl	800a7ee <HAL_TIM_Base_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001436:	f000 faf7 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800143e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4619      	mov	r1, r3
 8001446:	480e      	ldr	r0, [pc, #56]	@ (8001480 <MX_TIM8_Init+0xa0>)
 8001448:	f009 fd12 	bl	800ae70 <HAL_TIM_ConfigClockSource>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001452:	f000 fae9 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	@ (8001480 <MX_TIM8_Init+0xa0>)
 8001468:	f00a f998 	bl	800b79c <HAL_TIMEx_MasterConfigSynchronization>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001472:	f000 fad9 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000b40 	.word	0x20000b40
 8001484:	40010400 	.word	0x40010400

08001488 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <MX_TIM12_Init+0x84>)
 80014a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001510 <MX_TIM12_Init+0x88>)
 80014a4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80014a6:	4b19      	ldr	r3, [pc, #100]	@ (800150c <MX_TIM12_Init+0x84>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b17      	ldr	r3, [pc, #92]	@ (800150c <MX_TIM12_Init+0x84>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80014b2:	4b16      	ldr	r3, [pc, #88]	@ (800150c <MX_TIM12_Init+0x84>)
 80014b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014b8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ba:	4b14      	ldr	r3, [pc, #80]	@ (800150c <MX_TIM12_Init+0x84>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <MX_TIM12_Init+0x84>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80014c6:	4811      	ldr	r0, [pc, #68]	@ (800150c <MX_TIM12_Init+0x84>)
 80014c8:	f009 fa60 	bl	800a98c <HAL_TIM_PWM_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80014d2:	f000 faa9 	bl	8001a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d6:	2360      	movs	r3, #96	@ 0x60
 80014d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	4619      	mov	r1, r3
 80014ec:	4807      	ldr	r0, [pc, #28]	@ (800150c <MX_TIM12_Init+0x84>)
 80014ee:	f009 fbab 	bl	800ac48 <HAL_TIM_PWM_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80014f8:	f000 fa96 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80014fc:	4803      	ldr	r0, [pc, #12]	@ (800150c <MX_TIM12_Init+0x84>)
 80014fe:	f001 f89b 	bl	8002638 <HAL_TIM_MspPostInit>

}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000b8c 	.word	0x20000b8c
 8001510:	40001800 	.word	0x40001800

08001514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_USART1_UART_Init+0x58>)
 800151a:	4a15      	ldr	r2, [pc, #84]	@ (8001570 <MX_USART1_UART_Init+0x5c>)
 800151c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_USART1_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_USART1_UART_Init+0x58>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <MX_USART1_UART_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001558:	f00a fa4a 	bl	800b9f0 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001562:	f000 fa61 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000bd8 	.word	0x20000bd8
 8001570:	40011000 	.word	0x40011000

08001574 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <MX_USART6_UART_Init+0x58>)
 800157a:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <MX_USART6_UART_Init+0x5c>)
 800157c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_USART6_UART_Init+0x58>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_USART6_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_USART6_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_USART6_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <MX_USART6_UART_Init+0x58>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <MX_USART6_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <MX_USART6_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <MX_USART6_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_USART6_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_USART6_UART_Init+0x58>)
 80015b8:	f00a fa1a 	bl	800b9f0 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80015c2:	f000 fa31 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000c60 	.word	0x20000c60
 80015d0:	40011400 	.word	0x40011400

080015d4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	615a      	str	r2, [r3, #20]
 80015ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015ec:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <MX_FMC_Init+0x98>)
 80015ee:	4a20      	ldr	r2, [pc, #128]	@ (8001670 <MX_FMC_Init+0x9c>)
 80015f0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80015f2:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <MX_FMC_Init+0x98>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80015f8:	4b1c      	ldr	r3, [pc, #112]	@ (800166c <MX_FMC_Init+0x98>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80015fe:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <MX_FMC_Init+0x98>)
 8001600:	2204      	movs	r2, #4
 8001602:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001604:	4b19      	ldr	r3, [pc, #100]	@ (800166c <MX_FMC_Init+0x98>)
 8001606:	2210      	movs	r2, #16
 8001608:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800160a:	4b18      	ldr	r3, [pc, #96]	@ (800166c <MX_FMC_Init+0x98>)
 800160c:	2240      	movs	r2, #64	@ 0x40
 800160e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001610:	4b16      	ldr	r3, [pc, #88]	@ (800166c <MX_FMC_Init+0x98>)
 8001612:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001616:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <MX_FMC_Init+0x98>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800161e:	4b13      	ldr	r3, [pc, #76]	@ (800166c <MX_FMC_Init+0x98>)
 8001620:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001624:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_FMC_Init+0x98>)
 8001628:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <MX_FMC_Init+0x98>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001634:	2302      	movs	r3, #2
 8001636:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001638:	2307      	movs	r3, #7
 800163a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800163c:	2304      	movs	r3, #4
 800163e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001640:	2307      	movs	r3, #7
 8001642:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001644:	2303      	movs	r3, #3
 8001646:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800164c:	2302      	movs	r3, #2
 800164e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	@ (800166c <MX_FMC_Init+0x98>)
 8001656:	f008 ff8e 	bl	800a576 <HAL_SDRAM_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001660:	f000 f9e2 	bl	8001a28 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000ce8 	.word	0x20000ce8
 8001670:	a0000140 	.word	0xa0000140

08001674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b090      	sub	sp, #64	@ 0x40
 8001678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800168a:	4bb0      	ldr	r3, [pc, #704]	@ (800194c <MX_GPIO_Init+0x2d8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4aaf      	ldr	r2, [pc, #700]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001690:	f043 0310 	orr.w	r3, r3, #16
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4bad      	ldr	r3, [pc, #692]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016a2:	4baa      	ldr	r3, [pc, #680]	@ (800194c <MX_GPIO_Init+0x2d8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4aa9      	ldr	r2, [pc, #676]	@ (800194c <MX_GPIO_Init+0x2d8>)
 80016a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4ba7      	ldr	r3, [pc, #668]	@ (800194c <MX_GPIO_Init+0x2d8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4ba4      	ldr	r3, [pc, #656]	@ (800194c <MX_GPIO_Init+0x2d8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4aa3      	ldr	r2, [pc, #652]	@ (800194c <MX_GPIO_Init+0x2d8>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4ba1      	ldr	r3, [pc, #644]	@ (800194c <MX_GPIO_Init+0x2d8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d2:	4b9e      	ldr	r3, [pc, #632]	@ (800194c <MX_GPIO_Init+0x2d8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a9d      	ldr	r2, [pc, #628]	@ (800194c <MX_GPIO_Init+0x2d8>)
 80016d8:	f043 0308 	orr.w	r3, r3, #8
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b9b      	ldr	r3, [pc, #620]	@ (800194c <MX_GPIO_Init+0x2d8>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	4b98      	ldr	r3, [pc, #608]	@ (800194c <MX_GPIO_Init+0x2d8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a97      	ldr	r2, [pc, #604]	@ (800194c <MX_GPIO_Init+0x2d8>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b95      	ldr	r3, [pc, #596]	@ (800194c <MX_GPIO_Init+0x2d8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b92      	ldr	r3, [pc, #584]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a91      	ldr	r2, [pc, #580]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b8f      	ldr	r3, [pc, #572]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800171a:	4b8c      	ldr	r3, [pc, #560]	@ (800194c <MX_GPIO_Init+0x2d8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a8b      	ldr	r2, [pc, #556]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001720:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b89      	ldr	r3, [pc, #548]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001732:	4b86      	ldr	r3, [pc, #536]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a85      	ldr	r2, [pc, #532]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b83      	ldr	r3, [pc, #524]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800174a:	4b80      	ldr	r3, [pc, #512]	@ (800194c <MX_GPIO_Init+0x2d8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a7f      	ldr	r2, [pc, #508]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001750:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b7d      	ldr	r3, [pc, #500]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001762:	4b7a      	ldr	r3, [pc, #488]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a79      	ldr	r2, [pc, #484]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001768:	f043 0320 	orr.w	r3, r3, #32
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b77      	ldr	r3, [pc, #476]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	4b74      	ldr	r3, [pc, #464]	@ (800194c <MX_GPIO_Init+0x2d8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a73      	ldr	r2, [pc, #460]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b71      	ldr	r3, [pc, #452]	@ (800194c <MX_GPIO_Init+0x2d8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001792:	2201      	movs	r2, #1
 8001794:	2120      	movs	r1, #32
 8001796:	486e      	ldr	r0, [pc, #440]	@ (8001950 <MX_GPIO_Init+0x2dc>)
 8001798:	f002 ffe2 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	210c      	movs	r1, #12
 80017a0:	486c      	ldr	r0, [pc, #432]	@ (8001954 <MX_GPIO_Init+0x2e0>)
 80017a2:	f002 ffdd 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80017a6:	2201      	movs	r2, #1
 80017a8:	2108      	movs	r1, #8
 80017aa:	486b      	ldr	r0, [pc, #428]	@ (8001958 <MX_GPIO_Init+0x2e4>)
 80017ac:	f002 ffd8 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80017b0:	2201      	movs	r2, #1
 80017b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017b6:	4867      	ldr	r0, [pc, #412]	@ (8001954 <MX_GPIO_Init+0x2e0>)
 80017b8:	f002 ffd2 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017c2:	4866      	ldr	r0, [pc, #408]	@ (800195c <MX_GPIO_Init+0x2e8>)
 80017c4:	f002 ffcc 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	21c8      	movs	r1, #200	@ 0xc8
 80017cc:	4864      	ldr	r0, [pc, #400]	@ (8001960 <MX_GPIO_Init+0x2ec>)
 80017ce:	f002 ffc7 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80017d2:	2308      	movs	r3, #8
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d6:	2300      	movs	r3, #0
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017e2:	4619      	mov	r1, r3
 80017e4:	485f      	ldr	r0, [pc, #380]	@ (8001964 <MX_GPIO_Init+0x2f0>)
 80017e6:	f002 fdf7 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80017ea:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017fc:	230a      	movs	r3, #10
 80017fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001804:	4619      	mov	r1, r3
 8001806:	4858      	ldr	r0, [pc, #352]	@ (8001968 <MX_GPIO_Init+0x2f4>)
 8001808:	f002 fde6 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800180c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800181e:	4619      	mov	r1, r3
 8001820:	4852      	ldr	r0, [pc, #328]	@ (800196c <MX_GPIO_Init+0x2f8>)
 8001822:	f002 fdd9 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001826:	2340      	movs	r3, #64	@ 0x40
 8001828:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800182a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800182e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001838:	4619      	mov	r1, r3
 800183a:	4845      	ldr	r0, [pc, #276]	@ (8001950 <MX_GPIO_Init+0x2dc>)
 800183c:	f002 fdcc 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001840:	2320      	movs	r3, #32
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001854:	4619      	mov	r1, r3
 8001856:	483e      	ldr	r0, [pc, #248]	@ (8001950 <MX_GPIO_Init+0x2dc>)
 8001858:	f002 fdbe 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800185c:	f241 030c 	movw	r3, #4108	@ 0x100c
 8001860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	2301      	movs	r3, #1
 8001864:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800186e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001872:	4619      	mov	r1, r3
 8001874:	4837      	ldr	r0, [pc, #220]	@ (8001954 <MX_GPIO_Init+0x2e0>)
 8001876:	f002 fdaf 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800187a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800187e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001880:	2300      	movs	r3, #0
 8001882:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800188c:	4619      	mov	r1, r3
 800188e:	4838      	ldr	r0, [pc, #224]	@ (8001970 <MX_GPIO_Init+0x2fc>)
 8001890:	f002 fda2 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001894:	2308      	movs	r3, #8
 8001896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018a8:	4619      	mov	r1, r3
 80018aa:	482b      	ldr	r0, [pc, #172]	@ (8001958 <MX_GPIO_Init+0x2e4>)
 80018ac:	f002 fd94 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018b0:	2310      	movs	r3, #16
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b4:	2300      	movs	r3, #0
 80018b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	4823      	ldr	r0, [pc, #140]	@ (8001950 <MX_GPIO_Init+0x2dc>)
 80018c4:	f002 fd88 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80018c8:	f248 0304 	movw	r3, #32772	@ 0x8004
 80018cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ce:	2300      	movs	r3, #0
 80018d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018da:	4619      	mov	r1, r3
 80018dc:	481f      	ldr	r0, [pc, #124]	@ (800195c <MX_GPIO_Init+0x2e8>)
 80018de:	f002 fd7b 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80018e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018f8:	4619      	mov	r1, r3
 80018fa:	4818      	ldr	r0, [pc, #96]	@ (800195c <MX_GPIO_Init+0x2e8>)
 80018fc:	f002 fd6c 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001900:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001906:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800190a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001914:	4619      	mov	r1, r3
 8001916:	480f      	ldr	r0, [pc, #60]	@ (8001954 <MX_GPIO_Init+0x2e0>)
 8001918:	f002 fd5e 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800191c:	2310      	movs	r3, #16
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800192c:	230a      	movs	r3, #10
 800192e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001934:	4619      	mov	r1, r3
 8001936:	4809      	ldr	r0, [pc, #36]	@ (800195c <MX_GPIO_Init+0x2e8>)
 8001938:	f002 fd4e 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800193c:	23c8      	movs	r3, #200	@ 0xc8
 800193e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001940:	2301      	movs	r3, #1
 8001942:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	637b      	str	r3, [r7, #52]	@ 0x34
 8001948:	e014      	b.n	8001974 <MX_GPIO_Init+0x300>
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40020c00 	.word	0x40020c00
 8001954:	40022000 	.word	0x40022000
 8001958:	40022800 	.word	0x40022800
 800195c:	40021c00 	.word	0x40021c00
 8001960:	40021800 	.word	0x40021800
 8001964:	40021000 	.word	0x40021000
 8001968:	40020400 	.word	0x40020400
 800196c:	40022400 	.word	0x40022400
 8001970:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001978:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800197c:	4619      	mov	r1, r3
 800197e:	4819      	ldr	r0, [pc, #100]	@ (80019e4 <MX_GPIO_Init+0x370>)
 8001980:	f002 fd2a 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001984:	2305      	movs	r3, #5
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001994:	230a      	movs	r3, #10
 8001996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001998:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800199c:	4619      	mov	r1, r3
 800199e:	4812      	ldr	r0, [pc, #72]	@ (80019e8 <MX_GPIO_Init+0x374>)
 80019a0:	f002 fd1a 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80019a4:	2304      	movs	r3, #4
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80019b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b4:	4619      	mov	r1, r3
 80019b6:	480b      	ldr	r0, [pc, #44]	@ (80019e4 <MX_GPIO_Init+0x370>)
 80019b8:	f002 fd0e 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80019bc:	2328      	movs	r3, #40	@ 0x28
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019cc:	230a      	movs	r3, #10
 80019ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019d4:	4619      	mov	r1, r3
 80019d6:	4805      	ldr	r0, [pc, #20]	@ (80019ec <MX_GPIO_Init+0x378>)
 80019d8:	f002 fcfe 	bl	80043d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019dc:	bf00      	nop
 80019de:	3740      	adds	r7, #64	@ 0x40
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021800 	.word	0x40021800
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40020000 	.word	0x40020000

080019f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80019f8:	f011 fccc 	bl	8013394 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f00f fa19 	bl	8010e34 <osDelay>
 8001a02:	e7fb      	b.n	80019fc <StartDefaultTask+0xc>

08001a04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a16:	f001 f9e5 	bl	8002de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40001000 	.word	0x40001000

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <Error_Handler+0x8>

08001a34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	4a10      	ldr	r2, [pc, #64]	@ (8001a80 <HAL_MspInit+0x4c>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <HAL_MspInit+0x4c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <HAL_MspInit+0x4c>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <HAL_MspInit+0x4c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	f06f 0001 	mvn.w	r0, #1
 8001a72:	f001 fd47 	bl	8003504 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800

08001a84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a21      	ldr	r2, [pc, #132]	@ (8001b28 <HAL_ADC_MspInit+0xa4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d13c      	bne.n	8001b20 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <HAL_ADC_MspInit+0xa8>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	4a20      	ldr	r2, [pc, #128]	@ (8001b2c <HAL_ADC_MspInit+0xa8>)
 8001aac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <HAL_ADC_MspInit+0xa8>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001abe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <HAL_ADC_MspInit+0xa8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8001b2c <HAL_ADC_MspInit+0xa8>)
 8001ac4:	f043 0320 	orr.w	r3, r3, #32
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <HAL_ADC_MspInit+0xa8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0320 	and.w	r3, r3, #32
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_ADC_MspInit+0xa8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a14      	ldr	r2, [pc, #80]	@ (8001b2c <HAL_ADC_MspInit+0xa8>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_ADC_MspInit+0xa8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001aee:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001af2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af4:	2303      	movs	r3, #3
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	480b      	ldr	r0, [pc, #44]	@ (8001b30 <HAL_ADC_MspInit+0xac>)
 8001b04:	f002 fc68 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	@ (8001b34 <HAL_ADC_MspInit+0xb0>)
 8001b1c:	f002 fc5c 	bl	80043d8 <HAL_GPIO_Init>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001b20:	bf00      	nop
 8001b22:	3728      	adds	r7, #40	@ 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40012200 	.word	0x40012200
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40021400 	.word	0x40021400
 8001b34:	40020000 	.word	0x40020000

08001b38 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <HAL_CRC_MspInit+0x38>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10b      	bne.n	8001b62 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <HAL_CRC_MspInit+0x3c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a09      	ldr	r2, [pc, #36]	@ (8001b74 <HAL_CRC_MspInit+0x3c>)
 8001b50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <HAL_CRC_MspInit+0x3c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023000 	.word	0x40023000
 8001b74:	40023800 	.word	0x40023800

08001b78 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08e      	sub	sp, #56	@ 0x38
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a50      	ldr	r2, [pc, #320]	@ (8001cd8 <HAL_DCMI_MspInit+0x160>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	f040 809a 	bne.w	8001cd0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001b9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba0:	4a4e      	ldr	r2, [pc, #312]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	623b      	str	r3, [r7, #32]
 8001bb2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bb4:	4b49      	ldr	r3, [pc, #292]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	4a48      	ldr	r2, [pc, #288]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc0:	4b46      	ldr	r3, [pc, #280]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bcc:	4b43      	ldr	r3, [pc, #268]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd0:	4a42      	ldr	r2, [pc, #264]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001bd2:	f043 0308 	orr.w	r3, r3, #8
 8001bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd8:	4b40      	ldr	r3, [pc, #256]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001be4:	4b3d      	ldr	r3, [pc, #244]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	4a3c      	ldr	r2, [pc, #240]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bfc:	4b37      	ldr	r3, [pc, #220]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	4a36      	ldr	r2, [pc, #216]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c08:	4b34      	ldr	r3, [pc, #208]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	4b31      	ldr	r3, [pc, #196]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c18:	4a30      	ldr	r2, [pc, #192]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c20:	4b2e      	ldr	r3, [pc, #184]	@ (8001cdc <HAL_DCMI_MspInit+0x164>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001c2c:	2360      	movs	r3, #96	@ 0x60
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c3c:	230d      	movs	r3, #13
 8001c3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c44:	4619      	mov	r1, r3
 8001c46:	4826      	ldr	r0, [pc, #152]	@ (8001ce0 <HAL_DCMI_MspInit+0x168>)
 8001c48:	f002 fbc6 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c5c:	230d      	movs	r3, #13
 8001c5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c64:	4619      	mov	r1, r3
 8001c66:	481f      	ldr	r0, [pc, #124]	@ (8001ce4 <HAL_DCMI_MspInit+0x16c>)
 8001c68:	f002 fbb6 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c7e:	230d      	movs	r3, #13
 8001c80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c86:	4619      	mov	r1, r3
 8001c88:	4817      	ldr	r0, [pc, #92]	@ (8001ce8 <HAL_DCMI_MspInit+0x170>)
 8001c8a:	f002 fba5 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001c8e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ca0:	230d      	movs	r3, #13
 8001ca2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4810      	ldr	r0, [pc, #64]	@ (8001cec <HAL_DCMI_MspInit+0x174>)
 8001cac:	f002 fb94 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001cb0:	2350      	movs	r3, #80	@ 0x50
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cc0:	230d      	movs	r3, #13
 8001cc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4809      	ldr	r0, [pc, #36]	@ (8001cf0 <HAL_DCMI_MspInit+0x178>)
 8001ccc:	f002 fb84 	bl	80043d8 <HAL_GPIO_Init>

  /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001cd0:	bf00      	nop
 8001cd2:	3738      	adds	r7, #56	@ 0x38
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	50050000 	.word	0x50050000
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	40021800 	.word	0x40021800
 8001cec:	40021c00 	.word	0x40021c00
 8001cf0:	40020000 	.word	0x40020000

08001cf4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <HAL_DMA2D_MspInit+0x44>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d113      	bne.n	8001d2e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d06:	4b0d      	ldr	r3, [pc, #52]	@ (8001d3c <HAL_DMA2D_MspInit+0x48>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d3c <HAL_DMA2D_MspInit+0x48>)
 8001d0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <HAL_DMA2D_MspInit+0x48>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2105      	movs	r1, #5
 8001d22:	205a      	movs	r0, #90	@ 0x5a
 8001d24:	f001 fbee 	bl	8003504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001d28:	205a      	movs	r0, #90	@ 0x5a
 8001d2a:	f001 fc07 	bl	800353c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	4002b000 	.word	0x4002b000
 8001d3c:	40023800 	.word	0x40023800

08001d40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	@ 0x38
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a3f      	ldr	r2, [pc, #252]	@ (8001e5c <HAL_ETH_MspInit+0x11c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d178      	bne.n	8001e54 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001d62:	4b3f      	ldr	r3, [pc, #252]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a3e      	ldr	r2, [pc, #248]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001d68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d76:	623b      	str	r3, [r7, #32]
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	4b39      	ldr	r3, [pc, #228]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a38      	ldr	r2, [pc, #224]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001d80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b36      	ldr	r3, [pc, #216]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	4b33      	ldr	r3, [pc, #204]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	4a32      	ldr	r2, [pc, #200]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001d98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9e:	4b30      	ldr	r3, [pc, #192]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001daa:	4b2d      	ldr	r3, [pc, #180]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a2c      	ldr	r2, [pc, #176]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001db0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	4b27      	ldr	r3, [pc, #156]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	4a26      	ldr	r2, [pc, #152]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dce:	4b24      	ldr	r3, [pc, #144]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	4b21      	ldr	r3, [pc, #132]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a20      	ldr	r2, [pc, #128]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <HAL_ETH_MspInit+0x120>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001df2:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e04:	230b      	movs	r3, #11
 8001e06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4815      	ldr	r0, [pc, #84]	@ (8001e64 <HAL_ETH_MspInit+0x124>)
 8001e10:	f002 fae2 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e14:	2332      	movs	r3, #50	@ 0x32
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e20:	2303      	movs	r3, #3
 8001e22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e24:	230b      	movs	r3, #11
 8001e26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480e      	ldr	r0, [pc, #56]	@ (8001e68 <HAL_ETH_MspInit+0x128>)
 8001e30:	f002 fad2 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e34:	2386      	movs	r3, #134	@ 0x86
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e44:	230b      	movs	r3, #11
 8001e46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4807      	ldr	r0, [pc, #28]	@ (8001e6c <HAL_ETH_MspInit+0x12c>)
 8001e50:	f002 fac2 	bl	80043d8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001e54:	bf00      	nop
 8001e56:	3738      	adds	r7, #56	@ 0x38
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40028000 	.word	0x40028000
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40021800 	.word	0x40021800
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020000 	.word	0x40020000

08001e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b0ac      	sub	sp, #176	@ 0xb0
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e88:	f107 0318 	add.w	r3, r7, #24
 8001e8c:	2284      	movs	r2, #132	@ 0x84
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f011 fe35 	bl	8013b00 <memset>
  if(hi2c->Instance==I2C1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a44      	ldr	r2, [pc, #272]	@ (8001fac <HAL_I2C_MspInit+0x13c>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d13d      	bne.n	8001f1c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ea0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ea4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eaa:	f107 0318 	add.w	r3, r7, #24
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f006 f806 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001eba:	f7ff fdb5 	bl	8001a28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb0 <HAL_I2C_MspInit+0x140>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	4a3b      	ldr	r2, [pc, #236]	@ (8001fb0 <HAL_I2C_MspInit+0x140>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eca:	4b39      	ldr	r3, [pc, #228]	@ (8001fb0 <HAL_I2C_MspInit+0x140>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001ed6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001eda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ede:	2312      	movs	r3, #18
 8001ee0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001efa:	4619      	mov	r1, r3
 8001efc:	482d      	ldr	r0, [pc, #180]	@ (8001fb4 <HAL_I2C_MspInit+0x144>)
 8001efe:	f002 fa6b 	bl	80043d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f02:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb0 <HAL_I2C_MspInit+0x140>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	4a2a      	ldr	r2, [pc, #168]	@ (8001fb0 <HAL_I2C_MspInit+0x140>)
 8001f08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0e:	4b28      	ldr	r3, [pc, #160]	@ (8001fb0 <HAL_I2C_MspInit+0x140>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f1a:	e042      	b.n	8001fa2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a25      	ldr	r2, [pc, #148]	@ (8001fb8 <HAL_I2C_MspInit+0x148>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d13d      	bne.n	8001fa2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001f26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f32:	f107 0318 	add.w	r3, r7, #24
 8001f36:	4618      	mov	r0, r3
 8001f38:	f005 ffc2 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001f42:	f7ff fd71 	bl	8001a28 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f46:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <HAL_I2C_MspInit+0x140>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	4a19      	ldr	r2, [pc, #100]	@ (8001fb0 <HAL_I2C_MspInit+0x140>)
 8001f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f52:	4b17      	ldr	r3, [pc, #92]	@ (8001fb0 <HAL_I2C_MspInit+0x140>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001f5e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001f62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f66:	2312      	movs	r3, #18
 8001f68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f7e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f82:	4619      	mov	r1, r3
 8001f84:	480d      	ldr	r0, [pc, #52]	@ (8001fbc <HAL_I2C_MspInit+0x14c>)
 8001f86:	f002 fa27 	bl	80043d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <HAL_I2C_MspInit+0x140>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	4a08      	ldr	r2, [pc, #32]	@ (8001fb0 <HAL_I2C_MspInit+0x140>)
 8001f90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_I2C_MspInit+0x140>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
}
 8001fa2:	bf00      	nop
 8001fa4:	37b0      	adds	r7, #176	@ 0xb0
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40005400 	.word	0x40005400
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020400 	.word	0x40020400
 8001fb8:	40005c00 	.word	0x40005c00
 8001fbc:	40021c00 	.word	0x40021c00

08001fc0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08e      	sub	sp, #56	@ 0x38
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a55      	ldr	r2, [pc, #340]	@ (8002134 <HAL_LTDC_MspInit+0x174>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	f040 80a3 	bne.w	800212a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fe4:	4b54      	ldr	r3, [pc, #336]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe8:	4a53      	ldr	r2, [pc, #332]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 8001fea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001fee:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff0:	4b51      	ldr	r3, [pc, #324]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ff8:	623b      	str	r3, [r7, #32]
 8001ffa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ffc:	4b4e      	ldr	r3, [pc, #312]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002000:	4a4d      	ldr	r2, [pc, #308]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 8002002:	f043 0310 	orr.w	r3, r3, #16
 8002006:	6313      	str	r3, [r2, #48]	@ 0x30
 8002008:	4b4b      	ldr	r3, [pc, #300]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002014:	4b48      	ldr	r3, [pc, #288]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002018:	4a47      	ldr	r2, [pc, #284]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 800201a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800201e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002020:	4b45      	ldr	r3, [pc, #276]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800202c:	4b42      	ldr	r3, [pc, #264]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002030:	4a41      	ldr	r2, [pc, #260]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 8002032:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002036:	6313      	str	r3, [r2, #48]	@ 0x30
 8002038:	4b3f      	ldr	r3, [pc, #252]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002044:	4b3c      	ldr	r3, [pc, #240]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002048:	4a3b      	ldr	r2, [pc, #236]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 800204a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800204e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002050:	4b39      	ldr	r3, [pc, #228]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800205c:	4b36      	ldr	r3, [pc, #216]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	4a35      	ldr	r2, [pc, #212]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 8002062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002066:	6313      	str	r3, [r2, #48]	@ 0x30
 8002068:	4b33      	ldr	r3, [pc, #204]	@ (8002138 <HAL_LTDC_MspInit+0x178>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002074:	2310      	movs	r3, #16
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002084:	230e      	movs	r3, #14
 8002086:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800208c:	4619      	mov	r1, r3
 800208e:	482b      	ldr	r0, [pc, #172]	@ (800213c <HAL_LTDC_MspInit+0x17c>)
 8002090:	f002 f9a2 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002094:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020a6:	230e      	movs	r3, #14
 80020a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ae:	4619      	mov	r1, r3
 80020b0:	4823      	ldr	r0, [pc, #140]	@ (8002140 <HAL_LTDC_MspInit+0x180>)
 80020b2:	f002 f991 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80020b6:	23f7      	movs	r3, #247	@ 0xf7
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020c6:	230e      	movs	r3, #14
 80020c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ce:	4619      	mov	r1, r3
 80020d0:	481c      	ldr	r0, [pc, #112]	@ (8002144 <HAL_LTDC_MspInit+0x184>)
 80020d2:	f002 f981 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80020d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020e8:	2309      	movs	r3, #9
 80020ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80020ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f0:	4619      	mov	r1, r3
 80020f2:	4815      	ldr	r0, [pc, #84]	@ (8002148 <HAL_LTDC_MspInit+0x188>)
 80020f4:	f002 f970 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80020f8:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800210a:	230e      	movs	r3, #14
 800210c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800210e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002112:	4619      	mov	r1, r3
 8002114:	480d      	ldr	r0, [pc, #52]	@ (800214c <HAL_LTDC_MspInit+0x18c>)
 8002116:	f002 f95f 	bl	80043d8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2105      	movs	r1, #5
 800211e:	2058      	movs	r0, #88	@ 0x58
 8002120:	f001 f9f0 	bl	8003504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002124:	2058      	movs	r0, #88	@ 0x58
 8002126:	f001 fa09 	bl	800353c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800212a:	bf00      	nop
 800212c:	3738      	adds	r7, #56	@ 0x38
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40016800 	.word	0x40016800
 8002138:	40023800 	.word	0x40023800
 800213c:	40021000 	.word	0x40021000
 8002140:	40022400 	.word	0x40022400
 8002144:	40022800 	.word	0x40022800
 8002148:	40021800 	.word	0x40021800
 800214c:	40022000 	.word	0x40022000

08002150 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	@ 0x30
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a3b      	ldr	r2, [pc, #236]	@ (800225c <HAL_QSPI_MspInit+0x10c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d170      	bne.n	8002254 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002172:	4b3b      	ldr	r3, [pc, #236]	@ (8002260 <HAL_QSPI_MspInit+0x110>)
 8002174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002176:	4a3a      	ldr	r2, [pc, #232]	@ (8002260 <HAL_QSPI_MspInit+0x110>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	6393      	str	r3, [r2, #56]	@ 0x38
 800217e:	4b38      	ldr	r3, [pc, #224]	@ (8002260 <HAL_QSPI_MspInit+0x110>)
 8002180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800218a:	4b35      	ldr	r3, [pc, #212]	@ (8002260 <HAL_QSPI_MspInit+0x110>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a34      	ldr	r2, [pc, #208]	@ (8002260 <HAL_QSPI_MspInit+0x110>)
 8002190:	f043 0310 	orr.w	r3, r3, #16
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b32      	ldr	r3, [pc, #200]	@ (8002260 <HAL_QSPI_MspInit+0x110>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002260 <HAL_QSPI_MspInit+0x110>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a2e      	ldr	r2, [pc, #184]	@ (8002260 <HAL_QSPI_MspInit+0x110>)
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002260 <HAL_QSPI_MspInit+0x110>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ba:	4b29      	ldr	r3, [pc, #164]	@ (8002260 <HAL_QSPI_MspInit+0x110>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	4a28      	ldr	r2, [pc, #160]	@ (8002260 <HAL_QSPI_MspInit+0x110>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c6:	4b26      	ldr	r3, [pc, #152]	@ (8002260 <HAL_QSPI_MspInit+0x110>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80021d2:	2304      	movs	r3, #4
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021e2:	2309      	movs	r3, #9
 80021e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	4619      	mov	r1, r3
 80021ec:	481d      	ldr	r0, [pc, #116]	@ (8002264 <HAL_QSPI_MspInit+0x114>)
 80021ee:	f002 f8f3 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80021f2:	2340      	movs	r3, #64	@ 0x40
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002202:	230a      	movs	r3, #10
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	4619      	mov	r1, r3
 800220c:	4816      	ldr	r0, [pc, #88]	@ (8002268 <HAL_QSPI_MspInit+0x118>)
 800220e:	f002 f8e3 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002212:	2304      	movs	r3, #4
 8002214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002222:	2309      	movs	r3, #9
 8002224:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002226:	f107 031c 	add.w	r3, r7, #28
 800222a:	4619      	mov	r1, r3
 800222c:	480e      	ldr	r0, [pc, #56]	@ (8002268 <HAL_QSPI_MspInit+0x118>)
 800222e:	f002 f8d3 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002232:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002244:	2309      	movs	r3, #9
 8002246:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	4807      	ldr	r0, [pc, #28]	@ (800226c <HAL_QSPI_MspInit+0x11c>)
 8002250:	f002 f8c2 	bl	80043d8 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002254:	bf00      	nop
 8002256:	3730      	adds	r7, #48	@ 0x30
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	a0001000 	.word	0xa0001000
 8002260:	40023800 	.word	0x40023800
 8002264:	40021000 	.word	0x40021000
 8002268:	40020400 	.word	0x40020400
 800226c:	40020c00 	.word	0x40020c00

08002270 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b0a4      	sub	sp, #144	@ 0x90
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	2284      	movs	r2, #132	@ 0x84
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f011 fc3d 	bl	8013b00 <memset>
  if(hrtc->Instance==RTC)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a0e      	ldr	r2, [pc, #56]	@ (80022c4 <HAL_RTC_MspInit+0x54>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d114      	bne.n	80022ba <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002290:	2320      	movs	r3, #32
 8002292:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002294:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002298:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	4618      	mov	r0, r3
 80022a0:	f005 fe0e 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80022aa:	f7ff fbbd 	bl	8001a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_RTC_MspInit+0x58>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b2:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <HAL_RTC_MspInit+0x58>)
 80022b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022b8:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80022ba:	bf00      	nop
 80022bc:	3790      	adds	r7, #144	@ 0x90
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40002800 	.word	0x40002800
 80022c8:	40023800 	.word	0x40023800

080022cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	@ 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a25      	ldr	r2, [pc, #148]	@ (8002380 <HAL_SD_MspInit+0xb4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d144      	bne.n	8002378 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80022ee:	4b25      	ldr	r3, [pc, #148]	@ (8002384 <HAL_SD_MspInit+0xb8>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	4a24      	ldr	r2, [pc, #144]	@ (8002384 <HAL_SD_MspInit+0xb8>)
 80022f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022fa:	4b22      	ldr	r3, [pc, #136]	@ (8002384 <HAL_SD_MspInit+0xb8>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002306:	4b1f      	ldr	r3, [pc, #124]	@ (8002384 <HAL_SD_MspInit+0xb8>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	4a1e      	ldr	r2, [pc, #120]	@ (8002384 <HAL_SD_MspInit+0xb8>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	6313      	str	r3, [r2, #48]	@ 0x30
 8002312:	4b1c      	ldr	r3, [pc, #112]	@ (8002384 <HAL_SD_MspInit+0xb8>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800231e:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_SD_MspInit+0xb8>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	4a18      	ldr	r2, [pc, #96]	@ (8002384 <HAL_SD_MspInit+0xb8>)
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	6313      	str	r3, [r2, #48]	@ 0x30
 800232a:	4b16      	ldr	r3, [pc, #88]	@ (8002384 <HAL_SD_MspInit+0xb8>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002336:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800233a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002348:	230c      	movs	r3, #12
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	4619      	mov	r1, r3
 8002352:	480d      	ldr	r0, [pc, #52]	@ (8002388 <HAL_SD_MspInit+0xbc>)
 8002354:	f002 f840 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002358:	2304      	movs	r3, #4
 800235a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002368:	230c      	movs	r3, #12
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	4806      	ldr	r0, [pc, #24]	@ (800238c <HAL_SD_MspInit+0xc0>)
 8002374:	f002 f830 	bl	80043d8 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002378:	bf00      	nop
 800237a:	3728      	adds	r7, #40	@ 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40012c00 	.word	0x40012c00
 8002384:	40023800 	.word	0x40023800
 8002388:	40020800 	.word	0x40020800
 800238c:	40020c00 	.word	0x40020c00

08002390 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b0aa      	sub	sp, #168	@ 0xa8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	2284      	movs	r2, #132	@ 0x84
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f011 fba5 	bl	8013b00 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80023be:	d143      	bne.n	8002448 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80023c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80023c6:	2364      	movs	r3, #100	@ 0x64
 80023c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80023ca:	2302      	movs	r3, #2
 80023cc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80023ce:	2302      	movs	r3, #2
 80023d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80023d2:	2302      	movs	r3, #2
 80023d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80023d6:	2301      	movs	r3, #1
 80023d8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023da:	f107 0310 	add.w	r3, r7, #16
 80023de:	4618      	mov	r0, r3
 80023e0:	f005 fd6e 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 80023ea:	f7ff fb1d 	bl	8001a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80023ee:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <HAL_SPDIFRX_MspInit+0xc0>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	4a17      	ldr	r2, [pc, #92]	@ (8002450 <HAL_SPDIFRX_MspInit+0xc0>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_SPDIFRX_MspInit+0xc0>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_SPDIFRX_MspInit+0xc0>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	4a11      	ldr	r2, [pc, #68]	@ (8002450 <HAL_SPDIFRX_MspInit+0xc0>)
 800240c:	f043 0308 	orr.w	r3, r3, #8
 8002410:	6313      	str	r3, [r2, #48]	@ 0x30
 8002412:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <HAL_SPDIFRX_MspInit+0xc0>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002436:	2308      	movs	r3, #8
 8002438:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800243c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002440:	4619      	mov	r1, r3
 8002442:	4804      	ldr	r0, [pc, #16]	@ (8002454 <HAL_SPDIFRX_MspInit+0xc4>)
 8002444:	f001 ffc8 	bl	80043d8 <HAL_GPIO_Init>

  /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8002448:	bf00      	nop
 800244a:	37a8      	adds	r7, #168	@ 0xa8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	40020c00 	.word	0x40020c00

08002458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a25      	ldr	r2, [pc, #148]	@ (800250c <HAL_SPI_MspInit+0xb4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d144      	bne.n	8002504 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800247a:	4b25      	ldr	r3, [pc, #148]	@ (8002510 <HAL_SPI_MspInit+0xb8>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	4a24      	ldr	r2, [pc, #144]	@ (8002510 <HAL_SPI_MspInit+0xb8>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002484:	6413      	str	r3, [r2, #64]	@ 0x40
 8002486:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <HAL_SPI_MspInit+0xb8>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002492:	4b1f      	ldr	r3, [pc, #124]	@ (8002510 <HAL_SPI_MspInit+0xb8>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	4a1e      	ldr	r2, [pc, #120]	@ (8002510 <HAL_SPI_MspInit+0xb8>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800249c:	6313      	str	r3, [r2, #48]	@ 0x30
 800249e:	4b1c      	ldr	r3, [pc, #112]	@ (8002510 <HAL_SPI_MspInit+0xb8>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <HAL_SPI_MspInit+0xb8>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	4a18      	ldr	r2, [pc, #96]	@ (8002510 <HAL_SPI_MspInit+0xb8>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b6:	4b16      	ldr	r3, [pc, #88]	@ (8002510 <HAL_SPI_MspInit+0xb8>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80024c2:	2302      	movs	r3, #2
 80024c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	2300      	movs	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024d2:	2305      	movs	r3, #5
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	4619      	mov	r1, r3
 80024dc:	480d      	ldr	r0, [pc, #52]	@ (8002514 <HAL_SPI_MspInit+0xbc>)
 80024de:	f001 ff7b 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80024e2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80024e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024f4:	2305      	movs	r3, #5
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	4806      	ldr	r0, [pc, #24]	@ (8002518 <HAL_SPI_MspInit+0xc0>)
 8002500:	f001 ff6a 	bl	80043d8 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002504:	bf00      	nop
 8002506:	3728      	adds	r7, #40	@ 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40003800 	.word	0x40003800
 8002510:	40023800 	.word	0x40023800
 8002514:	40022000 	.word	0x40022000
 8002518:	40020400 	.word	0x40020400

0800251c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	@ 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a2e      	ldr	r2, [pc, #184]	@ (80025e4 <HAL_TIM_Base_MspInit+0xc8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d10c      	bne.n	8002548 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800252e:	4b2e      	ldr	r3, [pc, #184]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	4a2d      	ldr	r2, [pc, #180]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6453      	str	r3, [r2, #68]	@ 0x44
 800253a:	4b2b      	ldr	r3, [pc, #172]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002546:	e046      	b.n	80025d6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002550:	d10c      	bne.n	800256c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002552:	4b25      	ldr	r3, [pc, #148]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	4a24      	ldr	r2, [pc, #144]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6413      	str	r3, [r2, #64]	@ 0x40
 800255e:	4b22      	ldr	r3, [pc, #136]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]
}
 800256a:	e034      	b.n	80025d6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a1e      	ldr	r2, [pc, #120]	@ (80025ec <HAL_TIM_Base_MspInit+0xd0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d10c      	bne.n	8002590 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002576:	4b1c      	ldr	r3, [pc, #112]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	4a1b      	ldr	r2, [pc, #108]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	6413      	str	r3, [r2, #64]	@ 0x40
 8002582:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
}
 800258e:	e022      	b.n	80025d6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a16      	ldr	r2, [pc, #88]	@ (80025f0 <HAL_TIM_Base_MspInit+0xd4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10c      	bne.n	80025b4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800259a:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	4a12      	ldr	r2, [pc, #72]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]
}
 80025b2:	e010      	b.n	80025d6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0e      	ldr	r2, [pc, #56]	@ (80025f4 <HAL_TIM_Base_MspInit+0xd8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10b      	bne.n	80025d6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025be:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c2:	4a09      	ldr	r2, [pc, #36]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ca:	4b07      	ldr	r3, [pc, #28]	@ (80025e8 <HAL_TIM_Base_MspInit+0xcc>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
}
 80025d6:	bf00      	nop
 80025d8:	3724      	adds	r7, #36	@ 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40010000 	.word	0x40010000
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000c00 	.word	0x40000c00
 80025f4:	40010400 	.word	0x40010400

080025f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <HAL_TIM_PWM_MspInit+0x38>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10b      	bne.n	8002622 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800260a:	4b0a      	ldr	r3, [pc, #40]	@ (8002634 <HAL_TIM_PWM_MspInit+0x3c>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	4a09      	ldr	r2, [pc, #36]	@ (8002634 <HAL_TIM_PWM_MspInit+0x3c>)
 8002610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002614:	6413      	str	r3, [r2, #64]	@ 0x40
 8002616:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <HAL_TIM_PWM_MspInit+0x3c>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM12_MspInit 1 */

  }

}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40001800 	.word	0x40001800
 8002634:	40023800 	.word	0x40023800

08002638 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	@ 0x30
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 031c 	add.w	r3, r7, #28
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a56      	ldr	r2, [pc, #344]	@ (80027b0 <HAL_TIM_MspPostInit+0x178>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d11d      	bne.n	8002696 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	4b56      	ldr	r3, [pc, #344]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	4a55      	ldr	r2, [pc, #340]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6313      	str	r3, [r2, #48]	@ 0x30
 8002666:	4b53      	ldr	r3, [pc, #332]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002672:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002684:	2301      	movs	r3, #1
 8002686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	4619      	mov	r1, r3
 800268e:	484a      	ldr	r0, [pc, #296]	@ (80027b8 <HAL_TIM_MspPostInit+0x180>)
 8002690:	f001 fea2 	bl	80043d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002694:	e087      	b.n	80027a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800269e:	d11d      	bne.n	80026dc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	4b44      	ldr	r3, [pc, #272]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a4:	4a43      	ldr	r2, [pc, #268]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ac:	4b41      	ldr	r3, [pc, #260]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80026b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026ca:	2301      	movs	r3, #1
 80026cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80026ce:	f107 031c 	add.w	r3, r7, #28
 80026d2:	4619      	mov	r1, r3
 80026d4:	4838      	ldr	r0, [pc, #224]	@ (80027b8 <HAL_TIM_MspPostInit+0x180>)
 80026d6:	f001 fe7f 	bl	80043d8 <HAL_GPIO_Init>
}
 80026da:	e064      	b.n	80027a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a36      	ldr	r2, [pc, #216]	@ (80027bc <HAL_TIM_MspPostInit+0x184>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d11c      	bne.n	8002720 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e6:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	4a32      	ldr	r2, [pc, #200]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f2:	4b30      	ldr	r3, [pc, #192]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80026fe:	2310      	movs	r3, #16
 8002700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800270e:	2302      	movs	r3, #2
 8002710:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002712:	f107 031c 	add.w	r3, r7, #28
 8002716:	4619      	mov	r1, r3
 8002718:	4829      	ldr	r0, [pc, #164]	@ (80027c0 <HAL_TIM_MspPostInit+0x188>)
 800271a:	f001 fe5d 	bl	80043d8 <HAL_GPIO_Init>
}
 800271e:	e042      	b.n	80027a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a27      	ldr	r2, [pc, #156]	@ (80027c4 <HAL_TIM_MspPostInit+0x18c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d11c      	bne.n	8002764 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800272a:	4b22      	ldr	r3, [pc, #136]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a21      	ldr	r2, [pc, #132]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b1f      	ldr	r3, [pc, #124]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002742:	2301      	movs	r3, #1
 8002744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002752:	2302      	movs	r3, #2
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002756:	f107 031c 	add.w	r3, r7, #28
 800275a:	4619      	mov	r1, r3
 800275c:	481a      	ldr	r0, [pc, #104]	@ (80027c8 <HAL_TIM_MspPostInit+0x190>)
 800275e:	f001 fe3b 	bl	80043d8 <HAL_GPIO_Init>
}
 8002762:	e020      	b.n	80027a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a18      	ldr	r2, [pc, #96]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d11b      	bne.n	80027a6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800276e:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	4a10      	ldr	r2, [pc, #64]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 8002774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002778:	6313      	str	r3, [r2, #48]	@ 0x30
 800277a:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <HAL_TIM_MspPostInit+0x17c>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002786:	2340      	movs	r3, #64	@ 0x40
 8002788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2300      	movs	r3, #0
 8002794:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002796:	2309      	movs	r3, #9
 8002798:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800279a:	f107 031c 	add.w	r3, r7, #28
 800279e:	4619      	mov	r1, r3
 80027a0:	480b      	ldr	r0, [pc, #44]	@ (80027d0 <HAL_TIM_MspPostInit+0x198>)
 80027a2:	f001 fe19 	bl	80043d8 <HAL_GPIO_Init>
}
 80027a6:	bf00      	nop
 80027a8:	3730      	adds	r7, #48	@ 0x30
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40010000 	.word	0x40010000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40020400 	.word	0x40020400
 80027c4:	40000c00 	.word	0x40000c00
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40001800 	.word	0x40001800
 80027d0:	40021c00 	.word	0x40021c00

080027d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b0ae      	sub	sp, #184	@ 0xb8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027ec:	f107 0320 	add.w	r3, r7, #32
 80027f0:	2284      	movs	r2, #132	@ 0x84
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f011 f983 	bl	8013b00 <memset>
  if(huart->Instance==USART1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a53      	ldr	r2, [pc, #332]	@ (800294c <HAL_UART_MspInit+0x178>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d15d      	bne.n	80028c0 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002804:	2340      	movs	r3, #64	@ 0x40
 8002806:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002808:	2300      	movs	r3, #0
 800280a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800280c:	f107 0320 	add.w	r3, r7, #32
 8002810:	4618      	mov	r0, r3
 8002812:	f005 fb55 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800281c:	f7ff f904 	bl	8001a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002820:	4b4b      	ldr	r3, [pc, #300]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 8002822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002824:	4a4a      	ldr	r2, [pc, #296]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 8002826:	f043 0310 	orr.w	r3, r3, #16
 800282a:	6453      	str	r3, [r2, #68]	@ 0x44
 800282c:	4b48      	ldr	r3, [pc, #288]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 800282e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002838:	4b45      	ldr	r3, [pc, #276]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283c:	4a44      	ldr	r2, [pc, #272]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 800283e:	f043 0302 	orr.w	r3, r3, #2
 8002842:	6313      	str	r3, [r2, #48]	@ 0x30
 8002844:	4b42      	ldr	r3, [pc, #264]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002850:	4b3f      	ldr	r3, [pc, #252]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	4a3e      	ldr	r2, [pc, #248]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6313      	str	r3, [r2, #48]	@ 0x30
 800285c:	4b3c      	ldr	r3, [pc, #240]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002868:	2380      	movs	r3, #128	@ 0x80
 800286a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002880:	2307      	movs	r3, #7
 8002882:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002886:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800288a:	4619      	mov	r1, r3
 800288c:	4831      	ldr	r0, [pc, #196]	@ (8002954 <HAL_UART_MspInit+0x180>)
 800288e:	f001 fda3 	bl	80043d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002892:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028ac:	2307      	movs	r3, #7
 80028ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80028b2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4827      	ldr	r0, [pc, #156]	@ (8002958 <HAL_UART_MspInit+0x184>)
 80028ba:	f001 fd8d 	bl	80043d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028be:	e040      	b.n	8002942 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a25      	ldr	r2, [pc, #148]	@ (800295c <HAL_UART_MspInit+0x188>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d13b      	bne.n	8002942 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80028ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028ce:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80028d0:	2300      	movs	r3, #0
 80028d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028d4:	f107 0320 	add.w	r3, r7, #32
 80028d8:	4618      	mov	r0, r3
 80028da:	f005 faf1 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_UART_MspInit+0x114>
      Error_Handler();
 80028e4:	f7ff f8a0 	bl	8001a28 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028e8:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 80028ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ec:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 80028ee:	f043 0320 	orr.w	r3, r3, #32
 80028f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80028f4:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 80028f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002900:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	4a12      	ldr	r2, [pc, #72]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 8002906:	f043 0304 	orr.w	r3, r3, #4
 800290a:	6313      	str	r3, [r2, #48]	@ 0x30
 800290c:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <HAL_UART_MspInit+0x17c>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002918:	23c0      	movs	r3, #192	@ 0xc0
 800291a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002930:	2308      	movs	r3, #8
 8002932:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002936:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800293a:	4619      	mov	r1, r3
 800293c:	4808      	ldr	r0, [pc, #32]	@ (8002960 <HAL_UART_MspInit+0x18c>)
 800293e:	f001 fd4b 	bl	80043d8 <HAL_GPIO_Init>
}
 8002942:	bf00      	nop
 8002944:	37b8      	adds	r7, #184	@ 0xb8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40011000 	.word	0x40011000
 8002950:	40023800 	.word	0x40023800
 8002954:	40020400 	.word	0x40020400
 8002958:	40020000 	.word	0x40020000
 800295c:	40011400 	.word	0x40011400
 8002960:	40020800 	.word	0x40020800

08002964 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002978:	4b3a      	ldr	r3, [pc, #232]	@ (8002a64 <HAL_FMC_MspInit+0x100>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d16d      	bne.n	8002a5c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002980:	4b38      	ldr	r3, [pc, #224]	@ (8002a64 <HAL_FMC_MspInit+0x100>)
 8002982:	2201      	movs	r2, #1
 8002984:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002986:	4b38      	ldr	r3, [pc, #224]	@ (8002a68 <HAL_FMC_MspInit+0x104>)
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	4a37      	ldr	r2, [pc, #220]	@ (8002a68 <HAL_FMC_MspInit+0x104>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6393      	str	r3, [r2, #56]	@ 0x38
 8002992:	4b35      	ldr	r3, [pc, #212]	@ (8002a68 <HAL_FMC_MspInit+0x104>)
 8002994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800299e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80029a2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ac:	2303      	movs	r3, #3
 80029ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029b0:	230c      	movs	r3, #12
 80029b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	4619      	mov	r1, r3
 80029b8:	482c      	ldr	r0, [pc, #176]	@ (8002a6c <HAL_FMC_MspInit+0x108>)
 80029ba:	f001 fd0d 	bl	80043d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80029be:	f248 1333 	movw	r3, #33075	@ 0x8133
 80029c2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029d0:	230c      	movs	r3, #12
 80029d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4825      	ldr	r0, [pc, #148]	@ (8002a70 <HAL_FMC_MspInit+0x10c>)
 80029da:	f001 fcfd 	bl	80043d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80029de:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80029e2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029f0:	230c      	movs	r3, #12
 80029f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	4619      	mov	r1, r3
 80029f8:	481e      	ldr	r0, [pc, #120]	@ (8002a74 <HAL_FMC_MspInit+0x110>)
 80029fa:	f001 fced 	bl	80043d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80029fe:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002a02:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a10:	230c      	movs	r3, #12
 8002a12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	4619      	mov	r1, r3
 8002a18:	4817      	ldr	r0, [pc, #92]	@ (8002a78 <HAL_FMC_MspInit+0x114>)
 8002a1a:	f001 fcdd 	bl	80043d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002a1e:	2328      	movs	r3, #40	@ 0x28
 8002a20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a2e:	230c      	movs	r3, #12
 8002a30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	4619      	mov	r1, r3
 8002a36:	4811      	ldr	r0, [pc, #68]	@ (8002a7c <HAL_FMC_MspInit+0x118>)
 8002a38:	f001 fcce 	bl	80043d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a4c:	230c      	movs	r3, #12
 8002a4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	4619      	mov	r1, r3
 8002a54:	480a      	ldr	r0, [pc, #40]	@ (8002a80 <HAL_FMC_MspInit+0x11c>)
 8002a56:	f001 fcbf 	bl	80043d8 <HAL_GPIO_Init>
 8002a5a:	e000      	b.n	8002a5e <HAL_FMC_MspInit+0xfa>
    return;
 8002a5c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000d28 	.word	0x20000d28
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40021800 	.word	0x40021800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	40021400 	.word	0x40021400
 8002a7c:	40021c00 	.word	0x40021c00
 8002a80:	40020800 	.word	0x40020800

08002a84 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002a8c:	f7ff ff6a 	bl	8002964 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	@ 0x28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8002b54 <HAL_SAI_MspInit+0xbc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d124      	bne.n	8002af4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8002b58 <HAL_SAI_MspInit+0xc0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10b      	bne.n	8002aca <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b5c <HAL_SAI_MspInit+0xc4>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	4a29      	ldr	r2, [pc, #164]	@ (8002b5c <HAL_SAI_MspInit+0xc4>)
 8002ab8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002abe:	4b27      	ldr	r3, [pc, #156]	@ (8002b5c <HAL_SAI_MspInit+0xc4>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002aca:	4b23      	ldr	r3, [pc, #140]	@ (8002b58 <HAL_SAI_MspInit+0xc0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	4a21      	ldr	r2, [pc, #132]	@ (8002b58 <HAL_SAI_MspInit+0xc0>)
 8002ad2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002ad4:	23f0      	movs	r3, #240	@ 0xf0
 8002ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002ae4:	230a      	movs	r3, #10
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	4619      	mov	r1, r3
 8002aee:	481c      	ldr	r0, [pc, #112]	@ (8002b60 <HAL_SAI_MspInit+0xc8>)
 8002af0:	f001 fc72 	bl	80043d8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b64 <HAL_SAI_MspInit+0xcc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d125      	bne.n	8002b4a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002afe:	4b16      	ldr	r3, [pc, #88]	@ (8002b58 <HAL_SAI_MspInit+0xc0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10b      	bne.n	8002b1e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b06:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <HAL_SAI_MspInit+0xc4>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	4a14      	ldr	r2, [pc, #80]	@ (8002b5c <HAL_SAI_MspInit+0xc4>)
 8002b0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b12:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_SAI_MspInit+0xc4>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b58 <HAL_SAI_MspInit+0xc0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	4a0c      	ldr	r2, [pc, #48]	@ (8002b58 <HAL_SAI_MspInit+0xc0>)
 8002b26:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002b28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b3a:	230a      	movs	r3, #10
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4619      	mov	r1, r3
 8002b44:	4808      	ldr	r0, [pc, #32]	@ (8002b68 <HAL_SAI_MspInit+0xd0>)
 8002b46:	f001 fc47 	bl	80043d8 <HAL_GPIO_Init>

    }
}
 8002b4a:	bf00      	nop
 8002b4c:	3728      	adds	r7, #40	@ 0x28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40015c04 	.word	0x40015c04
 8002b58:	20000d2c 	.word	0x20000d2c
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40015c24 	.word	0x40015c24
 8002b68:	40021800 	.word	0x40021800

08002b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08e      	sub	sp, #56	@ 0x38
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b7c:	4b33      	ldr	r3, [pc, #204]	@ (8002c4c <HAL_InitTick+0xe0>)
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	4a32      	ldr	r2, [pc, #200]	@ (8002c4c <HAL_InitTick+0xe0>)
 8002b82:	f043 0310 	orr.w	r3, r3, #16
 8002b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b88:	4b30      	ldr	r3, [pc, #192]	@ (8002c4c <HAL_InitTick+0xe0>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b94:	f107 0210 	add.w	r2, r7, #16
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f005 f95c 	bl	8007e5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bae:	f005 f92d 	bl	8007e0c <HAL_RCC_GetPCLK1Freq>
 8002bb2:	6378      	str	r0, [r7, #52]	@ 0x34
 8002bb4:	e004      	b.n	8002bc0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bb6:	f005 f929 	bl	8007e0c <HAL_RCC_GetPCLK1Freq>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc2:	4a23      	ldr	r2, [pc, #140]	@ (8002c50 <HAL_InitTick+0xe4>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	0c9b      	lsrs	r3, r3, #18
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002bce:	4b21      	ldr	r3, [pc, #132]	@ (8002c54 <HAL_InitTick+0xe8>)
 8002bd0:	4a21      	ldr	r2, [pc, #132]	@ (8002c58 <HAL_InitTick+0xec>)
 8002bd2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c54 <HAL_InitTick+0xe8>)
 8002bd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bda:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c54 <HAL_InitTick+0xe8>)
 8002bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002be2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c54 <HAL_InitTick+0xe8>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c54 <HAL_InitTick+0xe8>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bee:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <HAL_InitTick+0xe8>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002bf4:	4817      	ldr	r0, [pc, #92]	@ (8002c54 <HAL_InitTick+0xe8>)
 8002bf6:	f007 fdfa 	bl	800a7ee <HAL_TIM_Base_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002c00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d11b      	bne.n	8002c40 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c08:	4812      	ldr	r0, [pc, #72]	@ (8002c54 <HAL_InitTick+0xe8>)
 8002c0a:	f007 fe47 	bl	800a89c <HAL_TIM_Base_Start_IT>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002c14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d111      	bne.n	8002c40 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c1c:	2036      	movs	r0, #54	@ 0x36
 8002c1e:	f000 fc8d 	bl	800353c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b0f      	cmp	r3, #15
 8002c26:	d808      	bhi.n	8002c3a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	2036      	movs	r0, #54	@ 0x36
 8002c2e:	f000 fc69 	bl	8003504 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c32:	4a0a      	ldr	r2, [pc, #40]	@ (8002c5c <HAL_InitTick+0xf0>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	e002      	b.n	8002c40 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3738      	adds	r7, #56	@ 0x38
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	431bde83 	.word	0x431bde83
 8002c54:	20000d30 	.word	0x20000d30
 8002c58:	40001000 	.word	0x40001000
 8002c5c:	20000004 	.word	0x20000004

08002c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <NMI_Handler+0x4>

08002c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <HardFault_Handler+0x4>

08002c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <MemManage_Handler+0x4>

08002c78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <BusFault_Handler+0x4>

08002c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <UsageFault_Handler+0x4>

08002c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c9c:	4802      	ldr	r0, [pc, #8]	@ (8002ca8 <TIM6_DAC_IRQHandler+0x10>)
 8002c9e:	f007 fecc 	bl	800aa3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000d30 	.word	0x20000d30

08002cac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002cb0:	4802      	ldr	r0, [pc, #8]	@ (8002cbc <OTG_FS_IRQHandler+0x10>)
 8002cb2:	f002 f84f 	bl	8004d54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200092d0 	.word	0x200092d0

08002cc0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002cc4:	4802      	ldr	r0, [pc, #8]	@ (8002cd0 <LTDC_IRQHandler+0x10>)
 8002cc6:	f004 f883 	bl	8006dd0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200006c0 	.word	0x200006c0

08002cd4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002cd8:	4802      	ldr	r0, [pc, #8]	@ (8002ce4 <DMA2D_IRQHandler+0x10>)
 8002cda:	f000 fe8d 	bl	80039f8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000528 	.word	0x20000528

08002ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf0:	4a14      	ldr	r2, [pc, #80]	@ (8002d44 <_sbrk+0x5c>)
 8002cf2:	4b15      	ldr	r3, [pc, #84]	@ (8002d48 <_sbrk+0x60>)
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cfc:	4b13      	ldr	r3, [pc, #76]	@ (8002d4c <_sbrk+0x64>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d04:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <_sbrk+0x64>)
 8002d06:	4a12      	ldr	r2, [pc, #72]	@ (8002d50 <_sbrk+0x68>)
 8002d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d0a:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <_sbrk+0x64>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d207      	bcs.n	8002d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d18:	f010 ff0a 	bl	8013b30 <__errno>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	220c      	movs	r2, #12
 8002d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d26:	e009      	b.n	8002d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d28:	4b08      	ldr	r3, [pc, #32]	@ (8002d4c <_sbrk+0x64>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d2e:	4b07      	ldr	r3, [pc, #28]	@ (8002d4c <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	4a05      	ldr	r2, [pc, #20]	@ (8002d4c <_sbrk+0x64>)
 8002d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20050000 	.word	0x20050000
 8002d48:	00000400 	.word	0x00000400
 8002d4c:	20000d7c 	.word	0x20000d7c
 8002d50:	200097f8 	.word	0x200097f8

08002d54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d58:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <SystemInit+0x20>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5e:	4a05      	ldr	r2, [pc, #20]	@ (8002d74 <SystemInit+0x20>)
 8002d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002db0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d7c:	f7ff ffea 	bl	8002d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d80:	480c      	ldr	r0, [pc, #48]	@ (8002db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d82:	490d      	ldr	r1, [pc, #52]	@ (8002db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d84:	4a0d      	ldr	r2, [pc, #52]	@ (8002dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d88:	e002      	b.n	8002d90 <LoopCopyDataInit>

08002d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8e:	3304      	adds	r3, #4

08002d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d94:	d3f9      	bcc.n	8002d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d96:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d98:	4c0a      	ldr	r4, [pc, #40]	@ (8002dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d9c:	e001      	b.n	8002da2 <LoopFillZerobss>

08002d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da0:	3204      	adds	r2, #4

08002da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da4:	d3fb      	bcc.n	8002d9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002da6:	f010 fec9 	bl	8013b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002daa:	f7fd fbdd 	bl	8000568 <main>
  bx  lr    
 8002dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002db0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002dbc:	08013d08 	.word	0x08013d08
  ldr r2, =_sbss
 8002dc0:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8002dc4:	200097f8 	.word	0x200097f8

08002dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc8:	e7fe      	b.n	8002dc8 <ADC_IRQHandler>

08002dca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dce:	2003      	movs	r0, #3
 8002dd0:	f000 fb8d 	bl	80034ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f7ff fec9 	bl	8002b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dda:	f7fe fe2b 	bl	8001a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de8:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_IncTick+0x20>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_IncTick+0x24>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	4a04      	ldr	r2, [pc, #16]	@ (8002e08 <HAL_IncTick+0x24>)
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000008 	.word	0x20000008
 8002e08:	20000d80 	.word	0x20000d80

08002e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e10:	4b03      	ldr	r3, [pc, #12]	@ (8002e20 <HAL_GetTick+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000d80 	.word	0x20000d80

08002e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff ffee 	bl	8002e0c <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e3c:	d005      	beq.n	8002e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <HAL_Delay+0x44>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e4a:	bf00      	nop
 8002e4c:	f7ff ffde 	bl	8002e0c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d8f7      	bhi.n	8002e4c <HAL_Delay+0x28>
  {
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000008 	.word	0x20000008

08002e6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e031      	b.n	8002ee6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe fdfa 	bl	8001a84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d116      	bne.n	8002ed8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eae:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <HAL_ADC_Init+0x84>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	f043 0202 	orr.w	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f970 	bl	80031a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	f023 0303 	bic.w	r3, r3, #3
 8002ece:	f043 0201 	orr.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ed6:	e001      	b.n	8002edc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	ffffeefd 	.word	0xffffeefd

08002ef4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x1c>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e136      	b.n	800317e <HAL_ADC_ConfigChannel+0x28a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b09      	cmp	r3, #9
 8002f1e:	d93a      	bls.n	8002f96 <HAL_ADC_ConfigChannel+0xa2>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f28:	d035      	beq.n	8002f96 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68d9      	ldr	r1, [r3, #12]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3b1e      	subs	r3, #30
 8002f40:	2207      	movs	r2, #7
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43da      	mvns	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a8d      	ldr	r2, [pc, #564]	@ (800318c <HAL_ADC_ConfigChannel+0x298>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10a      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68d9      	ldr	r1, [r3, #12]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	061a      	lsls	r2, r3, #24
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f6e:	e035      	b.n	8002fdc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68d9      	ldr	r1, [r3, #12]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	4618      	mov	r0, r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4403      	add	r3, r0
 8002f88:	3b1e      	subs	r3, #30
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f94:	e022      	b.n	8002fdc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6919      	ldr	r1, [r3, #16]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	2207      	movs	r2, #7
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6919      	ldr	r1, [r3, #16]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	4603      	mov	r3, r0
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4403      	add	r3, r0
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b06      	cmp	r3, #6
 8002fe2:	d824      	bhi.n	800302e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3b05      	subs	r3, #5
 8002ff6:	221f      	movs	r2, #31
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	400a      	ands	r2, r1
 8003004:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	4618      	mov	r0, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	3b05      	subs	r3, #5
 8003020:	fa00 f203 	lsl.w	r2, r0, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	635a      	str	r2, [r3, #52]	@ 0x34
 800302c:	e04c      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d824      	bhi.n	8003080 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	3b23      	subs	r3, #35	@ 0x23
 8003048:	221f      	movs	r2, #31
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43da      	mvns	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	400a      	ands	r2, r1
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	4618      	mov	r0, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	3b23      	subs	r3, #35	@ 0x23
 8003072:	fa00 f203 	lsl.w	r2, r0, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30
 800307e:	e023      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	3b41      	subs	r3, #65	@ 0x41
 8003092:	221f      	movs	r2, #31
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43da      	mvns	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	400a      	ands	r2, r1
 80030a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	4618      	mov	r0, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	3b41      	subs	r3, #65	@ 0x41
 80030bc:	fa00 f203 	lsl.w	r2, r0, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a30      	ldr	r2, [pc, #192]	@ (8003190 <HAL_ADC_ConfigChannel+0x29c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d10a      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x1f4>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030da:	d105      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80030dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80030e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a28      	ldr	r2, [pc, #160]	@ (8003190 <HAL_ADC_ConfigChannel+0x29c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10f      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x21e>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b12      	cmp	r3, #18
 80030f8:	d10b      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80030fa:	4b26      	ldr	r3, [pc, #152]	@ (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a25      	ldr	r2, [pc, #148]	@ (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 8003100:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003104:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003106:	4b23      	ldr	r3, [pc, #140]	@ (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a22      	ldr	r2, [pc, #136]	@ (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 800310c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003110:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1e      	ldr	r2, [pc, #120]	@ (8003190 <HAL_ADC_ConfigChannel+0x29c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d12b      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x280>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1a      	ldr	r2, [pc, #104]	@ (800318c <HAL_ADC_ConfigChannel+0x298>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <HAL_ADC_ConfigChannel+0x23a>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b11      	cmp	r3, #17
 800312c:	d122      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800312e:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a18      	ldr	r2, [pc, #96]	@ (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 8003134:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003138:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800313a:	4b16      	ldr	r3, [pc, #88]	@ (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a15      	ldr	r2, [pc, #84]	@ (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 8003140:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003144:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a10      	ldr	r2, [pc, #64]	@ (800318c <HAL_ADC_ConfigChannel+0x298>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d111      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003150:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_ADC_ConfigChannel+0x2a4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a11      	ldr	r2, [pc, #68]	@ (800319c <HAL_ADC_ConfigChannel+0x2a8>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0c9a      	lsrs	r2, r3, #18
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003166:	e002      	b.n	800316e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3b01      	subs	r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f9      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	10000012 	.word	0x10000012
 8003190:	40012000 	.word	0x40012000
 8003194:	40012300 	.word	0x40012300
 8003198:	20000000 	.word	0x20000000
 800319c:	431bde83 	.word	0x431bde83

080031a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80031a8:	4b78      	ldr	r3, [pc, #480]	@ (800338c <ADC_Init+0x1ec>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a77      	ldr	r2, [pc, #476]	@ (800338c <ADC_Init+0x1ec>)
 80031ae:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80031b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80031b4:	4b75      	ldr	r3, [pc, #468]	@ (800338c <ADC_Init+0x1ec>)
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4973      	ldr	r1, [pc, #460]	@ (800338c <ADC_Init+0x1ec>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	021a      	lsls	r2, r3, #8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003216:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6899      	ldr	r1, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322e:	4a58      	ldr	r2, [pc, #352]	@ (8003390 <ADC_Init+0x1f0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003242:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6899      	ldr	r1, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003264:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6899      	ldr	r1, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	e00f      	b.n	800329a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003298:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0202 	bic.w	r2, r2, #2
 80032a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	005a      	lsls	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80032e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	3b01      	subs	r3, #1
 80032f4:	035a      	lsls	r2, r3, #13
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	e007      	b.n	8003310 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800330e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800331e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	3b01      	subs	r3, #1
 800332c:	051a      	lsls	r2, r3, #20
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6899      	ldr	r1, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003352:	025a      	lsls	r2, r3, #9
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800336a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6899      	ldr	r1, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	029a      	lsls	r2, r3, #10
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	40012300 	.word	0x40012300
 8003390:	0f000001 	.word	0x0f000001

08003394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a4:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <__NVIC_SetPriorityGrouping+0x40>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033bc:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c2:	4a04      	ldr	r2, [pc, #16]	@ (80033d4 <__NVIC_SetPriorityGrouping+0x40>)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	60d3      	str	r3, [r2, #12]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00
 80033d8:	05fa0000 	.word	0x05fa0000

080033dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e0:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <__NVIC_GetPriorityGrouping+0x18>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 0307 	and.w	r3, r3, #7
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db0b      	blt.n	8003422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4907      	ldr	r1, [pc, #28]	@ (8003430 <__NVIC_EnableIRQ+0x38>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2001      	movs	r0, #1
 800341a:	fa00 f202 	lsl.w	r2, r0, r2
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000e100 	.word	0xe000e100

08003434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	2b00      	cmp	r3, #0
 8003446:	db0a      	blt.n	800345e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	490c      	ldr	r1, [pc, #48]	@ (8003480 <__NVIC_SetPriority+0x4c>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	440b      	add	r3, r1
 8003458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800345c:	e00a      	b.n	8003474 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4908      	ldr	r1, [pc, #32]	@ (8003484 <__NVIC_SetPriority+0x50>)
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	3b04      	subs	r3, #4
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	440b      	add	r3, r1
 8003472:	761a      	strb	r2, [r3, #24]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000e100 	.word	0xe000e100
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	@ 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f1c3 0307 	rsb	r3, r3, #7
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf28      	it	cs
 80034a6:	2304      	movcs	r3, #4
 80034a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d902      	bls.n	80034b8 <NVIC_EncodePriority+0x30>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3b03      	subs	r3, #3
 80034b6:	e000      	b.n	80034ba <NVIC_EncodePriority+0x32>
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	401a      	ands	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43d9      	mvns	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	4313      	orrs	r3, r2
         );
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3724      	adds	r7, #36	@ 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ff4c 	bl	8003394 <__NVIC_SetPriorityGrouping>
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003516:	f7ff ff61 	bl	80033dc <__NVIC_GetPriorityGrouping>
 800351a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	6978      	ldr	r0, [r7, #20]
 8003522:	f7ff ffb1 	bl	8003488 <NVIC_EncodePriority>
 8003526:	4602      	mov	r2, r0
 8003528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352c:	4611      	mov	r1, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ff80 	bl	8003434 <__NVIC_SetPriority>
}
 8003534:	bf00      	nop
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ff54 	bl	80033f8 <__NVIC_EnableIRQ>
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e054      	b.n	8003614 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7f5b      	ldrb	r3, [r3, #29]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fe fadc 	bl	8001b38 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	791b      	ldrb	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10c      	bne.n	80035a8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a22      	ldr	r2, [pc, #136]	@ (800361c <HAL_CRC_Init+0xc4>)
 8003594:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0218 	bic.w	r2, r2, #24
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	e00c      	b.n	80035c2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6899      	ldr	r1, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	461a      	mov	r2, r3
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f834 	bl	8003620 <HAL_CRCEx_Polynomial_Set>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e028      	b.n	8003614 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	795b      	ldrb	r3, [r3, #5]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d105      	bne.n	80035d6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035d2:	611a      	str	r2, [r3, #16]
 80035d4:	e004      	b.n	80035e0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6912      	ldr	r2, [r2, #16]
 80035de:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	04c11db7 	.word	0x04c11db7

08003620 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003630:	231f      	movs	r3, #31
 8003632:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	75fb      	strb	r3, [r7, #23]
 8003642:	e063      	b.n	800370c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003644:	bf00      	nop
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1e5a      	subs	r2, r3, #1
 800364a:	613a      	str	r2, [r7, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d009      	beq.n	8003664 <HAL_CRCEx_Polynomial_Set+0x44>
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b18      	cmp	r3, #24
 8003668:	d846      	bhi.n	80036f8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800366a:	a201      	add	r2, pc, #4	@ (adr r2, 8003670 <HAL_CRCEx_Polynomial_Set+0x50>)
 800366c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003670:	080036ff 	.word	0x080036ff
 8003674:	080036f9 	.word	0x080036f9
 8003678:	080036f9 	.word	0x080036f9
 800367c:	080036f9 	.word	0x080036f9
 8003680:	080036f9 	.word	0x080036f9
 8003684:	080036f9 	.word	0x080036f9
 8003688:	080036f9 	.word	0x080036f9
 800368c:	080036f9 	.word	0x080036f9
 8003690:	080036ed 	.word	0x080036ed
 8003694:	080036f9 	.word	0x080036f9
 8003698:	080036f9 	.word	0x080036f9
 800369c:	080036f9 	.word	0x080036f9
 80036a0:	080036f9 	.word	0x080036f9
 80036a4:	080036f9 	.word	0x080036f9
 80036a8:	080036f9 	.word	0x080036f9
 80036ac:	080036f9 	.word	0x080036f9
 80036b0:	080036e1 	.word	0x080036e1
 80036b4:	080036f9 	.word	0x080036f9
 80036b8:	080036f9 	.word	0x080036f9
 80036bc:	080036f9 	.word	0x080036f9
 80036c0:	080036f9 	.word	0x080036f9
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	080036f9 	.word	0x080036f9
 80036cc:	080036f9 	.word	0x080036f9
 80036d0:	080036d5 	.word	0x080036d5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b06      	cmp	r3, #6
 80036d8:	d913      	bls.n	8003702 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80036de:	e010      	b.n	8003702 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b07      	cmp	r3, #7
 80036e4:	d90f      	bls.n	8003706 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80036ea:	e00c      	b.n	8003706 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2b0f      	cmp	r3, #15
 80036f0:	d90b      	bls.n	800370a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80036f6:	e008      	b.n	800370a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	75fb      	strb	r3, [r7, #23]
        break;
 80036fc:	e006      	b.n	800370c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80036fe:	bf00      	nop
 8003700:	e004      	b.n	800370c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003702:	bf00      	nop
 8003704:	e002      	b.n	800370c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800370a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10d      	bne.n	800372e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 0118 	bic.w	r1, r3, #24
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	430a      	orrs	r2, r1
 800372c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800372e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003730:	4618      	mov	r0, r3
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e069      	b.n	8003822 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe fa0c 	bl	8001b78 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6819      	ldr	r1, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b2a      	ldr	r3, [pc, #168]	@ (800382c <HAL_DCMI_Init+0xf0>)
 8003782:	400b      	ands	r3, r1
 8003784:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800379a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80037b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80037be:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80037ca:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d112      	bne.n	8003802 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	7f1b      	ldrb	r3, [r3, #28]
 80037e0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	7f5b      	ldrb	r3, [r3, #29]
 80037e6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80037e8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	7f9b      	ldrb	r3, [r3, #30]
 80037ee:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80037f0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	7fdb      	ldrb	r3, [r3, #31]
 80037f8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80037fe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003800:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 021e 	orr.w	r2, r2, #30
 8003810:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	ffe0f007 	.word	0xffe0f007

08003830 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003846:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_DMA_Start_IT+0x26>
 8003852:	2302      	movs	r3, #2
 8003854:	e048      	b.n	80038e8 <HAL_DMA_Start_IT+0xb8>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d137      	bne.n	80038da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2202      	movs	r2, #2
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f842 	bl	8003908 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003888:	223f      	movs	r2, #63	@ 0x3f
 800388a:	409a      	lsls	r2, r3
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0216 	orr.w	r2, r2, #22
 800389e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038ae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0208 	orr.w	r2, r2, #8
 80038c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e005      	b.n	80038e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038e2:	2302      	movs	r3, #2
 80038e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003924:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b40      	cmp	r3, #64	@ 0x40
 8003934:	d108      	bne.n	8003948 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003946:	e007      	b.n	8003958 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e039      	b.n	80039ea <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fe f9b2 	bl	8001cf4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b4:	f023 0107 	bic.w	r1, r3, #7
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ca:	4b0a      	ldr	r3, [pc, #40]	@ (80039f4 <HAL_DMA2D_Init+0x90>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d1      	ldr	r1, [r2, #12]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	430b      	orrs	r3, r1
 80039d8:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	ffffc000 	.word	0xffffc000

080039f8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d026      	beq.n	8003a68 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d021      	beq.n	8003a68 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a32:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a38:	f043 0201 	orr.w	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2201      	movs	r2, #1
 8003a46:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d026      	beq.n	8003ac0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d021      	beq.n	8003ac0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2220      	movs	r2, #32
 8003a92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a98:	f043 0202 	orr.w	r2, r3, #2
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d026      	beq.n	8003b18 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d021      	beq.n	8003b18 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ae2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2208      	movs	r2, #8
 8003aea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af0:	f043 0204 	orr.w	r2, r3, #4
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2204      	movs	r2, #4
 8003afc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d013      	beq.n	8003b4a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00e      	beq.n	8003b4a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2204      	movs	r2, #4
 8003b42:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f853 	bl	8003bf0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d024      	beq.n	8003b9e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01f      	beq.n	8003b9e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b6c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2202      	movs	r2, #2
 8003b74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01f      	beq.n	8003be8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01a      	beq.n	8003be8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2210      	movs	r2, #16
 8003bc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f80e 	bl	8003c04 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003be8:	bf00      	nop
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_DMA2D_ConfigLayer+0x20>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e079      	b.n	8003d2c <HAL_DMA2D_ConfigLayer+0x114>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	3318      	adds	r3, #24
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	041b      	lsls	r3, r3, #16
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003c62:	4b35      	ldr	r3, [pc, #212]	@ (8003d38 <HAL_DMA2D_ConfigLayer+0x120>)
 8003c64:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b0a      	cmp	r3, #10
 8003c6c:	d003      	beq.n	8003c76 <HAL_DMA2D_ConfigLayer+0x5e>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b09      	cmp	r3, #9
 8003c74:	d107      	bne.n	8003c86 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e005      	b.n	8003c92 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	061b      	lsls	r3, r3, #24
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d120      	bne.n	8003cda <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	ea02 0103 	and.w	r1, r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b0a      	cmp	r3, #10
 8003cc0:	d003      	beq.n	8003cca <HAL_DMA2D_ConfigLayer+0xb2>
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b09      	cmp	r3, #9
 8003cc8:	d127      	bne.n	8003d1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003cd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cd8:	e01f      	b.n	8003d1a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	ea02 0103 	and.w	r1, r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b0a      	cmp	r3, #10
 8003d02:	d003      	beq.n	8003d0c <HAL_DMA2D_ConfigLayer+0xf4>
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b09      	cmp	r3, #9
 8003d0a:	d106      	bne.n	8003d1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003d18:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	ff03000f 	.word	0xff03000f

08003d3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e086      	b.n	8003e5c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d106      	bne.n	8003d66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2223      	movs	r2, #35	@ 0x23
 8003d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fd ffed 	bl	8001d40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d66:	4b3f      	ldr	r3, [pc, #252]	@ (8003e64 <HAL_ETH_Init+0x128>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e64 <HAL_ETH_Init+0x128>)
 8003d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d72:	4b3c      	ldr	r3, [pc, #240]	@ (8003e64 <HAL_ETH_Init+0x128>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e68 <HAL_ETH_Init+0x12c>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4a39      	ldr	r2, [pc, #228]	@ (8003e68 <HAL_ETH_Init+0x12c>)
 8003d84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d88:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003d8a:	4b37      	ldr	r3, [pc, #220]	@ (8003e68 <HAL_ETH_Init+0x12c>)
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	4935      	ldr	r1, [pc, #212]	@ (8003e68 <HAL_ETH_Init+0x12c>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003d98:	4b33      	ldr	r3, [pc, #204]	@ (8003e68 <HAL_ETH_Init+0x12c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003db2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003db4:	f7ff f82a 	bl	8002e0c <HAL_GetTick>
 8003db8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003dba:	e011      	b.n	8003de0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003dbc:	f7ff f826 	bl	8002e0c <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003dca:	d909      	bls.n	8003de0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2204      	movs	r2, #4
 8003dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	22e0      	movs	r2, #224	@ 0xe0
 8003dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e03d      	b.n	8003e5c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e4      	bne.n	8003dbc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f97a 	bl	80040ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fa25 	bl	8004248 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa7b 	bl	80042fa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f9e3 	bl	80041d8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003e20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e6c <HAL_ETH_Init+0x130>)
 8003e30:	430b      	orrs	r3, r1
 8003e32:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003e46:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2210      	movs	r2, #16
 8003e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40023800 	.word	0x40023800
 8003e68:	40013800 	.word	0x40013800
 8003e6c:	00020060 	.word	0x00020060

08003e70 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4b53      	ldr	r3, [pc, #332]	@ (8003fd4 <ETH_SetMACConfig+0x164>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	7b9b      	ldrb	r3, [r3, #14]
 8003e8e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	7c12      	ldrb	r2, [r2, #16]
 8003e94:	2a00      	cmp	r2, #0
 8003e96:	d102      	bne.n	8003e9e <ETH_SetMACConfig+0x2e>
 8003e98:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e9c:	e000      	b.n	8003ea0 <ETH_SetMACConfig+0x30>
 8003e9e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003ea0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	7c52      	ldrb	r2, [r2, #17]
 8003ea6:	2a00      	cmp	r2, #0
 8003ea8:	d102      	bne.n	8003eb0 <ETH_SetMACConfig+0x40>
 8003eaa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003eae:	e000      	b.n	8003eb2 <ETH_SetMACConfig+0x42>
 8003eb0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003eb2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003eb8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	7fdb      	ldrb	r3, [r3, #31]
 8003ebe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003ec0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003ec6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	7f92      	ldrb	r2, [r2, #30]
 8003ecc:	2a00      	cmp	r2, #0
 8003ece:	d102      	bne.n	8003ed6 <ETH_SetMACConfig+0x66>
 8003ed0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ed4:	e000      	b.n	8003ed8 <ETH_SetMACConfig+0x68>
 8003ed6:	2200      	movs	r2, #0
                        macconf->Speed |
 8003ed8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	7f1b      	ldrb	r3, [r3, #28]
 8003ede:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ee0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003ee6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	791b      	ldrb	r3, [r3, #4]
 8003eec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003eee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003ef6:	2a00      	cmp	r2, #0
 8003ef8:	d102      	bne.n	8003f00 <ETH_SetMACConfig+0x90>
 8003efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003efe:	e000      	b.n	8003f02 <ETH_SetMACConfig+0x92>
 8003f00:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f02:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	7bdb      	ldrb	r3, [r3, #15]
 8003f08:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f0a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f10:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f18:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f32:	2001      	movs	r0, #1
 8003f34:	f7fe ff76 	bl	8002e24 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003f4e:	4013      	ands	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f56:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003f5e:	2a00      	cmp	r2, #0
 8003f60:	d101      	bne.n	8003f66 <ETH_SetMACConfig+0xf6>
 8003f62:	2280      	movs	r2, #128	@ 0x80
 8003f64:	e000      	b.n	8003f68 <ETH_SetMACConfig+0xf8>
 8003f66:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f68:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003f76:	2a01      	cmp	r2, #1
 8003f78:	d101      	bne.n	8003f7e <ETH_SetMACConfig+0x10e>
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	e000      	b.n	8003f80 <ETH_SetMACConfig+0x110>
 8003f7e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003f80:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003f88:	2a01      	cmp	r2, #1
 8003f8a:	d101      	bne.n	8003f90 <ETH_SetMACConfig+0x120>
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	e000      	b.n	8003f92 <ETH_SetMACConfig+0x122>
 8003f90:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003f9a:	2a01      	cmp	r2, #1
 8003f9c:	d101      	bne.n	8003fa2 <ETH_SetMACConfig+0x132>
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	e000      	b.n	8003fa4 <ETH_SetMACConfig+0x134>
 8003fa2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	f7fe ff31 	bl	8002e24 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	619a      	str	r2, [r3, #24]
}
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	fd20810f 	.word	0xfd20810f

08003fd8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4b3d      	ldr	r3, [pc, #244]	@ (80040e8 <ETH_SetDMAConfig+0x110>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	7b1b      	ldrb	r3, [r3, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d102      	bne.n	8004004 <ETH_SetDMAConfig+0x2c>
 8003ffe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004002:	e000      	b.n	8004006 <ETH_SetDMAConfig+0x2e>
 8004004:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	7b5b      	ldrb	r3, [r3, #13]
 800400a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800400c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	7f52      	ldrb	r2, [r2, #29]
 8004012:	2a00      	cmp	r2, #0
 8004014:	d102      	bne.n	800401c <ETH_SetDMAConfig+0x44>
 8004016:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800401a:	e000      	b.n	800401e <ETH_SetDMAConfig+0x46>
 800401c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800401e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	7b9b      	ldrb	r3, [r3, #14]
 8004024:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004026:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800402c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	7f1b      	ldrb	r3, [r3, #28]
 8004032:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004034:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	7f9b      	ldrb	r3, [r3, #30]
 800403a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800403c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004042:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800404a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800404c:	4313      	orrs	r3, r2
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800405c:	461a      	mov	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800406e:	2001      	movs	r0, #1
 8004070:	f7fe fed8 	bl	8002e24 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800407c:	461a      	mov	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	791b      	ldrb	r3, [r3, #4]
 8004086:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800408c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004092:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004098:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80040a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80040aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80040b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040cc:	2001      	movs	r0, #1
 80040ce:	f7fe fea9 	bl	8002e24 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6013      	str	r3, [r2, #0]
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	f8de3f23 	.word	0xf8de3f23

080040ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b0a6      	sub	sp, #152	@ 0x98
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004100:	2300      	movs	r3, #0
 8004102:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004104:	2300      	movs	r3, #0
 8004106:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004110:	2300      	movs	r3, #0
 8004112:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004122:	2300      	movs	r3, #0
 8004124:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004128:	2300      	movs	r3, #0
 800412a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800412e:	2300      	movs	r3, #0
 8004130:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004132:	2300      	movs	r3, #0
 8004134:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004138:	2300      	movs	r3, #0
 800413a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800413c:	2300      	movs	r3, #0
 800413e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004142:	2300      	movs	r3, #0
 8004144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004148:	2300      	movs	r3, #0
 800414a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800414e:	2300      	movs	r3, #0
 8004150:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004154:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004158:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800415a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800415e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004160:	2300      	movs	r3, #0
 8004162:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004166:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800416a:	4619      	mov	r1, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fe7f 	bl	8003e70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004172:	2301      	movs	r3, #1
 8004174:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004176:	2301      	movs	r3, #1
 8004178:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004180:	2301      	movs	r3, #1
 8004182:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004184:	2300      	movs	r3, #0
 8004186:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004188:	2300      	movs	r3, #0
 800418a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800418e:	2300      	movs	r3, #0
 8004190:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004194:	2300      	movs	r3, #0
 8004196:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800419e:	2301      	movs	r3, #1
 80041a0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80041a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041a6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80041a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80041ac:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80041ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041b2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80041c2:	f107 0308 	add.w	r3, r7, #8
 80041c6:	4619      	mov	r1, r3
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ff05 	bl	8003fd8 <ETH_SetDMAConfig>
}
 80041ce:	bf00      	nop
 80041d0:	3798      	adds	r7, #152	@ 0x98
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3305      	adds	r3, #5
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	3204      	adds	r2, #4
 80041f0:	7812      	ldrb	r2, [r2, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	4b11      	ldr	r3, [pc, #68]	@ (8004240 <ETH_MACAddressConfig+0x68>)
 80041fa:	4413      	add	r3, r2
 80041fc:	461a      	mov	r2, r3
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3303      	adds	r3, #3
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	061a      	lsls	r2, r3, #24
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3302      	adds	r3, #2
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3301      	adds	r3, #1
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	4313      	orrs	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	7812      	ldrb	r2, [r2, #0]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <ETH_MACAddressConfig+0x6c>)
 800422a:	4413      	add	r3, r2
 800422c:	461a      	mov	r2, r3
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	6013      	str	r3, [r2, #0]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40028040 	.word	0x40028040
 8004244:	40028044 	.word	0x40028044

08004248 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	e03e      	b.n	80042d4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68d9      	ldr	r1, [r3, #12]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	440b      	add	r3, r1
 8004266:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2200      	movs	r2, #0
 8004272:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2200      	movs	r2, #0
 8004278:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2200      	movs	r2, #0
 800427e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	3206      	adds	r2, #6
 8004288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d80c      	bhi.n	80042b8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68d9      	ldr	r1, [r3, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	440b      	add	r3, r1
 80042b0:	461a      	mov	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	e004      	b.n	80042c2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	461a      	mov	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3301      	adds	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d9bd      	bls.n	8004256 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ec:	611a      	str	r2, [r3, #16]
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	e048      	b.n	800439a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6919      	ldr	r1, [r3, #16]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	440b      	add	r3, r1
 8004318:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2200      	movs	r2, #0
 8004324:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2200      	movs	r2, #0
 800432a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2200      	movs	r2, #0
 8004330:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2200      	movs	r2, #0
 8004336:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2200      	movs	r2, #0
 800433c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004344:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800435e:	68b9      	ldr	r1, [r7, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	3212      	adds	r2, #18
 8004366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d80c      	bhi.n	800438a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6919      	ldr	r1, [r3, #16]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	440b      	add	r3, r1
 8004382:	461a      	mov	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	60da      	str	r2, [r3, #12]
 8004388:	e004      	b.n	8004394 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	461a      	mov	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3301      	adds	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d9b3      	bls.n	8004308 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ca:	60da      	str	r2, [r3, #12]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d8:	b480      	push	{r7}
 80043da:	b089      	sub	sp, #36	@ 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80043ea:	2300      	movs	r3, #0
 80043ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
 80043f6:	e175      	b.n	80046e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80043f8:	2201      	movs	r2, #1
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4013      	ands	r3, r2
 800440a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	429a      	cmp	r2, r3
 8004412:	f040 8164 	bne.w	80046de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b01      	cmp	r3, #1
 8004420:	d005      	beq.n	800442e <HAL_GPIO_Init+0x56>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d130      	bne.n	8004490 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	2203      	movs	r2, #3
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004464:	2201      	movs	r2, #1
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 0201 	and.w	r2, r3, #1
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	2b03      	cmp	r3, #3
 800449a:	d017      	beq.n	80044cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	2203      	movs	r2, #3
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d123      	bne.n	8004520 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	08da      	lsrs	r2, r3, #3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3208      	adds	r2, #8
 80044e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	220f      	movs	r2, #15
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	43db      	mvns	r3, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4013      	ands	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4313      	orrs	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	08da      	lsrs	r2, r3, #3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3208      	adds	r2, #8
 800451a:	69b9      	ldr	r1, [r7, #24]
 800451c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	2203      	movs	r2, #3
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4013      	ands	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f003 0203 	and.w	r2, r3, #3
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	4313      	orrs	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80be 	beq.w	80046de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004562:	4b66      	ldr	r3, [pc, #408]	@ (80046fc <HAL_GPIO_Init+0x324>)
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	4a65      	ldr	r2, [pc, #404]	@ (80046fc <HAL_GPIO_Init+0x324>)
 8004568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800456c:	6453      	str	r3, [r2, #68]	@ 0x44
 800456e:	4b63      	ldr	r3, [pc, #396]	@ (80046fc <HAL_GPIO_Init+0x324>)
 8004570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800457a:	4a61      	ldr	r2, [pc, #388]	@ (8004700 <HAL_GPIO_Init+0x328>)
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	089b      	lsrs	r3, r3, #2
 8004580:	3302      	adds	r3, #2
 8004582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004586:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	220f      	movs	r2, #15
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4013      	ands	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a58      	ldr	r2, [pc, #352]	@ (8004704 <HAL_GPIO_Init+0x32c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d037      	beq.n	8004616 <HAL_GPIO_Init+0x23e>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a57      	ldr	r2, [pc, #348]	@ (8004708 <HAL_GPIO_Init+0x330>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d031      	beq.n	8004612 <HAL_GPIO_Init+0x23a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a56      	ldr	r2, [pc, #344]	@ (800470c <HAL_GPIO_Init+0x334>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d02b      	beq.n	800460e <HAL_GPIO_Init+0x236>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a55      	ldr	r2, [pc, #340]	@ (8004710 <HAL_GPIO_Init+0x338>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d025      	beq.n	800460a <HAL_GPIO_Init+0x232>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a54      	ldr	r2, [pc, #336]	@ (8004714 <HAL_GPIO_Init+0x33c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d01f      	beq.n	8004606 <HAL_GPIO_Init+0x22e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a53      	ldr	r2, [pc, #332]	@ (8004718 <HAL_GPIO_Init+0x340>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d019      	beq.n	8004602 <HAL_GPIO_Init+0x22a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a52      	ldr	r2, [pc, #328]	@ (800471c <HAL_GPIO_Init+0x344>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d013      	beq.n	80045fe <HAL_GPIO_Init+0x226>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a51      	ldr	r2, [pc, #324]	@ (8004720 <HAL_GPIO_Init+0x348>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00d      	beq.n	80045fa <HAL_GPIO_Init+0x222>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a50      	ldr	r2, [pc, #320]	@ (8004724 <HAL_GPIO_Init+0x34c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d007      	beq.n	80045f6 <HAL_GPIO_Init+0x21e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a4f      	ldr	r2, [pc, #316]	@ (8004728 <HAL_GPIO_Init+0x350>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d101      	bne.n	80045f2 <HAL_GPIO_Init+0x21a>
 80045ee:	2309      	movs	r3, #9
 80045f0:	e012      	b.n	8004618 <HAL_GPIO_Init+0x240>
 80045f2:	230a      	movs	r3, #10
 80045f4:	e010      	b.n	8004618 <HAL_GPIO_Init+0x240>
 80045f6:	2308      	movs	r3, #8
 80045f8:	e00e      	b.n	8004618 <HAL_GPIO_Init+0x240>
 80045fa:	2307      	movs	r3, #7
 80045fc:	e00c      	b.n	8004618 <HAL_GPIO_Init+0x240>
 80045fe:	2306      	movs	r3, #6
 8004600:	e00a      	b.n	8004618 <HAL_GPIO_Init+0x240>
 8004602:	2305      	movs	r3, #5
 8004604:	e008      	b.n	8004618 <HAL_GPIO_Init+0x240>
 8004606:	2304      	movs	r3, #4
 8004608:	e006      	b.n	8004618 <HAL_GPIO_Init+0x240>
 800460a:	2303      	movs	r3, #3
 800460c:	e004      	b.n	8004618 <HAL_GPIO_Init+0x240>
 800460e:	2302      	movs	r3, #2
 8004610:	e002      	b.n	8004618 <HAL_GPIO_Init+0x240>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <HAL_GPIO_Init+0x240>
 8004616:	2300      	movs	r3, #0
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	f002 0203 	and.w	r2, r2, #3
 800461e:	0092      	lsls	r2, r2, #2
 8004620:	4093      	lsls	r3, r2
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004628:	4935      	ldr	r1, [pc, #212]	@ (8004700 <HAL_GPIO_Init+0x328>)
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	089b      	lsrs	r3, r3, #2
 800462e:	3302      	adds	r3, #2
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004636:	4b3d      	ldr	r3, [pc, #244]	@ (800472c <HAL_GPIO_Init+0x354>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	43db      	mvns	r3, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4013      	ands	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800465a:	4a34      	ldr	r2, [pc, #208]	@ (800472c <HAL_GPIO_Init+0x354>)
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004660:	4b32      	ldr	r3, [pc, #200]	@ (800472c <HAL_GPIO_Init+0x354>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	43db      	mvns	r3, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4013      	ands	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004684:	4a29      	ldr	r2, [pc, #164]	@ (800472c <HAL_GPIO_Init+0x354>)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800468a:	4b28      	ldr	r3, [pc, #160]	@ (800472c <HAL_GPIO_Init+0x354>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046ae:	4a1f      	ldr	r2, [pc, #124]	@ (800472c <HAL_GPIO_Init+0x354>)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046b4:	4b1d      	ldr	r3, [pc, #116]	@ (800472c <HAL_GPIO_Init+0x354>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046d8:	4a14      	ldr	r2, [pc, #80]	@ (800472c <HAL_GPIO_Init+0x354>)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3301      	adds	r3, #1
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b0f      	cmp	r3, #15
 80046e8:	f67f ae86 	bls.w	80043f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	3724      	adds	r7, #36	@ 0x24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800
 8004700:	40013800 	.word	0x40013800
 8004704:	40020000 	.word	0x40020000
 8004708:	40020400 	.word	0x40020400
 800470c:	40020800 	.word	0x40020800
 8004710:	40020c00 	.word	0x40020c00
 8004714:	40021000 	.word	0x40021000
 8004718:	40021400 	.word	0x40021400
 800471c:	40021800 	.word	0x40021800
 8004720:	40021c00 	.word	0x40021c00
 8004724:	40022000 	.word	0x40022000
 8004728:	40022400 	.word	0x40022400
 800472c:	40013c00 	.word	0x40013c00

08004730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	887b      	ldrh	r3, [r7, #2]
 8004742:	4013      	ands	r3, r2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
 800474c:	e001      	b.n	8004752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004752:	7bfb      	ldrb	r3, [r7, #15]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
 800476c:	4613      	mov	r3, r2
 800476e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004770:	787b      	ldrb	r3, [r7, #1]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004776:	887a      	ldrh	r2, [r7, #2]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800477c:	e003      	b.n	8004786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800477e:	887b      	ldrh	r3, [r7, #2]
 8004780:	041a      	lsls	r2, r3, #16
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	619a      	str	r2, [r3, #24]
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af02      	add	r7, sp, #8
 8004798:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e059      	b.n	8004858 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f00e fe3c 	bl	801343c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2203      	movs	r2, #3
 80047c8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047d2:	d102      	bne.n	80047da <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f008 fc19 	bl	800d016 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7c1a      	ldrb	r2, [r3, #16]
 80047ec:	f88d 2000 	strb.w	r2, [sp]
 80047f0:	3304      	adds	r3, #4
 80047f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047f4:	f008 fba4 	bl	800cf40 <USB_CoreInit>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2202      	movs	r2, #2
 8004802:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e026      	b.n	8004858 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2101      	movs	r1, #1
 8004810:	4618      	mov	r0, r3
 8004812:	f008 fc11 	bl	800d038 <USB_SetCurrentMode>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e017      	b.n	8004858 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	7c1a      	ldrb	r2, [r3, #16]
 8004830:	f88d 2000 	strb.w	r2, [sp]
 8004834:	3304      	adds	r3, #4
 8004836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004838:	f008 fdb4 	bl	800d3a4 <USB_HostInit>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e004      	b.n	8004858 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b08b      	sub	sp, #44	@ 0x2c
 8004864:	af04      	add	r7, sp, #16
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	4608      	mov	r0, r1
 800486a:	4611      	mov	r1, r2
 800486c:	461a      	mov	r2, r3
 800486e:	4603      	mov	r3, r0
 8004870:	70fb      	strb	r3, [r7, #3]
 8004872:	460b      	mov	r3, r1
 8004874:	70bb      	strb	r3, [r7, #2]
 8004876:	4613      	mov	r3, r2
 8004878:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800487a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800487c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_HCD_HC_Init+0x2c>
 8004888:	2302      	movs	r3, #2
 800488a:	e09d      	b.n	80049c8 <HAL_HCD_HC_Init+0x168>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	3319      	adds	r3, #25
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	3314      	adds	r3, #20
 80048b8:	787a      	ldrb	r2, [r7, #1]
 80048ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	3315      	adds	r3, #21
 80048cc:	78fa      	ldrb	r2, [r7, #3]
 80048ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	3326      	adds	r3, #38	@ 0x26
 80048e0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80048e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	78bb      	ldrb	r3, [r7, #2]
 80048ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ee:	b2d8      	uxtb	r0, r3
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	4613      	mov	r3, r2
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	3316      	adds	r3, #22
 80048fe:	4602      	mov	r2, r0
 8004900:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fbc8 	bl	800509c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800490c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004910:	2b00      	cmp	r3, #0
 8004912:	da0a      	bge.n	800492a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004914:	78fa      	ldrb	r2, [r7, #3]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	1a9b      	subs	r3, r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	3317      	adds	r3, #23
 8004924:	2201      	movs	r2, #1
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	e009      	b.n	800493e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800492a:	78fa      	ldrb	r2, [r7, #3]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	3317      	adds	r3, #23
 800493a:	2200      	movs	r2, #0
 800493c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f008 fe86 	bl	800d654 <USB_GetHostSpeed>
 8004948:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800494a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800494e:	2b01      	cmp	r3, #1
 8004950:	d10b      	bne.n	800496a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004952:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004956:	2b01      	cmp	r3, #1
 8004958:	d107      	bne.n	800496a <HAL_HCD_HC_Init+0x10a>
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d104      	bne.n	800496a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2bbc      	cmp	r3, #188	@ 0xbc
 8004964:	d901      	bls.n	800496a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004966:	23bc      	movs	r3, #188	@ 0xbc
 8004968:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	440b      	add	r3, r1
 8004978:	3318      	adds	r3, #24
 800497a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800497e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004980:	78fa      	ldrb	r2, [r7, #3]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	b298      	uxth	r0, r3
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	3328      	adds	r3, #40	@ 0x28
 8004994:	4602      	mov	r2, r0
 8004996:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	787c      	ldrb	r4, [r7, #1]
 80049a2:	78ba      	ldrb	r2, [r7, #2]
 80049a4:	78f9      	ldrb	r1, [r7, #3]
 80049a6:	9302      	str	r3, [sp, #8]
 80049a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	4623      	mov	r3, r4
 80049b6:	f008 fe75 	bl	800d6a4 <USB_HC_Init>
 80049ba:	4603      	mov	r3, r0
 80049bc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd90      	pop	{r4, r7, pc}

080049d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_HCD_HC_Halt+0x1e>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e00f      	b.n	8004a0e <HAL_HCD_HC_Halt+0x3e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	78fa      	ldrb	r2, [r7, #3]
 80049fc:	4611      	mov	r1, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f009 fa07 	bl	800de12 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	461a      	mov	r2, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	70fb      	strb	r3, [r7, #3]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	70bb      	strb	r3, [r7, #2]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	3317      	adds	r3, #23
 8004a42:	78ba      	ldrb	r2, [r7, #2]
 8004a44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3326      	adds	r3, #38	@ 0x26
 8004a56:	787a      	ldrb	r2, [r7, #1]
 8004a58:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004a5a:	7c3b      	ldrb	r3, [r7, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d114      	bne.n	8004a8a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004a60:	78fa      	ldrb	r2, [r7, #3]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	332a      	adds	r3, #42	@ 0x2a
 8004a70:	2203      	movs	r2, #3
 8004a72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004a74:	78fa      	ldrb	r2, [r7, #3]
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	3319      	adds	r3, #25
 8004a84:	7f3a      	ldrb	r2, [r7, #28]
 8004a86:	701a      	strb	r2, [r3, #0]
 8004a88:	e009      	b.n	8004a9e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a8a:	78fa      	ldrb	r2, [r7, #3]
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	440b      	add	r3, r1
 8004a98:	332a      	adds	r3, #42	@ 0x2a
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004a9e:	787b      	ldrb	r3, [r7, #1]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	f200 8102 	bhi.w	8004caa <HAL_HCD_HC_SubmitRequest+0x292>
 8004aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8004aac <HAL_HCD_HC_SubmitRequest+0x94>)
 8004aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aac:	08004abd 	.word	0x08004abd
 8004ab0:	08004c95 	.word	0x08004c95
 8004ab4:	08004b81 	.word	0x08004b81
 8004ab8:	08004c0b 	.word	0x08004c0b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004abc:	7c3b      	ldrb	r3, [r7, #16]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	f040 80f5 	bne.w	8004cae <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004ac4:	78bb      	ldrb	r3, [r7, #2]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d12d      	bne.n	8004b26 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004aca:	8b3b      	ldrh	r3, [r7, #24]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004ad0:	78fa      	ldrb	r2, [r7, #3]
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	333d      	adds	r3, #61	@ 0x3d
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004ae4:	78fa      	ldrb	r2, [r7, #3]
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	1a9b      	subs	r3, r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	333d      	adds	r3, #61	@ 0x3d
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004afa:	78fa      	ldrb	r2, [r7, #3]
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	1a9b      	subs	r3, r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	332a      	adds	r3, #42	@ 0x2a
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004b0e:	e0ce      	b.n	8004cae <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b10:	78fa      	ldrb	r2, [r7, #3]
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	4613      	mov	r3, r2
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	332a      	adds	r3, #42	@ 0x2a
 8004b20:	2202      	movs	r2, #2
 8004b22:	701a      	strb	r2, [r3, #0]
      break;
 8004b24:	e0c3      	b.n	8004cae <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004b26:	78fa      	ldrb	r2, [r7, #3]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	331a      	adds	r3, #26
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	f040 80b8 	bne.w	8004cae <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	333c      	adds	r3, #60	@ 0x3c
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	332a      	adds	r3, #42	@ 0x2a
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
      break;
 8004b68:	e0a1      	b.n	8004cae <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b6a:	78fa      	ldrb	r2, [r7, #3]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	332a      	adds	r3, #42	@ 0x2a
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	701a      	strb	r2, [r3, #0]
      break;
 8004b7e:	e096      	b.n	8004cae <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004b80:	78bb      	ldrb	r3, [r7, #2]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d120      	bne.n	8004bc8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	333d      	adds	r3, #61	@ 0x3d
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b9c:	78fa      	ldrb	r2, [r7, #3]
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	332a      	adds	r3, #42	@ 0x2a
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004bb0:	e07e      	b.n	8004cb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	332a      	adds	r3, #42	@ 0x2a
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	701a      	strb	r2, [r3, #0]
      break;
 8004bc6:	e073      	b.n	8004cb0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	333c      	adds	r3, #60	@ 0x3c
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	1a9b      	subs	r3, r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	440b      	add	r3, r1
 8004bec:	332a      	adds	r3, #42	@ 0x2a
 8004bee:	2200      	movs	r2, #0
 8004bf0:	701a      	strb	r2, [r3, #0]
      break;
 8004bf2:	e05d      	b.n	8004cb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bf4:	78fa      	ldrb	r2, [r7, #3]
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	332a      	adds	r3, #42	@ 0x2a
 8004c04:	2202      	movs	r2, #2
 8004c06:	701a      	strb	r2, [r3, #0]
      break;
 8004c08:	e052      	b.n	8004cb0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004c0a:	78bb      	ldrb	r3, [r7, #2]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d120      	bne.n	8004c52 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c10:	78fa      	ldrb	r2, [r7, #3]
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	333d      	adds	r3, #61	@ 0x3d
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10a      	bne.n	8004c3c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	332a      	adds	r3, #42	@ 0x2a
 8004c36:	2200      	movs	r2, #0
 8004c38:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c3a:	e039      	b.n	8004cb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c3c:	78fa      	ldrb	r2, [r7, #3]
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	1a9b      	subs	r3, r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	332a      	adds	r3, #42	@ 0x2a
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	701a      	strb	r2, [r3, #0]
      break;
 8004c50:	e02e      	b.n	8004cb0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	333c      	adds	r3, #60	@ 0x3c
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c68:	78fa      	ldrb	r2, [r7, #3]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	332a      	adds	r3, #42	@ 0x2a
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
      break;
 8004c7c:	e018      	b.n	8004cb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	332a      	adds	r3, #42	@ 0x2a
 8004c8e:	2202      	movs	r2, #2
 8004c90:	701a      	strb	r2, [r3, #0]
      break;
 8004c92:	e00d      	b.n	8004cb0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c94:	78fa      	ldrb	r2, [r7, #3]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	332a      	adds	r3, #42	@ 0x2a
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
      break;
 8004ca8:	e002      	b.n	8004cb0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004caa:	bf00      	nop
 8004cac:	e000      	b.n	8004cb0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004cae:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	332c      	adds	r3, #44	@ 0x2c
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	8b39      	ldrh	r1, [r7, #24]
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4403      	add	r3, r0
 8004cd4:	3334      	adds	r3, #52	@ 0x34
 8004cd6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004cd8:	78fa      	ldrb	r2, [r7, #3]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	334c      	adds	r3, #76	@ 0x4c
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	3338      	adds	r3, #56	@ 0x38
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d00:	78fa      	ldrb	r2, [r7, #3]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3315      	adds	r3, #21
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004d14:	78fa      	ldrb	r2, [r7, #3]
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	334d      	adds	r3, #77	@ 0x4d
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	78fa      	ldrb	r2, [r7, #3]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	3310      	adds	r3, #16
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	1d19      	adds	r1, r3, #4
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	799b      	ldrb	r3, [r3, #6]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f008 fdda 	bl	800d8fc <USB_HC_StartXfer>
 8004d48:	4603      	mov	r3, r0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop

08004d54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f008 fada 	bl	800d324 <USB_GetMode>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	f040 80fb 	bne.w	8004f6e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f008 fa9d 	bl	800d2bc <USB_ReadInterrupts>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80f1 	beq.w	8004f6c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f008 fa94 	bl	800d2bc <USB_ReadInterrupts>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d9e:	d104      	bne.n	8004daa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004da8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f008 fa84 	bl	800d2bc <USB_ReadInterrupts>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dbe:	d104      	bne.n	8004dca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004dc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f008 fa74 	bl	800d2bc <USB_ReadInterrupts>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004dda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dde:	d104      	bne.n	8004dea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004de8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f008 fa64 	bl	800d2bc <USB_ReadInterrupts>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d103      	bne.n	8004e06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2202      	movs	r2, #2
 8004e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f008 fa56 	bl	800d2bc <USB_ReadInterrupts>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e1a:	d120      	bne.n	8004e5e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004e24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d113      	bne.n	8004e5e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004e36:	2110      	movs	r1, #16
 8004e38:	6938      	ldr	r0, [r7, #16]
 8004e3a:	f008 f949 	bl	800d0d0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004e3e:	6938      	ldr	r0, [r7, #16]
 8004e40:	f008 f978 	bl	800d134 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	7a5b      	ldrb	r3, [r3, #9]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d105      	bne.n	8004e58 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2101      	movs	r1, #1
 8004e52:	4618      	mov	r0, r3
 8004e54:	f008 fb5e 	bl	800d514 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f00e fb61 	bl	8013520 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f008 fa2a 	bl	800d2bc <USB_ReadInterrupts>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e72:	d102      	bne.n	8004e7a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 fd33 	bl	80068e0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f008 fa1c 	bl	800d2bc <USB_ReadInterrupts>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d106      	bne.n	8004e9c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f00e fb2a 	bl	80134e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2208      	movs	r2, #8
 8004e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f008 fa0b 	bl	800d2bc <USB_ReadInterrupts>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004eb0:	d139      	bne.n	8004f26 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f008 ff9a 	bl	800ddf0 <USB_HC_ReadInterrupt>
 8004ebc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	e025      	b.n	8004f10 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d018      	beq.n	8004f0a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eee:	d106      	bne.n	8004efe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f905 	bl	8005106 <HCD_HC_IN_IRQHandler>
 8004efc:	e005      	b.n	8004f0a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	4619      	mov	r1, r3
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 ff67 	bl	8005dd8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	795b      	ldrb	r3, [r3, #5]
 8004f14:	461a      	mov	r2, r3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d3d3      	bcc.n	8004ec4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f008 f9c6 	bl	800d2bc <USB_ReadInterrupts>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d101      	bne.n	8004f3e <HAL_HCD_IRQHandler+0x1ea>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <HAL_HCD_IRQHandler+0x1ec>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d014      	beq.n	8004f6e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0210 	bic.w	r2, r2, #16
 8004f52:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f001 fbe4 	bl	8006722 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0210 	orr.w	r2, r2, #16
 8004f68:	619a      	str	r2, [r3, #24]
 8004f6a:	e000      	b.n	8004f6e <HAL_HCD_IRQHandler+0x21a>
      return;
 8004f6c:	bf00      	nop
    }
  }
}
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_HCD_Start+0x16>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e013      	b.n	8004fb2 <HAL_HCD_Start+0x3e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2101      	movs	r1, #1
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f008 fb22 	bl	800d5e2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f008 f826 	bl	800cff4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_HCD_Stop+0x16>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e00d      	b.n	8004fec <HAL_HCD_Stop+0x32>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f009 f875 	bl	800e0cc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f008 fac4 	bl	800d58e <USB_ResetPort>
 8005006:	4603      	mov	r3, r0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	334c      	adds	r3, #76	@ 0x4c
 800502c:	781b      	ldrb	r3, [r3, #0]
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	460b      	mov	r3, r1
 8005044:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	3338      	adds	r3, #56	@ 0x38
 8005056:	681b      	ldr	r3, [r3, #0]
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f008 fb06 	bl	800d682 <USB_GetCurrentFrame>
 8005076:	4603      	mov	r3, r0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f008 fae1 	bl	800d654 <USB_GetHostSpeed>
 8005092:	4603      	mov	r3, r0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80050a8:	78fa      	ldrb	r2, [r7, #3]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	331a      	adds	r3, #26
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80050bc:	78fa      	ldrb	r2, [r7, #3]
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	331b      	adds	r3, #27
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80050d0:	78fa      	ldrb	r2, [r7, #3]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	3325      	adds	r3, #37	@ 0x25
 80050e0:	2200      	movs	r2, #0
 80050e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	3324      	adds	r3, #36	@ 0x24
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	78fa      	ldrb	r2, [r7, #3]
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f008 f8dc 	bl	800d2e2 <USB_ReadChInterrupts>
 800512a:	4603      	mov	r3, r0
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b04      	cmp	r3, #4
 8005132:	d11a      	bne.n	800516a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005140:	461a      	mov	r2, r3
 8005142:	2304      	movs	r3, #4
 8005144:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005146:	78fa      	ldrb	r2, [r7, #3]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	334d      	adds	r3, #77	@ 0x4d
 8005156:	2207      	movs	r2, #7
 8005158:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	4611      	mov	r1, r2
 8005162:	4618      	mov	r0, r3
 8005164:	f008 fe55 	bl	800de12 <USB_HC_Halt>
 8005168:	e09e      	b.n	80052a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	78fa      	ldrb	r2, [r7, #3]
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f008 f8b5 	bl	800d2e2 <USB_ReadChInterrupts>
 8005178:	4603      	mov	r3, r0
 800517a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005182:	d11b      	bne.n	80051bc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4413      	add	r3, r2
 800518c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005190:	461a      	mov	r2, r3
 8005192:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005196:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005198:	78fa      	ldrb	r2, [r7, #3]
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	334d      	adds	r3, #77	@ 0x4d
 80051a8:	2208      	movs	r2, #8
 80051aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	78fa      	ldrb	r2, [r7, #3]
 80051b2:	4611      	mov	r1, r2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f008 fe2c 	bl	800de12 <USB_HC_Halt>
 80051ba:	e075      	b.n	80052a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f008 f88c 	bl	800d2e2 <USB_ReadChInterrupts>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d11a      	bne.n	800520a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051e0:	461a      	mov	r2, r3
 80051e2:	2308      	movs	r3, #8
 80051e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80051e6:	78fa      	ldrb	r2, [r7, #3]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	1a9b      	subs	r3, r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	334d      	adds	r3, #77	@ 0x4d
 80051f6:	2206      	movs	r2, #6
 80051f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	4611      	mov	r1, r2
 8005202:	4618      	mov	r0, r3
 8005204:	f008 fe05 	bl	800de12 <USB_HC_Halt>
 8005208:	e04e      	b.n	80052a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	78fa      	ldrb	r2, [r7, #3]
 8005210:	4611      	mov	r1, r2
 8005212:	4618      	mov	r0, r3
 8005214:	f008 f865 	bl	800d2e2 <USB_ReadChInterrupts>
 8005218:	4603      	mov	r3, r0
 800521a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800521e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005222:	d11b      	bne.n	800525c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005230:	461a      	mov	r2, r3
 8005232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005236:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	334d      	adds	r3, #77	@ 0x4d
 8005248:	2209      	movs	r2, #9
 800524a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	78fa      	ldrb	r2, [r7, #3]
 8005252:	4611      	mov	r1, r2
 8005254:	4618      	mov	r0, r3
 8005256:	f008 fddc 	bl	800de12 <USB_HC_Halt>
 800525a:	e025      	b.n	80052a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	4611      	mov	r1, r2
 8005264:	4618      	mov	r0, r3
 8005266:	f008 f83c 	bl	800d2e2 <USB_ReadChInterrupts>
 800526a:	4603      	mov	r3, r0
 800526c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005270:	2b80      	cmp	r3, #128	@ 0x80
 8005272:	d119      	bne.n	80052a8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4413      	add	r3, r2
 800527c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005280:	461a      	mov	r2, r3
 8005282:	2380      	movs	r3, #128	@ 0x80
 8005284:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	334d      	adds	r3, #77	@ 0x4d
 8005296:	2207      	movs	r2, #7
 8005298:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	4611      	mov	r1, r2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f008 fdb5 	bl	800de12 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	78fa      	ldrb	r2, [r7, #3]
 80052ae:	4611      	mov	r1, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f008 f816 	bl	800d2e2 <USB_ReadChInterrupts>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052c0:	d112      	bne.n	80052e8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	4611      	mov	r1, r2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f008 fda1 	bl	800de12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052dc:	461a      	mov	r2, r3
 80052de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052e2:	6093      	str	r3, [r2, #8]
 80052e4:	f000 bd75 	b.w	8005dd2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	78fa      	ldrb	r2, [r7, #3]
 80052ee:	4611      	mov	r1, r2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f007 fff6 	bl	800d2e2 <USB_ReadChInterrupts>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	f040 8128 	bne.w	8005552 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005302:	78fb      	ldrb	r3, [r7, #3]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800530e:	461a      	mov	r2, r3
 8005310:	2320      	movs	r3, #32
 8005312:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	331b      	adds	r3, #27
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d119      	bne.n	800535e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800532a:	78fa      	ldrb	r2, [r7, #3]
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	1a9b      	subs	r3, r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	331b      	adds	r3, #27
 800533a:	2200      	movs	r2, #0
 800533c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	440a      	add	r2, r1
 8005354:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800535c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	799b      	ldrb	r3, [r3, #6]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d01b      	beq.n	800539e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	3330      	adds	r3, #48	@ 0x30
 8005376:	6819      	ldr	r1, [r3, #0]
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	1ac9      	subs	r1, r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4403      	add	r3, r0
 800539a:	3338      	adds	r3, #56	@ 0x38
 800539c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800539e:	78fa      	ldrb	r2, [r7, #3]
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	334d      	adds	r3, #77	@ 0x4d
 80053ae:	2201      	movs	r2, #1
 80053b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80053b2:	78fa      	ldrb	r2, [r7, #3]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	3344      	adds	r3, #68	@ 0x44
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80053c6:	78fb      	ldrb	r3, [r7, #3]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053d2:	461a      	mov	r2, r3
 80053d4:	2301      	movs	r3, #1
 80053d6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	3326      	adds	r3, #38	@ 0x26
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80053ee:	78fa      	ldrb	r2, [r7, #3]
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	1a9b      	subs	r3, r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	3326      	adds	r3, #38	@ 0x26
 80053fe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005400:	2b02      	cmp	r3, #2
 8005402:	d110      	bne.n	8005426 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	78fa      	ldrb	r2, [r7, #3]
 800540a:	4611      	mov	r1, r2
 800540c:	4618      	mov	r0, r3
 800540e:	f008 fd00 	bl	800de12 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005412:	78fb      	ldrb	r3, [r7, #3]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4413      	add	r3, r2
 800541a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800541e:	461a      	mov	r2, r3
 8005420:	2310      	movs	r3, #16
 8005422:	6093      	str	r3, [r2, #8]
 8005424:	e03d      	b.n	80054a2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005426:	78fa      	ldrb	r2, [r7, #3]
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	3326      	adds	r3, #38	@ 0x26
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b03      	cmp	r3, #3
 800543a:	d00a      	beq.n	8005452 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800543c:	78fa      	ldrb	r2, [r7, #3]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	3326      	adds	r3, #38	@ 0x26
 800544c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800544e:	2b01      	cmp	r3, #1
 8005450:	d127      	bne.n	80054a2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4413      	add	r3, r2
 800545a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	78fa      	ldrb	r2, [r7, #3]
 8005462:	0151      	lsls	r1, r2, #5
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	440a      	add	r2, r1
 8005468:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800546c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005470:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	334c      	adds	r3, #76	@ 0x4c
 8005482:	2201      	movs	r2, #1
 8005484:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005486:	78fa      	ldrb	r2, [r7, #3]
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	440b      	add	r3, r1
 8005494:	334c      	adds	r3, #76	@ 0x4c
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f00e f84d 	bl	801353c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	799b      	ldrb	r3, [r3, #6]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d13b      	bne.n	8005522 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80054aa:	78fa      	ldrb	r2, [r7, #3]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	3338      	adds	r3, #56	@ 0x38
 80054ba:	6819      	ldr	r1, [r3, #0]
 80054bc:	78fa      	ldrb	r2, [r7, #3]
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	4613      	mov	r3, r2
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4403      	add	r3, r0
 80054ca:	3328      	adds	r3, #40	@ 0x28
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	440b      	add	r3, r1
 80054d0:	1e59      	subs	r1, r3, #1
 80054d2:	78fa      	ldrb	r2, [r7, #3]
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4403      	add	r3, r0
 80054e0:	3328      	adds	r3, #40	@ 0x28
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8470 	beq.w	8005dd2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	333c      	adds	r3, #60	@ 0x3c
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	f083 0301 	eor.w	r3, r3, #1
 800550a:	b2d8      	uxtb	r0, r3
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	333c      	adds	r3, #60	@ 0x3c
 800551a:	4602      	mov	r2, r0
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	f000 bc58 	b.w	8005dd2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	333c      	adds	r3, #60	@ 0x3c
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	78fa      	ldrb	r2, [r7, #3]
 8005536:	f083 0301 	eor.w	r3, r3, #1
 800553a:	b2d8      	uxtb	r0, r3
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	1a9b      	subs	r3, r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	333c      	adds	r3, #60	@ 0x3c
 800554a:	4602      	mov	r2, r0
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	f000 bc40 	b.w	8005dd2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f007 fec1 	bl	800d2e2 <USB_ReadChInterrupts>
 8005560:	4603      	mov	r3, r0
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b20      	cmp	r3, #32
 8005568:	d131      	bne.n	80055ce <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	4413      	add	r3, r2
 8005572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005576:	461a      	mov	r2, r3
 8005578:	2320      	movs	r3, #32
 800557a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800557c:	78fa      	ldrb	r2, [r7, #3]
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	331a      	adds	r3, #26
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b01      	cmp	r3, #1
 8005590:	f040 841f 	bne.w	8005dd2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	331b      	adds	r3, #27
 80055a4:	2201      	movs	r2, #1
 80055a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80055a8:	78fa      	ldrb	r2, [r7, #3]
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	334d      	adds	r3, #77	@ 0x4d
 80055b8:	2203      	movs	r2, #3
 80055ba:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	78fa      	ldrb	r2, [r7, #3]
 80055c2:	4611      	mov	r1, r2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f008 fc24 	bl	800de12 <USB_HC_Halt>
 80055ca:	f000 bc02 	b.w	8005dd2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	78fa      	ldrb	r2, [r7, #3]
 80055d4:	4611      	mov	r1, r2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f007 fe83 	bl	800d2e2 <USB_ReadChInterrupts>
 80055dc:	4603      	mov	r3, r0
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	f040 8305 	bne.w	8005bf2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f4:	461a      	mov	r2, r3
 80055f6:	2302      	movs	r3, #2
 80055f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80055fa:	78fa      	ldrb	r2, [r7, #3]
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	4613      	mov	r3, r2
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	334d      	adds	r3, #77	@ 0x4d
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d114      	bne.n	800563a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005610:	78fa      	ldrb	r2, [r7, #3]
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	334d      	adds	r3, #77	@ 0x4d
 8005620:	2202      	movs	r2, #2
 8005622:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005624:	78fa      	ldrb	r2, [r7, #3]
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	4613      	mov	r3, r2
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	334c      	adds	r3, #76	@ 0x4c
 8005634:	2201      	movs	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	e2cc      	b.n	8005bd4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800563a:	78fa      	ldrb	r2, [r7, #3]
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4613      	mov	r3, r2
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	440b      	add	r3, r1
 8005648:	334d      	adds	r3, #77	@ 0x4d
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b06      	cmp	r3, #6
 800564e:	d114      	bne.n	800567a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005650:	78fa      	ldrb	r2, [r7, #3]
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	1a9b      	subs	r3, r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	334d      	adds	r3, #77	@ 0x4d
 8005660:	2202      	movs	r2, #2
 8005662:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	334c      	adds	r3, #76	@ 0x4c
 8005674:	2205      	movs	r2, #5
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	e2ac      	b.n	8005bd4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800567a:	78fa      	ldrb	r2, [r7, #3]
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	4613      	mov	r3, r2
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	334d      	adds	r3, #77	@ 0x4d
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b07      	cmp	r3, #7
 800568e:	d00b      	beq.n	80056a8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005690:	78fa      	ldrb	r2, [r7, #3]
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	1a9b      	subs	r3, r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	334d      	adds	r3, #77	@ 0x4d
 80056a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80056a2:	2b09      	cmp	r3, #9
 80056a4:	f040 80a6 	bne.w	80057f4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056a8:	78fa      	ldrb	r2, [r7, #3]
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	334d      	adds	r3, #77	@ 0x4d
 80056b8:	2202      	movs	r2, #2
 80056ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	3344      	adds	r3, #68	@ 0x44
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	1c59      	adds	r1, r3, #1
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4403      	add	r3, r0
 80056dc:	3344      	adds	r3, #68	@ 0x44
 80056de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056e0:	78fa      	ldrb	r2, [r7, #3]
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	3344      	adds	r3, #68	@ 0x44
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d943      	bls.n	800577e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80056f6:	78fa      	ldrb	r2, [r7, #3]
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	3344      	adds	r3, #68	@ 0x44
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800570a:	78fa      	ldrb	r2, [r7, #3]
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	331a      	adds	r3, #26
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d123      	bne.n	8005768 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005720:	78fa      	ldrb	r2, [r7, #3]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	331b      	adds	r3, #27
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	331c      	adds	r3, #28
 8005744:	2200      	movs	r2, #0
 8005746:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4413      	add	r3, r2
 8005750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	78fa      	ldrb	r2, [r7, #3]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	440a      	add	r2, r1
 800575e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005766:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005768:	78fa      	ldrb	r2, [r7, #3]
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	334c      	adds	r3, #76	@ 0x4c
 8005778:	2204      	movs	r2, #4
 800577a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800577c:	e229      	b.n	8005bd2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800577e:	78fa      	ldrb	r2, [r7, #3]
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	334c      	adds	r3, #76	@ 0x4c
 800578e:	2202      	movs	r2, #2
 8005790:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005792:	78fa      	ldrb	r2, [r7, #3]
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	3326      	adds	r3, #38	@ 0x26
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00b      	beq.n	80057c0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80057a8:	78fa      	ldrb	r2, [r7, #3]
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	4613      	mov	r3, r2
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	1a9b      	subs	r3, r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	3326      	adds	r3, #38	@ 0x26
 80057b8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	f040 8209 	bne.w	8005bd2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057d6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057de:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ec:	461a      	mov	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80057f2:	e1ee      	b.n	8005bd2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80057f4:	78fa      	ldrb	r2, [r7, #3]
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	334d      	adds	r3, #77	@ 0x4d
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b05      	cmp	r3, #5
 8005808:	f040 80c8 	bne.w	800599c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800580c:	78fa      	ldrb	r2, [r7, #3]
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	4613      	mov	r3, r2
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	334d      	adds	r3, #77	@ 0x4d
 800581c:	2202      	movs	r2, #2
 800581e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005820:	78fa      	ldrb	r2, [r7, #3]
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	331b      	adds	r3, #27
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b01      	cmp	r3, #1
 8005834:	f040 81ce 	bne.w	8005bd4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005838:	78fa      	ldrb	r2, [r7, #3]
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	4613      	mov	r3, r2
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	440b      	add	r3, r1
 8005846:	3326      	adds	r3, #38	@ 0x26
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b03      	cmp	r3, #3
 800584c:	d16b      	bne.n	8005926 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800584e:	78fa      	ldrb	r2, [r7, #3]
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	4613      	mov	r3, r2
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	1a9b      	subs	r3, r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	440b      	add	r3, r1
 800585c:	3348      	adds	r3, #72	@ 0x48
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	1c59      	adds	r1, r3, #1
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4403      	add	r3, r0
 800586e:	3348      	adds	r3, #72	@ 0x48
 8005870:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005872:	78fa      	ldrb	r2, [r7, #3]
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	3348      	adds	r3, #72	@ 0x48
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d943      	bls.n	8005910 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005888:	78fa      	ldrb	r2, [r7, #3]
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	3348      	adds	r3, #72	@ 0x48
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800589c:	78fa      	ldrb	r2, [r7, #3]
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	331b      	adds	r3, #27
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80058b0:	78fa      	ldrb	r2, [r7, #3]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	3344      	adds	r3, #68	@ 0x44
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d809      	bhi.n	80058da <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80058c6:	78fa      	ldrb	r2, [r7, #3]
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	331c      	adds	r3, #28
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	78fa      	ldrb	r2, [r7, #3]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058f8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80058fa:	78fa      	ldrb	r2, [r7, #3]
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	440b      	add	r3, r1
 8005908:	334c      	adds	r3, #76	@ 0x4c
 800590a:	2204      	movs	r2, #4
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e014      	b.n	800593a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	334c      	adds	r3, #76	@ 0x4c
 8005920:	2202      	movs	r2, #2
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	e009      	b.n	800593a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005926:	78fa      	ldrb	r2, [r7, #3]
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	4613      	mov	r3, r2
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	440b      	add	r3, r1
 8005934:	334c      	adds	r3, #76	@ 0x4c
 8005936:	2202      	movs	r2, #2
 8005938:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800593a:	78fa      	ldrb	r2, [r7, #3]
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	1a9b      	subs	r3, r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	3326      	adds	r3, #38	@ 0x26
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00b      	beq.n	8005968 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005950:	78fa      	ldrb	r2, [r7, #3]
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	4613      	mov	r3, r2
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	1a9b      	subs	r3, r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	3326      	adds	r3, #38	@ 0x26
 8005960:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005962:	2b02      	cmp	r3, #2
 8005964:	f040 8136 	bne.w	8005bd4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4413      	add	r3, r2
 8005970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800597e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005986:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005994:	461a      	mov	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	e11b      	b.n	8005bd4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	334d      	adds	r3, #77	@ 0x4d
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	f040 8081 	bne.w	8005ab6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80059b4:	78fa      	ldrb	r2, [r7, #3]
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4613      	mov	r3, r2
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	334d      	adds	r3, #77	@ 0x4d
 80059c4:	2202      	movs	r2, #2
 80059c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80059c8:	78fa      	ldrb	r2, [r7, #3]
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	331b      	adds	r3, #27
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	f040 80fa 	bne.w	8005bd4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059e0:	78fa      	ldrb	r2, [r7, #3]
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	1a9b      	subs	r3, r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	334c      	adds	r3, #76	@ 0x4c
 80059f0:	2202      	movs	r2, #2
 80059f2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	78fa      	ldrb	r2, [r7, #3]
 8005a04:	0151      	lsls	r1, r2, #5
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	440a      	add	r2, r1
 8005a0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a12:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	78fa      	ldrb	r2, [r7, #3]
 8005a24:	0151      	lsls	r1, r2, #5
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	440a      	add	r2, r1
 8005a2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a32:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	78fa      	ldrb	r2, [r7, #3]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a4e:	f023 0320 	bic.w	r3, r3, #32
 8005a52:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005a54:	78fa      	ldrb	r2, [r7, #3]
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	3326      	adds	r3, #38	@ 0x26
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	3326      	adds	r3, #38	@ 0x26
 8005a7a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	f040 80a9 	bne.w	8005bd4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a82:	78fb      	ldrb	r3, [r7, #3]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a98:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005aa0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005aa2:	78fb      	ldrb	r3, [r7, #3]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aae:	461a      	mov	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	e08e      	b.n	8005bd4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	4613      	mov	r3, r2
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	1a9b      	subs	r3, r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	334d      	adds	r3, #77	@ 0x4d
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	d143      	bne.n	8005b54 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005acc:	78fa      	ldrb	r2, [r7, #3]
 8005ace:	6879      	ldr	r1, [r7, #4]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	334d      	adds	r3, #77	@ 0x4d
 8005adc:	2202      	movs	r2, #2
 8005ade:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ae0:	78fa      	ldrb	r2, [r7, #3]
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	1a9b      	subs	r3, r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	440b      	add	r3, r1
 8005aee:	334c      	adds	r3, #76	@ 0x4c
 8005af0:	2202      	movs	r2, #2
 8005af2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005af4:	78fa      	ldrb	r2, [r7, #3]
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	4613      	mov	r3, r2
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	1a9b      	subs	r3, r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	3326      	adds	r3, #38	@ 0x26
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005b0a:	78fa      	ldrb	r2, [r7, #3]
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	1a9b      	subs	r3, r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	440b      	add	r3, r1
 8005b18:	3326      	adds	r3, #38	@ 0x26
 8005b1a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d159      	bne.n	8005bd4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b36:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b3e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	e03f      	b.n	8005bd4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005b54:	78fa      	ldrb	r2, [r7, #3]
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	1a9b      	subs	r3, r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	334d      	adds	r3, #77	@ 0x4d
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d126      	bne.n	8005bb8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b6a:	78fa      	ldrb	r2, [r7, #3]
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	334d      	adds	r3, #77	@ 0x4d
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005b7e:	78fa      	ldrb	r2, [r7, #3]
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	1a9b      	subs	r3, r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	3344      	adds	r3, #68	@ 0x44
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	1c59      	adds	r1, r3, #1
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4613      	mov	r3, r2
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	1a9b      	subs	r3, r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4403      	add	r3, r0
 8005b9e:	3344      	adds	r3, #68	@ 0x44
 8005ba0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005ba2:	78fa      	ldrb	r2, [r7, #3]
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	1a9b      	subs	r3, r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	440b      	add	r3, r1
 8005bb0:	334c      	adds	r3, #76	@ 0x4c
 8005bb2:	2204      	movs	r2, #4
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	e00d      	b.n	8005bd4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005bb8:	78fa      	ldrb	r2, [r7, #3]
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	334d      	adds	r3, #77	@ 0x4d
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	f000 8100 	beq.w	8005dd0 <HCD_HC_IN_IRQHandler+0xcca>
 8005bd0:	e000      	b.n	8005bd4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005bd2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005bd4:	78fa      	ldrb	r2, [r7, #3]
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	1a9b      	subs	r3, r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	334c      	adds	r3, #76	@ 0x4c
 8005be4:	781a      	ldrb	r2, [r3, #0]
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f00d fca6 	bl	801353c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005bf0:	e0ef      	b.n	8005dd2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	78fa      	ldrb	r2, [r7, #3]
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f007 fb71 	bl	800d2e2 <USB_ReadChInterrupts>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c06:	2b40      	cmp	r3, #64	@ 0x40
 8005c08:	d12f      	bne.n	8005c6a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c16:	461a      	mov	r2, r3
 8005c18:	2340      	movs	r3, #64	@ 0x40
 8005c1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	4613      	mov	r3, r2
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	334d      	adds	r3, #77	@ 0x4d
 8005c2c:	2205      	movs	r2, #5
 8005c2e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005c30:	78fa      	ldrb	r2, [r7, #3]
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	1a9b      	subs	r3, r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	331a      	adds	r3, #26
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005c46:	78fa      	ldrb	r2, [r7, #3]
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	1a9b      	subs	r3, r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	440b      	add	r3, r1
 8005c54:	3344      	adds	r3, #68	@ 0x44
 8005c56:	2200      	movs	r2, #0
 8005c58:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	78fa      	ldrb	r2, [r7, #3]
 8005c60:	4611      	mov	r1, r2
 8005c62:	4618      	mov	r0, r3
 8005c64:	f008 f8d5 	bl	800de12 <USB_HC_Halt>
 8005c68:	e0b3      	b.n	8005dd2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	78fa      	ldrb	r2, [r7, #3]
 8005c70:	4611      	mov	r1, r2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f007 fb35 	bl	800d2e2 <USB_ReadChInterrupts>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	2b10      	cmp	r3, #16
 8005c80:	f040 80a7 	bne.w	8005dd2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005c84:	78fa      	ldrb	r2, [r7, #3]
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	1a9b      	subs	r3, r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	440b      	add	r3, r1
 8005c92:	3326      	adds	r3, #38	@ 0x26
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d11b      	bne.n	8005cd2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005c9a:	78fa      	ldrb	r2, [r7, #3]
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	1a9b      	subs	r3, r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	440b      	add	r3, r1
 8005ca8:	3344      	adds	r3, #68	@ 0x44
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005cae:	78fa      	ldrb	r2, [r7, #3]
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	1a9b      	subs	r3, r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	334d      	adds	r3, #77	@ 0x4d
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	78fa      	ldrb	r2, [r7, #3]
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f008 f8a1 	bl	800de12 <USB_HC_Halt>
 8005cd0:	e03f      	b.n	8005d52 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005cd2:	78fa      	ldrb	r2, [r7, #3]
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	3326      	adds	r3, #38	@ 0x26
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005ce8:	78fa      	ldrb	r2, [r7, #3]
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	4613      	mov	r3, r2
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	3326      	adds	r3, #38	@ 0x26
 8005cf8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d129      	bne.n	8005d52 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	4613      	mov	r3, r2
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	1a9b      	subs	r3, r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	3344      	adds	r3, #68	@ 0x44
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	799b      	ldrb	r3, [r3, #6]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <HCD_HC_IN_IRQHandler+0xc2a>
 8005d1a:	78fa      	ldrb	r2, [r7, #3]
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	331b      	adds	r3, #27
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d110      	bne.n	8005d52 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005d30:	78fa      	ldrb	r2, [r7, #3]
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	4613      	mov	r3, r2
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	1a9b      	subs	r3, r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	440b      	add	r3, r1
 8005d3e:	334d      	adds	r3, #77	@ 0x4d
 8005d40:	2204      	movs	r2, #4
 8005d42:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	78fa      	ldrb	r2, [r7, #3]
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f008 f860 	bl	800de12 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005d52:	78fa      	ldrb	r2, [r7, #3]
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	1a9b      	subs	r3, r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	331b      	adds	r3, #27
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d129      	bne.n	8005dbc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	331b      	adds	r3, #27
 8005d78:	2200      	movs	r2, #0
 8005d7a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	78fa      	ldrb	r2, [r7, #3]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d9a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005d9c:	78fb      	ldrb	r3, [r7, #3]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	78fa      	ldrb	r2, [r7, #3]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005db6:	f043 0320 	orr.w	r3, r3, #32
 8005dba:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dc8:	461a      	mov	r2, r3
 8005dca:	2310      	movs	r3, #16
 8005dcc:	6093      	str	r3, [r2, #8]
 8005dce:	e000      	b.n	8005dd2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005dd0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	78fa      	ldrb	r2, [r7, #3]
 8005df4:	4611      	mov	r1, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f007 fa73 	bl	800d2e2 <USB_ReadChInterrupts>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d11b      	bne.n	8005e3e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e12:	461a      	mov	r2, r3
 8005e14:	2304      	movs	r3, #4
 8005e16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005e18:	78fa      	ldrb	r2, [r7, #3]
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	1a9b      	subs	r3, r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	334d      	adds	r3, #77	@ 0x4d
 8005e28:	2207      	movs	r2, #7
 8005e2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	78fa      	ldrb	r2, [r7, #3]
 8005e32:	4611      	mov	r1, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f007 ffec 	bl	800de12 <USB_HC_Halt>
 8005e3a:	f000 bc6f 	b.w	800671c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	78fa      	ldrb	r2, [r7, #3]
 8005e44:	4611      	mov	r1, r2
 8005e46:	4618      	mov	r0, r3
 8005e48:	f007 fa4b 	bl	800d2e2 <USB_ReadChInterrupts>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	f040 8082 	bne.w	8005f5c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e64:	461a      	mov	r2, r3
 8005e66:	2320      	movs	r3, #32
 8005e68:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005e6a:	78fa      	ldrb	r2, [r7, #3]
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	3319      	adds	r3, #25
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d124      	bne.n	8005eca <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	4613      	mov	r3, r2
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	1a9b      	subs	r3, r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	3319      	adds	r3, #25
 8005e90:	2200      	movs	r2, #0
 8005e92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005e94:	78fa      	ldrb	r2, [r7, #3]
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	1a9b      	subs	r3, r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	334c      	adds	r3, #76	@ 0x4c
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005ea8:	78fa      	ldrb	r2, [r7, #3]
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	4613      	mov	r3, r2
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	1a9b      	subs	r3, r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	334d      	adds	r3, #77	@ 0x4d
 8005eb8:	2203      	movs	r2, #3
 8005eba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	78fa      	ldrb	r2, [r7, #3]
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f007 ffa4 	bl	800de12 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005eca:	78fa      	ldrb	r2, [r7, #3]
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	331a      	adds	r3, #26
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	f040 841d 	bne.w	800671c <HCD_HC_OUT_IRQHandler+0x944>
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	440b      	add	r3, r1
 8005ef0:	331b      	adds	r3, #27
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f040 8411 	bne.w	800671c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005efa:	78fa      	ldrb	r2, [r7, #3]
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	4613      	mov	r3, r2
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	1a9b      	subs	r3, r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	440b      	add	r3, r1
 8005f08:	3326      	adds	r3, #38	@ 0x26
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d009      	beq.n	8005f24 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005f10:	78fa      	ldrb	r2, [r7, #3]
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	4613      	mov	r3, r2
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	1a9b      	subs	r3, r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	331b      	adds	r3, #27
 8005f20:	2201      	movs	r2, #1
 8005f22:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	334d      	adds	r3, #77	@ 0x4d
 8005f34:	2203      	movs	r2, #3
 8005f36:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	78fa      	ldrb	r2, [r7, #3]
 8005f3e:	4611      	mov	r1, r2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f007 ff66 	bl	800de12 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	3344      	adds	r3, #68	@ 0x44
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e3df      	b.n	800671c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	78fa      	ldrb	r2, [r7, #3]
 8005f62:	4611      	mov	r1, r2
 8005f64:	4618      	mov	r0, r3
 8005f66:	f007 f9bc 	bl	800d2e2 <USB_ReadChInterrupts>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f74:	d111      	bne.n	8005f9a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f82:	461a      	mov	r2, r3
 8005f84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f88:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	78fa      	ldrb	r2, [r7, #3]
 8005f90:	4611      	mov	r1, r2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f007 ff3d 	bl	800de12 <USB_HC_Halt>
 8005f98:	e3c0      	b.n	800671c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f007 f99d 	bl	800d2e2 <USB_ReadChInterrupts>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d168      	bne.n	8006084 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	3344      	adds	r3, #68	@ 0x44
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	78fa      	ldrb	r2, [r7, #3]
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f007 f987 	bl	800d2e2 <USB_ReadChInterrupts>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fda:	2b40      	cmp	r3, #64	@ 0x40
 8005fdc:	d112      	bne.n	8006004 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005fde:	78fa      	ldrb	r2, [r7, #3]
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	1a9b      	subs	r3, r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	3319      	adds	r3, #25
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ffe:	461a      	mov	r2, r3
 8006000:	2340      	movs	r3, #64	@ 0x40
 8006002:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006004:	78fa      	ldrb	r2, [r7, #3]
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	4613      	mov	r3, r2
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	1a9b      	subs	r3, r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	440b      	add	r3, r1
 8006012:	331b      	adds	r3, #27
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d019      	beq.n	800604e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800601a:	78fa      	ldrb	r2, [r7, #3]
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	331b      	adds	r3, #27
 800602a:	2200      	movs	r2, #0
 800602c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	4413      	add	r3, r2
 8006036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	440a      	add	r2, r1
 8006044:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800604c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800605a:	461a      	mov	r2, r3
 800605c:	2301      	movs	r3, #1
 800605e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006060:	78fa      	ldrb	r2, [r7, #3]
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	334d      	adds	r3, #77	@ 0x4d
 8006070:	2201      	movs	r2, #1
 8006072:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	78fa      	ldrb	r2, [r7, #3]
 800607a:	4611      	mov	r1, r2
 800607c:	4618      	mov	r0, r3
 800607e:	f007 fec8 	bl	800de12 <USB_HC_Halt>
 8006082:	e34b      	b.n	800671c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	78fa      	ldrb	r2, [r7, #3]
 800608a:	4611      	mov	r1, r2
 800608c:	4618      	mov	r0, r3
 800608e:	f007 f928 	bl	800d2e2 <USB_ReadChInterrupts>
 8006092:	4603      	mov	r3, r0
 8006094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006098:	2b40      	cmp	r3, #64	@ 0x40
 800609a:	d139      	bne.n	8006110 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800609c:	78fa      	ldrb	r2, [r7, #3]
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	334d      	adds	r3, #77	@ 0x4d
 80060ac:	2205      	movs	r2, #5
 80060ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80060b0:	78fa      	ldrb	r2, [r7, #3]
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	4613      	mov	r3, r2
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	331a      	adds	r3, #26
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80060c6:	78fa      	ldrb	r2, [r7, #3]
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	4613      	mov	r3, r2
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	1a9b      	subs	r3, r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	3319      	adds	r3, #25
 80060d6:	2201      	movs	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80060da:	78fa      	ldrb	r2, [r7, #3]
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	3344      	adds	r3, #68	@ 0x44
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	78fa      	ldrb	r2, [r7, #3]
 80060f4:	4611      	mov	r1, r2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f007 fe8b 	bl	800de12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	4413      	add	r3, r2
 8006104:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006108:	461a      	mov	r2, r3
 800610a:	2340      	movs	r3, #64	@ 0x40
 800610c:	6093      	str	r3, [r2, #8]
 800610e:	e305      	b.n	800671c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	78fa      	ldrb	r2, [r7, #3]
 8006116:	4611      	mov	r1, r2
 8006118:	4618      	mov	r0, r3
 800611a:	f007 f8e2 	bl	800d2e2 <USB_ReadChInterrupts>
 800611e:	4603      	mov	r3, r0
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b08      	cmp	r3, #8
 8006126:	d11a      	bne.n	800615e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4413      	add	r3, r2
 8006130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006134:	461a      	mov	r2, r3
 8006136:	2308      	movs	r3, #8
 8006138:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800613a:	78fa      	ldrb	r2, [r7, #3]
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	440b      	add	r3, r1
 8006148:	334d      	adds	r3, #77	@ 0x4d
 800614a:	2206      	movs	r2, #6
 800614c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	78fa      	ldrb	r2, [r7, #3]
 8006154:	4611      	mov	r1, r2
 8006156:	4618      	mov	r0, r3
 8006158:	f007 fe5b 	bl	800de12 <USB_HC_Halt>
 800615c:	e2de      	b.n	800671c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	4611      	mov	r1, r2
 8006166:	4618      	mov	r0, r3
 8006168:	f007 f8bb 	bl	800d2e2 <USB_ReadChInterrupts>
 800616c:	4603      	mov	r3, r0
 800616e:	f003 0310 	and.w	r3, r3, #16
 8006172:	2b10      	cmp	r3, #16
 8006174:	d144      	bne.n	8006200 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006176:	78fa      	ldrb	r2, [r7, #3]
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	1a9b      	subs	r3, r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	3344      	adds	r3, #68	@ 0x44
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800618a:	78fa      	ldrb	r2, [r7, #3]
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	334d      	adds	r3, #77	@ 0x4d
 800619a:	2204      	movs	r2, #4
 800619c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800619e:	78fa      	ldrb	r2, [r7, #3]
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	440b      	add	r3, r1
 80061ac:	3319      	adds	r3, #25
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d114      	bne.n	80061de <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80061b4:	78fa      	ldrb	r2, [r7, #3]
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	4613      	mov	r3, r2
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	1a9b      	subs	r3, r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	3318      	adds	r3, #24
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	1a9b      	subs	r3, r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	3319      	adds	r3, #25
 80061da:	2201      	movs	r2, #1
 80061dc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	78fa      	ldrb	r2, [r7, #3]
 80061e4:	4611      	mov	r1, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f007 fe13 	bl	800de12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f8:	461a      	mov	r2, r3
 80061fa:	2310      	movs	r3, #16
 80061fc:	6093      	str	r3, [r2, #8]
 80061fe:	e28d      	b.n	800671c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	78fa      	ldrb	r2, [r7, #3]
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f007 f86a 	bl	800d2e2 <USB_ReadChInterrupts>
 800620e:	4603      	mov	r3, r0
 8006210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006214:	2b80      	cmp	r3, #128	@ 0x80
 8006216:	d169      	bne.n	80062ec <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	799b      	ldrb	r3, [r3, #6]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d111      	bne.n	8006244 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006220:	78fa      	ldrb	r2, [r7, #3]
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	4613      	mov	r3, r2
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	1a9b      	subs	r3, r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	334d      	adds	r3, #77	@ 0x4d
 8006230:	2207      	movs	r2, #7
 8006232:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	78fa      	ldrb	r2, [r7, #3]
 800623a:	4611      	mov	r1, r2
 800623c:	4618      	mov	r0, r3
 800623e:	f007 fde8 	bl	800de12 <USB_HC_Halt>
 8006242:	e049      	b.n	80062d8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	4613      	mov	r3, r2
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	1a9b      	subs	r3, r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	440b      	add	r3, r1
 8006252:	3344      	adds	r3, #68	@ 0x44
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	1c59      	adds	r1, r3, #1
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4613      	mov	r3, r2
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	1a9b      	subs	r3, r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4403      	add	r3, r0
 8006264:	3344      	adds	r3, #68	@ 0x44
 8006266:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006268:	78fa      	ldrb	r2, [r7, #3]
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	4613      	mov	r3, r2
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	3344      	adds	r3, #68	@ 0x44
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d922      	bls.n	80062c4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800627e:	78fa      	ldrb	r2, [r7, #3]
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	1a9b      	subs	r3, r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	3344      	adds	r3, #68	@ 0x44
 800628e:	2200      	movs	r2, #0
 8006290:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	1a9b      	subs	r3, r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	440b      	add	r3, r1
 80062a0:	334c      	adds	r3, #76	@ 0x4c
 80062a2:	2204      	movs	r2, #4
 80062a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	334c      	adds	r3, #76	@ 0x4c
 80062b6:	781a      	ldrb	r2, [r3, #0]
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f00d f93d 	bl	801353c <HAL_HCD_HC_NotifyURBChange_Callback>
 80062c2:	e009      	b.n	80062d8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80062c4:	78fa      	ldrb	r2, [r7, #3]
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	4613      	mov	r3, r2
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	334c      	adds	r3, #76	@ 0x4c
 80062d4:	2202      	movs	r2, #2
 80062d6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e4:	461a      	mov	r2, r3
 80062e6:	2380      	movs	r3, #128	@ 0x80
 80062e8:	6093      	str	r3, [r2, #8]
 80062ea:	e217      	b.n	800671c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	78fa      	ldrb	r2, [r7, #3]
 80062f2:	4611      	mov	r1, r2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f006 fff4 	bl	800d2e2 <USB_ReadChInterrupts>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006304:	d11b      	bne.n	800633e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006306:	78fa      	ldrb	r2, [r7, #3]
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	334d      	adds	r3, #77	@ 0x4d
 8006316:	2209      	movs	r2, #9
 8006318:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	78fa      	ldrb	r2, [r7, #3]
 8006320:	4611      	mov	r1, r2
 8006322:	4618      	mov	r0, r3
 8006324:	f007 fd75 	bl	800de12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	4413      	add	r3, r2
 8006330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006334:	461a      	mov	r2, r3
 8006336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800633a:	6093      	str	r3, [r2, #8]
 800633c:	e1ee      	b.n	800671c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	78fa      	ldrb	r2, [r7, #3]
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f006 ffcb 	bl	800d2e2 <USB_ReadChInterrupts>
 800634c:	4603      	mov	r3, r0
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b02      	cmp	r3, #2
 8006354:	f040 81df 	bne.w	8006716 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006364:	461a      	mov	r2, r3
 8006366:	2302      	movs	r3, #2
 8006368:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	1a9b      	subs	r3, r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	440b      	add	r3, r1
 8006378:	334d      	adds	r3, #77	@ 0x4d
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	f040 8093 	bne.w	80064a8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006382:	78fa      	ldrb	r2, [r7, #3]
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	1a9b      	subs	r3, r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	440b      	add	r3, r1
 8006390:	334d      	adds	r3, #77	@ 0x4d
 8006392:	2202      	movs	r2, #2
 8006394:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006396:	78fa      	ldrb	r2, [r7, #3]
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	4613      	mov	r3, r2
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	440b      	add	r3, r1
 80063a4:	334c      	adds	r3, #76	@ 0x4c
 80063a6:	2201      	movs	r2, #1
 80063a8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80063aa:	78fa      	ldrb	r2, [r7, #3]
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	4613      	mov	r3, r2
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	1a9b      	subs	r3, r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	440b      	add	r3, r1
 80063b8:	3326      	adds	r3, #38	@ 0x26
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d00b      	beq.n	80063d8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80063c0:	78fa      	ldrb	r2, [r7, #3]
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	4613      	mov	r3, r2
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	1a9b      	subs	r3, r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	3326      	adds	r3, #38	@ 0x26
 80063d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	f040 8190 	bne.w	80066f8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	799b      	ldrb	r3, [r3, #6]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d115      	bne.n	800640c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80063e0:	78fa      	ldrb	r2, [r7, #3]
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	4613      	mov	r3, r2
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	333d      	adds	r3, #61	@ 0x3d
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	78fa      	ldrb	r2, [r7, #3]
 80063f4:	f083 0301 	eor.w	r3, r3, #1
 80063f8:	b2d8      	uxtb	r0, r3
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	4613      	mov	r3, r2
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	333d      	adds	r3, #61	@ 0x3d
 8006408:	4602      	mov	r2, r0
 800640a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	799b      	ldrb	r3, [r3, #6]
 8006410:	2b01      	cmp	r3, #1
 8006412:	f040 8171 	bne.w	80066f8 <HCD_HC_OUT_IRQHandler+0x920>
 8006416:	78fa      	ldrb	r2, [r7, #3]
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	1a9b      	subs	r3, r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	440b      	add	r3, r1
 8006424:	3334      	adds	r3, #52	@ 0x34
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 8165 	beq.w	80066f8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800642e:	78fa      	ldrb	r2, [r7, #3]
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	4613      	mov	r3, r2
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	1a9b      	subs	r3, r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	440b      	add	r3, r1
 800643c:	3334      	adds	r3, #52	@ 0x34
 800643e:	6819      	ldr	r1, [r3, #0]
 8006440:	78fa      	ldrb	r2, [r7, #3]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	4613      	mov	r3, r2
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	1a9b      	subs	r3, r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4403      	add	r3, r0
 800644e:	3328      	adds	r3, #40	@ 0x28
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	440b      	add	r3, r1
 8006454:	1e59      	subs	r1, r3, #1
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	4613      	mov	r3, r2
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	1a9b      	subs	r3, r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4403      	add	r3, r0
 8006464:	3328      	adds	r3, #40	@ 0x28
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	fbb1 f3f3 	udiv	r3, r1, r3
 800646c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 813f 	beq.w	80066f8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800647a:	78fa      	ldrb	r2, [r7, #3]
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	4613      	mov	r3, r2
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	1a9b      	subs	r3, r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	440b      	add	r3, r1
 8006488:	333d      	adds	r3, #61	@ 0x3d
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	78fa      	ldrb	r2, [r7, #3]
 800648e:	f083 0301 	eor.w	r3, r3, #1
 8006492:	b2d8      	uxtb	r0, r3
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	1a9b      	subs	r3, r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	440b      	add	r3, r1
 80064a0:	333d      	adds	r3, #61	@ 0x3d
 80064a2:	4602      	mov	r2, r0
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	e127      	b.n	80066f8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80064a8:	78fa      	ldrb	r2, [r7, #3]
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	4613      	mov	r3, r2
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	334d      	adds	r3, #77	@ 0x4d
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d120      	bne.n	8006500 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80064be:	78fa      	ldrb	r2, [r7, #3]
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	4613      	mov	r3, r2
 80064c4:	011b      	lsls	r3, r3, #4
 80064c6:	1a9b      	subs	r3, r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	440b      	add	r3, r1
 80064cc:	334d      	adds	r3, #77	@ 0x4d
 80064ce:	2202      	movs	r2, #2
 80064d0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80064d2:	78fa      	ldrb	r2, [r7, #3]
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	4613      	mov	r3, r2
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	440b      	add	r3, r1
 80064e0:	331b      	adds	r3, #27
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	f040 8107 	bne.w	80066f8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80064ea:	78fa      	ldrb	r2, [r7, #3]
 80064ec:	6879      	ldr	r1, [r7, #4]
 80064ee:	4613      	mov	r3, r2
 80064f0:	011b      	lsls	r3, r3, #4
 80064f2:	1a9b      	subs	r3, r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	440b      	add	r3, r1
 80064f8:	334c      	adds	r3, #76	@ 0x4c
 80064fa:	2202      	movs	r2, #2
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	e0fb      	b.n	80066f8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006500:	78fa      	ldrb	r2, [r7, #3]
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	4613      	mov	r3, r2
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	334d      	adds	r3, #77	@ 0x4d
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b04      	cmp	r3, #4
 8006514:	d13a      	bne.n	800658c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006516:	78fa      	ldrb	r2, [r7, #3]
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	334d      	adds	r3, #77	@ 0x4d
 8006526:	2202      	movs	r2, #2
 8006528:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800652a:	78fa      	ldrb	r2, [r7, #3]
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	4613      	mov	r3, r2
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	1a9b      	subs	r3, r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	440b      	add	r3, r1
 8006538:	334c      	adds	r3, #76	@ 0x4c
 800653a:	2202      	movs	r2, #2
 800653c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800653e:	78fa      	ldrb	r2, [r7, #3]
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	1a9b      	subs	r3, r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	331b      	adds	r3, #27
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b01      	cmp	r3, #1
 8006552:	f040 80d1 	bne.w	80066f8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006556:	78fa      	ldrb	r2, [r7, #3]
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	4613      	mov	r3, r2
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	1a9b      	subs	r3, r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	440b      	add	r3, r1
 8006564:	331b      	adds	r3, #27
 8006566:	2200      	movs	r2, #0
 8006568:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	4413      	add	r3, r2
 8006572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	78fa      	ldrb	r2, [r7, #3]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	440a      	add	r2, r1
 8006580:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006588:	6053      	str	r3, [r2, #4]
 800658a:	e0b5      	b.n	80066f8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800658c:	78fa      	ldrb	r2, [r7, #3]
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4613      	mov	r3, r2
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	334d      	adds	r3, #77	@ 0x4d
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b05      	cmp	r3, #5
 80065a0:	d114      	bne.n	80065cc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80065a2:	78fa      	ldrb	r2, [r7, #3]
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	4613      	mov	r3, r2
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	1a9b      	subs	r3, r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	334d      	adds	r3, #77	@ 0x4d
 80065b2:	2202      	movs	r2, #2
 80065b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80065b6:	78fa      	ldrb	r2, [r7, #3]
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	1a9b      	subs	r3, r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	334c      	adds	r3, #76	@ 0x4c
 80065c6:	2202      	movs	r2, #2
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	e095      	b.n	80066f8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80065cc:	78fa      	ldrb	r2, [r7, #3]
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	4613      	mov	r3, r2
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	440b      	add	r3, r1
 80065da:	334d      	adds	r3, #77	@ 0x4d
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b06      	cmp	r3, #6
 80065e0:	d114      	bne.n	800660c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80065e2:	78fa      	ldrb	r2, [r7, #3]
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	4613      	mov	r3, r2
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	1a9b      	subs	r3, r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	440b      	add	r3, r1
 80065f0:	334d      	adds	r3, #77	@ 0x4d
 80065f2:	2202      	movs	r2, #2
 80065f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80065f6:	78fa      	ldrb	r2, [r7, #3]
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	4613      	mov	r3, r2
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	1a9b      	subs	r3, r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	440b      	add	r3, r1
 8006604:	334c      	adds	r3, #76	@ 0x4c
 8006606:	2205      	movs	r2, #5
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	e075      	b.n	80066f8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800660c:	78fa      	ldrb	r2, [r7, #3]
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	4613      	mov	r3, r2
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	334d      	adds	r3, #77	@ 0x4d
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b07      	cmp	r3, #7
 8006620:	d00a      	beq.n	8006638 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006622:	78fa      	ldrb	r2, [r7, #3]
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	334d      	adds	r3, #77	@ 0x4d
 8006632:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006634:	2b09      	cmp	r3, #9
 8006636:	d170      	bne.n	800671a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006638:	78fa      	ldrb	r2, [r7, #3]
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	4613      	mov	r3, r2
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	440b      	add	r3, r1
 8006646:	334d      	adds	r3, #77	@ 0x4d
 8006648:	2202      	movs	r2, #2
 800664a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800664c:	78fa      	ldrb	r2, [r7, #3]
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	4613      	mov	r3, r2
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	3344      	adds	r3, #68	@ 0x44
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	1c59      	adds	r1, r3, #1
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	1a9b      	subs	r3, r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4403      	add	r3, r0
 800666c:	3344      	adds	r3, #68	@ 0x44
 800666e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006670:	78fa      	ldrb	r2, [r7, #3]
 8006672:	6879      	ldr	r1, [r7, #4]
 8006674:	4613      	mov	r3, r2
 8006676:	011b      	lsls	r3, r3, #4
 8006678:	1a9b      	subs	r3, r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	440b      	add	r3, r1
 800667e:	3344      	adds	r3, #68	@ 0x44
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b02      	cmp	r3, #2
 8006684:	d914      	bls.n	80066b0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006686:	78fa      	ldrb	r2, [r7, #3]
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	1a9b      	subs	r3, r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	440b      	add	r3, r1
 8006694:	3344      	adds	r3, #68	@ 0x44
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800669a:	78fa      	ldrb	r2, [r7, #3]
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	334c      	adds	r3, #76	@ 0x4c
 80066aa:	2204      	movs	r2, #4
 80066ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80066ae:	e022      	b.n	80066f6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80066b0:	78fa      	ldrb	r2, [r7, #3]
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	4613      	mov	r3, r2
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	334c      	adds	r3, #76	@ 0x4c
 80066c0:	2202      	movs	r2, #2
 80066c2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066da:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066e2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80066e4:	78fb      	ldrb	r3, [r7, #3]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f0:	461a      	mov	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80066f6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80066f8:	78fa      	ldrb	r2, [r7, #3]
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	4613      	mov	r3, r2
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	1a9b      	subs	r3, r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	334c      	adds	r3, #76	@ 0x4c
 8006708:	781a      	ldrb	r2, [r3, #0]
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f00c ff14 	bl	801353c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006714:	e002      	b.n	800671c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006716:	bf00      	nop
 8006718:	e000      	b.n	800671c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800671a:	bf00      	nop
  }
}
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b08a      	sub	sp, #40	@ 0x28
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f003 030f 	and.w	r3, r3, #15
 8006742:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	0c5b      	lsrs	r3, r3, #17
 8006748:	f003 030f 	and.w	r3, r3, #15
 800674c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	091b      	lsrs	r3, r3, #4
 8006752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006756:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d004      	beq.n	8006768 <HCD_RXQLVL_IRQHandler+0x46>
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b05      	cmp	r3, #5
 8006762:	f000 80b6 	beq.w	80068d2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006766:	e0b7      	b.n	80068d8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80b3 	beq.w	80068d6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	4613      	mov	r3, r2
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	1a9b      	subs	r3, r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	332c      	adds	r3, #44	@ 0x2c
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 80a7 	beq.w	80068d6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	4613      	mov	r3, r2
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	3338      	adds	r3, #56	@ 0x38
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	18d1      	adds	r1, r2, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	4613      	mov	r3, r2
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	1a9b      	subs	r3, r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4403      	add	r3, r0
 80067ac:	3334      	adds	r3, #52	@ 0x34
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4299      	cmp	r1, r3
 80067b2:	f200 8083 	bhi.w	80068bc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	4613      	mov	r3, r2
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	440b      	add	r3, r1
 80067c8:	332c      	adds	r3, #44	@ 0x2c
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	b292      	uxth	r2, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	f006 fd1b 	bl	800d20c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	4613      	mov	r3, r2
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	332c      	adds	r3, #44	@ 0x2c
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	18d1      	adds	r1, r2, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	4613      	mov	r3, r2
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4403      	add	r3, r0
 80067fa:	332c      	adds	r3, #44	@ 0x2c
 80067fc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	4613      	mov	r3, r2
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	440b      	add	r3, r1
 800680c:	3338      	adds	r3, #56	@ 0x38
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	18d1      	adds	r1, r2, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	4613      	mov	r3, r2
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	1a9b      	subs	r3, r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4403      	add	r3, r0
 8006822:	3338      	adds	r3, #56	@ 0x38
 8006824:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	4413      	add	r3, r2
 800682e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	0cdb      	lsrs	r3, r3, #19
 8006836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800683a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	4613      	mov	r3, r2
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	1a9b      	subs	r3, r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	3328      	adds	r3, #40	@ 0x28
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4293      	cmp	r3, r2
 8006854:	d13f      	bne.n	80068d6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d03c      	beq.n	80068d6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	4413      	add	r3, r2
 8006864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006872:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800687a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	4413      	add	r3, r2
 8006884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006888:	461a      	mov	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	4613      	mov	r3, r2
 8006894:	011b      	lsls	r3, r3, #4
 8006896:	1a9b      	subs	r3, r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	333c      	adds	r3, #60	@ 0x3c
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	f083 0301 	eor.w	r3, r3, #1
 80068a4:	b2d8      	uxtb	r0, r3
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	4613      	mov	r3, r2
 80068ac:	011b      	lsls	r3, r3, #4
 80068ae:	1a9b      	subs	r3, r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	333c      	adds	r3, #60	@ 0x3c
 80068b6:	4602      	mov	r2, r0
 80068b8:	701a      	strb	r2, [r3, #0]
      break;
 80068ba:	e00c      	b.n	80068d6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	4613      	mov	r3, r2
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	334c      	adds	r3, #76	@ 0x4c
 80068cc:	2204      	movs	r2, #4
 80068ce:	701a      	strb	r2, [r3, #0]
      break;
 80068d0:	e001      	b.n	80068d6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80068d2:	bf00      	nop
 80068d4:	e000      	b.n	80068d8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80068d6:	bf00      	nop
  }
}
 80068d8:	bf00      	nop
 80068da:	3728      	adds	r7, #40	@ 0x28
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800690c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b02      	cmp	r3, #2
 8006916:	d10b      	bne.n	8006930 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b01      	cmp	r3, #1
 8006920:	d102      	bne.n	8006928 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f00c fdee 	bl	8013504 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f043 0302 	orr.w	r3, r3, #2
 800692e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b08      	cmp	r3, #8
 8006938:	d132      	bne.n	80069a0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f043 0308 	orr.w	r3, r3, #8
 8006940:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b04      	cmp	r3, #4
 800694a:	d126      	bne.n	800699a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	7a5b      	ldrb	r3, [r3, #9]
 8006950:	2b02      	cmp	r3, #2
 8006952:	d113      	bne.n	800697c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800695a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800695e:	d106      	bne.n	800696e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2102      	movs	r1, #2
 8006966:	4618      	mov	r0, r3
 8006968:	f006 fdd4 	bl	800d514 <USB_InitFSLSPClkSel>
 800696c:	e011      	b.n	8006992 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2101      	movs	r1, #1
 8006974:	4618      	mov	r0, r3
 8006976:	f006 fdcd 	bl	800d514 <USB_InitFSLSPClkSel>
 800697a:	e00a      	b.n	8006992 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	79db      	ldrb	r3, [r3, #7]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d106      	bne.n	8006992 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800698a:	461a      	mov	r2, r3
 800698c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006990:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f00c fde4 	bl	8013560 <HAL_HCD_PortEnabled_Callback>
 8006998:	e002      	b.n	80069a0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f00c fdee 	bl	801357c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d103      	bne.n	80069b2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f043 0320 	orr.w	r3, r3, #32
 80069b0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80069b8:	461a      	mov	r2, r3
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6013      	str	r3, [r2, #0]
}
 80069be:	bf00      	nop
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e08b      	b.n	8006af2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d106      	bne.n	80069f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7fb fa3e 	bl	8001e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2224      	movs	r2, #36	@ 0x24
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0201 	bic.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d107      	bne.n	8006a42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a3e:	609a      	str	r2, [r3, #8]
 8006a40:	e006      	b.n	8006a50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689a      	ldr	r2, [r3, #8]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006a4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d108      	bne.n	8006a6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a66:	605a      	str	r2, [r3, #4]
 8006a68:	e007      	b.n	8006a7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6859      	ldr	r1, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	4b1d      	ldr	r3, [pc, #116]	@ (8006afc <HAL_I2C_Init+0x134>)
 8006a86:	430b      	orrs	r3, r1
 8006a88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691a      	ldr	r2, [r3, #16]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69d9      	ldr	r1, [r3, #28]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	02008000 	.word	0x02008000

08006b00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d138      	bne.n	8006b88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e032      	b.n	8006b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2224      	movs	r2, #36	@ 0x24
 8006b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0201 	bic.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6819      	ldr	r1, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0201 	orr.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	e000      	b.n	8006b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b88:	2302      	movs	r3, #2
  }
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d139      	bne.n	8006c20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e033      	b.n	8006c22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2224      	movs	r2, #36	@ 0x24
 8006bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0201 	bic.w	r2, r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006be8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e000      	b.n	8006c22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c20:	2302      	movs	r3, #2
  }
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
	...

08006c30 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e0bf      	b.n	8006dc2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7fb f9b2 	bl	8001fc0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006c72:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6999      	ldr	r1, [r3, #24]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c88:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6899      	ldr	r1, [r3, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8006dcc <HAL_LTDC_Init+0x19c>)
 8006ca4:	400b      	ands	r3, r1
 8006ca6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	041b      	lsls	r3, r3, #16
 8006cae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6899      	ldr	r1, [r3, #8]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68d9      	ldr	r1, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	4b3e      	ldr	r3, [pc, #248]	@ (8006dcc <HAL_LTDC_Init+0x19c>)
 8006cd2:	400b      	ands	r3, r1
 8006cd4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	041b      	lsls	r3, r3, #16
 8006cdc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68d9      	ldr	r1, [r3, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a1a      	ldr	r2, [r3, #32]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6919      	ldr	r1, [r3, #16]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4b33      	ldr	r3, [pc, #204]	@ (8006dcc <HAL_LTDC_Init+0x19c>)
 8006d00:	400b      	ands	r3, r1
 8006d02:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d08:	041b      	lsls	r3, r3, #16
 8006d0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6919      	ldr	r1, [r3, #16]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6959      	ldr	r1, [r3, #20]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	4b27      	ldr	r3, [pc, #156]	@ (8006dcc <HAL_LTDC_Init+0x19c>)
 8006d2e:	400b      	ands	r3, r1
 8006d30:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d36:	041b      	lsls	r3, r3, #16
 8006d38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6959      	ldr	r1, [r3, #20]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	431a      	orrs	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d56:	021b      	lsls	r3, r3, #8
 8006d58:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006d60:	041b      	lsls	r3, r3, #16
 8006d62:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0206 	orr.w	r2, r2, #6
 8006d9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699a      	ldr	r2, [r3, #24]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0201 	orr.w	r2, r2, #1
 8006dae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	f000f800 	.word	0xf000f800

08006dd0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dde:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d023      	beq.n	8006e3a <HAL_LTDC_IRQHandler+0x6a>
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01e      	beq.n	8006e3a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0204 	bic.w	r2, r2, #4
 8006e0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2204      	movs	r2, #4
 8006e12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e1a:	f043 0201 	orr.w	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2204      	movs	r2, #4
 8006e28:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f86f 	bl	8006f18 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d023      	beq.n	8006e8c <HAL_LTDC_IRQHandler+0xbc>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01e      	beq.n	8006e8c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0202 	bic.w	r2, r2, #2
 8006e5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2202      	movs	r2, #2
 8006e64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e6c:	f043 0202 	orr.w	r2, r3, #2
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2204      	movs	r2, #4
 8006e7a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f846 	bl	8006f18 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d01b      	beq.n	8006ece <HAL_LTDC_IRQHandler+0xfe>
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d016      	beq.n	8006ece <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0201 	bic.w	r2, r2, #1
 8006eae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f82f 	bl	8006f2c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f003 0308 	and.w	r3, r3, #8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01b      	beq.n	8006f10 <HAL_LTDC_IRQHandler+0x140>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d016      	beq.n	8006f10 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0208 	bic.w	r2, r2, #8
 8006ef0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f818 	bl	8006f40 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006f10:	bf00      	nop
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f54:	b5b0      	push	{r4, r5, r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d101      	bne.n	8006f6e <HAL_LTDC_ConfigLayer+0x1a>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e02c      	b.n	8006fc8 <HAL_LTDC_ConfigLayer+0x74>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2134      	movs	r1, #52	@ 0x34
 8006f84:	fb01 f303 	mul.w	r3, r1, r3
 8006f88:	4413      	add	r3, r2
 8006f8a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	4614      	mov	r4, r2
 8006f92:	461d      	mov	r5, r3
 8006f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	68b9      	ldr	r1, [r7, #8]
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 f811 	bl	8006fd0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bdb0      	pop	{r4, r5, r7, pc}

08006fd0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b089      	sub	sp, #36	@ 0x24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	0c1b      	lsrs	r3, r3, #16
 8006fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fec:	4413      	add	r3, r2
 8006fee:	041b      	lsls	r3, r3, #16
 8006ff0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	01db      	lsls	r3, r3, #7
 8006ffc:	4413      	add	r3, r2
 8006ffe:	3384      	adds	r3, #132	@ 0x84
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	6812      	ldr	r2, [r2, #0]
 8007006:	4611      	mov	r1, r2
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	01d2      	lsls	r2, r2, #7
 800700c:	440a      	add	r2, r1
 800700e:	3284      	adds	r2, #132	@ 0x84
 8007010:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007014:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	0c1b      	lsrs	r3, r3, #16
 8007022:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007026:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007028:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4619      	mov	r1, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	01db      	lsls	r3, r3, #7
 8007034:	440b      	add	r3, r1
 8007036:	3384      	adds	r3, #132	@ 0x84
 8007038:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800703e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800704e:	4413      	add	r3, r2
 8007050:	041b      	lsls	r3, r3, #16
 8007052:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	01db      	lsls	r3, r3, #7
 800705e:	4413      	add	r3, r2
 8007060:	3384      	adds	r3, #132	@ 0x84
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	6812      	ldr	r2, [r2, #0]
 8007068:	4611      	mov	r1, r2
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	01d2      	lsls	r2, r2, #7
 800706e:	440a      	add	r2, r1
 8007070:	3284      	adds	r2, #132	@ 0x84
 8007072:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007076:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007086:	4413      	add	r3, r2
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4619      	mov	r1, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	01db      	lsls	r3, r3, #7
 8007094:	440b      	add	r3, r1
 8007096:	3384      	adds	r3, #132	@ 0x84
 8007098:	4619      	mov	r1, r3
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	4313      	orrs	r3, r2
 800709e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	461a      	mov	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	01db      	lsls	r3, r3, #7
 80070aa:	4413      	add	r3, r2
 80070ac:	3384      	adds	r3, #132	@ 0x84
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	6812      	ldr	r2, [r2, #0]
 80070b4:	4611      	mov	r1, r2
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	01d2      	lsls	r2, r2, #7
 80070ba:	440a      	add	r2, r1
 80070bc:	3284      	adds	r2, #132	@ 0x84
 80070be:	f023 0307 	bic.w	r3, r3, #7
 80070c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	461a      	mov	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	01db      	lsls	r3, r3, #7
 80070ce:	4413      	add	r3, r2
 80070d0:	3384      	adds	r3, #132	@ 0x84
 80070d2:	461a      	mov	r2, r3
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80070ea:	041b      	lsls	r3, r3, #16
 80070ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	061b      	lsls	r3, r3, #24
 80070f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	01db      	lsls	r3, r3, #7
 8007100:	4413      	add	r3, r2
 8007102:	3384      	adds	r3, #132	@ 0x84
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	01db      	lsls	r3, r3, #7
 8007110:	4413      	add	r3, r2
 8007112:	3384      	adds	r3, #132	@ 0x84
 8007114:	461a      	mov	r2, r3
 8007116:	2300      	movs	r3, #0
 8007118:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007120:	461a      	mov	r2, r3
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	431a      	orrs	r2, r3
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	431a      	orrs	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4619      	mov	r1, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	01db      	lsls	r3, r3, #7
 8007134:	440b      	add	r3, r1
 8007136:	3384      	adds	r3, #132	@ 0x84
 8007138:	4619      	mov	r1, r3
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	461a      	mov	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	01db      	lsls	r3, r3, #7
 800714a:	4413      	add	r3, r2
 800714c:	3384      	adds	r3, #132	@ 0x84
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	6812      	ldr	r2, [r2, #0]
 8007154:	4611      	mov	r1, r2
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	01d2      	lsls	r2, r2, #7
 800715a:	440a      	add	r2, r1
 800715c:	3284      	adds	r2, #132	@ 0x84
 800715e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007162:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	01db      	lsls	r3, r3, #7
 800716e:	4413      	add	r3, r2
 8007170:	3384      	adds	r3, #132	@ 0x84
 8007172:	461a      	mov	r2, r3
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	01db      	lsls	r3, r3, #7
 8007184:	4413      	add	r3, r2
 8007186:	3384      	adds	r3, #132	@ 0x84
 8007188:	69da      	ldr	r2, [r3, #28]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4619      	mov	r1, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	01db      	lsls	r3, r3, #7
 8007194:	440b      	add	r3, r1
 8007196:	3384      	adds	r3, #132	@ 0x84
 8007198:	4619      	mov	r1, r3
 800719a:	4b58      	ldr	r3, [pc, #352]	@ (80072fc <LTDC_SetConfig+0x32c>)
 800719c:	4013      	ands	r3, r2
 800719e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	69da      	ldr	r2, [r3, #28]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	68f9      	ldr	r1, [r7, #12]
 80071aa:	6809      	ldr	r1, [r1, #0]
 80071ac:	4608      	mov	r0, r1
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	01c9      	lsls	r1, r1, #7
 80071b2:	4401      	add	r1, r0
 80071b4:	3184      	adds	r1, #132	@ 0x84
 80071b6:	4313      	orrs	r3, r2
 80071b8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	01db      	lsls	r3, r3, #7
 80071c4:	4413      	add	r3, r2
 80071c6:	3384      	adds	r3, #132	@ 0x84
 80071c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	01db      	lsls	r3, r3, #7
 80071d4:	4413      	add	r3, r2
 80071d6:	3384      	adds	r3, #132	@ 0x84
 80071d8:	461a      	mov	r2, r3
 80071da:	2300      	movs	r3, #0
 80071dc:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	01db      	lsls	r3, r3, #7
 80071e8:	4413      	add	r3, r2
 80071ea:	3384      	adds	r3, #132	@ 0x84
 80071ec:	461a      	mov	r2, r3
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d102      	bne.n	8007202 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80071fc:	2304      	movs	r3, #4
 80071fe:	61fb      	str	r3, [r7, #28]
 8007200:	e01b      	b.n	800723a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d102      	bne.n	8007210 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800720a:	2303      	movs	r3, #3
 800720c:	61fb      	str	r3, [r7, #28]
 800720e:	e014      	b.n	800723a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	2b04      	cmp	r3, #4
 8007216:	d00b      	beq.n	8007230 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800721c:	2b02      	cmp	r3, #2
 800721e:	d007      	beq.n	8007230 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007224:	2b03      	cmp	r3, #3
 8007226:	d003      	beq.n	8007230 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800722c:	2b07      	cmp	r3, #7
 800722e:	d102      	bne.n	8007236 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007230:	2302      	movs	r3, #2
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	e001      	b.n	800723a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007236:	2301      	movs	r3, #1
 8007238:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	01db      	lsls	r3, r3, #7
 8007244:	4413      	add	r3, r2
 8007246:	3384      	adds	r3, #132	@ 0x84
 8007248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	6812      	ldr	r2, [r2, #0]
 800724e:	4611      	mov	r1, r2
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	01d2      	lsls	r2, r2, #7
 8007254:	440a      	add	r2, r1
 8007256:	3284      	adds	r2, #132	@ 0x84
 8007258:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800725c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	fb02 f303 	mul.w	r3, r2, r3
 8007268:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6859      	ldr	r1, [r3, #4]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	1acb      	subs	r3, r1, r3
 8007274:	69f9      	ldr	r1, [r7, #28]
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800727c:	68f9      	ldr	r1, [r7, #12]
 800727e:	6809      	ldr	r1, [r1, #0]
 8007280:	4608      	mov	r0, r1
 8007282:	6879      	ldr	r1, [r7, #4]
 8007284:	01c9      	lsls	r1, r1, #7
 8007286:	4401      	add	r1, r0
 8007288:	3184      	adds	r1, #132	@ 0x84
 800728a:	4313      	orrs	r3, r2
 800728c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	01db      	lsls	r3, r3, #7
 8007298:	4413      	add	r3, r2
 800729a:	3384      	adds	r3, #132	@ 0x84
 800729c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4619      	mov	r1, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	01db      	lsls	r3, r3, #7
 80072a8:	440b      	add	r3, r1
 80072aa:	3384      	adds	r3, #132	@ 0x84
 80072ac:	4619      	mov	r1, r3
 80072ae:	4b14      	ldr	r3, [pc, #80]	@ (8007300 <LTDC_SetConfig+0x330>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	01db      	lsls	r3, r3, #7
 80072be:	4413      	add	r3, r2
 80072c0:	3384      	adds	r3, #132	@ 0x84
 80072c2:	461a      	mov	r2, r3
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	01db      	lsls	r3, r3, #7
 80072d4:	4413      	add	r3, r2
 80072d6:	3384      	adds	r3, #132	@ 0x84
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	4611      	mov	r1, r2
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	01d2      	lsls	r2, r2, #7
 80072e4:	440a      	add	r2, r1
 80072e6:	3284      	adds	r2, #132	@ 0x84
 80072e8:	f043 0301 	orr.w	r3, r3, #1
 80072ec:	6013      	str	r3, [r2, #0]
}
 80072ee:	bf00      	nop
 80072f0:	3724      	adds	r7, #36	@ 0x24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	fffff8f8 	.word	0xfffff8f8
 8007300:	fffff800 	.word	0xfffff800

08007304 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007304:	b480      	push	{r7}
 8007306:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007308:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a04      	ldr	r2, [pc, #16]	@ (8007320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800730e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007312:	6013      	str	r3, [r2, #0]
}
 8007314:	bf00      	nop
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40007000 	.word	0x40007000

08007324 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800732e:	4b23      	ldr	r3, [pc, #140]	@ (80073bc <HAL_PWREx_EnableOverDrive+0x98>)
 8007330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007332:	4a22      	ldr	r2, [pc, #136]	@ (80073bc <HAL_PWREx_EnableOverDrive+0x98>)
 8007334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007338:	6413      	str	r3, [r2, #64]	@ 0x40
 800733a:	4b20      	ldr	r3, [pc, #128]	@ (80073bc <HAL_PWREx_EnableOverDrive+0x98>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007342:	603b      	str	r3, [r7, #0]
 8007344:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007346:	4b1e      	ldr	r3, [pc, #120]	@ (80073c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a1d      	ldr	r2, [pc, #116]	@ (80073c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800734c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007350:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007352:	f7fb fd5b 	bl	8002e0c <HAL_GetTick>
 8007356:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007358:	e009      	b.n	800736e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800735a:	f7fb fd57 	bl	8002e0c <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007368:	d901      	bls.n	800736e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e022      	b.n	80073b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800736e:	4b14      	ldr	r3, [pc, #80]	@ (80073c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800737a:	d1ee      	bne.n	800735a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800737c:	4b10      	ldr	r3, [pc, #64]	@ (80073c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a0f      	ldr	r2, [pc, #60]	@ (80073c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007386:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007388:	f7fb fd40 	bl	8002e0c <HAL_GetTick>
 800738c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800738e:	e009      	b.n	80073a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007390:	f7fb fd3c 	bl	8002e0c <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800739e:	d901      	bls.n	80073a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e007      	b.n	80073b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073a4:	4b06      	ldr	r3, [pc, #24]	@ (80073c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073b0:	d1ee      	bne.n	8007390 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	40023800 	.word	0x40023800
 80073c0:	40007000 	.word	0x40007000

080073c4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af02      	add	r7, sp, #8
 80073ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80073cc:	f7fb fd1e 	bl	8002e0c <HAL_GetTick>
 80073d0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e067      	b.n	80074ac <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10b      	bne.n	8007400 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7fa fead 	bl	8002150 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80073f6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f85e 	bl	80074bc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	3b01      	subs	r3, #1
 8007410:	021a      	lsls	r2, r3, #8
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	2120      	movs	r1, #32
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f856 	bl	80074d8 <QSPI_WaitFlagStateUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007430:	7afb      	ldrb	r3, [r7, #11]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d135      	bne.n	80074a2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	4b1d      	ldr	r3, [pc, #116]	@ (80074b4 <HAL_QSPI_Init+0xf0>)
 800743e:	4013      	ands	r3, r2
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6852      	ldr	r2, [r2, #4]
 8007444:	0611      	lsls	r1, r2, #24
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	68d2      	ldr	r2, [r2, #12]
 800744a:	4311      	orrs	r1, r2
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	69d2      	ldr	r2, [r2, #28]
 8007450:	4311      	orrs	r1, r2
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6a12      	ldr	r2, [r2, #32]
 8007456:	4311      	orrs	r1, r2
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6812      	ldr	r2, [r2, #0]
 800745c:	430b      	orrs	r3, r1
 800745e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	4b14      	ldr	r3, [pc, #80]	@ (80074b8 <HAL_QSPI_Init+0xf4>)
 8007468:	4013      	ands	r3, r2
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	6912      	ldr	r2, [r2, #16]
 800746e:	0411      	lsls	r1, r2, #16
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6952      	ldr	r2, [r2, #20]
 8007474:	4311      	orrs	r1, r2
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6992      	ldr	r2, [r2, #24]
 800747a:	4311      	orrs	r1, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6812      	ldr	r2, [r2, #0]
 8007480:	430b      	orrs	r3, r1
 8007482:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0201 	orr.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80074aa:	7afb      	ldrb	r3, [r7, #11]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	00ffff2f 	.word	0x00ffff2f
 80074b8:	ffe0f8fe 	.word	0xffe0f8fe

080074bc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	603b      	str	r3, [r7, #0]
 80074e4:	4613      	mov	r3, r2
 80074e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80074e8:	e01a      	b.n	8007520 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074f0:	d016      	beq.n	8007520 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074f2:	f7fb fc8b 	bl	8002e0c <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d302      	bcc.n	8007508 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10b      	bne.n	8007520 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2204      	movs	r2, #4
 800750c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007514:	f043 0201 	orr.w	r2, r3, #1
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e00e      	b.n	800753e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	4013      	ands	r3, r2
 800752a:	2b00      	cmp	r3, #0
 800752c:	bf14      	ite	ne
 800752e:	2301      	movne	r3, #1
 8007530:	2300      	moveq	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	461a      	mov	r2, r3
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	429a      	cmp	r2, r3
 800753a:	d1d6      	bne.n	80074ea <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
	...

08007548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007550:	2300      	movs	r3, #0
 8007552:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e291      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 8087 	beq.w	800767a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800756c:	4b96      	ldr	r3, [pc, #600]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f003 030c 	and.w	r3, r3, #12
 8007574:	2b04      	cmp	r3, #4
 8007576:	d00c      	beq.n	8007592 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007578:	4b93      	ldr	r3, [pc, #588]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f003 030c 	and.w	r3, r3, #12
 8007580:	2b08      	cmp	r3, #8
 8007582:	d112      	bne.n	80075aa <HAL_RCC_OscConfig+0x62>
 8007584:	4b90      	ldr	r3, [pc, #576]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800758c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007590:	d10b      	bne.n	80075aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007592:	4b8d      	ldr	r3, [pc, #564]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d06c      	beq.n	8007678 <HAL_RCC_OscConfig+0x130>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d168      	bne.n	8007678 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e26b      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075b2:	d106      	bne.n	80075c2 <HAL_RCC_OscConfig+0x7a>
 80075b4:	4b84      	ldr	r3, [pc, #528]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a83      	ldr	r2, [pc, #524]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80075ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	e02e      	b.n	8007620 <HAL_RCC_OscConfig+0xd8>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10c      	bne.n	80075e4 <HAL_RCC_OscConfig+0x9c>
 80075ca:	4b7f      	ldr	r3, [pc, #508]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a7e      	ldr	r2, [pc, #504]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80075d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	4b7c      	ldr	r3, [pc, #496]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a7b      	ldr	r2, [pc, #492]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80075dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	e01d      	b.n	8007620 <HAL_RCC_OscConfig+0xd8>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075ec:	d10c      	bne.n	8007608 <HAL_RCC_OscConfig+0xc0>
 80075ee:	4b76      	ldr	r3, [pc, #472]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a75      	ldr	r2, [pc, #468]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80075f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	4b73      	ldr	r3, [pc, #460]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a72      	ldr	r2, [pc, #456]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	e00b      	b.n	8007620 <HAL_RCC_OscConfig+0xd8>
 8007608:	4b6f      	ldr	r3, [pc, #444]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a6e      	ldr	r2, [pc, #440]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 800760e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	4b6c      	ldr	r3, [pc, #432]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a6b      	ldr	r2, [pc, #428]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 800761a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800761e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d013      	beq.n	8007650 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007628:	f7fb fbf0 	bl	8002e0c <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007630:	f7fb fbec 	bl	8002e0c <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b64      	cmp	r3, #100	@ 0x64
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e21f      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007642:	4b61      	ldr	r3, [pc, #388]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f0      	beq.n	8007630 <HAL_RCC_OscConfig+0xe8>
 800764e:	e014      	b.n	800767a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007650:	f7fb fbdc 	bl	8002e0c <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007658:	f7fb fbd8 	bl	8002e0c <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b64      	cmp	r3, #100	@ 0x64
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e20b      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800766a:	4b57      	ldr	r3, [pc, #348]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1f0      	bne.n	8007658 <HAL_RCC_OscConfig+0x110>
 8007676:	e000      	b.n	800767a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d069      	beq.n	800775a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007686:	4b50      	ldr	r3, [pc, #320]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 030c 	and.w	r3, r3, #12
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007692:	4b4d      	ldr	r3, [pc, #308]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 030c 	and.w	r3, r3, #12
 800769a:	2b08      	cmp	r3, #8
 800769c:	d11c      	bne.n	80076d8 <HAL_RCC_OscConfig+0x190>
 800769e:	4b4a      	ldr	r3, [pc, #296]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d116      	bne.n	80076d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076aa:	4b47      	ldr	r3, [pc, #284]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d005      	beq.n	80076c2 <HAL_RCC_OscConfig+0x17a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d001      	beq.n	80076c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e1df      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076c2:	4b41      	ldr	r3, [pc, #260]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	493d      	ldr	r1, [pc, #244]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076d6:	e040      	b.n	800775a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d023      	beq.n	8007728 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076e0:	4b39      	ldr	r3, [pc, #228]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a38      	ldr	r2, [pc, #224]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80076e6:	f043 0301 	orr.w	r3, r3, #1
 80076ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ec:	f7fb fb8e 	bl	8002e0c <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076f2:	e008      	b.n	8007706 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076f4:	f7fb fb8a 	bl	8002e0c <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e1bd      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007706:	4b30      	ldr	r3, [pc, #192]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0f0      	beq.n	80076f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007712:	4b2d      	ldr	r3, [pc, #180]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	4929      	ldr	r1, [pc, #164]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007722:	4313      	orrs	r3, r2
 8007724:	600b      	str	r3, [r1, #0]
 8007726:	e018      	b.n	800775a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007728:	4b27      	ldr	r3, [pc, #156]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a26      	ldr	r2, [pc, #152]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 800772e:	f023 0301 	bic.w	r3, r3, #1
 8007732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007734:	f7fb fb6a 	bl	8002e0c <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800773c:	f7fb fb66 	bl	8002e0c <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e199      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800774e:	4b1e      	ldr	r3, [pc, #120]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1f0      	bne.n	800773c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0308 	and.w	r3, r3, #8
 8007762:	2b00      	cmp	r3, #0
 8007764:	d038      	beq.n	80077d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d019      	beq.n	80077a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800776e:	4b16      	ldr	r3, [pc, #88]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007772:	4a15      	ldr	r2, [pc, #84]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007774:	f043 0301 	orr.w	r3, r3, #1
 8007778:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800777a:	f7fb fb47 	bl	8002e0c <HAL_GetTick>
 800777e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007780:	e008      	b.n	8007794 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007782:	f7fb fb43 	bl	8002e0c <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d901      	bls.n	8007794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e176      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007794:	4b0c      	ldr	r3, [pc, #48]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 8007796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0f0      	beq.n	8007782 <HAL_RCC_OscConfig+0x23a>
 80077a0:	e01a      	b.n	80077d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077a2:	4b09      	ldr	r3, [pc, #36]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80077a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077a6:	4a08      	ldr	r2, [pc, #32]	@ (80077c8 <HAL_RCC_OscConfig+0x280>)
 80077a8:	f023 0301 	bic.w	r3, r3, #1
 80077ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ae:	f7fb fb2d 	bl	8002e0c <HAL_GetTick>
 80077b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b4:	e00a      	b.n	80077cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077b6:	f7fb fb29 	bl	8002e0c <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d903      	bls.n	80077cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e15c      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
 80077c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077cc:	4b91      	ldr	r3, [pc, #580]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80077ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1ee      	bne.n	80077b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 80a4 	beq.w	800792e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077e6:	4b8b      	ldr	r3, [pc, #556]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80077e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10d      	bne.n	800780e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80077f2:	4b88      	ldr	r3, [pc, #544]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80077f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f6:	4a87      	ldr	r2, [pc, #540]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80077f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80077fe:	4b85      	ldr	r3, [pc, #532]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 8007800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007806:	60bb      	str	r3, [r7, #8]
 8007808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800780a:	2301      	movs	r3, #1
 800780c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800780e:	4b82      	ldr	r3, [pc, #520]	@ (8007a18 <HAL_RCC_OscConfig+0x4d0>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007816:	2b00      	cmp	r3, #0
 8007818:	d118      	bne.n	800784c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800781a:	4b7f      	ldr	r3, [pc, #508]	@ (8007a18 <HAL_RCC_OscConfig+0x4d0>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a7e      	ldr	r2, [pc, #504]	@ (8007a18 <HAL_RCC_OscConfig+0x4d0>)
 8007820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007826:	f7fb faf1 	bl	8002e0c <HAL_GetTick>
 800782a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800782c:	e008      	b.n	8007840 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800782e:	f7fb faed 	bl	8002e0c <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	2b64      	cmp	r3, #100	@ 0x64
 800783a:	d901      	bls.n	8007840 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e120      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007840:	4b75      	ldr	r3, [pc, #468]	@ (8007a18 <HAL_RCC_OscConfig+0x4d0>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0f0      	beq.n	800782e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d106      	bne.n	8007862 <HAL_RCC_OscConfig+0x31a>
 8007854:	4b6f      	ldr	r3, [pc, #444]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 8007856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007858:	4a6e      	ldr	r2, [pc, #440]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007860:	e02d      	b.n	80078be <HAL_RCC_OscConfig+0x376>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10c      	bne.n	8007884 <HAL_RCC_OscConfig+0x33c>
 800786a:	4b6a      	ldr	r3, [pc, #424]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 800786c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800786e:	4a69      	ldr	r2, [pc, #420]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	6713      	str	r3, [r2, #112]	@ 0x70
 8007876:	4b67      	ldr	r3, [pc, #412]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 8007878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800787a:	4a66      	ldr	r2, [pc, #408]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 800787c:	f023 0304 	bic.w	r3, r3, #4
 8007880:	6713      	str	r3, [r2, #112]	@ 0x70
 8007882:	e01c      	b.n	80078be <HAL_RCC_OscConfig+0x376>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	2b05      	cmp	r3, #5
 800788a:	d10c      	bne.n	80078a6 <HAL_RCC_OscConfig+0x35e>
 800788c:	4b61      	ldr	r3, [pc, #388]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 800788e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007890:	4a60      	ldr	r2, [pc, #384]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 8007892:	f043 0304 	orr.w	r3, r3, #4
 8007896:	6713      	str	r3, [r2, #112]	@ 0x70
 8007898:	4b5e      	ldr	r3, [pc, #376]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 800789a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800789c:	4a5d      	ldr	r2, [pc, #372]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 800789e:	f043 0301 	orr.w	r3, r3, #1
 80078a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80078a4:	e00b      	b.n	80078be <HAL_RCC_OscConfig+0x376>
 80078a6:	4b5b      	ldr	r3, [pc, #364]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80078a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078aa:	4a5a      	ldr	r2, [pc, #360]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80078ac:	f023 0301 	bic.w	r3, r3, #1
 80078b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80078b2:	4b58      	ldr	r3, [pc, #352]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80078b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b6:	4a57      	ldr	r2, [pc, #348]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80078b8:	f023 0304 	bic.w	r3, r3, #4
 80078bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d015      	beq.n	80078f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c6:	f7fb faa1 	bl	8002e0c <HAL_GetTick>
 80078ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078cc:	e00a      	b.n	80078e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ce:	f7fb fa9d 	bl	8002e0c <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078dc:	4293      	cmp	r3, r2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e0ce      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078e4:	4b4b      	ldr	r3, [pc, #300]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80078e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0ee      	beq.n	80078ce <HAL_RCC_OscConfig+0x386>
 80078f0:	e014      	b.n	800791c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f2:	f7fb fa8b 	bl	8002e0c <HAL_GetTick>
 80078f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078f8:	e00a      	b.n	8007910 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078fa:	f7fb fa87 	bl	8002e0c <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007908:	4293      	cmp	r3, r2
 800790a:	d901      	bls.n	8007910 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e0b8      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007910:	4b40      	ldr	r3, [pc, #256]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 8007912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1ee      	bne.n	80078fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800791c:	7dfb      	ldrb	r3, [r7, #23]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d105      	bne.n	800792e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007922:	4b3c      	ldr	r3, [pc, #240]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 8007924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007926:	4a3b      	ldr	r2, [pc, #236]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 8007928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800792c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 80a4 	beq.w	8007a80 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007938:	4b36      	ldr	r3, [pc, #216]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f003 030c 	and.w	r3, r3, #12
 8007940:	2b08      	cmp	r3, #8
 8007942:	d06b      	beq.n	8007a1c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	2b02      	cmp	r3, #2
 800794a:	d149      	bne.n	80079e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800794c:	4b31      	ldr	r3, [pc, #196]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a30      	ldr	r2, [pc, #192]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 8007952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007958:	f7fb fa58 	bl	8002e0c <HAL_GetTick>
 800795c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800795e:	e008      	b.n	8007972 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007960:	f7fb fa54 	bl	8002e0c <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b02      	cmp	r3, #2
 800796c:	d901      	bls.n	8007972 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e087      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007972:	4b28      	ldr	r3, [pc, #160]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1f0      	bne.n	8007960 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69da      	ldr	r2, [r3, #28]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	431a      	orrs	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800798c:	019b      	lsls	r3, r3, #6
 800798e:	431a      	orrs	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007994:	085b      	lsrs	r3, r3, #1
 8007996:	3b01      	subs	r3, #1
 8007998:	041b      	lsls	r3, r3, #16
 800799a:	431a      	orrs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a0:	061b      	lsls	r3, r3, #24
 80079a2:	4313      	orrs	r3, r2
 80079a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80079a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079ac:	4b19      	ldr	r3, [pc, #100]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a18      	ldr	r2, [pc, #96]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80079b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b8:	f7fb fa28 	bl	8002e0c <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079be:	e008      	b.n	80079d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079c0:	f7fb fa24 	bl	8002e0c <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e057      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079d2:	4b10      	ldr	r3, [pc, #64]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0f0      	beq.n	80079c0 <HAL_RCC_OscConfig+0x478>
 80079de:	e04f      	b.n	8007a80 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a0b      	ldr	r2, [pc, #44]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 80079e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ec:	f7fb fa0e 	bl	8002e0c <HAL_GetTick>
 80079f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079f2:	e008      	b.n	8007a06 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079f4:	f7fb fa0a 	bl	8002e0c <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d901      	bls.n	8007a06 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e03d      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a06:	4b03      	ldr	r3, [pc, #12]	@ (8007a14 <HAL_RCC_OscConfig+0x4cc>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1f0      	bne.n	80079f4 <HAL_RCC_OscConfig+0x4ac>
 8007a12:	e035      	b.n	8007a80 <HAL_RCC_OscConfig+0x538>
 8007a14:	40023800 	.word	0x40023800
 8007a18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8007a8c <HAL_RCC_OscConfig+0x544>)
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d028      	beq.n	8007a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d121      	bne.n	8007a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d11a      	bne.n	8007a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d111      	bne.n	8007a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a62:	085b      	lsrs	r3, r3, #1
 8007a64:	3b01      	subs	r3, #1
 8007a66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d107      	bne.n	8007a7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d001      	beq.n	8007a80 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e000      	b.n	8007a82 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3718      	adds	r7, #24
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	40023800 	.word	0x40023800

08007a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e0d0      	b.n	8007c4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8007c54 <HAL_RCC_ClockConfig+0x1c4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 030f 	and.w	r3, r3, #15
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d910      	bls.n	8007ad8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ab6:	4b67      	ldr	r3, [pc, #412]	@ (8007c54 <HAL_RCC_ClockConfig+0x1c4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f023 020f 	bic.w	r2, r3, #15
 8007abe:	4965      	ldr	r1, [pc, #404]	@ (8007c54 <HAL_RCC_ClockConfig+0x1c4>)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ac6:	4b63      	ldr	r3, [pc, #396]	@ (8007c54 <HAL_RCC_ClockConfig+0x1c4>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 030f 	and.w	r3, r3, #15
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d001      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e0b8      	b.n	8007c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d020      	beq.n	8007b26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0304 	and.w	r3, r3, #4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d005      	beq.n	8007afc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007af0:	4b59      	ldr	r3, [pc, #356]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	4a58      	ldr	r2, [pc, #352]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007af6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007afa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b08:	4b53      	ldr	r3, [pc, #332]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	4a52      	ldr	r2, [pc, #328]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007b0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007b12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b14:	4b50      	ldr	r3, [pc, #320]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	494d      	ldr	r1, [pc, #308]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d040      	beq.n	8007bb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d107      	bne.n	8007b4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b3a:	4b47      	ldr	r3, [pc, #284]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d115      	bne.n	8007b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e07f      	b.n	8007c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d107      	bne.n	8007b62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b52:	4b41      	ldr	r3, [pc, #260]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d109      	bne.n	8007b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e073      	b.n	8007c4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b62:	4b3d      	ldr	r3, [pc, #244]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e06b      	b.n	8007c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b72:	4b39      	ldr	r3, [pc, #228]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f023 0203 	bic.w	r2, r3, #3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	4936      	ldr	r1, [pc, #216]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b84:	f7fb f942 	bl	8002e0c <HAL_GetTick>
 8007b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b8a:	e00a      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b8c:	f7fb f93e 	bl	8002e0c <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e053      	b.n	8007c4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 020c 	and.w	r2, r3, #12
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d1eb      	bne.n	8007b8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bb4:	4b27      	ldr	r3, [pc, #156]	@ (8007c54 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 030f 	and.w	r3, r3, #15
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d210      	bcs.n	8007be4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bc2:	4b24      	ldr	r3, [pc, #144]	@ (8007c54 <HAL_RCC_ClockConfig+0x1c4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f023 020f 	bic.w	r2, r3, #15
 8007bca:	4922      	ldr	r1, [pc, #136]	@ (8007c54 <HAL_RCC_ClockConfig+0x1c4>)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bd2:	4b20      	ldr	r3, [pc, #128]	@ (8007c54 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 030f 	and.w	r3, r3, #15
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d001      	beq.n	8007be4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e032      	b.n	8007c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d008      	beq.n	8007c02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bf0:	4b19      	ldr	r3, [pc, #100]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	4916      	ldr	r1, [pc, #88]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0308 	and.w	r3, r3, #8
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d009      	beq.n	8007c22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c0e:	4b12      	ldr	r3, [pc, #72]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	490e      	ldr	r1, [pc, #56]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c22:	f000 f821 	bl	8007c68 <HAL_RCC_GetSysClockFreq>
 8007c26:	4602      	mov	r2, r0
 8007c28:	4b0b      	ldr	r3, [pc, #44]	@ (8007c58 <HAL_RCC_ClockConfig+0x1c8>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	091b      	lsrs	r3, r3, #4
 8007c2e:	f003 030f 	and.w	r3, r3, #15
 8007c32:	490a      	ldr	r1, [pc, #40]	@ (8007c5c <HAL_RCC_ClockConfig+0x1cc>)
 8007c34:	5ccb      	ldrb	r3, [r1, r3]
 8007c36:	fa22 f303 	lsr.w	r3, r2, r3
 8007c3a:	4a09      	ldr	r2, [pc, #36]	@ (8007c60 <HAL_RCC_ClockConfig+0x1d0>)
 8007c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c3e:	4b09      	ldr	r3, [pc, #36]	@ (8007c64 <HAL_RCC_ClockConfig+0x1d4>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fa ff92 	bl	8002b6c <HAL_InitTick>

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	40023c00 	.word	0x40023c00
 8007c58:	40023800 	.word	0x40023800
 8007c5c:	08013ccc 	.word	0x08013ccc
 8007c60:	20000000 	.word	0x20000000
 8007c64:	20000004 	.word	0x20000004

08007c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c6c:	b090      	sub	sp, #64	@ 0x40
 8007c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c74:	2300      	movs	r3, #0
 8007c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c78:	2300      	movs	r3, #0
 8007c7a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c80:	4b59      	ldr	r3, [pc, #356]	@ (8007de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f003 030c 	and.w	r3, r3, #12
 8007c88:	2b08      	cmp	r3, #8
 8007c8a:	d00d      	beq.n	8007ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	f200 80a1 	bhi.w	8007dd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <HAL_RCC_GetSysClockFreq+0x34>
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	d003      	beq.n	8007ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c9a:	e09b      	b.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c9c:	4b53      	ldr	r3, [pc, #332]	@ (8007dec <HAL_RCC_GetSysClockFreq+0x184>)
 8007c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ca0:	e09b      	b.n	8007dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ca2:	4b53      	ldr	r3, [pc, #332]	@ (8007df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ca6:	e098      	b.n	8007dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8007de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cb0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007cb2:	4b4d      	ldr	r3, [pc, #308]	@ (8007de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d028      	beq.n	8007d10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8007de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	099b      	lsrs	r3, r3, #6
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	623b      	str	r3, [r7, #32]
 8007cc8:	627a      	str	r2, [r7, #36]	@ 0x24
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	4b47      	ldr	r3, [pc, #284]	@ (8007df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cd4:	fb03 f201 	mul.w	r2, r3, r1
 8007cd8:	2300      	movs	r3, #0
 8007cda:	fb00 f303 	mul.w	r3, r0, r3
 8007cde:	4413      	add	r3, r2
 8007ce0:	4a43      	ldr	r2, [pc, #268]	@ (8007df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ce2:	fba0 1202 	umull	r1, r2, r0, r2
 8007ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ce8:	460a      	mov	r2, r1
 8007cea:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cee:	4413      	add	r3, r2
 8007cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	61bb      	str	r3, [r7, #24]
 8007cf8:	61fa      	str	r2, [r7, #28]
 8007cfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007d02:	f7f8 fa85 	bl	8000210 <__aeabi_uldivmod>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d0e:	e053      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d10:	4b35      	ldr	r3, [pc, #212]	@ (8007de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	099b      	lsrs	r3, r3, #6
 8007d16:	2200      	movs	r2, #0
 8007d18:	613b      	str	r3, [r7, #16]
 8007d1a:	617a      	str	r2, [r7, #20]
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007d22:	f04f 0b00 	mov.w	fp, #0
 8007d26:	4652      	mov	r2, sl
 8007d28:	465b      	mov	r3, fp
 8007d2a:	f04f 0000 	mov.w	r0, #0
 8007d2e:	f04f 0100 	mov.w	r1, #0
 8007d32:	0159      	lsls	r1, r3, #5
 8007d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d38:	0150      	lsls	r0, r2, #5
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	ebb2 080a 	subs.w	r8, r2, sl
 8007d42:	eb63 090b 	sbc.w	r9, r3, fp
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d5a:	ebb2 0408 	subs.w	r4, r2, r8
 8007d5e:	eb63 0509 	sbc.w	r5, r3, r9
 8007d62:	f04f 0200 	mov.w	r2, #0
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	00eb      	lsls	r3, r5, #3
 8007d6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d70:	00e2      	lsls	r2, r4, #3
 8007d72:	4614      	mov	r4, r2
 8007d74:	461d      	mov	r5, r3
 8007d76:	eb14 030a 	adds.w	r3, r4, sl
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	eb45 030b 	adc.w	r3, r5, fp
 8007d80:	607b      	str	r3, [r7, #4]
 8007d82:	f04f 0200 	mov.w	r2, #0
 8007d86:	f04f 0300 	mov.w	r3, #0
 8007d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d8e:	4629      	mov	r1, r5
 8007d90:	028b      	lsls	r3, r1, #10
 8007d92:	4621      	mov	r1, r4
 8007d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d98:	4621      	mov	r1, r4
 8007d9a:	028a      	lsls	r2, r1, #10
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da2:	2200      	movs	r2, #0
 8007da4:	60bb      	str	r3, [r7, #8]
 8007da6:	60fa      	str	r2, [r7, #12]
 8007da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dac:	f7f8 fa30 	bl	8000210 <__aeabi_uldivmod>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4613      	mov	r3, r2
 8007db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007db8:	4b0b      	ldr	r3, [pc, #44]	@ (8007de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	0c1b      	lsrs	r3, r3, #16
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007dc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007dd2:	e002      	b.n	8007dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dd4:	4b05      	ldr	r3, [pc, #20]	@ (8007dec <HAL_RCC_GetSysClockFreq+0x184>)
 8007dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3740      	adds	r7, #64	@ 0x40
 8007de0:	46bd      	mov	sp, r7
 8007de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007de6:	bf00      	nop
 8007de8:	40023800 	.word	0x40023800
 8007dec:	00f42400 	.word	0x00f42400
 8007df0:	017d7840 	.word	0x017d7840

08007df4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007df8:	4b03      	ldr	r3, [pc, #12]	@ (8007e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	20000000 	.word	0x20000000

08007e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e10:	f7ff fff0 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 8007e14:	4602      	mov	r2, r0
 8007e16:	4b05      	ldr	r3, [pc, #20]	@ (8007e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	0a9b      	lsrs	r3, r3, #10
 8007e1c:	f003 0307 	and.w	r3, r3, #7
 8007e20:	4903      	ldr	r1, [pc, #12]	@ (8007e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e22:	5ccb      	ldrb	r3, [r1, r3]
 8007e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	40023800 	.word	0x40023800
 8007e30:	08013cdc 	.word	0x08013cdc

08007e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e38:	f7ff ffdc 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	4b05      	ldr	r3, [pc, #20]	@ (8007e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	0b5b      	lsrs	r3, r3, #13
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	4903      	ldr	r1, [pc, #12]	@ (8007e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e4a:	5ccb      	ldrb	r3, [r1, r3]
 8007e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	40023800 	.word	0x40023800
 8007e58:	08013cdc 	.word	0x08013cdc

08007e5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	220f      	movs	r2, #15
 8007e6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e6c:	4b12      	ldr	r3, [pc, #72]	@ (8007eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f003 0203 	and.w	r2, r3, #3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007e78:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007e84:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007e90:	4b09      	ldr	r3, [pc, #36]	@ (8007eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	08db      	lsrs	r3, r3, #3
 8007e96:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e9e:	4b07      	ldr	r3, [pc, #28]	@ (8007ebc <HAL_RCC_GetClockConfig+0x60>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 020f 	and.w	r2, r3, #15
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	601a      	str	r2, [r3, #0]
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40023800 	.word	0x40023800
 8007ebc:	40023c00 	.word	0x40023c00

08007ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d012      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ee8:	4b69      	ldr	r3, [pc, #420]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	4a68      	ldr	r2, [pc, #416]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007ef2:	6093      	str	r3, [r2, #8]
 8007ef4:	4b66      	ldr	r3, [pc, #408]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007efc:	4964      	ldr	r1, [pc, #400]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d017      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f20:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f28:	4959      	ldr	r1, [pc, #356]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f38:	d101      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007f46:	2301      	movs	r3, #1
 8007f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d017      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007f56:	4b4e      	ldr	r3, [pc, #312]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f5c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f64:	494a      	ldr	r1, [pc, #296]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f74:	d101      	bne.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007f76:	2301      	movs	r3, #1
 8007f78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007f82:	2301      	movs	r3, #1
 8007f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007f92:	2301      	movs	r3, #1
 8007f94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 808b 	beq.w	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa8:	4a39      	ldr	r2, [pc, #228]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fb0:	4b37      	ldr	r3, [pc, #220]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fb8:	60bb      	str	r3, [r7, #8]
 8007fba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fbc:	4b35      	ldr	r3, [pc, #212]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a34      	ldr	r2, [pc, #208]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fc8:	f7fa ff20 	bl	8002e0c <HAL_GetTick>
 8007fcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007fce:	e008      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fd0:	f7fa ff1c 	bl	8002e0c <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	2b64      	cmp	r3, #100	@ 0x64
 8007fdc:	d901      	bls.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e357      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0f0      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fee:	4b28      	ldr	r3, [pc, #160]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ff6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d035      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	429a      	cmp	r2, r3
 800800a:	d02e      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800800c:	4b20      	ldr	r3, [pc, #128]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800800e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008010:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008014:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008016:	4b1e      	ldr	r3, [pc, #120]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801a:	4a1d      	ldr	r2, [pc, #116]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800801c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008020:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008022:	4b1b      	ldr	r3, [pc, #108]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008026:	4a1a      	ldr	r2, [pc, #104]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800802c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800802e:	4a18      	ldr	r2, [pc, #96]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008034:	4b16      	ldr	r3, [pc, #88]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	2b01      	cmp	r3, #1
 800803e:	d114      	bne.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008040:	f7fa fee4 	bl	8002e0c <HAL_GetTick>
 8008044:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008046:	e00a      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008048:	f7fa fee0 	bl	8002e0c <HAL_GetTick>
 800804c:	4602      	mov	r2, r0
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008056:	4293      	cmp	r3, r2
 8008058:	d901      	bls.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e319      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800805e:	4b0c      	ldr	r3, [pc, #48]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b00      	cmp	r3, #0
 8008068:	d0ee      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800806e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008076:	d111      	bne.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008078:	4b05      	ldr	r3, [pc, #20]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008084:	4b04      	ldr	r3, [pc, #16]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008086:	400b      	ands	r3, r1
 8008088:	4901      	ldr	r1, [pc, #4]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800808a:	4313      	orrs	r3, r2
 800808c:	608b      	str	r3, [r1, #8]
 800808e:	e00b      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008090:	40023800 	.word	0x40023800
 8008094:	40007000 	.word	0x40007000
 8008098:	0ffffcff 	.word	0x0ffffcff
 800809c:	4baa      	ldr	r3, [pc, #680]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	4aa9      	ldr	r2, [pc, #676]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080a2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80080a6:	6093      	str	r3, [r2, #8]
 80080a8:	4ba7      	ldr	r3, [pc, #668]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080b4:	49a4      	ldr	r1, [pc, #656]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 0310 	and.w	r3, r3, #16
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d010      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080c6:	4ba0      	ldr	r3, [pc, #640]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080cc:	4a9e      	ldr	r2, [pc, #632]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80080d6:	4b9c      	ldr	r3, [pc, #624]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e0:	4999      	ldr	r1, [pc, #612]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080f4:	4b94      	ldr	r3, [pc, #592]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008102:	4991      	ldr	r1, [pc, #580]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008104:	4313      	orrs	r3, r2
 8008106:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008116:	4b8c      	ldr	r3, [pc, #560]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800811c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008124:	4988      	ldr	r1, [pc, #544]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008126:	4313      	orrs	r3, r2
 8008128:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00a      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008138:	4b83      	ldr	r3, [pc, #524]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800813e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008146:	4980      	ldr	r1, [pc, #512]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008148:	4313      	orrs	r3, r2
 800814a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00a      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800815a:	4b7b      	ldr	r3, [pc, #492]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800815c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008160:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008168:	4977      	ldr	r1, [pc, #476]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800816a:	4313      	orrs	r3, r2
 800816c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00a      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800817c:	4b72      	ldr	r3, [pc, #456]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800817e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008182:	f023 0203 	bic.w	r2, r3, #3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800818a:	496f      	ldr	r1, [pc, #444]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800818c:	4313      	orrs	r3, r2
 800818e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800819e:	4b6a      	ldr	r3, [pc, #424]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081a4:	f023 020c 	bic.w	r2, r3, #12
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ac:	4966      	ldr	r1, [pc, #408]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00a      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081c0:	4b61      	ldr	r3, [pc, #388]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081ce:	495e      	ldr	r1, [pc, #376]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00a      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081e2:	4b59      	ldr	r3, [pc, #356]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081e8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081f0:	4955      	ldr	r1, [pc, #340]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00a      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008204:	4b50      	ldr	r3, [pc, #320]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800820a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008212:	494d      	ldr	r1, [pc, #308]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008214:	4313      	orrs	r3, r2
 8008216:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008226:	4b48      	ldr	r3, [pc, #288]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800822c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008234:	4944      	ldr	r1, [pc, #272]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008236:	4313      	orrs	r3, r2
 8008238:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00a      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008248:	4b3f      	ldr	r3, [pc, #252]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800824a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800824e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008256:	493c      	ldr	r1, [pc, #240]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008258:	4313      	orrs	r3, r2
 800825a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00a      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800826a:	4b37      	ldr	r3, [pc, #220]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800826c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008270:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008278:	4933      	ldr	r1, [pc, #204]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800827a:	4313      	orrs	r3, r2
 800827c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00a      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800828c:	4b2e      	ldr	r3, [pc, #184]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800828e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008292:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800829a:	492b      	ldr	r1, [pc, #172]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800829c:	4313      	orrs	r3, r2
 800829e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d011      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80082ae:	4b26      	ldr	r3, [pc, #152]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082b4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082bc:	4922      	ldr	r1, [pc, #136]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082cc:	d101      	bne.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80082ce:	2301      	movs	r3, #1
 80082d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0308 	and.w	r3, r3, #8
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80082de:	2301      	movs	r3, #1
 80082e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082ee:	4b16      	ldr	r3, [pc, #88]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082f4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082fc:	4912      	ldr	r1, [pc, #72]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008310:	4b0d      	ldr	r3, [pc, #52]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008316:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008320:	4909      	ldr	r1, [pc, #36]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008322:	4313      	orrs	r3, r2
 8008324:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d006      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 80d9 	beq.w	80084ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800833c:	4b02      	ldr	r3, [pc, #8]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a01      	ldr	r2, [pc, #4]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008342:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008346:	e001      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008348:	40023800 	.word	0x40023800
 800834c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800834e:	f7fa fd5d 	bl	8002e0c <HAL_GetTick>
 8008352:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008354:	e008      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008356:	f7fa fd59 	bl	8002e0c <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b64      	cmp	r3, #100	@ 0x64
 8008362:	d901      	bls.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e194      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008368:	4b6c      	ldr	r3, [pc, #432]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1f0      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d021      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008384:	2b00      	cmp	r3, #0
 8008386:	d11d      	bne.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008388:	4b64      	ldr	r3, [pc, #400]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800838a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800838e:	0c1b      	lsrs	r3, r3, #16
 8008390:	f003 0303 	and.w	r3, r3, #3
 8008394:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008396:	4b61      	ldr	r3, [pc, #388]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800839c:	0e1b      	lsrs	r3, r3, #24
 800839e:	f003 030f 	and.w	r3, r3, #15
 80083a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	019a      	lsls	r2, r3, #6
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	041b      	lsls	r3, r3, #16
 80083ae:	431a      	orrs	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	061b      	lsls	r3, r3, #24
 80083b4:	431a      	orrs	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	071b      	lsls	r3, r3, #28
 80083bc:	4957      	ldr	r1, [pc, #348]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083d8:	d00a      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d02e      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083ee:	d129      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80083f0:	4b4a      	ldr	r3, [pc, #296]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083f6:	0c1b      	lsrs	r3, r3, #16
 80083f8:	f003 0303 	and.w	r3, r3, #3
 80083fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083fe:	4b47      	ldr	r3, [pc, #284]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008404:	0f1b      	lsrs	r3, r3, #28
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	019a      	lsls	r2, r3, #6
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	041b      	lsls	r3, r3, #16
 8008416:	431a      	orrs	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	061b      	lsls	r3, r3, #24
 800841e:	431a      	orrs	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	071b      	lsls	r3, r3, #28
 8008424:	493d      	ldr	r1, [pc, #244]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008426:	4313      	orrs	r3, r2
 8008428:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800842c:	4b3b      	ldr	r3, [pc, #236]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800842e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008432:	f023 021f 	bic.w	r2, r3, #31
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843a:	3b01      	subs	r3, #1
 800843c:	4937      	ldr	r1, [pc, #220]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d01d      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008450:	4b32      	ldr	r3, [pc, #200]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008456:	0e1b      	lsrs	r3, r3, #24
 8008458:	f003 030f 	and.w	r3, r3, #15
 800845c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800845e:	4b2f      	ldr	r3, [pc, #188]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008464:	0f1b      	lsrs	r3, r3, #28
 8008466:	f003 0307 	and.w	r3, r3, #7
 800846a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	019a      	lsls	r2, r3, #6
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	041b      	lsls	r3, r3, #16
 8008478:	431a      	orrs	r2, r3
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	061b      	lsls	r3, r3, #24
 800847e:	431a      	orrs	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	071b      	lsls	r3, r3, #28
 8008484:	4925      	ldr	r1, [pc, #148]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008486:	4313      	orrs	r3, r2
 8008488:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d011      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	019a      	lsls	r2, r3, #6
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	041b      	lsls	r3, r3, #16
 80084a4:	431a      	orrs	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	061b      	lsls	r3, r3, #24
 80084ac:	431a      	orrs	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	071b      	lsls	r3, r3, #28
 80084b4:	4919      	ldr	r1, [pc, #100]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80084bc:	4b17      	ldr	r3, [pc, #92]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a16      	ldr	r2, [pc, #88]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084c8:	f7fa fca0 	bl	8002e0c <HAL_GetTick>
 80084cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084ce:	e008      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084d0:	f7fa fc9c 	bl	8002e0c <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b64      	cmp	r3, #100	@ 0x64
 80084dc:	d901      	bls.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e0d7      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084e2:	4b0e      	ldr	r3, [pc, #56]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0f0      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	f040 80cd 	bne.w	8008690 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80084f6:	4b09      	ldr	r3, [pc, #36]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a08      	ldr	r2, [pc, #32]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008502:	f7fa fc83 	bl	8002e0c <HAL_GetTick>
 8008506:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008508:	e00a      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800850a:	f7fa fc7f 	bl	8002e0c <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b64      	cmp	r3, #100	@ 0x64
 8008516:	d903      	bls.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e0ba      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800851c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008520:	4b5e      	ldr	r3, [pc, #376]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800852c:	d0ed      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d009      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800854a:	2b00      	cmp	r3, #0
 800854c:	d02e      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008552:	2b00      	cmp	r3, #0
 8008554:	d12a      	bne.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008556:	4b51      	ldr	r3, [pc, #324]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800855c:	0c1b      	lsrs	r3, r3, #16
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008564:	4b4d      	ldr	r3, [pc, #308]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800856a:	0f1b      	lsrs	r3, r3, #28
 800856c:	f003 0307 	and.w	r3, r3, #7
 8008570:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	019a      	lsls	r2, r3, #6
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	041b      	lsls	r3, r3, #16
 800857c:	431a      	orrs	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	061b      	lsls	r3, r3, #24
 8008584:	431a      	orrs	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	071b      	lsls	r3, r3, #28
 800858a:	4944      	ldr	r1, [pc, #272]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800858c:	4313      	orrs	r3, r2
 800858e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008592:	4b42      	ldr	r3, [pc, #264]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008598:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a0:	3b01      	subs	r3, #1
 80085a2:	021b      	lsls	r3, r3, #8
 80085a4:	493d      	ldr	r1, [pc, #244]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d022      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085c0:	d11d      	bne.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085c2:	4b36      	ldr	r3, [pc, #216]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085c8:	0e1b      	lsrs	r3, r3, #24
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085d0:	4b32      	ldr	r3, [pc, #200]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085d6:	0f1b      	lsrs	r3, r3, #28
 80085d8:	f003 0307 	and.w	r3, r3, #7
 80085dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	019a      	lsls	r2, r3, #6
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	041b      	lsls	r3, r3, #16
 80085ea:	431a      	orrs	r2, r3
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	061b      	lsls	r3, r3, #24
 80085f0:	431a      	orrs	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	071b      	lsls	r3, r3, #28
 80085f6:	4929      	ldr	r1, [pc, #164]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0308 	and.w	r3, r3, #8
 8008606:	2b00      	cmp	r3, #0
 8008608:	d028      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800860a:	4b24      	ldr	r3, [pc, #144]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800860c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008610:	0e1b      	lsrs	r3, r3, #24
 8008612:	f003 030f 	and.w	r3, r3, #15
 8008616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008618:	4b20      	ldr	r3, [pc, #128]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800861a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800861e:	0c1b      	lsrs	r3, r3, #16
 8008620:	f003 0303 	and.w	r3, r3, #3
 8008624:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	019a      	lsls	r2, r3, #6
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	041b      	lsls	r3, r3, #16
 8008630:	431a      	orrs	r2, r3
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	061b      	lsls	r3, r3, #24
 8008636:	431a      	orrs	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	071b      	lsls	r3, r3, #28
 800863e:	4917      	ldr	r1, [pc, #92]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008640:	4313      	orrs	r3, r2
 8008642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008646:	4b15      	ldr	r3, [pc, #84]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800864c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008654:	4911      	ldr	r1, [pc, #68]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008656:	4313      	orrs	r3, r2
 8008658:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800865c:	4b0f      	ldr	r3, [pc, #60]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a0e      	ldr	r2, [pc, #56]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008668:	f7fa fbd0 	bl	8002e0c <HAL_GetTick>
 800866c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800866e:	e008      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008670:	f7fa fbcc 	bl	8002e0c <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	2b64      	cmp	r3, #100	@ 0x64
 800867c:	d901      	bls.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e007      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008682:	4b06      	ldr	r3, [pc, #24]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800868a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800868e:	d1ef      	bne.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3720      	adds	r7, #32
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	40023800 	.word	0x40023800

080086a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086be:	f040 808d 	bne.w	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80086c2:	4b93      	ldr	r3, [pc, #588]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80086c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086c8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80086d0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086d8:	d07c      	beq.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086e0:	d87b      	bhi.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d004      	beq.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086ee:	d039      	beq.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80086f0:	e073      	b.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80086f2:	4b87      	ldr	r3, [pc, #540]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d108      	bne.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80086fe:	4b84      	ldr	r3, [pc, #528]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008706:	4a83      	ldr	r2, [pc, #524]	@ (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008708:	fbb2 f3f3 	udiv	r3, r2, r3
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	e007      	b.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008710:	4b7f      	ldr	r3, [pc, #508]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008718:	4a7f      	ldr	r2, [pc, #508]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800871a:	fbb2 f3f3 	udiv	r3, r2, r3
 800871e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008720:	4b7b      	ldr	r3, [pc, #492]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008726:	0e1b      	lsrs	r3, r3, #24
 8008728:	f003 030f 	and.w	r3, r3, #15
 800872c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800872e:	4b78      	ldr	r3, [pc, #480]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008734:	099b      	lsrs	r3, r3, #6
 8008736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	fb03 f202 	mul.w	r2, r3, r2
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	fbb2 f3f3 	udiv	r3, r2, r3
 8008746:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008748:	4b71      	ldr	r3, [pc, #452]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800874a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800874e:	0a1b      	lsrs	r3, r3, #8
 8008750:	f003 031f 	and.w	r3, r3, #31
 8008754:	3301      	adds	r3, #1
 8008756:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008760:	617b      	str	r3, [r7, #20]
        break;
 8008762:	e03b      	b.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008764:	4b6a      	ldr	r3, [pc, #424]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d108      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008770:	4b67      	ldr	r3, [pc, #412]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008778:	4a66      	ldr	r2, [pc, #408]	@ (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800877a:	fbb2 f3f3 	udiv	r3, r2, r3
 800877e:	613b      	str	r3, [r7, #16]
 8008780:	e007      	b.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008782:	4b63      	ldr	r3, [pc, #396]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800878a:	4a63      	ldr	r2, [pc, #396]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800878c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008790:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008792:	4b5f      	ldr	r3, [pc, #380]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008798:	0e1b      	lsrs	r3, r3, #24
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80087a0:	4b5b      	ldr	r3, [pc, #364]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087a6:	099b      	lsrs	r3, r3, #6
 80087a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	fb03 f202 	mul.w	r2, r3, r2
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80087ba:	4b55      	ldr	r3, [pc, #340]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087c0:	f003 031f 	and.w	r3, r3, #31
 80087c4:	3301      	adds	r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d0:	617b      	str	r3, [r7, #20]
        break;
 80087d2:	e003      	b.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80087d4:	4b51      	ldr	r3, [pc, #324]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80087d6:	617b      	str	r3, [r7, #20]
        break;
 80087d8:	e000      	b.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 80087da:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087e2:	f040 808d 	bne.w	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 80087e6:	4b4a      	ldr	r3, [pc, #296]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087ec:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80087f4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087fc:	d07c      	beq.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008804:	d87b      	bhi.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d004      	beq.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008812:	d039      	beq.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008814:	e073      	b.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008816:	4b3e      	ldr	r3, [pc, #248]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d108      	bne.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008822:	4b3b      	ldr	r3, [pc, #236]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800882a:	4a3a      	ldr	r2, [pc, #232]	@ (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800882c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008830:	613b      	str	r3, [r7, #16]
 8008832:	e007      	b.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008834:	4b36      	ldr	r3, [pc, #216]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800883c:	4a36      	ldr	r2, [pc, #216]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800883e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008842:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008844:	4b32      	ldr	r3, [pc, #200]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800884a:	0e1b      	lsrs	r3, r3, #24
 800884c:	f003 030f 	and.w	r3, r3, #15
 8008850:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008852:	4b2f      	ldr	r3, [pc, #188]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008858:	099b      	lsrs	r3, r3, #6
 800885a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	fb03 f202 	mul.w	r2, r3, r2
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	fbb2 f3f3 	udiv	r3, r2, r3
 800886a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800886c:	4b28      	ldr	r3, [pc, #160]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800886e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008872:	0a1b      	lsrs	r3, r3, #8
 8008874:	f003 031f 	and.w	r3, r3, #31
 8008878:	3301      	adds	r3, #1
 800887a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	fbb2 f3f3 	udiv	r3, r2, r3
 8008884:	617b      	str	r3, [r7, #20]
        break;
 8008886:	e03b      	b.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008888:	4b21      	ldr	r3, [pc, #132]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d108      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008894:	4b1e      	ldr	r3, [pc, #120]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800889c:	4a1d      	ldr	r2, [pc, #116]	@ (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800889e:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a2:	613b      	str	r3, [r7, #16]
 80088a4:	e007      	b.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80088a6:	4b1a      	ldr	r3, [pc, #104]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80088b6:	4b16      	ldr	r3, [pc, #88]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088bc:	0e1b      	lsrs	r3, r3, #24
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80088c4:	4b12      	ldr	r3, [pc, #72]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088ca:	099b      	lsrs	r3, r3, #6
 80088cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	fb03 f202 	mul.w	r2, r3, r2
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088dc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80088de:	4b0c      	ldr	r3, [pc, #48]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088e4:	f003 031f 	and.w	r3, r3, #31
 80088e8:	3301      	adds	r3, #1
 80088ea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f4:	617b      	str	r3, [r7, #20]
        break;
 80088f6:	e003      	b.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 80088f8:	4b08      	ldr	r3, [pc, #32]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80088fa:	617b      	str	r3, [r7, #20]
        break;
 80088fc:	e000      	b.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 80088fe:	bf00      	nop
      }
    }
  }

  return frequency;
 8008900:	697b      	ldr	r3, [r7, #20]
}
 8008902:	4618      	mov	r0, r3
 8008904:	371c      	adds	r7, #28
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	40023800 	.word	0x40023800
 8008914:	00f42400 	.word	0x00f42400
 8008918:	017d7840 	.word	0x017d7840
 800891c:	00bb8000 	.word	0x00bb8000

08008920 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e071      	b.n	8008a1a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	7f5b      	ldrb	r3, [r3, #29]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	d105      	bne.n	800894c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7f9 fc92 	bl	8002270 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f003 0310 	and.w	r3, r3, #16
 800895c:	2b10      	cmp	r3, #16
 800895e:	d053      	beq.n	8008a08 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	22ca      	movs	r2, #202	@ 0xca
 8008966:	625a      	str	r2, [r3, #36]	@ 0x24
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2253      	movs	r2, #83	@ 0x53
 800896e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fac7 	bl	8008f04 <RTC_EnterInitMode>
 8008976:	4603      	mov	r3, r0
 8008978:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d12a      	bne.n	80089d6 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6899      	ldr	r1, [r3, #8]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	4b26      	ldr	r3, [pc, #152]	@ (8008a24 <HAL_RTC_Init+0x104>)
 800898c:	400b      	ands	r3, r1
 800898e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6899      	ldr	r1, [r3, #8]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	431a      	orrs	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	431a      	orrs	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	68d2      	ldr	r2, [r2, #12]
 80089b6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6919      	ldr	r1, [r3, #16]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	041a      	lsls	r2, r3, #16
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fad0 	bl	8008f72 <RTC_ExitInitMode>
 80089d2:	4603      	mov	r3, r0
 80089d4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d110      	bne.n	80089fe <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 0208 	bic.w	r2, r2, #8
 80089ea:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	699a      	ldr	r2, [r3, #24]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	22ff      	movs	r2, #255	@ 0xff
 8008a04:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a06:	e001      	b.n	8008a0c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d102      	bne.n	8008a18 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	ff8fffbf 	.word	0xff8fffbf

08008a28 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a28:	b590      	push	{r4, r7, lr}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	7f1b      	ldrb	r3, [r3, #28]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d101      	bne.n	8008a44 <HAL_RTC_SetTime+0x1c>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e085      	b.n	8008b50 <HAL_RTC_SetTime+0x128>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2201      	movs	r2, #1
 8008a48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d126      	bne.n	8008aa4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d102      	bne.n	8008a6a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	2200      	movs	r2, #0
 8008a68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 faa4 	bl	8008fbc <RTC_ByteToBcd2>
 8008a74:	4603      	mov	r3, r0
 8008a76:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	785b      	ldrb	r3, [r3, #1]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 fa9d 	bl	8008fbc <RTC_ByteToBcd2>
 8008a82:	4603      	mov	r3, r0
 8008a84:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a86:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	789b      	ldrb	r3, [r3, #2]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f000 fa95 	bl	8008fbc <RTC_ByteToBcd2>
 8008a92:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008a94:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	78db      	ldrb	r3, [r3, #3]
 8008a9c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	617b      	str	r3, [r7, #20]
 8008aa2:	e018      	b.n	8008ad6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d102      	bne.n	8008ab8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	785b      	ldrb	r3, [r3, #1]
 8008ac2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008ac4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008aca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	78db      	ldrb	r3, [r3, #3]
 8008ad0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	22ca      	movs	r2, #202	@ 0xca
 8008adc:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2253      	movs	r2, #83	@ 0x53
 8008ae4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 fa0c 	bl	8008f04 <RTC_EnterInitMode>
 8008aec:	4603      	mov	r3, r0
 8008aee:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008af0:	7cfb      	ldrb	r3, [r7, #19]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d11e      	bne.n	8008b34 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	6979      	ldr	r1, [r7, #20]
 8008afc:	4b16      	ldr	r3, [pc, #88]	@ (8008b58 <HAL_RTC_SetTime+0x130>)
 8008afe:	400b      	ands	r3, r1
 8008b00:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689a      	ldr	r2, [r3, #8]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008b10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6899      	ldr	r1, [r3, #8]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	431a      	orrs	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 fa21 	bl	8008f72 <RTC_ExitInitMode>
 8008b30:	4603      	mov	r3, r0
 8008b32:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008b34:	7cfb      	ldrb	r3, [r7, #19]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	22ff      	movs	r2, #255	@ 0xff
 8008b46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	771a      	strb	r2, [r3, #28]

  return status;
 8008b4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd90      	pop	{r4, r7, pc}
 8008b58:	007f7f7f 	.word	0x007f7f7f

08008b5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b5c:	b590      	push	{r4, r7, lr}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	7f1b      	ldrb	r3, [r3, #28]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d101      	bne.n	8008b78 <HAL_RTC_SetDate+0x1c>
 8008b74:	2302      	movs	r3, #2
 8008b76:	e06f      	b.n	8008c58 <HAL_RTC_SetDate+0xfc>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2202      	movs	r2, #2
 8008b82:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10e      	bne.n	8008ba8 <HAL_RTC_SetDate+0x4c>
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	785b      	ldrb	r3, [r3, #1]
 8008b8e:	f003 0310 	and.w	r3, r3, #16
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d008      	beq.n	8008ba8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	785b      	ldrb	r3, [r3, #1]
 8008b9a:	f023 0310 	bic.w	r3, r3, #16
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	330a      	adds	r3, #10
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d11c      	bne.n	8008be8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	78db      	ldrb	r3, [r3, #3]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fa02 	bl	8008fbc <RTC_ByteToBcd2>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	785b      	ldrb	r3, [r3, #1]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 f9fb 	bl	8008fbc <RTC_ByteToBcd2>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008bca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	789b      	ldrb	r3, [r3, #2]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 f9f3 	bl	8008fbc <RTC_ByteToBcd2>
 8008bd6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008bd8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008be2:	4313      	orrs	r3, r2
 8008be4:	617b      	str	r3, [r7, #20]
 8008be6:	e00e      	b.n	8008c06 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	78db      	ldrb	r3, [r3, #3]
 8008bec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	785b      	ldrb	r3, [r3, #1]
 8008bf2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008bf4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008bfa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c02:	4313      	orrs	r3, r2
 8008c04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	22ca      	movs	r2, #202	@ 0xca
 8008c0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2253      	movs	r2, #83	@ 0x53
 8008c14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 f974 	bl	8008f04 <RTC_EnterInitMode>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008c20:	7cfb      	ldrb	r3, [r7, #19]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10a      	bne.n	8008c3c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	6979      	ldr	r1, [r7, #20]
 8008c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8008c60 <HAL_RTC_SetDate+0x104>)
 8008c2e:	400b      	ands	r3, r1
 8008c30:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 f99d 	bl	8008f72 <RTC_ExitInitMode>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c3c:	7cfb      	ldrb	r3, [r7, #19]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d102      	bne.n	8008c48 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2201      	movs	r2, #1
 8008c46:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	22ff      	movs	r2, #255	@ 0xff
 8008c4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	771a      	strb	r2, [r3, #28]

  return status;
 8008c56:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	371c      	adds	r7, #28
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd90      	pop	{r4, r7, pc}
 8008c60:	00ffff3f 	.word	0x00ffff3f

08008c64 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008c64:	b590      	push	{r4, r7, lr}
 8008c66:	b089      	sub	sp, #36	@ 0x24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	7f1b      	ldrb	r3, [r3, #28]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_RTC_SetAlarm+0x24>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e113      	b.n	8008eb0 <HAL_RTC_SetAlarm+0x24c>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2202      	movs	r2, #2
 8008c92:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d137      	bne.n	8008d0a <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d102      	bne.n	8008cae <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2200      	movs	r2, #0
 8008cac:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 f982 	bl	8008fbc <RTC_ByteToBcd2>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	785b      	ldrb	r3, [r3, #1]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 f97b 	bl	8008fbc <RTC_ByteToBcd2>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008cca:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	789b      	ldrb	r3, [r3, #2]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 f973 	bl	8008fbc <RTC_ByteToBcd2>
 8008cd6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008cd8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	78db      	ldrb	r3, [r3, #3]
 8008ce0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008ce2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 f965 	bl	8008fbc <RTC_ByteToBcd2>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008cf6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008cfe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008d04:	4313      	orrs	r3, r2
 8008d06:	61fb      	str	r3, [r7, #28]
 8008d08:	e023      	b.n	8008d52 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d102      	bne.n	8008d1e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	785b      	ldrb	r3, [r3, #1]
 8008d28:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d2a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008d30:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	78db      	ldrb	r3, [r3, #3]
 8008d36:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008d38:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d40:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008d42:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008d48:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	22ca      	movs	r2, #202	@ 0xca
 8008d64:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2253      	movs	r2, #83	@ 0x53
 8008d6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d76:	d148      	bne.n	8008e0a <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689a      	ldr	r2, [r3, #8]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d86:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689a      	ldr	r2, [r3, #8]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008d96:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8008da8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008daa:	f7fa f82f 	bl	8002e0c <HAL_GetTick>
 8008dae:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008db0:	e013      	b.n	8008dda <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008db2:	f7fa f82b 	bl	8002e0c <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008dc0:	d90b      	bls.n	8008dda <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	22ff      	movs	r2, #255	@ 0xff
 8008dc8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2203      	movs	r2, #3
 8008dce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e06a      	b.n	8008eb0 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0e4      	beq.n	8008db2 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	69fa      	ldr	r2, [r7, #28]
 8008dee:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e06:	609a      	str	r2, [r3, #8]
 8008e08:	e047      	b.n	8008e9a <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008e18:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e28:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8008e3a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e3c:	f7f9 ffe6 	bl	8002e0c <HAL_GetTick>
 8008e40:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008e42:	e013      	b.n	8008e6c <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e44:	f7f9 ffe2 	bl	8002e0c <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e52:	d90b      	bls.n	8008e6c <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	22ff      	movs	r2, #255	@ 0xff
 8008e5a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2203      	movs	r2, #3
 8008e60:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e021      	b.n	8008eb0 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	f003 0302 	and.w	r3, r3, #2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0e4      	beq.n	8008e44 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69fa      	ldr	r2, [r7, #28]
 8008e80:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e98:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	22ff      	movs	r2, #255	@ 0xff
 8008ea0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3724      	adds	r7, #36	@ 0x24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd90      	pop	{r4, r7, pc}

08008eb8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8008f00 <HAL_RTC_WaitForSynchro+0x48>)
 8008eca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ecc:	f7f9 ff9e 	bl	8002e0c <HAL_GetTick>
 8008ed0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008ed2:	e009      	b.n	8008ee8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008ed4:	f7f9 ff9a 	bl	8002e0c <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ee2:	d901      	bls.n	8008ee8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e007      	b.n	8008ef8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f003 0320 	and.w	r3, r3, #32
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d0ee      	beq.n	8008ed4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	0001ff5f 	.word	0x0001ff5f

08008f04 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d122      	bne.n	8008f68 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008f30:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f32:	f7f9 ff6b 	bl	8002e0c <HAL_GetTick>
 8008f36:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f38:	e00c      	b.n	8008f54 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f3a:	f7f9 ff67 	bl	8002e0c <HAL_GetTick>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f48:	d904      	bls.n	8008f54 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2204      	movs	r2, #4
 8008f4e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d102      	bne.n	8008f68 <RTC_EnterInitMode+0x64>
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d1e8      	bne.n	8008f3a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68da      	ldr	r2, [r3, #12]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f8c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f003 0320 	and.w	r3, r3, #32
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10a      	bne.n	8008fb2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff ff8b 	bl	8008eb8 <HAL_RTC_WaitForSynchro>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d004      	beq.n	8008fb2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2204      	movs	r2, #4
 8008fac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008fca:	e005      	b.n	8008fd8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	3b0a      	subs	r3, #10
 8008fd6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	2b09      	cmp	r3, #9
 8008fdc:	d8f6      	bhi.n	8008fcc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	011b      	lsls	r3, r3, #4
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	79fb      	ldrb	r3, [r7, #7]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	b2db      	uxtb	r3, r3
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009004:	2300      	movs	r3, #0
 8009006:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	7f1b      	ldrb	r3, [r3, #28]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d101      	bne.n	8009014 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009010:	2302      	movs	r3, #2
 8009012:	e050      	b.n	80090b6 <HAL_RTCEx_SetTimeStamp+0xbe>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2201      	movs	r2, #1
 8009018:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2202      	movs	r2, #2
 800901e:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f022 0206 	bic.w	r2, r2, #6
 800902e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	430a      	orrs	r2, r1
 800903e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689a      	ldr	r2, [r3, #8]
 8009046:	4b1f      	ldr	r3, [pc, #124]	@ (80090c4 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009048:	4013      	ands	r3, r2
 800904a:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	4313      	orrs	r3, r2
 8009052:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	22ca      	movs	r2, #202	@ 0xca
 800905a:	625a      	str	r2, [r3, #36]	@ 0x24
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2253      	movs	r2, #83	@ 0x53
 8009062:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	b2da      	uxtb	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800907c:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	b2da      	uxtb	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800908e:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689a      	ldr	r2, [r3, #8]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800909e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	22ff      	movs	r2, #255	@ 0xff
 80090a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2201      	movs	r2, #1
 80090ac:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	371c      	adds	r7, #28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	fffff7f7 	.word	0xfffff7f7

080090c8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80090d4:	2300      	movs	r3, #0
 80090d6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e156      	b.n	8009394 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d106      	bne.n	8009100 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7f9 fccc 	bl	8002a98 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2202      	movs	r2, #2
 8009104:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f95b 	bl	80093c4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	2b02      	cmp	r3, #2
 8009114:	d00c      	beq.n	8009130 <HAL_SAI_Init+0x68>
 8009116:	2b02      	cmp	r3, #2
 8009118:	d80d      	bhi.n	8009136 <HAL_SAI_Init+0x6e>
 800911a:	2b00      	cmp	r3, #0
 800911c:	d002      	beq.n	8009124 <HAL_SAI_Init+0x5c>
 800911e:	2b01      	cmp	r3, #1
 8009120:	d003      	beq.n	800912a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009122:	e008      	b.n	8009136 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009124:	2300      	movs	r3, #0
 8009126:	61fb      	str	r3, [r7, #28]
      break;
 8009128:	e006      	b.n	8009138 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800912a:	2310      	movs	r3, #16
 800912c:	61fb      	str	r3, [r7, #28]
      break;
 800912e:	e003      	b.n	8009138 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009130:	2320      	movs	r3, #32
 8009132:	61fb      	str	r3, [r7, #28]
      break;
 8009134:	e000      	b.n	8009138 <HAL_SAI_Init+0x70>
      break;
 8009136:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	2b03      	cmp	r3, #3
 800913e:	d81e      	bhi.n	800917e <HAL_SAI_Init+0xb6>
 8009140:	a201      	add	r2, pc, #4	@ (adr r2, 8009148 <HAL_SAI_Init+0x80>)
 8009142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009146:	bf00      	nop
 8009148:	08009159 	.word	0x08009159
 800914c:	0800915f 	.word	0x0800915f
 8009150:	08009167 	.word	0x08009167
 8009154:	0800916f 	.word	0x0800916f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	617b      	str	r3, [r7, #20]
    }
    break;
 800915c:	e010      	b.n	8009180 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800915e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009162:	617b      	str	r3, [r7, #20]
    }
    break;
 8009164:	e00c      	b.n	8009180 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009166:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800916a:	617b      	str	r3, [r7, #20]
    }
    break;
 800916c:	e008      	b.n	8009180 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800916e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009172:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	f043 0301 	orr.w	r3, r3, #1
 800917a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800917c:	e000      	b.n	8009180 <HAL_SAI_Init+0xb8>
    default:
      break;
 800917e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a85      	ldr	r2, [pc, #532]	@ (800939c <HAL_SAI_Init+0x2d4>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d004      	beq.n	8009194 <HAL_SAI_Init+0xcc>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a84      	ldr	r2, [pc, #528]	@ (80093a0 <HAL_SAI_Init+0x2d8>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d103      	bne.n	800919c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009194:	4a83      	ldr	r2, [pc, #524]	@ (80093a4 <HAL_SAI_Init+0x2dc>)
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	6013      	str	r3, [r2, #0]
 800919a:	e002      	b.n	80091a2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800919c:	4a82      	ldr	r2, [pc, #520]	@ (80093a8 <HAL_SAI_Init+0x2e0>)
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d04c      	beq.n	8009244 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a7a      	ldr	r2, [pc, #488]	@ (800939c <HAL_SAI_Init+0x2d4>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d004      	beq.n	80091c2 <HAL_SAI_Init+0xfa>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a78      	ldr	r2, [pc, #480]	@ (80093a0 <HAL_SAI_Init+0x2d8>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d104      	bne.n	80091cc <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80091c2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80091c6:	f7ff fa6b 	bl	80086a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80091ca:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a76      	ldr	r2, [pc, #472]	@ (80093ac <HAL_SAI_Init+0x2e4>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d004      	beq.n	80091e0 <HAL_SAI_Init+0x118>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a75      	ldr	r2, [pc, #468]	@ (80093b0 <HAL_SAI_Init+0x2e8>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d104      	bne.n	80091ea <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80091e0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80091e4:	f7ff fa5c 	bl	80086a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80091e8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	4613      	mov	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	461a      	mov	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	025b      	lsls	r3, r3, #9
 80091fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009200:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	4a6b      	ldr	r2, [pc, #428]	@ (80093b4 <HAL_SAI_Init+0x2ec>)
 8009206:	fba2 2303 	umull	r2, r3, r2, r3
 800920a:	08da      	lsrs	r2, r3, #3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009210:	68f9      	ldr	r1, [r7, #12]
 8009212:	4b68      	ldr	r3, [pc, #416]	@ (80093b4 <HAL_SAI_Init+0x2ec>)
 8009214:	fba3 2301 	umull	r2, r3, r3, r1
 8009218:	08da      	lsrs	r2, r3, #3
 800921a:	4613      	mov	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	1aca      	subs	r2, r1, r3
 8009224:	2a08      	cmp	r2, #8
 8009226:	d904      	bls.n	8009232 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009236:	2b04      	cmp	r3, #4
 8009238:	d104      	bne.n	8009244 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	085a      	lsrs	r2, r3, #1
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <HAL_SAI_Init+0x18c>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	2b02      	cmp	r3, #2
 8009252:	d109      	bne.n	8009268 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009258:	2b01      	cmp	r3, #1
 800925a:	d101      	bne.n	8009260 <HAL_SAI_Init+0x198>
 800925c:	2300      	movs	r3, #0
 800925e:	e001      	b.n	8009264 <HAL_SAI_Init+0x19c>
 8009260:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009264:	61bb      	str	r3, [r7, #24]
 8009266:	e008      	b.n	800927a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800926c:	2b01      	cmp	r3, #1
 800926e:	d102      	bne.n	8009276 <HAL_SAI_Init+0x1ae>
 8009270:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009274:	e000      	b.n	8009278 <HAL_SAI_Init+0x1b0>
 8009276:	2300      	movs	r3, #0
 8009278:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6819      	ldr	r1, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	4b4c      	ldr	r3, [pc, #304]	@ (80093b8 <HAL_SAI_Init+0x2f0>)
 8009286:	400b      	ands	r3, r1
 8009288:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6819      	ldr	r1, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009298:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800929e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a4:	431a      	orrs	r2, r3
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80092b2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092be:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a1b      	ldr	r3, [r3, #32]
 80092c4:	051b      	lsls	r3, r3, #20
 80092c6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6859      	ldr	r1, [r3, #4]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	4b38      	ldr	r3, [pc, #224]	@ (80093bc <HAL_SAI_Init+0x2f4>)
 80092dc:	400b      	ands	r3, r1
 80092de:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6859      	ldr	r1, [r3, #4]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	699a      	ldr	r2, [r3, #24]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ee:	431a      	orrs	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f4:	431a      	orrs	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6899      	ldr	r1, [r3, #8]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	4b2d      	ldr	r3, [pc, #180]	@ (80093c0 <HAL_SAI_Init+0x2f8>)
 800930a:	400b      	ands	r3, r1
 800930c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6899      	ldr	r1, [r3, #8]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009318:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800931e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8009324:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800932a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009330:	3b01      	subs	r3, #1
 8009332:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009334:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	430a      	orrs	r2, r1
 800933c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68d9      	ldr	r1, [r3, #12]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800934c:	400b      	ands	r3, r1
 800934e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68d9      	ldr	r1, [r3, #12]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800935e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009364:	041b      	lsls	r3, r3, #16
 8009366:	431a      	orrs	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800936c:	3b01      	subs	r3, #1
 800936e:	021b      	lsls	r3, r3, #8
 8009370:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3720      	adds	r7, #32
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40015804 	.word	0x40015804
 80093a0:	40015824 	.word	0x40015824
 80093a4:	40015800 	.word	0x40015800
 80093a8:	40015c00 	.word	0x40015c00
 80093ac:	40015c04 	.word	0x40015c04
 80093b0:	40015c24 	.word	0x40015c24
 80093b4:	cccccccd 	.word	0xcccccccd
 80093b8:	ff05c010 	.word	0xff05c010
 80093bc:	ffff1ff0 	.word	0xffff1ff0
 80093c0:	fff88000 	.word	0xfff88000

080093c4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80093cc:	4b17      	ldr	r3, [pc, #92]	@ (800942c <SAI_Disable+0x68>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a17      	ldr	r2, [pc, #92]	@ (8009430 <SAI_Disable+0x6c>)
 80093d2:	fba2 2303 	umull	r2, r3, r2, r3
 80093d6:	0b1b      	lsrs	r3, r3, #12
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80093ee:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	1e5a      	subs	r2, r3, #1
 80093f4:	60fa      	str	r2, [r7, #12]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10a      	bne.n	8009410 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009400:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	72fb      	strb	r3, [r7, #11]
      break;
 800940e:	e006      	b.n	800941e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e8      	bne.n	80093f0 <SAI_Disable+0x2c>

  return status;
 800941e:	7afb      	ldrb	r3, [r7, #11]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	20000000 	.word	0x20000000
 8009430:	95cbec1b 	.word	0x95cbec1b

08009434 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e022      	b.n	800948c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d105      	bne.n	800945e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7f8 ff37 	bl	80022cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2203      	movs	r2, #3
 8009462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f814 	bl	8009494 <HAL_SD_InitCard>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e00a      	b.n	800948c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009494:	b5b0      	push	{r4, r5, r7, lr}
 8009496:	b08e      	sub	sp, #56	@ 0x38
 8009498:	af04      	add	r7, sp, #16
 800949a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800949c:	2300      	movs	r3, #0
 800949e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80094a0:	2300      	movs	r3, #0
 80094a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80094a4:	2300      	movs	r3, #0
 80094a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80094a8:	2300      	movs	r3, #0
 80094aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80094b0:	2376      	movs	r3, #118	@ 0x76
 80094b2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681d      	ldr	r5, [r3, #0]
 80094b8:	466c      	mov	r4, sp
 80094ba:	f107 0314 	add.w	r3, r7, #20
 80094be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094c6:	f107 0308 	add.w	r3, r7, #8
 80094ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094cc:	4628      	mov	r0, r5
 80094ce:	f002 ffd1 	bl	800c474 <SDMMC_Init>
 80094d2:	4603      	mov	r3, r0
 80094d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80094d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d001      	beq.n	80094e4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e059      	b.n	8009598 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80094f2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f002 fff4 	bl	800c4e6 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800950c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800950e:	2002      	movs	r0, #2
 8009510:	f7f9 fc88 	bl	8002e24 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fe0f 	bl	800a138 <SD_PowerON>
 800951a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00b      	beq.n	800953a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	431a      	orrs	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e02e      	b.n	8009598 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fd2e 	bl	8009f9c <SD_InitCard>
 8009540:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00b      	beq.n	8009560 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e01b      	b.n	8009598 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009568:	4618      	mov	r0, r3
 800956a:	f003 f84f 	bl	800c60c <SDMMC_CmdBlockLength>
 800956e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00f      	beq.n	8009596 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a09      	ldr	r2, [pc, #36]	@ (80095a0 <HAL_SD_InitCard+0x10c>)
 800957c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	431a      	orrs	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e000      	b.n	8009598 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3728      	adds	r7, #40	@ 0x28
 800959c:	46bd      	mov	sp, r7
 800959e:	bdb0      	pop	{r4, r5, r7, pc}
 80095a0:	004005ff 	.word	0x004005ff

080095a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08c      	sub	sp, #48	@ 0x30
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d107      	bne.n	80095cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e0c3      	b.n	8009754 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	f040 80bc 	bne.w	8009752 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80095e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	441a      	add	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d907      	bls.n	80095fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095f2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e0aa      	b.n	8009754 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2203      	movs	r2, #3
 8009602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2200      	movs	r2, #0
 800960c:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800961c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009622:	4a4e      	ldr	r2, [pc, #312]	@ (800975c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009624:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962a:	4a4d      	ldr	r2, [pc, #308]	@ (8009760 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800962c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009632:	2200      	movs	r2, #0
 8009634:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963a:	2200      	movs	r2, #0
 800963c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3380      	adds	r3, #128	@ 0x80
 8009664:	4619      	mov	r1, r3
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	025b      	lsls	r3, r3, #9
 800966c:	089b      	lsrs	r3, r3, #2
 800966e:	f7fa f8df 	bl	8003830 <HAL_DMA_Start_IT>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d017      	beq.n	80096a8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8009686:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a35      	ldr	r2, [pc, #212]	@ (8009764 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800968e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009694:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e055      	b.n	8009754 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f042 0208 	orr.w	r2, r2, #8
 80096b6:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d002      	beq.n	80096c6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80096c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c2:	025b      	lsls	r3, r3, #9
 80096c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80096ca:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	025b      	lsls	r3, r3, #9
 80096d0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80096d2:	2390      	movs	r3, #144	@ 0x90
 80096d4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80096d6:	2302      	movs	r3, #2
 80096d8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80096da:	2300      	movs	r3, #0
 80096dc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80096de:	2301      	movs	r3, #1
 80096e0:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f107 0210 	add.w	r2, r7, #16
 80096ea:	4611      	mov	r1, r2
 80096ec:	4618      	mov	r0, r3
 80096ee:	f002 ff61 	bl	800c5b4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d90a      	bls.n	800970e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2282      	movs	r2, #130	@ 0x82
 80096fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009704:	4618      	mov	r0, r3
 8009706:	f002 ffc5 	bl	800c694 <SDMMC_CmdReadMultiBlock>
 800970a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800970c:	e009      	b.n	8009722 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2281      	movs	r2, #129	@ 0x81
 8009712:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800971a:	4618      	mov	r0, r3
 800971c:	f002 ff98 	bl	800c650 <SDMMC_CmdReadSingleBlock>
 8009720:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009724:	2b00      	cmp	r3, #0
 8009726:	d012      	beq.n	800974e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a0d      	ldr	r2, [pc, #52]	@ (8009764 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800972e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009736:	431a      	orrs	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e002      	b.n	8009754 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	e000      	b.n	8009754 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8009752:	2302      	movs	r3, #2
  }
}
 8009754:	4618      	mov	r0, r3
 8009756:	3730      	adds	r7, #48	@ 0x30
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	08009e87 	.word	0x08009e87
 8009760:	08009ef9 	.word	0x08009ef9
 8009764:	004005ff 	.word	0x004005ff

08009768 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08c      	sub	sp, #48	@ 0x30
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
 8009774:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d107      	bne.n	8009790 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009784:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e0c6      	b.n	800991e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009796:	b2db      	uxtb	r3, r3
 8009798:	2b01      	cmp	r3, #1
 800979a:	f040 80bf 	bne.w	800991c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	441a      	add	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d907      	bls.n	80097c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e0ad      	b.n	800991e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2203      	movs	r2, #3
 80097c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2200      	movs	r2, #0
 80097d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f042 021a 	orr.w	r2, r2, #26
 80097e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097e6:	4a50      	ldr	r2, [pc, #320]	@ (8009928 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80097e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097ee:	4a4f      	ldr	r2, [pc, #316]	@ (800992c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80097f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097f6:	2200      	movs	r2, #0
 80097f8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d002      	beq.n	8009808 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009804:	025b      	lsls	r3, r3, #9
 8009806:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d90a      	bls.n	8009824 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	22a0      	movs	r2, #160	@ 0xa0
 8009812:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800981a:	4618      	mov	r0, r3
 800981c:	f002 ff7e 	bl	800c71c <SDMMC_CmdWriteMultiBlock>
 8009820:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009822:	e009      	b.n	8009838 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2290      	movs	r2, #144	@ 0x90
 8009828:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009830:	4618      	mov	r0, r3
 8009832:	f002 ff51 	bl	800c6d8 <SDMMC_CmdWriteSingleBlock>
 8009836:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983a:	2b00      	cmp	r3, #0
 800983c:	d012      	beq.n	8009864 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a3b      	ldr	r2, [pc, #236]	@ (8009930 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009844:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800984a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800984c:	431a      	orrs	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e05c      	b.n	800991e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0208 	orr.w	r2, r2, #8
 8009872:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009878:	2240      	movs	r2, #64	@ 0x40
 800987a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800988c:	689a      	ldr	r2, [r3, #8]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	430a      	orrs	r2, r1
 8009896:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800989c:	68b9      	ldr	r1, [r7, #8]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3380      	adds	r3, #128	@ 0x80
 80098a4:	461a      	mov	r2, r3
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	025b      	lsls	r3, r3, #9
 80098aa:	089b      	lsrs	r3, r3, #2
 80098ac:	f7f9 ffc0 	bl	8003830 <HAL_DMA_Start_IT>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d01a      	beq.n	80098ec <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 021a 	bic.w	r2, r2, #26
 80098c4:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a19      	ldr	r2, [pc, #100]	@ (8009930 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80098cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e018      	b.n	800991e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098f0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	025b      	lsls	r3, r3, #9
 80098f6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80098f8:	2390      	movs	r3, #144	@ 0x90
 80098fa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80098fc:	2300      	movs	r3, #0
 80098fe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009900:	2300      	movs	r3, #0
 8009902:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009904:	2301      	movs	r3, #1
 8009906:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f107 0210 	add.w	r2, r7, #16
 8009910:	4611      	mov	r1, r2
 8009912:	4618      	mov	r0, r3
 8009914:	f002 fe4e 	bl	800c5b4 <SDMMC_ConfigData>

      return HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	e000      	b.n	800991e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800991c:	2302      	movs	r3, #2
  }
}
 800991e:	4618      	mov	r0, r3
 8009920:	3730      	adds	r7, #48	@ 0x30
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	08009e5d 	.word	0x08009e5d
 800992c:	08009ef9 	.word	0x08009ef9
 8009930:	004005ff 	.word	0x004005ff

08009934 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009956:	0f9b      	lsrs	r3, r3, #30
 8009958:	b2da      	uxtb	r2, r3
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009962:	0e9b      	lsrs	r3, r3, #26
 8009964:	b2db      	uxtb	r3, r3
 8009966:	f003 030f 	and.w	r3, r3, #15
 800996a:	b2da      	uxtb	r2, r3
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009974:	0e1b      	lsrs	r3, r3, #24
 8009976:	b2db      	uxtb	r3, r3
 8009978:	f003 0303 	and.w	r3, r3, #3
 800997c:	b2da      	uxtb	r2, r3
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009986:	0c1b      	lsrs	r3, r3, #16
 8009988:	b2da      	uxtb	r2, r3
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009992:	0a1b      	lsrs	r3, r3, #8
 8009994:	b2da      	uxtb	r2, r3
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099a8:	0d1b      	lsrs	r3, r3, #20
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099b4:	0c1b      	lsrs	r3, r3, #16
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	f003 030f 	and.w	r3, r3, #15
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099c6:	0bdb      	lsrs	r3, r3, #15
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099d8:	0b9b      	lsrs	r3, r3, #14
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	f003 0301 	and.w	r3, r3, #1
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099ea:	0b5b      	lsrs	r3, r3, #13
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099fc:	0b1b      	lsrs	r3, r3, #12
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f003 0301 	and.w	r3, r3, #1
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d163      	bne.n	8009ae0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a1c:	009a      	lsls	r2, r3, #2
 8009a1e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009a22:	4013      	ands	r3, r2
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009a28:	0f92      	lsrs	r2, r2, #30
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a34:	0edb      	lsrs	r3, r3, #27
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f003 0307 	and.w	r3, r3, #7
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a46:	0e1b      	lsrs	r3, r3, #24
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	f003 0307 	and.w	r3, r3, #7
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a58:	0d5b      	lsrs	r3, r3, #21
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	f003 0307 	and.w	r3, r3, #7
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a6a:	0c9b      	lsrs	r3, r3, #18
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	f003 0307 	and.w	r3, r3, #7
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a7c:	0bdb      	lsrs	r3, r3, #15
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	f003 0307 	and.w	r3, r3, #7
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	7e1b      	ldrb	r3, [r3, #24]
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	f003 0307 	and.w	r3, r3, #7
 8009a9e:	3302      	adds	r3, #2
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009aaa:	fb03 f202 	mul.w	r2, r3, r2
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	7a1b      	ldrb	r3, [r3, #8]
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	f003 030f 	and.w	r3, r3, #15
 8009abc:	2201      	movs	r2, #1
 8009abe:	409a      	lsls	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009acc:	0a52      	lsrs	r2, r2, #9
 8009ace:	fb03 f202 	mul.w	r2, r3, r2
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009adc:	661a      	str	r2, [r3, #96]	@ 0x60
 8009ade:	e031      	b.n	8009b44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d11d      	bne.n	8009b24 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009aec:	041b      	lsls	r3, r3, #16
 8009aee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009af6:	0c1b      	lsrs	r3, r3, #16
 8009af8:	431a      	orrs	r2, r3
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	3301      	adds	r3, #1
 8009b04:	029a      	lsls	r2, r3, #10
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b18:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b22:	e00f      	b.n	8009b44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a58      	ldr	r2, [pc, #352]	@ (8009c8c <HAL_SD_GetCardCSD+0x344>)
 8009b2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	e09d      	b.n	8009c80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b48:	0b9b      	lsrs	r3, r3, #14
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b5a:	09db      	lsrs	r3, r3, #7
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b62:	b2da      	uxtb	r2, r3
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b7c:	0fdb      	lsrs	r3, r3, #31
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b88:	0f5b      	lsrs	r3, r3, #29
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f003 0303 	and.w	r3, r3, #3
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b9a:	0e9b      	lsrs	r3, r3, #26
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	f003 0307 	and.w	r3, r3, #7
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bac:	0d9b      	lsrs	r3, r3, #22
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bbe:	0d5b      	lsrs	r3, r3, #21
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bda:	0c1b      	lsrs	r3, r3, #16
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bee:	0bdb      	lsrs	r3, r3, #15
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c02:	0b9b      	lsrs	r3, r3, #14
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c16:	0b5b      	lsrs	r3, r3, #13
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c2a:	0b1b      	lsrs	r3, r3, #12
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c3e:	0a9b      	lsrs	r3, r3, #10
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	f003 0303 	and.w	r3, r3, #3
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c52:	0a1b      	lsrs	r3, r3, #8
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	f003 0303 	and.w	r3, r3, #3
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c66:	085b      	lsrs	r3, r3, #1
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	004005ff 	.word	0x004005ff

08009c90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009ce8:	b5b0      	push	{r4, r5, r7, lr}
 8009cea:	b08e      	sub	sp, #56	@ 0x38
 8009cec:	af04      	add	r7, sp, #16
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2203      	movs	r2, #3
 8009cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d02e      	beq.n	8009d66 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d0e:	d106      	bne.n	8009d1e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d1c:	e029      	b.n	8009d72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d24:	d10a      	bne.n	8009d3c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fabc 	bl	800a2a4 <SD_WideBus_Enable>
 8009d2c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	431a      	orrs	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d3a:	e01a      	b.n	8009d72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10a      	bne.n	8009d58 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 faf9 	bl	800a33a <SD_WideBus_Disable>
 8009d48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	431a      	orrs	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d56:	e00c      	b.n	8009d72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d64:	e005      	b.n	8009d72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d6a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00b      	beq.n	8009d92 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a26      	ldr	r2, [pc, #152]	@ (8009e18 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009d80:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009d90:	e01f      	b.n	8009dd2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	695b      	ldr	r3, [r3, #20]
 8009dac:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681d      	ldr	r5, [r3, #0]
 8009db8:	466c      	mov	r4, sp
 8009dba:	f107 0314 	add.w	r3, r7, #20
 8009dbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009dc6:	f107 0308 	add.w	r3, r7, #8
 8009dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f002 fb51 	bl	800c474 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f002 fc16 	bl	800c60c <SDMMC_CmdBlockLength>
 8009de0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009de2:	6a3b      	ldr	r3, [r7, #32]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00c      	beq.n	8009e02 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a0a      	ldr	r2, [pc, #40]	@ (8009e18 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009dee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	431a      	orrs	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8009e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3728      	adds	r7, #40	@ 0x28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bdb0      	pop	{r4, r5, r7, pc}
 8009e16:	bf00      	nop
 8009e18:	004005ff 	.word	0x004005ff

08009e1c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009e28:	f107 030c 	add.w	r3, r7, #12
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fa10 	bl	800a254 <SD_SendStatus>
 8009e34:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d005      	beq.n	8009e48 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	431a      	orrs	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	0a5b      	lsrs	r3, r3, #9
 8009e4c:	f003 030f 	and.w	r3, r3, #15
 8009e50:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009e52:	693b      	ldr	r3, [r7, #16]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e68:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e78:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009e7a:	bf00      	nop
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e92:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e98:	2b82      	cmp	r3, #130	@ 0x82
 8009e9a:	d111      	bne.n	8009ec0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f002 fc5d 	bl	800c760 <SDMMC_CmdStopTransfer>
 8009ea6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d008      	beq.n	8009ec0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	431a      	orrs	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f7ff fd3a 	bl	8009934 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f022 0208 	bic.w	r2, r2, #8
 8009ece:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009ed8:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f004 fa0b 	bl	800e304 <HAL_SD_RxCpltCallback>
#endif
}
 8009eee:	bf00      	nop
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f04:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7f9 fcf2 	bl	80038f0 <HAL_DMA_GetError>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d03e      	beq.n	8009f90 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f18:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f20:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d002      	beq.n	8009f2e <SD_DMAError+0x36>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d12d      	bne.n	8009f8a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a19      	ldr	r2, [pc, #100]	@ (8009f98 <SD_DMAError+0xa0>)
 8009f34:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009f44:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f4a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009f52:	6978      	ldr	r0, [r7, #20]
 8009f54:	f7ff ff62 	bl	8009e1c <HAL_SD_GetCardState>
 8009f58:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2b06      	cmp	r3, #6
 8009f5e:	d002      	beq.n	8009f66 <SD_DMAError+0x6e>
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2b05      	cmp	r3, #5
 8009f64:	d10a      	bne.n	8009f7c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f002 fbf8 	bl	800c760 <SDMMC_CmdStopTransfer>
 8009f70:	4602      	mov	r2, r0
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f76:	431a      	orrs	r2, r3
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2200      	movs	r2, #0
 8009f88:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009f8a:	6978      	ldr	r0, [r7, #20]
 8009f8c:	f7ff fcd2 	bl	8009934 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009f90:	bf00      	nop
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	004005ff 	.word	0x004005ff

08009f9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009f9c:	b5b0      	push	{r4, r5, r7, lr}
 8009f9e:	b094      	sub	sp, #80	@ 0x50
 8009fa0:	af04      	add	r7, sp, #16
 8009fa2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f002 faa8 	bl	800c502 <SDMMC_GetPowerState>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d102      	bne.n	8009fbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fb8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009fbc:	e0b8      	b.n	800a130 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d02f      	beq.n	800a026 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f002 fcd3 	bl	800c976 <SDMMC_CmdSendCID>
 8009fd0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <SD_InitCard+0x40>
    {
      return errorstate;
 8009fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fda:	e0a9      	b.n	800a130 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f002 fad3 	bl	800c58e <SDMMC_GetResponse>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2104      	movs	r1, #4
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f002 faca 	bl	800c58e <SDMMC_GetResponse>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2108      	movs	r1, #8
 800a006:	4618      	mov	r0, r3
 800a008:	f002 fac1 	bl	800c58e <SDMMC_GetResponse>
 800a00c:	4602      	mov	r2, r0
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	210c      	movs	r1, #12
 800a018:	4618      	mov	r0, r3
 800a01a:	f002 fab8 	bl	800c58e <SDMMC_GetResponse>
 800a01e:	4602      	mov	r2, r0
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	d00d      	beq.n	800a04a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f107 020e 	add.w	r2, r7, #14
 800a036:	4611      	mov	r1, r2
 800a038:	4618      	mov	r0, r3
 800a03a:	f002 fcd9 	bl	800c9f0 <SDMMC_CmdSetRelAdd>
 800a03e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <SD_InitCard+0xae>
    {
      return errorstate;
 800a046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a048:	e072      	b.n	800a130 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a04e:	2b03      	cmp	r3, #3
 800a050:	d036      	beq.n	800a0c0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a052:	89fb      	ldrh	r3, [r7, #14]
 800a054:	461a      	mov	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a062:	041b      	lsls	r3, r3, #16
 800a064:	4619      	mov	r1, r3
 800a066:	4610      	mov	r0, r2
 800a068:	f002 fca3 	bl	800c9b2 <SDMMC_CmdSendCSD>
 800a06c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a076:	e05b      	b.n	800a130 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2100      	movs	r1, #0
 800a07e:	4618      	mov	r0, r3
 800a080:	f002 fa85 	bl	800c58e <SDMMC_GetResponse>
 800a084:	4602      	mov	r2, r0
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2104      	movs	r1, #4
 800a090:	4618      	mov	r0, r3
 800a092:	f002 fa7c 	bl	800c58e <SDMMC_GetResponse>
 800a096:	4602      	mov	r2, r0
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2108      	movs	r1, #8
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f002 fa73 	bl	800c58e <SDMMC_GetResponse>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	210c      	movs	r1, #12
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f002 fa6a 	bl	800c58e <SDMMC_GetResponse>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2104      	movs	r1, #4
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f002 fa61 	bl	800c58e <SDMMC_GetResponse>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	0d1a      	lsrs	r2, r3, #20
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a0d4:	f107 0310 	add.w	r3, r7, #16
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff fc34 	bl	8009948 <HAL_SD_GetCardCSD>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a0ea:	e021      	b.n	800a130 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6819      	ldr	r1, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0f4:	041b      	lsls	r3, r3, #16
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	461c      	mov	r4, r3
 800a0fa:	4615      	mov	r5, r2
 800a0fc:	4622      	mov	r2, r4
 800a0fe:	462b      	mov	r3, r5
 800a100:	4608      	mov	r0, r1
 800a102:	f002 fb4f 	bl	800c7a4 <SDMMC_CmdSelDesel>
 800a106:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <SD_InitCard+0x176>
  {
    return errorstate;
 800a10e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a110:	e00e      	b.n	800a130 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681d      	ldr	r5, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	466c      	mov	r4, sp
 800a11a:	f103 0210 	add.w	r2, r3, #16
 800a11e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a120:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a124:	3304      	adds	r3, #4
 800a126:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a128:	4628      	mov	r0, r5
 800a12a:	f002 f9a3 	bl	800c474 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3740      	adds	r7, #64	@ 0x40
 800a134:	46bd      	mov	sp, r7
 800a136:	bdb0      	pop	{r4, r5, r7, pc}

0800a138 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	2300      	movs	r3, #0
 800a14a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4618      	mov	r0, r3
 800a152:	f002 fb4a 	bl	800c7ea <SDMMC_CmdGoIdleState>
 800a156:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	e072      	b.n	800a248 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4618      	mov	r0, r3
 800a168:	f002 fb5d 	bl	800c826 <SDMMC_CmdOperCond>
 800a16c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00d      	beq.n	800a190 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4618      	mov	r0, r3
 800a180:	f002 fb33 	bl	800c7ea <SDMMC_CmdGoIdleState>
 800a184:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d004      	beq.n	800a196 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	e05b      	b.n	800a248 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d137      	bne.n	800a20e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f002 fb5d 	bl	800c864 <SDMMC_CmdAppCommand>
 800a1aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d02d      	beq.n	800a20e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a1b6:	e047      	b.n	800a248 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2100      	movs	r1, #0
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f002 fb50 	bl	800c864 <SDMMC_CmdAppCommand>
 800a1c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <SD_PowerON+0x98>
    {
      return errorstate;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	e03b      	b.n	800a248 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	491e      	ldr	r1, [pc, #120]	@ (800a250 <SD_PowerON+0x118>)
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f002 fb66 	bl	800c8a8 <SDMMC_CmdAppOperCommand>
 800a1dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1e4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a1e8:	e02e      	b.n	800a248 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f002 f9cc 	bl	800c58e <SDMMC_GetResponse>
 800a1f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	0fdb      	lsrs	r3, r3, #31
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d101      	bne.n	800a204 <SD_PowerON+0xcc>
 800a200:	2301      	movs	r3, #1
 800a202:	e000      	b.n	800a206 <SD_PowerON+0xce>
 800a204:	2300      	movs	r3, #0
 800a206:	613b      	str	r3, [r7, #16]

    count++;
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	3301      	adds	r3, #1
 800a20c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a214:	4293      	cmp	r3, r2
 800a216:	d802      	bhi.n	800a21e <SD_PowerON+0xe6>
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0cc      	beq.n	800a1b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a224:	4293      	cmp	r3, r2
 800a226:	d902      	bls.n	800a22e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a228:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a22c:	e00c      	b.n	800a248 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d003      	beq.n	800a240 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	645a      	str	r2, [r3, #68]	@ 0x44
 800a23e:	e002      	b.n	800a246 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3718      	adds	r7, #24
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	c1100000 	.word	0xc1100000

0800a254 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d102      	bne.n	800a26a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a264:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a268:	e018      	b.n	800a29c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a272:	041b      	lsls	r3, r3, #16
 800a274:	4619      	mov	r1, r3
 800a276:	4610      	mov	r0, r2
 800a278:	f002 fbdb 	bl	800ca32 <SDMMC_CmdSendStatus>
 800a27c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d001      	beq.n	800a288 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	e009      	b.n	800a29c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2100      	movs	r1, #0
 800a28e:	4618      	mov	r0, r3
 800a290:	f002 f97d 	bl	800c58e <SDMMC_GetResponse>
 800a294:	4602      	mov	r2, r0
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f002 f967 	bl	800c58e <SDMMC_GetResponse>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2ca:	d102      	bne.n	800a2d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a2cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a2d0:	e02f      	b.n	800a332 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a2d2:	f107 030c 	add.w	r3, r7, #12
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f879 	bl	800a3d0 <SD_FindSCR>
 800a2de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	e023      	b.n	800a332 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d01c      	beq.n	800a32e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2fc:	041b      	lsls	r3, r3, #16
 800a2fe:	4619      	mov	r1, r3
 800a300:	4610      	mov	r0, r2
 800a302:	f002 faaf 	bl	800c864 <SDMMC_CmdAppCommand>
 800a306:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	e00f      	b.n	800a332 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2102      	movs	r1, #2
 800a318:	4618      	mov	r0, r3
 800a31a:	f002 fae9 	bl	800c8f0 <SDMMC_CmdBusWidth>
 800a31e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	e003      	b.n	800a332 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a32a:	2300      	movs	r3, #0
 800a32c:	e001      	b.n	800a332 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a32e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a332:	4618      	mov	r0, r3
 800a334:	3718      	adds	r7, #24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b086      	sub	sp, #24
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	2300      	movs	r3, #0
 800a348:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2100      	movs	r1, #0
 800a350:	4618      	mov	r0, r3
 800a352:	f002 f91c 	bl	800c58e <SDMMC_GetResponse>
 800a356:	4603      	mov	r3, r0
 800a358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a35c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a360:	d102      	bne.n	800a368 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a362:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a366:	e02f      	b.n	800a3c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a368:	f107 030c 	add.w	r3, r7, #12
 800a36c:	4619      	mov	r1, r3
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f82e 	bl	800a3d0 <SD_FindSCR>
 800a374:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	e023      	b.n	800a3c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a386:	2b00      	cmp	r3, #0
 800a388:	d01c      	beq.n	800a3c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a392:	041b      	lsls	r3, r3, #16
 800a394:	4619      	mov	r1, r3
 800a396:	4610      	mov	r0, r2
 800a398:	f002 fa64 	bl	800c864 <SDMMC_CmdAppCommand>
 800a39c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	e00f      	b.n	800a3c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f002 fa9e 	bl	800c8f0 <SDMMC_CmdBusWidth>
 800a3b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	e003      	b.n	800a3c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	e001      	b.n	800a3c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a3c4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3718      	adds	r7, #24
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a3d0:	b590      	push	{r4, r7, lr}
 800a3d2:	b08f      	sub	sp, #60	@ 0x3c
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a3da:	f7f8 fd17 	bl	8002e0c <HAL_GetTick>
 800a3de:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	60bb      	str	r3, [r7, #8]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2108      	movs	r1, #8
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f002 f908 	bl	800c60c <SDMMC_CmdBlockLength>
 800a3fc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a406:	e0b2      	b.n	800a56e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a410:	041b      	lsls	r3, r3, #16
 800a412:	4619      	mov	r1, r3
 800a414:	4610      	mov	r0, r2
 800a416:	f002 fa25 	bl	800c864 <SDMMC_CmdAppCommand>
 800a41a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a424:	e0a3      	b.n	800a56e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a42a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a42c:	2308      	movs	r3, #8
 800a42e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a430:	2330      	movs	r3, #48	@ 0x30
 800a432:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a434:	2302      	movs	r3, #2
 800a436:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a438:	2300      	movs	r3, #0
 800a43a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a43c:	2301      	movs	r3, #1
 800a43e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f107 0210 	add.w	r2, r7, #16
 800a448:	4611      	mov	r1, r2
 800a44a:	4618      	mov	r0, r3
 800a44c:	f002 f8b2 	bl	800c5b4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4618      	mov	r0, r3
 800a456:	f002 fa6d 	bl	800c934 <SDMMC_CmdSendSCR>
 800a45a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d02a      	beq.n	800a4b8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a464:	e083      	b.n	800a56e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a46c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00f      	beq.n	800a494 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6819      	ldr	r1, [r3, #0]
 800a478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	f107 0208 	add.w	r2, r7, #8
 800a480:	18d4      	adds	r4, r2, r3
 800a482:	4608      	mov	r0, r1
 800a484:	f002 f822 	bl	800c4cc <SDMMC_ReadFIFO>
 800a488:	4603      	mov	r3, r0
 800a48a:	6023      	str	r3, [r4, #0]
      index++;
 800a48c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48e:	3301      	adds	r3, #1
 800a490:	637b      	str	r3, [r7, #52]	@ 0x34
 800a492:	e006      	b.n	800a4a2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a49a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d012      	beq.n	800a4c8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a4a2:	f7f8 fcb3 	bl	8002e0c <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4b0:	d102      	bne.n	800a4b8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a4b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4b6:	e05a      	b.n	800a56e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4be:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0cf      	beq.n	800a466 <SD_FindSCR+0x96>
 800a4c6:	e000      	b.n	800a4ca <SD_FindSCR+0xfa>
      break;
 800a4c8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4d0:	f003 0308 	and.w	r3, r3, #8
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d005      	beq.n	800a4e4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2208      	movs	r2, #8
 800a4de:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a4e0:	2308      	movs	r3, #8
 800a4e2:	e044      	b.n	800a56e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ea:	f003 0302 	and.w	r3, r3, #2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d005      	beq.n	800a4fe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e037      	b.n	800a56e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a504:	f003 0320 	and.w	r3, r3, #32
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d005      	beq.n	800a518 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2220      	movs	r2, #32
 800a512:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a514:	2320      	movs	r3, #32
 800a516:	e02a      	b.n	800a56e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a520:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	061a      	lsls	r2, r3, #24
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a52e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	0a1b      	lsrs	r3, r3, #8
 800a534:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a538:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	0e1b      	lsrs	r3, r3, #24
 800a53e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a542:	601a      	str	r2, [r3, #0]
    scr++;
 800a544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a546:	3304      	adds	r3, #4
 800a548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	061a      	lsls	r2, r3, #24
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	021b      	lsls	r3, r3, #8
 800a552:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a556:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	0a1b      	lsrs	r3, r3, #8
 800a55c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a560:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	0e1b      	lsrs	r3, r3, #24
 800a566:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	373c      	adds	r7, #60	@ 0x3c
 800a572:	46bd      	mov	sp, r7
 800a574:	bd90      	pop	{r4, r7, pc}

0800a576 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b082      	sub	sp, #8
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d101      	bne.n	800a58a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	e025      	b.n	800a5d6 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b00      	cmp	r3, #0
 800a594:	d106      	bne.n	800a5a4 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7f8 fa70 	bl	8002a84 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	f001 fe96 	bl	800c2e8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6818      	ldr	r0, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	6839      	ldr	r1, [r7, #0]
 800a5c8:	f001 feea 	bl	800c3a0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3708      	adds	r7, #8
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d101      	bne.n	800a5f2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e04c      	b.n	800a68c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d106      	bne.n	800a60c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7f7 fec2 	bl	8002390 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2202      	movs	r2, #2
 800a610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f022 0203 	bic.w	r2, r2, #3
 800a622:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	4b19      	ldr	r3, [pc, #100]	@ (800a694 <HAL_SPDIFRX_Init+0xb4>)
 800a630:	4013      	ands	r3, r2
 800a632:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a63c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a642:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a648:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a64e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a654:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a65a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a660:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800a666:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800a66c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	4313      	orrs	r3, r2
 800a672:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	fff88407 	.word	0xfff88407

0800a698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e09d      	b.n	800a7e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d108      	bne.n	800a6c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a6ba:	d009      	beq.n	800a6d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	61da      	str	r2, [r3, #28]
 800a6c2:	e005      	b.n	800a6d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d106      	bne.n	800a6f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7f7 feb4 	bl	8002458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a706:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a710:	d902      	bls.n	800a718 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a712:	2300      	movs	r3, #0
 800a714:	60fb      	str	r3, [r7, #12]
 800a716:	e002      	b.n	800a71e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a71c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a726:	d007      	beq.n	800a738 <HAL_SPI_Init+0xa0>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a730:	d002      	beq.n	800a738 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a748:	431a      	orrs	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	f003 0302 	and.w	r3, r3, #2
 800a752:	431a      	orrs	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	695b      	ldr	r3, [r3, #20]
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	431a      	orrs	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a766:	431a      	orrs	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a770:	431a      	orrs	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a77a:	ea42 0103 	orr.w	r1, r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a782:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	0c1b      	lsrs	r3, r3, #16
 800a794:	f003 0204 	and.w	r2, r3, #4
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a79c:	f003 0310 	and.w	r3, r3, #16
 800a7a0:	431a      	orrs	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7a6:	f003 0308 	and.w	r3, r3, #8
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a7b4:	ea42 0103 	orr.w	r1, r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	430a      	orrs	r2, r1
 800a7c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	69da      	ldr	r2, [r3, #28]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a7d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b082      	sub	sp, #8
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e049      	b.n	800a894 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d106      	bne.n	800a81a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7f7 fe81 	bl	800251c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2202      	movs	r2, #2
 800a81e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3304      	adds	r3, #4
 800a82a:	4619      	mov	r1, r3
 800a82c:	4610      	mov	r0, r2
 800a82e:	f000 fc11 	bl	800b054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d001      	beq.n	800a8b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e054      	b.n	800a95e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68da      	ldr	r2, [r3, #12]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f042 0201 	orr.w	r2, r2, #1
 800a8ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a26      	ldr	r2, [pc, #152]	@ (800a96c <HAL_TIM_Base_Start_IT+0xd0>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d022      	beq.n	800a91c <HAL_TIM_Base_Start_IT+0x80>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8de:	d01d      	beq.n	800a91c <HAL_TIM_Base_Start_IT+0x80>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a22      	ldr	r2, [pc, #136]	@ (800a970 <HAL_TIM_Base_Start_IT+0xd4>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d018      	beq.n	800a91c <HAL_TIM_Base_Start_IT+0x80>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a21      	ldr	r2, [pc, #132]	@ (800a974 <HAL_TIM_Base_Start_IT+0xd8>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d013      	beq.n	800a91c <HAL_TIM_Base_Start_IT+0x80>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a1f      	ldr	r2, [pc, #124]	@ (800a978 <HAL_TIM_Base_Start_IT+0xdc>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d00e      	beq.n	800a91c <HAL_TIM_Base_Start_IT+0x80>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a1e      	ldr	r2, [pc, #120]	@ (800a97c <HAL_TIM_Base_Start_IT+0xe0>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d009      	beq.n	800a91c <HAL_TIM_Base_Start_IT+0x80>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a1c      	ldr	r2, [pc, #112]	@ (800a980 <HAL_TIM_Base_Start_IT+0xe4>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d004      	beq.n	800a91c <HAL_TIM_Base_Start_IT+0x80>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a1b      	ldr	r2, [pc, #108]	@ (800a984 <HAL_TIM_Base_Start_IT+0xe8>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d115      	bne.n	800a948 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	689a      	ldr	r2, [r3, #8]
 800a922:	4b19      	ldr	r3, [pc, #100]	@ (800a988 <HAL_TIM_Base_Start_IT+0xec>)
 800a924:	4013      	ands	r3, r2
 800a926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2b06      	cmp	r3, #6
 800a92c:	d015      	beq.n	800a95a <HAL_TIM_Base_Start_IT+0xbe>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a934:	d011      	beq.n	800a95a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f042 0201 	orr.w	r2, r2, #1
 800a944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a946:	e008      	b.n	800a95a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f042 0201 	orr.w	r2, r2, #1
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	e000      	b.n	800a95c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	40010000 	.word	0x40010000
 800a970:	40000400 	.word	0x40000400
 800a974:	40000800 	.word	0x40000800
 800a978:	40000c00 	.word	0x40000c00
 800a97c:	40010400 	.word	0x40010400
 800a980:	40014000 	.word	0x40014000
 800a984:	40001800 	.word	0x40001800
 800a988:	00010007 	.word	0x00010007

0800a98c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e049      	b.n	800aa32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d106      	bne.n	800a9b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7f7 fe20 	bl	80025f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	3304      	adds	r3, #4
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	4610      	mov	r0, r2
 800a9cc:	f000 fb42 	bl	800b054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	f003 0302 	and.w	r3, r3, #2
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d020      	beq.n	800aa9e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f003 0302 	and.w	r3, r3, #2
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d01b      	beq.n	800aa9e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f06f 0202 	mvn.w	r2, #2
 800aa6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	699b      	ldr	r3, [r3, #24]
 800aa7c:	f003 0303 	and.w	r3, r3, #3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d003      	beq.n	800aa8c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fac7 	bl	800b018 <HAL_TIM_IC_CaptureCallback>
 800aa8a:	e005      	b.n	800aa98 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fab9 	bl	800b004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 faca 	bl	800b02c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	f003 0304 	and.w	r3, r3, #4
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d020      	beq.n	800aaea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f003 0304 	and.w	r3, r3, #4
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d01b      	beq.n	800aaea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f06f 0204 	mvn.w	r2, #4
 800aaba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2202      	movs	r2, #2
 800aac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d003      	beq.n	800aad8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 faa1 	bl	800b018 <HAL_TIM_IC_CaptureCallback>
 800aad6:	e005      	b.n	800aae4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 fa93 	bl	800b004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 faa4 	bl	800b02c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	f003 0308 	and.w	r3, r3, #8
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d020      	beq.n	800ab36 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f003 0308 	and.w	r3, r3, #8
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d01b      	beq.n	800ab36 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f06f 0208 	mvn.w	r2, #8
 800ab06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2204      	movs	r2, #4
 800ab0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	69db      	ldr	r3, [r3, #28]
 800ab14:	f003 0303 	and.w	r3, r3, #3
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d003      	beq.n	800ab24 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fa7b 	bl	800b018 <HAL_TIM_IC_CaptureCallback>
 800ab22:	e005      	b.n	800ab30 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fa6d 	bl	800b004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fa7e 	bl	800b02c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	f003 0310 	and.w	r3, r3, #16
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d020      	beq.n	800ab82 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f003 0310 	and.w	r3, r3, #16
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d01b      	beq.n	800ab82 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f06f 0210 	mvn.w	r2, #16
 800ab52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2208      	movs	r2, #8
 800ab58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	69db      	ldr	r3, [r3, #28]
 800ab60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d003      	beq.n	800ab70 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fa55 	bl	800b018 <HAL_TIM_IC_CaptureCallback>
 800ab6e:	e005      	b.n	800ab7c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fa47 	bl	800b004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fa58 	bl	800b02c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	f003 0301 	and.w	r3, r3, #1
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00c      	beq.n	800aba6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f003 0301 	and.w	r3, r3, #1
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d007      	beq.n	800aba6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f06f 0201 	mvn.w	r2, #1
 800ab9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7f6 ff2f 	bl	8001a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abac:	2b00      	cmp	r3, #0
 800abae:	d104      	bne.n	800abba <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00c      	beq.n	800abd4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d007      	beq.n	800abd4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800abcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fefa 	bl	800b9c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00c      	beq.n	800abf8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d007      	beq.n	800abf8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800abf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fef2 	bl	800b9dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00c      	beq.n	800ac1c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d007      	beq.n	800ac1c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ac14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fa12 	bl	800b040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	f003 0320 	and.w	r3, r3, #32
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00c      	beq.n	800ac40 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f003 0320 	and.w	r3, r3, #32
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d007      	beq.n	800ac40 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f06f 0220 	mvn.w	r2, #32
 800ac38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 feba 	bl	800b9b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d101      	bne.n	800ac66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac62:	2302      	movs	r3, #2
 800ac64:	e0ff      	b.n	800ae66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b14      	cmp	r3, #20
 800ac72:	f200 80f0 	bhi.w	800ae56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ac76:	a201      	add	r2, pc, #4	@ (adr r2, 800ac7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac7c:	0800acd1 	.word	0x0800acd1
 800ac80:	0800ae57 	.word	0x0800ae57
 800ac84:	0800ae57 	.word	0x0800ae57
 800ac88:	0800ae57 	.word	0x0800ae57
 800ac8c:	0800ad11 	.word	0x0800ad11
 800ac90:	0800ae57 	.word	0x0800ae57
 800ac94:	0800ae57 	.word	0x0800ae57
 800ac98:	0800ae57 	.word	0x0800ae57
 800ac9c:	0800ad53 	.word	0x0800ad53
 800aca0:	0800ae57 	.word	0x0800ae57
 800aca4:	0800ae57 	.word	0x0800ae57
 800aca8:	0800ae57 	.word	0x0800ae57
 800acac:	0800ad93 	.word	0x0800ad93
 800acb0:	0800ae57 	.word	0x0800ae57
 800acb4:	0800ae57 	.word	0x0800ae57
 800acb8:	0800ae57 	.word	0x0800ae57
 800acbc:	0800add5 	.word	0x0800add5
 800acc0:	0800ae57 	.word	0x0800ae57
 800acc4:	0800ae57 	.word	0x0800ae57
 800acc8:	0800ae57 	.word	0x0800ae57
 800accc:	0800ae15 	.word	0x0800ae15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68b9      	ldr	r1, [r7, #8]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 fa68 	bl	800b1ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	699a      	ldr	r2, [r3, #24]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f042 0208 	orr.w	r2, r2, #8
 800acea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	699a      	ldr	r2, [r3, #24]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f022 0204 	bic.w	r2, r2, #4
 800acfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6999      	ldr	r1, [r3, #24]
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	691a      	ldr	r2, [r3, #16]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	619a      	str	r2, [r3, #24]
      break;
 800ad0e:	e0a5      	b.n	800ae5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68b9      	ldr	r1, [r7, #8]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 faba 	bl	800b290 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	699a      	ldr	r2, [r3, #24]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	699a      	ldr	r2, [r3, #24]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6999      	ldr	r1, [r3, #24]
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	021a      	lsls	r2, r3, #8
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	430a      	orrs	r2, r1
 800ad4e:	619a      	str	r2, [r3, #24]
      break;
 800ad50:	e084      	b.n	800ae5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68b9      	ldr	r1, [r7, #8]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f000 fb11 	bl	800b380 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	69da      	ldr	r2, [r3, #28]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f042 0208 	orr.w	r2, r2, #8
 800ad6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	69da      	ldr	r2, [r3, #28]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f022 0204 	bic.w	r2, r2, #4
 800ad7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	69d9      	ldr	r1, [r3, #28]
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	691a      	ldr	r2, [r3, #16]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	430a      	orrs	r2, r1
 800ad8e:	61da      	str	r2, [r3, #28]
      break;
 800ad90:	e064      	b.n	800ae5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68b9      	ldr	r1, [r7, #8]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f000 fb67 	bl	800b46c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	69da      	ldr	r2, [r3, #28]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800adac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	69da      	ldr	r2, [r3, #28]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800adbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	69d9      	ldr	r1, [r3, #28]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	021a      	lsls	r2, r3, #8
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	61da      	str	r2, [r3, #28]
      break;
 800add2:	e043      	b.n	800ae5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68b9      	ldr	r1, [r7, #8]
 800adda:	4618      	mov	r0, r3
 800addc:	f000 fb9e 	bl	800b51c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f042 0208 	orr.w	r2, r2, #8
 800adee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f022 0204 	bic.w	r2, r2, #4
 800adfe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	691a      	ldr	r2, [r3, #16]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ae12:	e023      	b.n	800ae5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68b9      	ldr	r1, [r7, #8]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 fbd0 	bl	800b5c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	021a      	lsls	r2, r3, #8
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	430a      	orrs	r2, r1
 800ae52:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ae54:	e002      	b.n	800ae5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	75fb      	strb	r3, [r7, #23]
      break;
 800ae5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3718      	adds	r7, #24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop

0800ae70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d101      	bne.n	800ae8c <HAL_TIM_ConfigClockSource+0x1c>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	e0b4      	b.n	800aff6 <HAL_TIM_ConfigClockSource+0x186>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2202      	movs	r2, #2
 800ae98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	4b56      	ldr	r3, [pc, #344]	@ (800b000 <HAL_TIM_ConfigClockSource+0x190>)
 800aea8:	4013      	ands	r3, r2
 800aeaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aeb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aec4:	d03e      	beq.n	800af44 <HAL_TIM_ConfigClockSource+0xd4>
 800aec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aeca:	f200 8087 	bhi.w	800afdc <HAL_TIM_ConfigClockSource+0x16c>
 800aece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aed2:	f000 8086 	beq.w	800afe2 <HAL_TIM_ConfigClockSource+0x172>
 800aed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeda:	d87f      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x16c>
 800aedc:	2b70      	cmp	r3, #112	@ 0x70
 800aede:	d01a      	beq.n	800af16 <HAL_TIM_ConfigClockSource+0xa6>
 800aee0:	2b70      	cmp	r3, #112	@ 0x70
 800aee2:	d87b      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x16c>
 800aee4:	2b60      	cmp	r3, #96	@ 0x60
 800aee6:	d050      	beq.n	800af8a <HAL_TIM_ConfigClockSource+0x11a>
 800aee8:	2b60      	cmp	r3, #96	@ 0x60
 800aeea:	d877      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x16c>
 800aeec:	2b50      	cmp	r3, #80	@ 0x50
 800aeee:	d03c      	beq.n	800af6a <HAL_TIM_ConfigClockSource+0xfa>
 800aef0:	2b50      	cmp	r3, #80	@ 0x50
 800aef2:	d873      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x16c>
 800aef4:	2b40      	cmp	r3, #64	@ 0x40
 800aef6:	d058      	beq.n	800afaa <HAL_TIM_ConfigClockSource+0x13a>
 800aef8:	2b40      	cmp	r3, #64	@ 0x40
 800aefa:	d86f      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x16c>
 800aefc:	2b30      	cmp	r3, #48	@ 0x30
 800aefe:	d064      	beq.n	800afca <HAL_TIM_ConfigClockSource+0x15a>
 800af00:	2b30      	cmp	r3, #48	@ 0x30
 800af02:	d86b      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x16c>
 800af04:	2b20      	cmp	r3, #32
 800af06:	d060      	beq.n	800afca <HAL_TIM_ConfigClockSource+0x15a>
 800af08:	2b20      	cmp	r3, #32
 800af0a:	d867      	bhi.n	800afdc <HAL_TIM_ConfigClockSource+0x16c>
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d05c      	beq.n	800afca <HAL_TIM_ConfigClockSource+0x15a>
 800af10:	2b10      	cmp	r3, #16
 800af12:	d05a      	beq.n	800afca <HAL_TIM_ConfigClockSource+0x15a>
 800af14:	e062      	b.n	800afdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af26:	f000 fc19 	bl	800b75c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800af38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	609a      	str	r2, [r3, #8]
      break;
 800af42:	e04f      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af54:	f000 fc02 	bl	800b75c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	689a      	ldr	r2, [r3, #8]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af66:	609a      	str	r2, [r3, #8]
      break;
 800af68:	e03c      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af76:	461a      	mov	r2, r3
 800af78:	f000 fb76 	bl	800b668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2150      	movs	r1, #80	@ 0x50
 800af82:	4618      	mov	r0, r3
 800af84:	f000 fbcf 	bl	800b726 <TIM_ITRx_SetConfig>
      break;
 800af88:	e02c      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af96:	461a      	mov	r2, r3
 800af98:	f000 fb95 	bl	800b6c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2160      	movs	r1, #96	@ 0x60
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fbbf 	bl	800b726 <TIM_ITRx_SetConfig>
      break;
 800afa8:	e01c      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afb6:	461a      	mov	r2, r3
 800afb8:	f000 fb56 	bl	800b668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2140      	movs	r1, #64	@ 0x40
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 fbaf 	bl	800b726 <TIM_ITRx_SetConfig>
      break;
 800afc8:	e00c      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4619      	mov	r1, r3
 800afd4:	4610      	mov	r0, r2
 800afd6:	f000 fba6 	bl	800b726 <TIM_ITRx_SetConfig>
      break;
 800afda:	e003      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	73fb      	strb	r3, [r7, #15]
      break;
 800afe0:	e000      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800afe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	fffeff88 	.word	0xfffeff88

0800b004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a46      	ldr	r2, [pc, #280]	@ (800b180 <TIM_Base_SetConfig+0x12c>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d013      	beq.n	800b094 <TIM_Base_SetConfig+0x40>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b072:	d00f      	beq.n	800b094 <TIM_Base_SetConfig+0x40>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4a43      	ldr	r2, [pc, #268]	@ (800b184 <TIM_Base_SetConfig+0x130>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d00b      	beq.n	800b094 <TIM_Base_SetConfig+0x40>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a42      	ldr	r2, [pc, #264]	@ (800b188 <TIM_Base_SetConfig+0x134>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d007      	beq.n	800b094 <TIM_Base_SetConfig+0x40>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a41      	ldr	r2, [pc, #260]	@ (800b18c <TIM_Base_SetConfig+0x138>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d003      	beq.n	800b094 <TIM_Base_SetConfig+0x40>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a40      	ldr	r2, [pc, #256]	@ (800b190 <TIM_Base_SetConfig+0x13c>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d108      	bne.n	800b0a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b09a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a35      	ldr	r2, [pc, #212]	@ (800b180 <TIM_Base_SetConfig+0x12c>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d02b      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0b4:	d027      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a32      	ldr	r2, [pc, #200]	@ (800b184 <TIM_Base_SetConfig+0x130>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d023      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a31      	ldr	r2, [pc, #196]	@ (800b188 <TIM_Base_SetConfig+0x134>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d01f      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a30      	ldr	r2, [pc, #192]	@ (800b18c <TIM_Base_SetConfig+0x138>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d01b      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a2f      	ldr	r2, [pc, #188]	@ (800b190 <TIM_Base_SetConfig+0x13c>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d017      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a2e      	ldr	r2, [pc, #184]	@ (800b194 <TIM_Base_SetConfig+0x140>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d013      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a2d      	ldr	r2, [pc, #180]	@ (800b198 <TIM_Base_SetConfig+0x144>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d00f      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a2c      	ldr	r2, [pc, #176]	@ (800b19c <TIM_Base_SetConfig+0x148>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d00b      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a2b      	ldr	r2, [pc, #172]	@ (800b1a0 <TIM_Base_SetConfig+0x14c>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d007      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a2a      	ldr	r2, [pc, #168]	@ (800b1a4 <TIM_Base_SetConfig+0x150>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d003      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a29      	ldr	r2, [pc, #164]	@ (800b1a8 <TIM_Base_SetConfig+0x154>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d108      	bne.n	800b118 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b10c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	4313      	orrs	r3, r2
 800b116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	695b      	ldr	r3, [r3, #20]
 800b122:	4313      	orrs	r3, r2
 800b124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	689a      	ldr	r2, [r3, #8]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4a10      	ldr	r2, [pc, #64]	@ (800b180 <TIM_Base_SetConfig+0x12c>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d003      	beq.n	800b14c <TIM_Base_SetConfig+0xf8>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a12      	ldr	r2, [pc, #72]	@ (800b190 <TIM_Base_SetConfig+0x13c>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d103      	bne.n	800b154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	691a      	ldr	r2, [r3, #16]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b01      	cmp	r3, #1
 800b164:	d105      	bne.n	800b172 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	f023 0201 	bic.w	r2, r3, #1
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	611a      	str	r2, [r3, #16]
  }
}
 800b172:	bf00      	nop
 800b174:	3714      	adds	r7, #20
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	40010000 	.word	0x40010000
 800b184:	40000400 	.word	0x40000400
 800b188:	40000800 	.word	0x40000800
 800b18c:	40000c00 	.word	0x40000c00
 800b190:	40010400 	.word	0x40010400
 800b194:	40014000 	.word	0x40014000
 800b198:	40014400 	.word	0x40014400
 800b19c:	40014800 	.word	0x40014800
 800b1a0:	40001800 	.word	0x40001800
 800b1a4:	40001c00 	.word	0x40001c00
 800b1a8:	40002000 	.word	0x40002000

0800b1ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b087      	sub	sp, #28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a1b      	ldr	r3, [r3, #32]
 800b1c0:	f023 0201 	bic.w	r2, r3, #1
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	4b2b      	ldr	r3, [pc, #172]	@ (800b284 <TIM_OC1_SetConfig+0xd8>)
 800b1d8:	4013      	ands	r3, r2
 800b1da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f023 0303 	bic.w	r3, r3, #3
 800b1e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	f023 0302 	bic.w	r3, r3, #2
 800b1f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a21      	ldr	r2, [pc, #132]	@ (800b288 <TIM_OC1_SetConfig+0xdc>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d003      	beq.n	800b210 <TIM_OC1_SetConfig+0x64>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a20      	ldr	r2, [pc, #128]	@ (800b28c <TIM_OC1_SetConfig+0xe0>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d10c      	bne.n	800b22a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	f023 0308 	bic.w	r3, r3, #8
 800b216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	4313      	orrs	r3, r2
 800b220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f023 0304 	bic.w	r3, r3, #4
 800b228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a16      	ldr	r2, [pc, #88]	@ (800b288 <TIM_OC1_SetConfig+0xdc>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d003      	beq.n	800b23a <TIM_OC1_SetConfig+0x8e>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a15      	ldr	r2, [pc, #84]	@ (800b28c <TIM_OC1_SetConfig+0xe0>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d111      	bne.n	800b25e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	693a      	ldr	r2, [r7, #16]
 800b250:	4313      	orrs	r3, r2
 800b252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	699b      	ldr	r3, [r3, #24]
 800b258:	693a      	ldr	r2, [r7, #16]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	697a      	ldr	r2, [r7, #20]
 800b276:	621a      	str	r2, [r3, #32]
}
 800b278:	bf00      	nop
 800b27a:	371c      	adds	r7, #28
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr
 800b284:	fffeff8f 	.word	0xfffeff8f
 800b288:	40010000 	.word	0x40010000
 800b28c:	40010400 	.word	0x40010400

0800b290 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b290:	b480      	push	{r7}
 800b292:	b087      	sub	sp, #28
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a1b      	ldr	r3, [r3, #32]
 800b2a4:	f023 0210 	bic.w	r2, r3, #16
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	4b2e      	ldr	r3, [pc, #184]	@ (800b374 <TIM_OC2_SetConfig+0xe4>)
 800b2bc:	4013      	ands	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	021b      	lsls	r3, r3, #8
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	f023 0320 	bic.w	r3, r3, #32
 800b2da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	011b      	lsls	r3, r3, #4
 800b2e2:	697a      	ldr	r2, [r7, #20]
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a23      	ldr	r2, [pc, #140]	@ (800b378 <TIM_OC2_SetConfig+0xe8>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d003      	beq.n	800b2f8 <TIM_OC2_SetConfig+0x68>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a22      	ldr	r2, [pc, #136]	@ (800b37c <TIM_OC2_SetConfig+0xec>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d10d      	bne.n	800b314 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	011b      	lsls	r3, r3, #4
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	4313      	orrs	r3, r2
 800b30a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b312:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a18      	ldr	r2, [pc, #96]	@ (800b378 <TIM_OC2_SetConfig+0xe8>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d003      	beq.n	800b324 <TIM_OC2_SetConfig+0x94>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a17      	ldr	r2, [pc, #92]	@ (800b37c <TIM_OC2_SetConfig+0xec>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d113      	bne.n	800b34c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b32a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b332:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	695b      	ldr	r3, [r3, #20]
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	699b      	ldr	r3, [r3, #24]
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	693a      	ldr	r2, [r7, #16]
 800b348:	4313      	orrs	r3, r2
 800b34a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	685a      	ldr	r2, [r3, #4]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	697a      	ldr	r2, [r7, #20]
 800b364:	621a      	str	r2, [r3, #32]
}
 800b366:	bf00      	nop
 800b368:	371c      	adds	r7, #28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	feff8fff 	.word	0xfeff8fff
 800b378:	40010000 	.word	0x40010000
 800b37c:	40010400 	.word	0x40010400

0800b380 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b380:	b480      	push	{r7}
 800b382:	b087      	sub	sp, #28
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a1b      	ldr	r3, [r3, #32]
 800b38e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a1b      	ldr	r3, [r3, #32]
 800b394:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	69db      	ldr	r3, [r3, #28]
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	4b2d      	ldr	r3, [pc, #180]	@ (800b460 <TIM_OC3_SetConfig+0xe0>)
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f023 0303 	bic.w	r3, r3, #3
 800b3b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	021b      	lsls	r3, r3, #8
 800b3d0:	697a      	ldr	r2, [r7, #20]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a22      	ldr	r2, [pc, #136]	@ (800b464 <TIM_OC3_SetConfig+0xe4>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d003      	beq.n	800b3e6 <TIM_OC3_SetConfig+0x66>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4a21      	ldr	r2, [pc, #132]	@ (800b468 <TIM_OC3_SetConfig+0xe8>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d10d      	bne.n	800b402 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b3ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	021b      	lsls	r3, r3, #8
 800b3f4:	697a      	ldr	r2, [r7, #20]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a17      	ldr	r2, [pc, #92]	@ (800b464 <TIM_OC3_SetConfig+0xe4>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d003      	beq.n	800b412 <TIM_OC3_SetConfig+0x92>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a16      	ldr	r2, [pc, #88]	@ (800b468 <TIM_OC3_SetConfig+0xe8>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d113      	bne.n	800b43a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	011b      	lsls	r3, r3, #4
 800b428:	693a      	ldr	r2, [r7, #16]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	011b      	lsls	r3, r3, #4
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	4313      	orrs	r3, r2
 800b438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	685a      	ldr	r2, [r3, #4]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	697a      	ldr	r2, [r7, #20]
 800b452:	621a      	str	r2, [r3, #32]
}
 800b454:	bf00      	nop
 800b456:	371c      	adds	r7, #28
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr
 800b460:	fffeff8f 	.word	0xfffeff8f
 800b464:	40010000 	.word	0x40010000
 800b468:	40010400 	.word	0x40010400

0800b46c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b087      	sub	sp, #28
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a1b      	ldr	r3, [r3, #32]
 800b47a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a1b      	ldr	r3, [r3, #32]
 800b480:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	69db      	ldr	r3, [r3, #28]
 800b492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	4b1e      	ldr	r3, [pc, #120]	@ (800b510 <TIM_OC4_SetConfig+0xa4>)
 800b498:	4013      	ands	r3, r2
 800b49a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	021b      	lsls	r3, r3, #8
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b4b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	031b      	lsls	r3, r3, #12
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a13      	ldr	r2, [pc, #76]	@ (800b514 <TIM_OC4_SetConfig+0xa8>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d003      	beq.n	800b4d4 <TIM_OC4_SetConfig+0x68>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a12      	ldr	r2, [pc, #72]	@ (800b518 <TIM_OC4_SetConfig+0xac>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d109      	bne.n	800b4e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b4da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	019b      	lsls	r3, r3, #6
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	685a      	ldr	r2, [r3, #4]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	621a      	str	r2, [r3, #32]
}
 800b502:	bf00      	nop
 800b504:	371c      	adds	r7, #28
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	feff8fff 	.word	0xfeff8fff
 800b514:	40010000 	.word	0x40010000
 800b518:	40010400 	.word	0x40010400

0800b51c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b087      	sub	sp, #28
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a1b      	ldr	r3, [r3, #32]
 800b52a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a1b      	ldr	r3, [r3, #32]
 800b530:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	4b1b      	ldr	r3, [pc, #108]	@ (800b5b4 <TIM_OC5_SetConfig+0x98>)
 800b548:	4013      	ands	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	4313      	orrs	r3, r2
 800b554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b55c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	041b      	lsls	r3, r3, #16
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	4313      	orrs	r3, r2
 800b568:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4a12      	ldr	r2, [pc, #72]	@ (800b5b8 <TIM_OC5_SetConfig+0x9c>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d003      	beq.n	800b57a <TIM_OC5_SetConfig+0x5e>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	4a11      	ldr	r2, [pc, #68]	@ (800b5bc <TIM_OC5_SetConfig+0xa0>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d109      	bne.n	800b58e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b580:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	695b      	ldr	r3, [r3, #20]
 800b586:	021b      	lsls	r3, r3, #8
 800b588:	697a      	ldr	r2, [r7, #20]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	697a      	ldr	r2, [r7, #20]
 800b592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	685a      	ldr	r2, [r3, #4]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	693a      	ldr	r2, [r7, #16]
 800b5a6:	621a      	str	r2, [r3, #32]
}
 800b5a8:	bf00      	nop
 800b5aa:	371c      	adds	r7, #28
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	fffeff8f 	.word	0xfffeff8f
 800b5b8:	40010000 	.word	0x40010000
 800b5bc:	40010400 	.word	0x40010400

0800b5c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b087      	sub	sp, #28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a1b      	ldr	r3, [r3, #32]
 800b5ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a1b      	ldr	r3, [r3, #32]
 800b5d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	4b1c      	ldr	r3, [pc, #112]	@ (800b65c <TIM_OC6_SetConfig+0x9c>)
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	021b      	lsls	r3, r3, #8
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	051b      	lsls	r3, r3, #20
 800b60a:	693a      	ldr	r2, [r7, #16]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a13      	ldr	r2, [pc, #76]	@ (800b660 <TIM_OC6_SetConfig+0xa0>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d003      	beq.n	800b620 <TIM_OC6_SetConfig+0x60>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a12      	ldr	r2, [pc, #72]	@ (800b664 <TIM_OC6_SetConfig+0xa4>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d109      	bne.n	800b634 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b626:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	029b      	lsls	r3, r3, #10
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	4313      	orrs	r3, r2
 800b632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	685a      	ldr	r2, [r3, #4]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	621a      	str	r2, [r3, #32]
}
 800b64e:	bf00      	nop
 800b650:	371c      	adds	r7, #28
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	feff8fff 	.word	0xfeff8fff
 800b660:	40010000 	.word	0x40010000
 800b664:	40010400 	.word	0x40010400

0800b668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b668:	b480      	push	{r7}
 800b66a:	b087      	sub	sp, #28
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6a1b      	ldr	r3, [r3, #32]
 800b678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6a1b      	ldr	r3, [r3, #32]
 800b67e:	f023 0201 	bic.w	r2, r3, #1
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	011b      	lsls	r3, r3, #4
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f023 030a 	bic.w	r3, r3, #10
 800b6a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	693a      	ldr	r2, [r7, #16]
 800b6b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	697a      	ldr	r2, [r7, #20]
 800b6b8:	621a      	str	r2, [r3, #32]
}
 800b6ba:	bf00      	nop
 800b6bc:	371c      	adds	r7, #28
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr

0800b6c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b087      	sub	sp, #28
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	60f8      	str	r0, [r7, #12]
 800b6ce:	60b9      	str	r1, [r7, #8]
 800b6d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6a1b      	ldr	r3, [r3, #32]
 800b6d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6a1b      	ldr	r3, [r3, #32]
 800b6dc:	f023 0210 	bic.w	r2, r3, #16
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	699b      	ldr	r3, [r3, #24]
 800b6e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b6f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	031b      	lsls	r3, r3, #12
 800b6f6:	693a      	ldr	r2, [r7, #16]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b702:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	011b      	lsls	r3, r3, #4
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	621a      	str	r2, [r3, #32]
}
 800b71a:	bf00      	nop
 800b71c:	371c      	adds	r7, #28
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b726:	b480      	push	{r7}
 800b728:	b085      	sub	sp, #20
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b73c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	4313      	orrs	r3, r2
 800b744:	f043 0307 	orr.w	r3, r3, #7
 800b748:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	609a      	str	r2, [r3, #8]
}
 800b750:	bf00      	nop
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b087      	sub	sp, #28
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
 800b768:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b776:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	021a      	lsls	r2, r3, #8
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	431a      	orrs	r2, r3
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	4313      	orrs	r3, r2
 800b784:	697a      	ldr	r2, [r7, #20]
 800b786:	4313      	orrs	r3, r2
 800b788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	609a      	str	r2, [r3, #8]
}
 800b790:	bf00      	nop
 800b792:	371c      	adds	r7, #28
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d101      	bne.n	800b7b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	e06d      	b.n	800b890 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2202      	movs	r2, #2
 800b7c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a30      	ldr	r2, [pc, #192]	@ (800b89c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d004      	beq.n	800b7e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a2f      	ldr	r2, [pc, #188]	@ (800b8a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d108      	bne.n	800b7fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b7ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b800:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	4313      	orrs	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a20      	ldr	r2, [pc, #128]	@ (800b89c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d022      	beq.n	800b864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b826:	d01d      	beq.n	800b864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a1d      	ldr	r2, [pc, #116]	@ (800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d018      	beq.n	800b864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a1c      	ldr	r2, [pc, #112]	@ (800b8a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d013      	beq.n	800b864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a1a      	ldr	r2, [pc, #104]	@ (800b8ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d00e      	beq.n	800b864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a15      	ldr	r2, [pc, #84]	@ (800b8a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d009      	beq.n	800b864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a16      	ldr	r2, [pc, #88]	@ (800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d004      	beq.n	800b864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a15      	ldr	r2, [pc, #84]	@ (800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d10c      	bne.n	800b87e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b86a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	4313      	orrs	r3, r2
 800b874:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2201      	movs	r2, #1
 800b882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	40010000 	.word	0x40010000
 800b8a0:	40010400 	.word	0x40010400
 800b8a4:	40000400 	.word	0x40000400
 800b8a8:	40000800 	.word	0x40000800
 800b8ac:	40000c00 	.word	0x40000c00
 800b8b0:	40014000 	.word	0x40014000
 800b8b4:	40001800 	.word	0x40001800

0800b8b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d101      	bne.n	800b8d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b8d0:	2302      	movs	r3, #2
 800b8d2:	e065      	b.n	800b9a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	4313      	orrs	r3, r2
 800b904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4313      	orrs	r3, r2
 800b912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	4313      	orrs	r3, r2
 800b920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b93a:	4313      	orrs	r3, r2
 800b93c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	699b      	ldr	r3, [r3, #24]
 800b948:	041b      	lsls	r3, r3, #16
 800b94a:	4313      	orrs	r3, r2
 800b94c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a16      	ldr	r2, [pc, #88]	@ (800b9ac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d004      	beq.n	800b962 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a14      	ldr	r2, [pc, #80]	@ (800b9b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d115      	bne.n	800b98e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b96c:	051b      	lsls	r3, r3, #20
 800b96e:	4313      	orrs	r3, r2
 800b970:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	69db      	ldr	r3, [r3, #28]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3714      	adds	r7, #20
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr
 800b9ac:	40010000 	.word	0x40010000
 800b9b0:	40010400 	.word	0x40010400

0800b9b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d101      	bne.n	800ba02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e040      	b.n	800ba84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d106      	bne.n	800ba18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7f6 fede 	bl	80027d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2224      	movs	r2, #36	@ 0x24
 800ba1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f022 0201 	bic.w	r2, r2, #1
 800ba2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fa8c 	bl	800bf54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f825 	bl	800ba8c <UART_SetConfig>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d101      	bne.n	800ba4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e01b      	b.n	800ba84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	685a      	ldr	r2, [r3, #4]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ba5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	689a      	ldr	r2, [r3, #8]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ba6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f042 0201 	orr.w	r2, r2, #1
 800ba7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fb0b 	bl	800c098 <UART_CheckIdleState>
 800ba82:	4603      	mov	r3, r0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	689a      	ldr	r2, [r3, #8]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	691b      	ldr	r3, [r3, #16]
 800baa0:	431a      	orrs	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	695b      	ldr	r3, [r3, #20]
 800baa6:	431a      	orrs	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	69db      	ldr	r3, [r3, #28]
 800baac:	4313      	orrs	r3, r2
 800baae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	4ba6      	ldr	r3, [pc, #664]	@ (800bd50 <UART_SetConfig+0x2c4>)
 800bab8:	4013      	ands	r3, r2
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	6812      	ldr	r2, [r2, #0]
 800babe:	6979      	ldr	r1, [r7, #20]
 800bac0:	430b      	orrs	r3, r1
 800bac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	68da      	ldr	r2, [r3, #12]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	430a      	orrs	r2, r1
 800bad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	699b      	ldr	r3, [r3, #24]
 800bade:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a1b      	ldr	r3, [r3, #32]
 800bae4:	697a      	ldr	r2, [r7, #20]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	430a      	orrs	r2, r1
 800bafc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a94      	ldr	r2, [pc, #592]	@ (800bd54 <UART_SetConfig+0x2c8>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d120      	bne.n	800bb4a <UART_SetConfig+0xbe>
 800bb08:	4b93      	ldr	r3, [pc, #588]	@ (800bd58 <UART_SetConfig+0x2cc>)
 800bb0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb0e:	f003 0303 	and.w	r3, r3, #3
 800bb12:	2b03      	cmp	r3, #3
 800bb14:	d816      	bhi.n	800bb44 <UART_SetConfig+0xb8>
 800bb16:	a201      	add	r2, pc, #4	@ (adr r2, 800bb1c <UART_SetConfig+0x90>)
 800bb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb1c:	0800bb2d 	.word	0x0800bb2d
 800bb20:	0800bb39 	.word	0x0800bb39
 800bb24:	0800bb33 	.word	0x0800bb33
 800bb28:	0800bb3f 	.word	0x0800bb3f
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	77fb      	strb	r3, [r7, #31]
 800bb30:	e150      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bb32:	2302      	movs	r3, #2
 800bb34:	77fb      	strb	r3, [r7, #31]
 800bb36:	e14d      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bb38:	2304      	movs	r3, #4
 800bb3a:	77fb      	strb	r3, [r7, #31]
 800bb3c:	e14a      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bb3e:	2308      	movs	r3, #8
 800bb40:	77fb      	strb	r3, [r7, #31]
 800bb42:	e147      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bb44:	2310      	movs	r3, #16
 800bb46:	77fb      	strb	r3, [r7, #31]
 800bb48:	e144      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4a83      	ldr	r2, [pc, #524]	@ (800bd5c <UART_SetConfig+0x2d0>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d132      	bne.n	800bbba <UART_SetConfig+0x12e>
 800bb54:	4b80      	ldr	r3, [pc, #512]	@ (800bd58 <UART_SetConfig+0x2cc>)
 800bb56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb5a:	f003 030c 	and.w	r3, r3, #12
 800bb5e:	2b0c      	cmp	r3, #12
 800bb60:	d828      	bhi.n	800bbb4 <UART_SetConfig+0x128>
 800bb62:	a201      	add	r2, pc, #4	@ (adr r2, 800bb68 <UART_SetConfig+0xdc>)
 800bb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb68:	0800bb9d 	.word	0x0800bb9d
 800bb6c:	0800bbb5 	.word	0x0800bbb5
 800bb70:	0800bbb5 	.word	0x0800bbb5
 800bb74:	0800bbb5 	.word	0x0800bbb5
 800bb78:	0800bba9 	.word	0x0800bba9
 800bb7c:	0800bbb5 	.word	0x0800bbb5
 800bb80:	0800bbb5 	.word	0x0800bbb5
 800bb84:	0800bbb5 	.word	0x0800bbb5
 800bb88:	0800bba3 	.word	0x0800bba3
 800bb8c:	0800bbb5 	.word	0x0800bbb5
 800bb90:	0800bbb5 	.word	0x0800bbb5
 800bb94:	0800bbb5 	.word	0x0800bbb5
 800bb98:	0800bbaf 	.word	0x0800bbaf
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	77fb      	strb	r3, [r7, #31]
 800bba0:	e118      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bba2:	2302      	movs	r3, #2
 800bba4:	77fb      	strb	r3, [r7, #31]
 800bba6:	e115      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bba8:	2304      	movs	r3, #4
 800bbaa:	77fb      	strb	r3, [r7, #31]
 800bbac:	e112      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bbae:	2308      	movs	r3, #8
 800bbb0:	77fb      	strb	r3, [r7, #31]
 800bbb2:	e10f      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bbb4:	2310      	movs	r3, #16
 800bbb6:	77fb      	strb	r3, [r7, #31]
 800bbb8:	e10c      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a68      	ldr	r2, [pc, #416]	@ (800bd60 <UART_SetConfig+0x2d4>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d120      	bne.n	800bc06 <UART_SetConfig+0x17a>
 800bbc4:	4b64      	ldr	r3, [pc, #400]	@ (800bd58 <UART_SetConfig+0x2cc>)
 800bbc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bbce:	2b30      	cmp	r3, #48	@ 0x30
 800bbd0:	d013      	beq.n	800bbfa <UART_SetConfig+0x16e>
 800bbd2:	2b30      	cmp	r3, #48	@ 0x30
 800bbd4:	d814      	bhi.n	800bc00 <UART_SetConfig+0x174>
 800bbd6:	2b20      	cmp	r3, #32
 800bbd8:	d009      	beq.n	800bbee <UART_SetConfig+0x162>
 800bbda:	2b20      	cmp	r3, #32
 800bbdc:	d810      	bhi.n	800bc00 <UART_SetConfig+0x174>
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d002      	beq.n	800bbe8 <UART_SetConfig+0x15c>
 800bbe2:	2b10      	cmp	r3, #16
 800bbe4:	d006      	beq.n	800bbf4 <UART_SetConfig+0x168>
 800bbe6:	e00b      	b.n	800bc00 <UART_SetConfig+0x174>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	77fb      	strb	r3, [r7, #31]
 800bbec:	e0f2      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bbee:	2302      	movs	r3, #2
 800bbf0:	77fb      	strb	r3, [r7, #31]
 800bbf2:	e0ef      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bbf4:	2304      	movs	r3, #4
 800bbf6:	77fb      	strb	r3, [r7, #31]
 800bbf8:	e0ec      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bbfa:	2308      	movs	r3, #8
 800bbfc:	77fb      	strb	r3, [r7, #31]
 800bbfe:	e0e9      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bc00:	2310      	movs	r3, #16
 800bc02:	77fb      	strb	r3, [r7, #31]
 800bc04:	e0e6      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a56      	ldr	r2, [pc, #344]	@ (800bd64 <UART_SetConfig+0x2d8>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d120      	bne.n	800bc52 <UART_SetConfig+0x1c6>
 800bc10:	4b51      	ldr	r3, [pc, #324]	@ (800bd58 <UART_SetConfig+0x2cc>)
 800bc12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bc1a:	2bc0      	cmp	r3, #192	@ 0xc0
 800bc1c:	d013      	beq.n	800bc46 <UART_SetConfig+0x1ba>
 800bc1e:	2bc0      	cmp	r3, #192	@ 0xc0
 800bc20:	d814      	bhi.n	800bc4c <UART_SetConfig+0x1c0>
 800bc22:	2b80      	cmp	r3, #128	@ 0x80
 800bc24:	d009      	beq.n	800bc3a <UART_SetConfig+0x1ae>
 800bc26:	2b80      	cmp	r3, #128	@ 0x80
 800bc28:	d810      	bhi.n	800bc4c <UART_SetConfig+0x1c0>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d002      	beq.n	800bc34 <UART_SetConfig+0x1a8>
 800bc2e:	2b40      	cmp	r3, #64	@ 0x40
 800bc30:	d006      	beq.n	800bc40 <UART_SetConfig+0x1b4>
 800bc32:	e00b      	b.n	800bc4c <UART_SetConfig+0x1c0>
 800bc34:	2300      	movs	r3, #0
 800bc36:	77fb      	strb	r3, [r7, #31]
 800bc38:	e0cc      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bc3a:	2302      	movs	r3, #2
 800bc3c:	77fb      	strb	r3, [r7, #31]
 800bc3e:	e0c9      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bc40:	2304      	movs	r3, #4
 800bc42:	77fb      	strb	r3, [r7, #31]
 800bc44:	e0c6      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bc46:	2308      	movs	r3, #8
 800bc48:	77fb      	strb	r3, [r7, #31]
 800bc4a:	e0c3      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bc4c:	2310      	movs	r3, #16
 800bc4e:	77fb      	strb	r3, [r7, #31]
 800bc50:	e0c0      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a44      	ldr	r2, [pc, #272]	@ (800bd68 <UART_SetConfig+0x2dc>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d125      	bne.n	800bca8 <UART_SetConfig+0x21c>
 800bc5c:	4b3e      	ldr	r3, [pc, #248]	@ (800bd58 <UART_SetConfig+0x2cc>)
 800bc5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc6a:	d017      	beq.n	800bc9c <UART_SetConfig+0x210>
 800bc6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc70:	d817      	bhi.n	800bca2 <UART_SetConfig+0x216>
 800bc72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc76:	d00b      	beq.n	800bc90 <UART_SetConfig+0x204>
 800bc78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc7c:	d811      	bhi.n	800bca2 <UART_SetConfig+0x216>
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d003      	beq.n	800bc8a <UART_SetConfig+0x1fe>
 800bc82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc86:	d006      	beq.n	800bc96 <UART_SetConfig+0x20a>
 800bc88:	e00b      	b.n	800bca2 <UART_SetConfig+0x216>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	77fb      	strb	r3, [r7, #31]
 800bc8e:	e0a1      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bc90:	2302      	movs	r3, #2
 800bc92:	77fb      	strb	r3, [r7, #31]
 800bc94:	e09e      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bc96:	2304      	movs	r3, #4
 800bc98:	77fb      	strb	r3, [r7, #31]
 800bc9a:	e09b      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bc9c:	2308      	movs	r3, #8
 800bc9e:	77fb      	strb	r3, [r7, #31]
 800bca0:	e098      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bca2:	2310      	movs	r3, #16
 800bca4:	77fb      	strb	r3, [r7, #31]
 800bca6:	e095      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a2f      	ldr	r2, [pc, #188]	@ (800bd6c <UART_SetConfig+0x2e0>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d125      	bne.n	800bcfe <UART_SetConfig+0x272>
 800bcb2:	4b29      	ldr	r3, [pc, #164]	@ (800bd58 <UART_SetConfig+0x2cc>)
 800bcb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bcbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bcc0:	d017      	beq.n	800bcf2 <UART_SetConfig+0x266>
 800bcc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bcc6:	d817      	bhi.n	800bcf8 <UART_SetConfig+0x26c>
 800bcc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bccc:	d00b      	beq.n	800bce6 <UART_SetConfig+0x25a>
 800bcce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bcd2:	d811      	bhi.n	800bcf8 <UART_SetConfig+0x26c>
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d003      	beq.n	800bce0 <UART_SetConfig+0x254>
 800bcd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcdc:	d006      	beq.n	800bcec <UART_SetConfig+0x260>
 800bcde:	e00b      	b.n	800bcf8 <UART_SetConfig+0x26c>
 800bce0:	2301      	movs	r3, #1
 800bce2:	77fb      	strb	r3, [r7, #31]
 800bce4:	e076      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bce6:	2302      	movs	r3, #2
 800bce8:	77fb      	strb	r3, [r7, #31]
 800bcea:	e073      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bcec:	2304      	movs	r3, #4
 800bcee:	77fb      	strb	r3, [r7, #31]
 800bcf0:	e070      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bcf2:	2308      	movs	r3, #8
 800bcf4:	77fb      	strb	r3, [r7, #31]
 800bcf6:	e06d      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bcf8:	2310      	movs	r3, #16
 800bcfa:	77fb      	strb	r3, [r7, #31]
 800bcfc:	e06a      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a1b      	ldr	r2, [pc, #108]	@ (800bd70 <UART_SetConfig+0x2e4>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d138      	bne.n	800bd7a <UART_SetConfig+0x2ee>
 800bd08:	4b13      	ldr	r3, [pc, #76]	@ (800bd58 <UART_SetConfig+0x2cc>)
 800bd0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800bd12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd16:	d017      	beq.n	800bd48 <UART_SetConfig+0x2bc>
 800bd18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd1c:	d82a      	bhi.n	800bd74 <UART_SetConfig+0x2e8>
 800bd1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd22:	d00b      	beq.n	800bd3c <UART_SetConfig+0x2b0>
 800bd24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd28:	d824      	bhi.n	800bd74 <UART_SetConfig+0x2e8>
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d003      	beq.n	800bd36 <UART_SetConfig+0x2aa>
 800bd2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd32:	d006      	beq.n	800bd42 <UART_SetConfig+0x2b6>
 800bd34:	e01e      	b.n	800bd74 <UART_SetConfig+0x2e8>
 800bd36:	2300      	movs	r3, #0
 800bd38:	77fb      	strb	r3, [r7, #31]
 800bd3a:	e04b      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	77fb      	strb	r3, [r7, #31]
 800bd40:	e048      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bd42:	2304      	movs	r3, #4
 800bd44:	77fb      	strb	r3, [r7, #31]
 800bd46:	e045      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bd48:	2308      	movs	r3, #8
 800bd4a:	77fb      	strb	r3, [r7, #31]
 800bd4c:	e042      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bd4e:	bf00      	nop
 800bd50:	efff69f3 	.word	0xefff69f3
 800bd54:	40011000 	.word	0x40011000
 800bd58:	40023800 	.word	0x40023800
 800bd5c:	40004400 	.word	0x40004400
 800bd60:	40004800 	.word	0x40004800
 800bd64:	40004c00 	.word	0x40004c00
 800bd68:	40005000 	.word	0x40005000
 800bd6c:	40011400 	.word	0x40011400
 800bd70:	40007800 	.word	0x40007800
 800bd74:	2310      	movs	r3, #16
 800bd76:	77fb      	strb	r3, [r7, #31]
 800bd78:	e02c      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a72      	ldr	r2, [pc, #456]	@ (800bf48 <UART_SetConfig+0x4bc>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d125      	bne.n	800bdd0 <UART_SetConfig+0x344>
 800bd84:	4b71      	ldr	r3, [pc, #452]	@ (800bf4c <UART_SetConfig+0x4c0>)
 800bd86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bd8e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bd92:	d017      	beq.n	800bdc4 <UART_SetConfig+0x338>
 800bd94:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bd98:	d817      	bhi.n	800bdca <UART_SetConfig+0x33e>
 800bd9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd9e:	d00b      	beq.n	800bdb8 <UART_SetConfig+0x32c>
 800bda0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bda4:	d811      	bhi.n	800bdca <UART_SetConfig+0x33e>
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d003      	beq.n	800bdb2 <UART_SetConfig+0x326>
 800bdaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bdae:	d006      	beq.n	800bdbe <UART_SetConfig+0x332>
 800bdb0:	e00b      	b.n	800bdca <UART_SetConfig+0x33e>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	77fb      	strb	r3, [r7, #31]
 800bdb6:	e00d      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bdb8:	2302      	movs	r3, #2
 800bdba:	77fb      	strb	r3, [r7, #31]
 800bdbc:	e00a      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bdbe:	2304      	movs	r3, #4
 800bdc0:	77fb      	strb	r3, [r7, #31]
 800bdc2:	e007      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bdc4:	2308      	movs	r3, #8
 800bdc6:	77fb      	strb	r3, [r7, #31]
 800bdc8:	e004      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bdca:	2310      	movs	r3, #16
 800bdcc:	77fb      	strb	r3, [r7, #31]
 800bdce:	e001      	b.n	800bdd4 <UART_SetConfig+0x348>
 800bdd0:	2310      	movs	r3, #16
 800bdd2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	69db      	ldr	r3, [r3, #28]
 800bdd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bddc:	d15b      	bne.n	800be96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bdde:	7ffb      	ldrb	r3, [r7, #31]
 800bde0:	2b08      	cmp	r3, #8
 800bde2:	d828      	bhi.n	800be36 <UART_SetConfig+0x3aa>
 800bde4:	a201      	add	r2, pc, #4	@ (adr r2, 800bdec <UART_SetConfig+0x360>)
 800bde6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdea:	bf00      	nop
 800bdec:	0800be11 	.word	0x0800be11
 800bdf0:	0800be19 	.word	0x0800be19
 800bdf4:	0800be21 	.word	0x0800be21
 800bdf8:	0800be37 	.word	0x0800be37
 800bdfc:	0800be27 	.word	0x0800be27
 800be00:	0800be37 	.word	0x0800be37
 800be04:	0800be37 	.word	0x0800be37
 800be08:	0800be37 	.word	0x0800be37
 800be0c:	0800be2f 	.word	0x0800be2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be10:	f7fb fffc 	bl	8007e0c <HAL_RCC_GetPCLK1Freq>
 800be14:	61b8      	str	r0, [r7, #24]
        break;
 800be16:	e013      	b.n	800be40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be18:	f7fc f80c 	bl	8007e34 <HAL_RCC_GetPCLK2Freq>
 800be1c:	61b8      	str	r0, [r7, #24]
        break;
 800be1e:	e00f      	b.n	800be40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be20:	4b4b      	ldr	r3, [pc, #300]	@ (800bf50 <UART_SetConfig+0x4c4>)
 800be22:	61bb      	str	r3, [r7, #24]
        break;
 800be24:	e00c      	b.n	800be40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be26:	f7fb ff1f 	bl	8007c68 <HAL_RCC_GetSysClockFreq>
 800be2a:	61b8      	str	r0, [r7, #24]
        break;
 800be2c:	e008      	b.n	800be40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be32:	61bb      	str	r3, [r7, #24]
        break;
 800be34:	e004      	b.n	800be40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800be36:	2300      	movs	r3, #0
 800be38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	77bb      	strb	r3, [r7, #30]
        break;
 800be3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d074      	beq.n	800bf30 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	005a      	lsls	r2, r3, #1
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	085b      	lsrs	r3, r3, #1
 800be50:	441a      	add	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	fbb2 f3f3 	udiv	r3, r2, r3
 800be5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	2b0f      	cmp	r3, #15
 800be60:	d916      	bls.n	800be90 <UART_SetConfig+0x404>
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be68:	d212      	bcs.n	800be90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	f023 030f 	bic.w	r3, r3, #15
 800be72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	085b      	lsrs	r3, r3, #1
 800be78:	b29b      	uxth	r3, r3
 800be7a:	f003 0307 	and.w	r3, r3, #7
 800be7e:	b29a      	uxth	r2, r3
 800be80:	89fb      	ldrh	r3, [r7, #14]
 800be82:	4313      	orrs	r3, r2
 800be84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	89fa      	ldrh	r2, [r7, #14]
 800be8c:	60da      	str	r2, [r3, #12]
 800be8e:	e04f      	b.n	800bf30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	77bb      	strb	r3, [r7, #30]
 800be94:	e04c      	b.n	800bf30 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800be96:	7ffb      	ldrb	r3, [r7, #31]
 800be98:	2b08      	cmp	r3, #8
 800be9a:	d828      	bhi.n	800beee <UART_SetConfig+0x462>
 800be9c:	a201      	add	r2, pc, #4	@ (adr r2, 800bea4 <UART_SetConfig+0x418>)
 800be9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea2:	bf00      	nop
 800bea4:	0800bec9 	.word	0x0800bec9
 800bea8:	0800bed1 	.word	0x0800bed1
 800beac:	0800bed9 	.word	0x0800bed9
 800beb0:	0800beef 	.word	0x0800beef
 800beb4:	0800bedf 	.word	0x0800bedf
 800beb8:	0800beef 	.word	0x0800beef
 800bebc:	0800beef 	.word	0x0800beef
 800bec0:	0800beef 	.word	0x0800beef
 800bec4:	0800bee7 	.word	0x0800bee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bec8:	f7fb ffa0 	bl	8007e0c <HAL_RCC_GetPCLK1Freq>
 800becc:	61b8      	str	r0, [r7, #24]
        break;
 800bece:	e013      	b.n	800bef8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bed0:	f7fb ffb0 	bl	8007e34 <HAL_RCC_GetPCLK2Freq>
 800bed4:	61b8      	str	r0, [r7, #24]
        break;
 800bed6:	e00f      	b.n	800bef8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bed8:	4b1d      	ldr	r3, [pc, #116]	@ (800bf50 <UART_SetConfig+0x4c4>)
 800beda:	61bb      	str	r3, [r7, #24]
        break;
 800bedc:	e00c      	b.n	800bef8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bede:	f7fb fec3 	bl	8007c68 <HAL_RCC_GetSysClockFreq>
 800bee2:	61b8      	str	r0, [r7, #24]
        break;
 800bee4:	e008      	b.n	800bef8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800beea:	61bb      	str	r3, [r7, #24]
        break;
 800beec:	e004      	b.n	800bef8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800beee:	2300      	movs	r3, #0
 800bef0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	77bb      	strb	r3, [r7, #30]
        break;
 800bef6:	bf00      	nop
    }

    if (pclk != 0U)
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d018      	beq.n	800bf30 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	085a      	lsrs	r2, r3, #1
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	441a      	add	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	2b0f      	cmp	r3, #15
 800bf16:	d909      	bls.n	800bf2c <UART_SetConfig+0x4a0>
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf1e:	d205      	bcs.n	800bf2c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	60da      	str	r2, [r3, #12]
 800bf2a:	e001      	b.n	800bf30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800bf3c:	7fbb      	ldrb	r3, [r7, #30]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3720      	adds	r7, #32
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	40007c00 	.word	0x40007c00
 800bf4c:	40023800 	.word	0x40023800
 800bf50:	00f42400 	.word	0x00f42400

0800bf54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf60:	f003 0308 	and.w	r3, r3, #8
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00a      	beq.n	800bf7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	430a      	orrs	r2, r1
 800bf7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00a      	beq.n	800bfa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	430a      	orrs	r2, r1
 800bf9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfa4:	f003 0302 	and.w	r3, r3, #2
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00a      	beq.n	800bfc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfc6:	f003 0304 	and.w	r3, r3, #4
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00a      	beq.n	800bfe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	430a      	orrs	r2, r1
 800bfe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe8:	f003 0310 	and.w	r3, r3, #16
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00a      	beq.n	800c006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c00a:	f003 0320 	and.w	r3, r3, #32
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00a      	beq.n	800c028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	430a      	orrs	r2, r1
 800c026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c02c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c030:	2b00      	cmp	r3, #0
 800c032:	d01a      	beq.n	800c06a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	430a      	orrs	r2, r1
 800c048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c04e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c052:	d10a      	bne.n	800c06a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	430a      	orrs	r2, r1
 800c068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c06e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00a      	beq.n	800c08c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	430a      	orrs	r2, r1
 800c08a:	605a      	str	r2, [r3, #4]
  }
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b08c      	sub	sp, #48	@ 0x30
 800c09c:	af02      	add	r7, sp, #8
 800c09e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c0a8:	f7f6 feb0 	bl	8002e0c <HAL_GetTick>
 800c0ac:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 0308 	and.w	r3, r3, #8
 800c0b8:	2b08      	cmp	r3, #8
 800c0ba:	d12e      	bne.n	800c11a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f83b 	bl	800c146 <UART_WaitOnFlagUntilTimeout>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d021      	beq.n	800c11a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	e853 3f00 	ldrex	r3, [r3]
 800c0e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0ea:	623b      	str	r3, [r7, #32]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	6a3b      	ldr	r3, [r7, #32]
 800c0f4:	61fb      	str	r3, [r7, #28]
 800c0f6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f8:	69b9      	ldr	r1, [r7, #24]
 800c0fa:	69fa      	ldr	r2, [r7, #28]
 800c0fc:	e841 2300 	strex	r3, r2, [r1]
 800c100:	617b      	str	r3, [r7, #20]
   return(result);
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1e6      	bne.n	800c0d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2220      	movs	r2, #32
 800c10c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c116:	2303      	movs	r3, #3
 800c118:	e011      	b.n	800c13e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2220      	movs	r2, #32
 800c11e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2220      	movs	r2, #32
 800c124:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3728      	adds	r7, #40	@ 0x28
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b084      	sub	sp, #16
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	60b9      	str	r1, [r7, #8]
 800c150:	603b      	str	r3, [r7, #0]
 800c152:	4613      	mov	r3, r2
 800c154:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c156:	e04f      	b.n	800c1f8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c15e:	d04b      	beq.n	800c1f8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c160:	f7f6 fe54 	bl	8002e0c <HAL_GetTick>
 800c164:	4602      	mov	r2, r0
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	1ad3      	subs	r3, r2, r3
 800c16a:	69ba      	ldr	r2, [r7, #24]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d302      	bcc.n	800c176 <UART_WaitOnFlagUntilTimeout+0x30>
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c176:	2303      	movs	r3, #3
 800c178:	e04e      	b.n	800c218 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f003 0304 	and.w	r3, r3, #4
 800c184:	2b00      	cmp	r3, #0
 800c186:	d037      	beq.n	800c1f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b80      	cmp	r3, #128	@ 0x80
 800c18c:	d034      	beq.n	800c1f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	2b40      	cmp	r3, #64	@ 0x40
 800c192:	d031      	beq.n	800c1f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	69db      	ldr	r3, [r3, #28]
 800c19a:	f003 0308 	and.w	r3, r3, #8
 800c19e:	2b08      	cmp	r3, #8
 800c1a0:	d110      	bne.n	800c1c4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2208      	movs	r2, #8
 800c1a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f000 f838 	bl	800c220 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2208      	movs	r2, #8
 800c1b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e029      	b.n	800c218 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	69db      	ldr	r3, [r3, #28]
 800c1ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1d2:	d111      	bne.n	800c1f8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f000 f81e 	bl	800c220 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2220      	movs	r2, #32
 800c1e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	e00f      	b.n	800c218 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	69da      	ldr	r2, [r3, #28]
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	4013      	ands	r3, r2
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	429a      	cmp	r2, r3
 800c206:	bf0c      	ite	eq
 800c208:	2301      	moveq	r3, #1
 800c20a:	2300      	movne	r3, #0
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	461a      	mov	r2, r3
 800c210:	79fb      	ldrb	r3, [r7, #7]
 800c212:	429a      	cmp	r2, r3
 800c214:	d0a0      	beq.n	800c158 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c216:	2300      	movs	r3, #0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c220:	b480      	push	{r7}
 800c222:	b095      	sub	sp, #84	@ 0x54
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c230:	e853 3f00 	ldrex	r3, [r3]
 800c234:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c238:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c23c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	461a      	mov	r2, r3
 800c244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c246:	643b      	str	r3, [r7, #64]	@ 0x40
 800c248:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c24c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c24e:	e841 2300 	strex	r3, r2, [r1]
 800c252:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c256:	2b00      	cmp	r3, #0
 800c258:	d1e6      	bne.n	800c228 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	3308      	adds	r3, #8
 800c260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c262:	6a3b      	ldr	r3, [r7, #32]
 800c264:	e853 3f00 	ldrex	r3, [r3]
 800c268:	61fb      	str	r3, [r7, #28]
   return(result);
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	f023 0301 	bic.w	r3, r3, #1
 800c270:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3308      	adds	r3, #8
 800c278:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c27a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c27c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c280:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c282:	e841 2300 	strex	r3, r2, [r1]
 800c286:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1e5      	bne.n	800c25a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c292:	2b01      	cmp	r3, #1
 800c294:	d118      	bne.n	800c2c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	e853 3f00 	ldrex	r3, [r3]
 800c2a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	f023 0310 	bic.w	r3, r3, #16
 800c2aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2b4:	61bb      	str	r3, [r7, #24]
 800c2b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b8:	6979      	ldr	r1, [r7, #20]
 800c2ba:	69ba      	ldr	r2, [r7, #24]
 800c2bc:	e841 2300 	strex	r3, r2, [r1]
 800c2c0:	613b      	str	r3, [r7, #16]
   return(result);
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d1e6      	bne.n	800c296 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2220      	movs	r2, #32
 800c2cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c2dc:	bf00      	nop
 800c2de:	3754      	adds	r7, #84	@ 0x54
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d121      	bne.n	800c33e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	4b27      	ldr	r3, [pc, #156]	@ (800c39c <FMC_SDRAM_Init+0xb4>)
 800c300:	4013      	ands	r3, r2
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	6851      	ldr	r1, [r2, #4]
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	6892      	ldr	r2, [r2, #8]
 800c30a:	4311      	orrs	r1, r2
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	68d2      	ldr	r2, [r2, #12]
 800c310:	4311      	orrs	r1, r2
 800c312:	683a      	ldr	r2, [r7, #0]
 800c314:	6912      	ldr	r2, [r2, #16]
 800c316:	4311      	orrs	r1, r2
 800c318:	683a      	ldr	r2, [r7, #0]
 800c31a:	6952      	ldr	r2, [r2, #20]
 800c31c:	4311      	orrs	r1, r2
 800c31e:	683a      	ldr	r2, [r7, #0]
 800c320:	6992      	ldr	r2, [r2, #24]
 800c322:	4311      	orrs	r1, r2
 800c324:	683a      	ldr	r2, [r7, #0]
 800c326:	69d2      	ldr	r2, [r2, #28]
 800c328:	4311      	orrs	r1, r2
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	6a12      	ldr	r2, [r2, #32]
 800c32e:	4311      	orrs	r1, r2
 800c330:	683a      	ldr	r2, [r7, #0]
 800c332:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c334:	430a      	orrs	r2, r1
 800c336:	431a      	orrs	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	601a      	str	r2, [r3, #0]
 800c33c:	e026      	b.n	800c38c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	69d9      	ldr	r1, [r3, #28]
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	4319      	orrs	r1, r3
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c354:	430b      	orrs	r3, r1
 800c356:	431a      	orrs	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	4b0e      	ldr	r3, [pc, #56]	@ (800c39c <FMC_SDRAM_Init+0xb4>)
 800c362:	4013      	ands	r3, r2
 800c364:	683a      	ldr	r2, [r7, #0]
 800c366:	6851      	ldr	r1, [r2, #4]
 800c368:	683a      	ldr	r2, [r7, #0]
 800c36a:	6892      	ldr	r2, [r2, #8]
 800c36c:	4311      	orrs	r1, r2
 800c36e:	683a      	ldr	r2, [r7, #0]
 800c370:	68d2      	ldr	r2, [r2, #12]
 800c372:	4311      	orrs	r1, r2
 800c374:	683a      	ldr	r2, [r7, #0]
 800c376:	6912      	ldr	r2, [r2, #16]
 800c378:	4311      	orrs	r1, r2
 800c37a:	683a      	ldr	r2, [r7, #0]
 800c37c:	6952      	ldr	r2, [r2, #20]
 800c37e:	4311      	orrs	r1, r2
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	6992      	ldr	r2, [r2, #24]
 800c384:	430a      	orrs	r2, r1
 800c386:	431a      	orrs	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	370c      	adds	r7, #12
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	ffff8000 	.word	0xffff8000

0800c3a0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d128      	bne.n	800c404 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	1e59      	subs	r1, r3, #1
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	011b      	lsls	r3, r3, #4
 800c3c8:	4319      	orrs	r1, r3
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	021b      	lsls	r3, r3, #8
 800c3d2:	4319      	orrs	r1, r3
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	031b      	lsls	r3, r3, #12
 800c3dc:	4319      	orrs	r1, r3
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	041b      	lsls	r3, r3, #16
 800c3e6:	4319      	orrs	r1, r3
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	695b      	ldr	r3, [r3, #20]
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	051b      	lsls	r3, r3, #20
 800c3f0:	4319      	orrs	r1, r3
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	699b      	ldr	r3, [r3, #24]
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	061b      	lsls	r3, r3, #24
 800c3fa:	430b      	orrs	r3, r1
 800c3fc:	431a      	orrs	r2, r3
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	609a      	str	r2, [r3, #8]
 800c402:	e02d      	b.n	800c460 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	689a      	ldr	r2, [r3, #8]
 800c408:	4b19      	ldr	r3, [pc, #100]	@ (800c470 <FMC_SDRAM_Timing_Init+0xd0>)
 800c40a:	4013      	ands	r3, r2
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	68d2      	ldr	r2, [r2, #12]
 800c410:	3a01      	subs	r2, #1
 800c412:	0311      	lsls	r1, r2, #12
 800c414:	68ba      	ldr	r2, [r7, #8]
 800c416:	6952      	ldr	r2, [r2, #20]
 800c418:	3a01      	subs	r2, #1
 800c41a:	0512      	lsls	r2, r2, #20
 800c41c:	430a      	orrs	r2, r1
 800c41e:	431a      	orrs	r2, r3
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	1e59      	subs	r1, r3, #1
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	3b01      	subs	r3, #1
 800c438:	011b      	lsls	r3, r3, #4
 800c43a:	4319      	orrs	r1, r3
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	3b01      	subs	r3, #1
 800c442:	021b      	lsls	r3, r3, #8
 800c444:	4319      	orrs	r1, r3
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	3b01      	subs	r3, #1
 800c44c:	041b      	lsls	r3, r3, #16
 800c44e:	4319      	orrs	r1, r3
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	3b01      	subs	r3, #1
 800c456:	061b      	lsls	r3, r3, #24
 800c458:	430b      	orrs	r3, r1
 800c45a:	431a      	orrs	r2, r3
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	3714      	adds	r7, #20
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	ff0f0fff 	.word	0xff0f0fff

0800c474 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c474:	b084      	sub	sp, #16
 800c476:	b480      	push	{r7}
 800c478:	b085      	sub	sp, #20
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
 800c47e:	f107 001c 	add.w	r0, r7, #28
 800c482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c48a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c48c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c48e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c492:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c496:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c49a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c49e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	685a      	ldr	r2, [r3, #4]
 800c4aa:	4b07      	ldr	r3, [pc, #28]	@ (800c4c8 <SDMMC_Init+0x54>)
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	431a      	orrs	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3714      	adds	r7, #20
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	b004      	add	sp, #16
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop
 800c4c8:	ffff8100 	.word	0xffff8100

0800c4cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c4e6:	b480      	push	{r7}
 800c4e8:	b083      	sub	sp, #12
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2203      	movs	r2, #3
 800c4f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c502:	b480      	push	{r7}
 800c504:	b083      	sub	sp, #12
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f003 0303 	and.w	r3, r3, #3
}
 800c512:	4618      	mov	r0, r3
 800c514:	370c      	adds	r7, #12
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
	...

0800c520 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c52a:	2300      	movs	r3, #0
 800c52c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c53e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c544:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c54a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	4313      	orrs	r3, r2
 800c550:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	68da      	ldr	r2, [r3, #12]
 800c556:	4b06      	ldr	r3, [pc, #24]	@ (800c570 <SDMMC_SendCommand+0x50>)
 800c558:	4013      	ands	r3, r2
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	431a      	orrs	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	fffff000 	.word	0xfffff000

0800c574 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	691b      	ldr	r3, [r3, #16]
 800c580:	b2db      	uxtb	r3, r3
}
 800c582:	4618      	mov	r0, r3
 800c584:	370c      	adds	r7, #12
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c58e:	b480      	push	{r7}
 800c590:	b085      	sub	sp, #20
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	3314      	adds	r3, #20
 800c59c:	461a      	mov	r2, r3
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
}  
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3714      	adds	r7, #20
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	685a      	ldr	r2, [r3, #4]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5da:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c5e0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c5e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	431a      	orrs	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c5fe:	2300      	movs	r3, #0

}
 800c600:	4618      	mov	r0, r3
 800c602:	3714      	adds	r7, #20
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b088      	sub	sp, #32
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c61a:	2310      	movs	r3, #16
 800c61c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c61e:	2340      	movs	r3, #64	@ 0x40
 800c620:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c622:	2300      	movs	r3, #0
 800c624:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c62a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c62c:	f107 0308 	add.w	r3, r7, #8
 800c630:	4619      	mov	r1, r3
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7ff ff74 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c63c:	2110      	movs	r1, #16
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fa1a 	bl	800ca78 <SDMMC_GetCmdResp1>
 800c644:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c646:	69fb      	ldr	r3, [r7, #28]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3720      	adds	r7, #32
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b088      	sub	sp, #32
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c65e:	2311      	movs	r3, #17
 800c660:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c662:	2340      	movs	r3, #64	@ 0x40
 800c664:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c666:	2300      	movs	r3, #0
 800c668:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c66a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c66e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c670:	f107 0308 	add.w	r3, r7, #8
 800c674:	4619      	mov	r1, r3
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7ff ff52 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c67c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c680:	2111      	movs	r1, #17
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f9f8 	bl	800ca78 <SDMMC_GetCmdResp1>
 800c688:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c68a:	69fb      	ldr	r3, [r7, #28]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3720      	adds	r7, #32
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b088      	sub	sp, #32
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c6a2:	2312      	movs	r3, #18
 800c6a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6a6:	2340      	movs	r3, #64	@ 0x40
 800c6a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6b4:	f107 0308 	add.w	r3, r7, #8
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7ff ff30 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c6c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6c4:	2112      	movs	r1, #18
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 f9d6 	bl	800ca78 <SDMMC_GetCmdResp1>
 800c6cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6ce:	69fb      	ldr	r3, [r7, #28]
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3720      	adds	r7, #32
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c6e6:	2318      	movs	r3, #24
 800c6e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6ea:	2340      	movs	r3, #64	@ 0x40
 800c6ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6f8:	f107 0308 	add.w	r3, r7, #8
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7ff ff0e 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c704:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c708:	2118      	movs	r1, #24
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f9b4 	bl	800ca78 <SDMMC_GetCmdResp1>
 800c710:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c712:	69fb      	ldr	r3, [r7, #28]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3720      	adds	r7, #32
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b088      	sub	sp, #32
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c72a:	2319      	movs	r3, #25
 800c72c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c72e:	2340      	movs	r3, #64	@ 0x40
 800c730:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c732:	2300      	movs	r3, #0
 800c734:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c73a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c73c:	f107 0308 	add.w	r3, r7, #8
 800c740:	4619      	mov	r1, r3
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7ff feec 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c74c:	2119      	movs	r1, #25
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f992 	bl	800ca78 <SDMMC_GetCmdResp1>
 800c754:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c756:	69fb      	ldr	r3, [r7, #28]
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3720      	adds	r7, #32
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b088      	sub	sp, #32
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c768:	2300      	movs	r3, #0
 800c76a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c76c:	230c      	movs	r3, #12
 800c76e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c770:	2340      	movs	r3, #64	@ 0x40
 800c772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c774:	2300      	movs	r3, #0
 800c776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c778:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c77c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c77e:	f107 0308 	add.w	r3, r7, #8
 800c782:	4619      	mov	r1, r3
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7ff fecb 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c78a:	4a05      	ldr	r2, [pc, #20]	@ (800c7a0 <SDMMC_CmdStopTransfer+0x40>)
 800c78c:	210c      	movs	r1, #12
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f972 	bl	800ca78 <SDMMC_GetCmdResp1>
 800c794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c796:	69fb      	ldr	r3, [r7, #28]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3720      	adds	r7, #32
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	05f5e100 	.word	0x05f5e100

0800c7a4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b08a      	sub	sp, #40	@ 0x28
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	60f8      	str	r0, [r7, #12]
 800c7ac:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c7b4:	2307      	movs	r3, #7
 800c7b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7b8:	2340      	movs	r3, #64	@ 0x40
 800c7ba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7c4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7c6:	f107 0310 	add.w	r3, r7, #16
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f7ff fea7 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c7d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7d6:	2107      	movs	r1, #7
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f000 f94d 	bl	800ca78 <SDMMC_GetCmdResp1>
 800c7de:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3728      	adds	r7, #40	@ 0x28
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b088      	sub	sp, #32
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7fe:	2300      	movs	r3, #0
 800c800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c806:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c808:	f107 0308 	add.w	r3, r7, #8
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7ff fe86 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 fb67 	bl	800cee8 <SDMMC_GetCmdError>
 800c81a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c81c:	69fb      	ldr	r3, [r7, #28]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3720      	adds	r7, #32
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}

0800c826 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c826:	b580      	push	{r7, lr}
 800c828:	b088      	sub	sp, #32
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c82e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c832:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c834:	2308      	movs	r3, #8
 800c836:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c838:	2340      	movs	r3, #64	@ 0x40
 800c83a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c83c:	2300      	movs	r3, #0
 800c83e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c844:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c846:	f107 0308 	add.w	r3, r7, #8
 800c84a:	4619      	mov	r1, r3
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff fe67 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fafa 	bl	800ce4c <SDMMC_GetCmdResp7>
 800c858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c85a:	69fb      	ldr	r3, [r7, #28]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3720      	adds	r7, #32
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b088      	sub	sp, #32
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c872:	2337      	movs	r3, #55	@ 0x37
 800c874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c876:	2340      	movs	r3, #64	@ 0x40
 800c878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c87a:	2300      	movs	r3, #0
 800c87c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c87e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c882:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c884:	f107 0308 	add.w	r3, r7, #8
 800c888:	4619      	mov	r1, r3
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7ff fe48 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c890:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c894:	2137      	movs	r1, #55	@ 0x37
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f8ee 	bl	800ca78 <SDMMC_GetCmdResp1>
 800c89c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c89e:	69fb      	ldr	r3, [r7, #28]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3720      	adds	r7, #32
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b088      	sub	sp, #32
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	4b0d      	ldr	r3, [pc, #52]	@ (800c8ec <SDMMC_CmdAppOperCommand+0x44>)
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c8ba:	2329      	movs	r3, #41	@ 0x29
 800c8bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8be:	2340      	movs	r3, #64	@ 0x40
 800c8c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8cc:	f107 0308 	add.w	r3, r7, #8
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7ff fe24 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fa03 	bl	800cce4 <SDMMC_GetCmdResp3>
 800c8de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8e0:	69fb      	ldr	r3, [r7, #28]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3720      	adds	r7, #32
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	80100000 	.word	0x80100000

0800c8f0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b088      	sub	sp, #32
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c8fe:	2306      	movs	r3, #6
 800c900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c902:	2340      	movs	r3, #64	@ 0x40
 800c904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c906:	2300      	movs	r3, #0
 800c908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c90a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c90e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c910:	f107 0308 	add.w	r3, r7, #8
 800c914:	4619      	mov	r1, r3
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7ff fe02 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c91c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c920:	2106      	movs	r1, #6
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 f8a8 	bl	800ca78 <SDMMC_GetCmdResp1>
 800c928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c92a:	69fb      	ldr	r3, [r7, #28]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3720      	adds	r7, #32
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b088      	sub	sp, #32
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c93c:	2300      	movs	r3, #0
 800c93e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c940:	2333      	movs	r3, #51	@ 0x33
 800c942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c944:	2340      	movs	r3, #64	@ 0x40
 800c946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c948:	2300      	movs	r3, #0
 800c94a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c94c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c950:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c952:	f107 0308 	add.w	r3, r7, #8
 800c956:	4619      	mov	r1, r3
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7ff fde1 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c95e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c962:	2133      	movs	r1, #51	@ 0x33
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f887 	bl	800ca78 <SDMMC_GetCmdResp1>
 800c96a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c96c:	69fb      	ldr	r3, [r7, #28]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3720      	adds	r7, #32
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b088      	sub	sp, #32
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c97e:	2300      	movs	r3, #0
 800c980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c982:	2302      	movs	r3, #2
 800c984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c986:	23c0      	movs	r3, #192	@ 0xc0
 800c988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c98a:	2300      	movs	r3, #0
 800c98c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c98e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c994:	f107 0308 	add.w	r3, r7, #8
 800c998:	4619      	mov	r1, r3
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7ff fdc0 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 f957 	bl	800cc54 <SDMMC_GetCmdResp2>
 800c9a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9a8:	69fb      	ldr	r3, [r7, #28]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3720      	adds	r7, #32
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b088      	sub	sp, #32
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c9c0:	2309      	movs	r3, #9
 800c9c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c9c4:	23c0      	movs	r3, #192	@ 0xc0
 800c9c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9d2:	f107 0308 	add.w	r3, r7, #8
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7ff fda1 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 f938 	bl	800cc54 <SDMMC_GetCmdResp2>
 800c9e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9e6:	69fb      	ldr	r3, [r7, #28]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3720      	adds	r7, #32
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b088      	sub	sp, #32
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c9fe:	2303      	movs	r3, #3
 800ca00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca02:	2340      	movs	r3, #64	@ 0x40
 800ca04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca06:	2300      	movs	r3, #0
 800ca08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca10:	f107 0308 	add.w	r3, r7, #8
 800ca14:	4619      	mov	r1, r3
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7ff fd82 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ca1c:	683a      	ldr	r2, [r7, #0]
 800ca1e:	2103      	movs	r1, #3
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 f99d 	bl	800cd60 <SDMMC_GetCmdResp6>
 800ca26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca28:	69fb      	ldr	r3, [r7, #28]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3720      	adds	r7, #32
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b088      	sub	sp, #32
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
 800ca3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ca40:	230d      	movs	r3, #13
 800ca42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca44:	2340      	movs	r3, #64	@ 0x40
 800ca46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca52:	f107 0308 	add.w	r3, r7, #8
 800ca56:	4619      	mov	r1, r3
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f7ff fd61 	bl	800c520 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ca5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca62:	210d      	movs	r1, #13
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 f807 	bl	800ca78 <SDMMC_GetCmdResp1>
 800ca6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3720      	adds	r7, #32
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
	...

0800ca78 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b088      	sub	sp, #32
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	460b      	mov	r3, r1
 800ca82:	607a      	str	r2, [r7, #4]
 800ca84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ca86:	4b70      	ldr	r3, [pc, #448]	@ (800cc48 <SDMMC_GetCmdResp1+0x1d0>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a70      	ldr	r2, [pc, #448]	@ (800cc4c <SDMMC_GetCmdResp1+0x1d4>)
 800ca8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca90:	0a5a      	lsrs	r2, r3, #9
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	fb02 f303 	mul.w	r3, r2, r3
 800ca98:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	1e5a      	subs	r2, r3, #1
 800ca9e:	61fa      	str	r2, [r7, #28]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d102      	bne.n	800caaa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800caa4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800caa8:	e0c9      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0ef      	beq.n	800ca9a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1ea      	bne.n	800ca9a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cac8:	f003 0304 	and.w	r3, r3, #4
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d004      	beq.n	800cada <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2204      	movs	r2, #4
 800cad4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cad6:	2304      	movs	r3, #4
 800cad8:	e0b1      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cade:	f003 0301 	and.w	r3, r3, #1
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d004      	beq.n	800caf0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2201      	movs	r2, #1
 800caea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800caec:	2301      	movs	r3, #1
 800caee:	e0a6      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	22c5      	movs	r2, #197	@ 0xc5
 800caf4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f7ff fd3c 	bl	800c574 <SDMMC_GetCommandResponse>
 800cafc:	4603      	mov	r3, r0
 800cafe:	461a      	mov	r2, r3
 800cb00:	7afb      	ldrb	r3, [r7, #11]
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d001      	beq.n	800cb0a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb06:	2301      	movs	r3, #1
 800cb08:	e099      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f7ff fd3e 	bl	800c58e <SDMMC_GetResponse>
 800cb12:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cb14:	697a      	ldr	r2, [r7, #20]
 800cb16:	4b4e      	ldr	r3, [pc, #312]	@ (800cc50 <SDMMC_GetCmdResp1+0x1d8>)
 800cb18:	4013      	ands	r3, r2
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d101      	bne.n	800cb22 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	e08d      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	da02      	bge.n	800cb2e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cb28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cb2c:	e087      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d001      	beq.n	800cb3c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cb38:	2340      	movs	r3, #64	@ 0x40
 800cb3a:	e080      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cb46:	2380      	movs	r3, #128	@ 0x80
 800cb48:	e079      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d002      	beq.n	800cb5a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cb54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb58:	e071      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d002      	beq.n	800cb6a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cb64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb68:	e069      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d002      	beq.n	800cb7a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cb74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb78:	e061      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d002      	beq.n	800cb8a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cb84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cb88:	e059      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb98:	e051      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d002      	beq.n	800cbaa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cba8:	e049      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cbb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cbb8:	e041      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cbc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbc8:	e039      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d002      	beq.n	800cbda <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cbd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cbd8:	e031      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d002      	beq.n	800cbea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cbe4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800cbe8:	e029      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cbf4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cbf8:	e021      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d002      	beq.n	800cc0a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cc04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cc08:	e019      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d002      	beq.n	800cc1a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cc14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800cc18:	e011      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cc24:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800cc28:	e009      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	f003 0308 	and.w	r3, r3, #8
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d002      	beq.n	800cc3a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cc34:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800cc38:	e001      	b.n	800cc3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cc3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3720      	adds	r7, #32
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	20000000 	.word	0x20000000
 800cc4c:	10624dd3 	.word	0x10624dd3
 800cc50:	fdffe008 	.word	0xfdffe008

0800cc54 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc5c:	4b1f      	ldr	r3, [pc, #124]	@ (800ccdc <SDMMC_GetCmdResp2+0x88>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a1f      	ldr	r2, [pc, #124]	@ (800cce0 <SDMMC_GetCmdResp2+0x8c>)
 800cc62:	fba2 2303 	umull	r2, r3, r2, r3
 800cc66:	0a5b      	lsrs	r3, r3, #9
 800cc68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc6c:	fb02 f303 	mul.w	r3, r2, r3
 800cc70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	1e5a      	subs	r2, r3, #1
 800cc76:	60fa      	str	r2, [r7, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d102      	bne.n	800cc82 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc80:	e026      	b.n	800ccd0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d0ef      	beq.n	800cc72 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1ea      	bne.n	800cc72 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cca0:	f003 0304 	and.w	r3, r3, #4
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d004      	beq.n	800ccb2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2204      	movs	r2, #4
 800ccac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccae:	2304      	movs	r3, #4
 800ccb0:	e00e      	b.n	800ccd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d004      	beq.n	800ccc8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e003      	b.n	800ccd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	22c5      	movs	r2, #197	@ 0xc5
 800cccc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ccce:	2300      	movs	r3, #0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr
 800ccdc:	20000000 	.word	0x20000000
 800cce0:	10624dd3 	.word	0x10624dd3

0800cce4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ccec:	4b1a      	ldr	r3, [pc, #104]	@ (800cd58 <SDMMC_GetCmdResp3+0x74>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a1a      	ldr	r2, [pc, #104]	@ (800cd5c <SDMMC_GetCmdResp3+0x78>)
 800ccf2:	fba2 2303 	umull	r2, r3, r2, r3
 800ccf6:	0a5b      	lsrs	r3, r3, #9
 800ccf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccfc:	fb02 f303 	mul.w	r3, r2, r3
 800cd00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	1e5a      	subs	r2, r3, #1
 800cd06:	60fa      	str	r2, [r7, #12]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d102      	bne.n	800cd12 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cd10:	e01b      	b.n	800cd4a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d0ef      	beq.n	800cd02 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1ea      	bne.n	800cd02 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd30:	f003 0304 	and.w	r3, r3, #4
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d004      	beq.n	800cd42 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2204      	movs	r2, #4
 800cd3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd3e:	2304      	movs	r3, #4
 800cd40:	e003      	b.n	800cd4a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	22c5      	movs	r2, #197	@ 0xc5
 800cd46:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cd48:	2300      	movs	r3, #0
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3714      	adds	r7, #20
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	20000000 	.word	0x20000000
 800cd5c:	10624dd3 	.word	0x10624dd3

0800cd60 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b088      	sub	sp, #32
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	460b      	mov	r3, r1
 800cd6a:	607a      	str	r2, [r7, #4]
 800cd6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd6e:	4b35      	ldr	r3, [pc, #212]	@ (800ce44 <SDMMC_GetCmdResp6+0xe4>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a35      	ldr	r2, [pc, #212]	@ (800ce48 <SDMMC_GetCmdResp6+0xe8>)
 800cd74:	fba2 2303 	umull	r2, r3, r2, r3
 800cd78:	0a5b      	lsrs	r3, r3, #9
 800cd7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd7e:	fb02 f303 	mul.w	r3, r2, r3
 800cd82:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	1e5a      	subs	r2, r3, #1
 800cd88:	61fa      	str	r2, [r7, #28]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d102      	bne.n	800cd94 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd8e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cd92:	e052      	b.n	800ce3a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd98:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd9a:	69bb      	ldr	r3, [r7, #24]
 800cd9c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d0ef      	beq.n	800cd84 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1ea      	bne.n	800cd84 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdb2:	f003 0304 	and.w	r3, r3, #4
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d004      	beq.n	800cdc4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2204      	movs	r2, #4
 800cdbe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cdc0:	2304      	movs	r3, #4
 800cdc2:	e03a      	b.n	800ce3a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdc8:	f003 0301 	and.w	r3, r3, #1
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d004      	beq.n	800cdda <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e02f      	b.n	800ce3a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	f7ff fbca 	bl	800c574 <SDMMC_GetCommandResponse>
 800cde0:	4603      	mov	r3, r0
 800cde2:	461a      	mov	r2, r3
 800cde4:	7afb      	ldrb	r3, [r7, #11]
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d001      	beq.n	800cdee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdea:	2301      	movs	r3, #1
 800cdec:	e025      	b.n	800ce3a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	22c5      	movs	r2, #197	@ 0xc5
 800cdf2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cdf4:	2100      	movs	r1, #0
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f7ff fbc9 	bl	800c58e <SDMMC_GetResponse>
 800cdfc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d106      	bne.n	800ce16 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	0c1b      	lsrs	r3, r3, #16
 800ce0c:	b29a      	uxth	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ce12:	2300      	movs	r3, #0
 800ce14:	e011      	b.n	800ce3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d002      	beq.n	800ce26 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ce20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ce24:	e009      	b.n	800ce3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d002      	beq.n	800ce36 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ce30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce34:	e001      	b.n	800ce3a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ce36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3720      	adds	r7, #32
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	20000000 	.word	0x20000000
 800ce48:	10624dd3 	.word	0x10624dd3

0800ce4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b085      	sub	sp, #20
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce54:	4b22      	ldr	r3, [pc, #136]	@ (800cee0 <SDMMC_GetCmdResp7+0x94>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a22      	ldr	r2, [pc, #136]	@ (800cee4 <SDMMC_GetCmdResp7+0x98>)
 800ce5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce5e:	0a5b      	lsrs	r3, r3, #9
 800ce60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce64:	fb02 f303 	mul.w	r3, r2, r3
 800ce68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	1e5a      	subs	r2, r3, #1
 800ce6e:	60fa      	str	r2, [r7, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d102      	bne.n	800ce7a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ce78:	e02c      	b.n	800ced4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d0ef      	beq.n	800ce6a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1ea      	bne.n	800ce6a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce98:	f003 0304 	and.w	r3, r3, #4
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d004      	beq.n	800ceaa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2204      	movs	r2, #4
 800cea4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cea6:	2304      	movs	r3, #4
 800cea8:	e014      	b.n	800ced4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceae:	f003 0301 	and.w	r3, r3, #1
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d004      	beq.n	800cec0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cebc:	2301      	movs	r3, #1
 800cebe:	e009      	b.n	800ced4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d002      	beq.n	800ced2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2240      	movs	r2, #64	@ 0x40
 800ced0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ced2:	2300      	movs	r3, #0
  
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3714      	adds	r7, #20
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	20000000 	.word	0x20000000
 800cee4:	10624dd3 	.word	0x10624dd3

0800cee8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cef0:	4b11      	ldr	r3, [pc, #68]	@ (800cf38 <SDMMC_GetCmdError+0x50>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4a11      	ldr	r2, [pc, #68]	@ (800cf3c <SDMMC_GetCmdError+0x54>)
 800cef6:	fba2 2303 	umull	r2, r3, r2, r3
 800cefa:	0a5b      	lsrs	r3, r3, #9
 800cefc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf00:	fb02 f303 	mul.w	r3, r2, r3
 800cf04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	1e5a      	subs	r2, r3, #1
 800cf0a:	60fa      	str	r2, [r7, #12]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d102      	bne.n	800cf16 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cf14:	e009      	b.n	800cf2a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d0f1      	beq.n	800cf06 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	22c5      	movs	r2, #197	@ 0xc5
 800cf26:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	20000000 	.word	0x20000000
 800cf3c:	10624dd3 	.word	0x10624dd3

0800cf40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cf40:	b084      	sub	sp, #16
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b084      	sub	sp, #16
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
 800cf4a:	f107 001c 	add.w	r0, r7, #28
 800cf4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cf52:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d121      	bne.n	800cf9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	68da      	ldr	r2, [r3, #12]
 800cf6a:	4b21      	ldr	r3, [pc, #132]	@ (800cff0 <USB_CoreInit+0xb0>)
 800cf6c:	4013      	ands	r3, r2
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cf7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d105      	bne.n	800cf92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 f9d4 	bl	800d340 <USB_CoreReset>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	73fb      	strb	r3, [r7, #15]
 800cf9c:	e010      	b.n	800cfc0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 f9c8 	bl	800d340 <USB_CoreReset>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfb8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800cfc0:	7fbb      	ldrb	r3, [r7, #30]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d10b      	bne.n	800cfde <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	f043 0206 	orr.w	r2, r3, #6
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	689b      	ldr	r3, [r3, #8]
 800cfd6:	f043 0220 	orr.w	r2, r3, #32
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cfde:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cfea:	b004      	add	sp, #16
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	ffbdffbf 	.word	0xffbdffbf

0800cff4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	f043 0201 	orr.w	r2, r3, #1
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	370c      	adds	r7, #12
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr

0800d016 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d016:	b480      	push	{r7}
 800d018:	b083      	sub	sp, #12
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	f023 0201 	bic.w	r2, r3, #1
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d02a:	2300      	movs	r3, #0
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	460b      	mov	r3, r1
 800d042:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d044:	2300      	movs	r3, #0
 800d046:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d054:	78fb      	ldrb	r3, [r7, #3]
 800d056:	2b01      	cmp	r3, #1
 800d058:	d115      	bne.n	800d086 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d066:	200a      	movs	r0, #10
 800d068:	f7f5 fedc 	bl	8002e24 <HAL_Delay>
      ms += 10U;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	330a      	adds	r3, #10
 800d070:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 f956 	bl	800d324 <USB_GetMode>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d01e      	beq.n	800d0bc <USB_SetCurrentMode+0x84>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2bc7      	cmp	r3, #199	@ 0xc7
 800d082:	d9f0      	bls.n	800d066 <USB_SetCurrentMode+0x2e>
 800d084:	e01a      	b.n	800d0bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d086:	78fb      	ldrb	r3, [r7, #3]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d115      	bne.n	800d0b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d098:	200a      	movs	r0, #10
 800d09a:	f7f5 fec3 	bl	8002e24 <HAL_Delay>
      ms += 10U;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	330a      	adds	r3, #10
 800d0a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 f93d 	bl	800d324 <USB_GetMode>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d005      	beq.n	800d0bc <USB_SetCurrentMode+0x84>
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2bc7      	cmp	r3, #199	@ 0xc7
 800d0b4:	d9f0      	bls.n	800d098 <USB_SetCurrentMode+0x60>
 800d0b6:	e001      	b.n	800d0bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e005      	b.n	800d0c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2bc8      	cmp	r3, #200	@ 0xc8
 800d0c0:	d101      	bne.n	800d0c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e000      	b.n	800d0c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d0c6:	2300      	movs	r3, #0
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3710      	adds	r7, #16
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d0ea:	d901      	bls.n	800d0f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d0ec:	2303      	movs	r3, #3
 800d0ee:	e01b      	b.n	800d128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	691b      	ldr	r3, [r3, #16]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	daf2      	bge.n	800d0de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	019b      	lsls	r3, r3, #6
 800d100:	f043 0220 	orr.w	r2, r3, #32
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	3301      	adds	r3, #1
 800d10c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d114:	d901      	bls.n	800d11a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d116:	2303      	movs	r3, #3
 800d118:	e006      	b.n	800d128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	f003 0320 	and.w	r3, r3, #32
 800d122:	2b20      	cmp	r3, #32
 800d124:	d0f0      	beq.n	800d108 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d126:	2300      	movs	r3, #0
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3714      	adds	r7, #20
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d13c:	2300      	movs	r3, #0
 800d13e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	3301      	adds	r3, #1
 800d144:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d14c:	d901      	bls.n	800d152 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d14e:	2303      	movs	r3, #3
 800d150:	e018      	b.n	800d184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	2b00      	cmp	r3, #0
 800d158:	daf2      	bge.n	800d140 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d15a:	2300      	movs	r3, #0
 800d15c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2210      	movs	r2, #16
 800d162:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	3301      	adds	r3, #1
 800d168:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d170:	d901      	bls.n	800d176 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d172:	2303      	movs	r3, #3
 800d174:	e006      	b.n	800d184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	f003 0310 	and.w	r3, r3, #16
 800d17e:	2b10      	cmp	r3, #16
 800d180:	d0f0      	beq.n	800d164 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d182:	2300      	movs	r3, #0
}
 800d184:	4618      	mov	r0, r3
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d190:	b480      	push	{r7}
 800d192:	b089      	sub	sp, #36	@ 0x24
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	4611      	mov	r1, r2
 800d19c:	461a      	mov	r2, r3
 800d19e:	460b      	mov	r3, r1
 800d1a0:	71fb      	strb	r3, [r7, #7]
 800d1a2:	4613      	mov	r3, r2
 800d1a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d1ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d123      	bne.n	800d1fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d1b6:	88bb      	ldrh	r3, [r7, #4]
 800d1b8:	3303      	adds	r3, #3
 800d1ba:	089b      	lsrs	r3, r3, #2
 800d1bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d1be:	2300      	movs	r3, #0
 800d1c0:	61bb      	str	r3, [r7, #24]
 800d1c2:	e018      	b.n	800d1f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d1c4:	79fb      	ldrb	r3, [r7, #7]
 800d1c6:	031a      	lsls	r2, r3, #12
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	61bb      	str	r3, [r7, #24]
 800d1f6:	69ba      	ldr	r2, [r7, #24]
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d3e2      	bcc.n	800d1c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	3724      	adds	r7, #36	@ 0x24
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b08b      	sub	sp, #44	@ 0x2c
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	4613      	mov	r3, r2
 800d218:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d222:	88fb      	ldrh	r3, [r7, #6]
 800d224:	089b      	lsrs	r3, r3, #2
 800d226:	b29b      	uxth	r3, r3
 800d228:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d22a:	88fb      	ldrh	r3, [r7, #6]
 800d22c:	f003 0303 	and.w	r3, r3, #3
 800d230:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d232:	2300      	movs	r3, #0
 800d234:	623b      	str	r3, [r7, #32]
 800d236:	e014      	b.n	800d262 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d242:	601a      	str	r2, [r3, #0]
    pDest++;
 800d244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d246:	3301      	adds	r3, #1
 800d248:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24c:	3301      	adds	r3, #1
 800d24e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d252:	3301      	adds	r3, #1
 800d254:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d258:	3301      	adds	r3, #1
 800d25a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d25c:	6a3b      	ldr	r3, [r7, #32]
 800d25e:	3301      	adds	r3, #1
 800d260:	623b      	str	r3, [r7, #32]
 800d262:	6a3a      	ldr	r2, [r7, #32]
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	429a      	cmp	r2, r3
 800d268:	d3e6      	bcc.n	800d238 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d26a:	8bfb      	ldrh	r3, [r7, #30]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d01e      	beq.n	800d2ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d270:	2300      	movs	r3, #0
 800d272:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d27a:	461a      	mov	r2, r3
 800d27c:	f107 0310 	add.w	r3, r7, #16
 800d280:	6812      	ldr	r2, [r2, #0]
 800d282:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d284:	693a      	ldr	r2, [r7, #16]
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	00db      	lsls	r3, r3, #3
 800d28c:	fa22 f303 	lsr.w	r3, r2, r3
 800d290:	b2da      	uxtb	r2, r3
 800d292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d294:	701a      	strb	r2, [r3, #0]
      i++;
 800d296:	6a3b      	ldr	r3, [r7, #32]
 800d298:	3301      	adds	r3, #1
 800d29a:	623b      	str	r3, [r7, #32]
      pDest++;
 800d29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29e:	3301      	adds	r3, #1
 800d2a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d2a2:	8bfb      	ldrh	r3, [r7, #30]
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d2a8:	8bfb      	ldrh	r3, [r7, #30]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d1ea      	bne.n	800d284 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	372c      	adds	r7, #44	@ 0x2c
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	695b      	ldr	r3, [r3, #20]
 800d2c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	699b      	ldr	r3, [r3, #24]
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3714      	adds	r7, #20
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800d2e2:	b480      	push	{r7}
 800d2e4:	b085      	sub	sp, #20
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800d2f2:	78fb      	ldrb	r3, [r7, #3]
 800d2f4:	015a      	lsls	r2, r3, #5
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800d302:	78fb      	ldrb	r3, [r7, #3]
 800d304:	015a      	lsls	r2, r3, #5
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	4413      	add	r3, r2
 800d30a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	68ba      	ldr	r2, [r7, #8]
 800d312:	4013      	ands	r3, r2
 800d314:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d316:	68bb      	ldr	r3, [r7, #8]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3714      	adds	r7, #20
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	695b      	ldr	r3, [r3, #20]
 800d330:	f003 0301 	and.w	r3, r3, #1
}
 800d334:	4618      	mov	r0, r3
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d340:	b480      	push	{r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d348:	2300      	movs	r3, #0
 800d34a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	3301      	adds	r3, #1
 800d350:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d358:	d901      	bls.n	800d35e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d35a:	2303      	movs	r3, #3
 800d35c:	e01b      	b.n	800d396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	691b      	ldr	r3, [r3, #16]
 800d362:	2b00      	cmp	r3, #0
 800d364:	daf2      	bge.n	800d34c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d366:	2300      	movs	r3, #0
 800d368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	f043 0201 	orr.w	r2, r3, #1
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	3301      	adds	r3, #1
 800d37a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d382:	d901      	bls.n	800d388 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d384:	2303      	movs	r3, #3
 800d386:	e006      	b.n	800d396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	691b      	ldr	r3, [r3, #16]
 800d38c:	f003 0301 	and.w	r3, r3, #1
 800d390:	2b01      	cmp	r3, #1
 800d392:	d0f0      	beq.n	800d376 <USB_CoreReset+0x36>

  return HAL_OK;
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	3714      	adds	r7, #20
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr
	...

0800d3a4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d3a4:	b084      	sub	sp, #16
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b086      	sub	sp, #24
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d3b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3ce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d119      	bne.n	800d416 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d3e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d10a      	bne.n	800d400 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d3f8:	f043 0304 	orr.w	r3, r3, #4
 800d3fc:	6013      	str	r3, [r2, #0]
 800d3fe:	e014      	b.n	800d42a <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d40e:	f023 0304 	bic.w	r3, r3, #4
 800d412:	6013      	str	r3, [r2, #0]
 800d414:	e009      	b.n	800d42a <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	68fa      	ldr	r2, [r7, #12]
 800d420:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d424:	f023 0304 	bic.w	r3, r3, #4
 800d428:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d42a:	2110      	movs	r1, #16
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f7ff fe4f 	bl	800d0d0 <USB_FlushTxFifo>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d001      	beq.n	800d43c <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800d438:	2301      	movs	r3, #1
 800d43a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f7ff fe79 	bl	800d134 <USB_FlushRxFifo>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d001      	beq.n	800d44c <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800d448:	2301      	movs	r3, #1
 800d44a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d44c:	2300      	movs	r3, #0
 800d44e:	613b      	str	r3, [r7, #16]
 800d450:	e015      	b.n	800d47e <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	015a      	lsls	r2, r3, #5
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	4413      	add	r3, r2
 800d45a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d45e:	461a      	mov	r2, r3
 800d460:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d464:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	015a      	lsls	r2, r3, #5
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	4413      	add	r3, r2
 800d46e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d472:	461a      	mov	r2, r3
 800d474:	2300      	movs	r3, #0
 800d476:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	3301      	adds	r3, #1
 800d47c:	613b      	str	r3, [r7, #16]
 800d47e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d482:	461a      	mov	r2, r3
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	4293      	cmp	r3, r2
 800d488:	d3e3      	bcc.n	800d452 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2200      	movs	r2, #0
 800d48e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d496:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	4a18      	ldr	r2, [pc, #96]	@ (800d4fc <USB_HostInit+0x158>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d10b      	bne.n	800d4b8 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4a6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	4a15      	ldr	r2, [pc, #84]	@ (800d500 <USB_HostInit+0x15c>)
 800d4ac:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4a14      	ldr	r2, [pc, #80]	@ (800d504 <USB_HostInit+0x160>)
 800d4b2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800d4b6:	e009      	b.n	800d4cc <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2280      	movs	r2, #128	@ 0x80
 800d4bc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	4a11      	ldr	r2, [pc, #68]	@ (800d508 <USB_HostInit+0x164>)
 800d4c2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	4a11      	ldr	r2, [pc, #68]	@ (800d50c <USB_HostInit+0x168>)
 800d4c8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d4cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d105      	bne.n	800d4e0 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	699b      	ldr	r3, [r3, #24]
 800d4d8:	f043 0210 	orr.w	r2, r3, #16
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	699a      	ldr	r2, [r3, #24]
 800d4e4:	4b0a      	ldr	r3, [pc, #40]	@ (800d510 <USB_HostInit+0x16c>)
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3718      	adds	r7, #24
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d4f8:	b004      	add	sp, #16
 800d4fa:	4770      	bx	lr
 800d4fc:	40040000 	.word	0x40040000
 800d500:	01000200 	.word	0x01000200
 800d504:	00e00300 	.word	0x00e00300
 800d508:	00600080 	.word	0x00600080
 800d50c:	004000e0 	.word	0x004000e0
 800d510:	a3200008 	.word	0xa3200008

0800d514 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d514:	b480      	push	{r7}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	460b      	mov	r3, r1
 800d51e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d532:	f023 0303 	bic.w	r3, r3, #3
 800d536:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	78fb      	ldrb	r3, [r7, #3]
 800d542:	f003 0303 	and.w	r3, r3, #3
 800d546:	68f9      	ldr	r1, [r7, #12]
 800d548:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d54c:	4313      	orrs	r3, r2
 800d54e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d550:	78fb      	ldrb	r3, [r7, #3]
 800d552:	2b01      	cmp	r3, #1
 800d554:	d107      	bne.n	800d566 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d55c:	461a      	mov	r2, r3
 800d55e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d562:	6053      	str	r3, [r2, #4]
 800d564:	e00c      	b.n	800d580 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800d566:	78fb      	ldrb	r3, [r7, #3]
 800d568:	2b02      	cmp	r3, #2
 800d56a:	d107      	bne.n	800d57c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d572:	461a      	mov	r2, r3
 800d574:	f241 7370 	movw	r3, #6000	@ 0x1770
 800d578:	6053      	str	r3, [r2, #4]
 800d57a:	e001      	b.n	800d580 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800d57c:	2301      	movs	r3, #1
 800d57e:	e000      	b.n	800d582 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3714      	adds	r7, #20
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr

0800d58e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800d58e:	b580      	push	{r7, lr}
 800d590:	b084      	sub	sp, #16
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d59a:	2300      	movs	r3, #0
 800d59c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800d5ae:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d5b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d5bc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d5be:	2064      	movs	r0, #100	@ 0x64
 800d5c0:	f7f5 fc30 	bl	8002e24 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d5cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d5d0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d5d2:	200a      	movs	r0, #10
 800d5d4:	f7f5 fc26 	bl	8002e24 <HAL_Delay>

  return HAL_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3710      	adds	r7, #16
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d5e2:	b480      	push	{r7}
 800d5e4:	b085      	sub	sp, #20
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800d606:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d109      	bne.n	800d626 <USB_DriveVbus+0x44>
 800d612:	78fb      	ldrb	r3, [r7, #3]
 800d614:	2b01      	cmp	r3, #1
 800d616:	d106      	bne.n	800d626 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d620:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d624:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d62c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d630:	d109      	bne.n	800d646 <USB_DriveVbus+0x64>
 800d632:	78fb      	ldrb	r3, [r7, #3]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d106      	bne.n	800d646 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	68fa      	ldr	r2, [r7, #12]
 800d63c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d640:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d644:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3714      	adds	r7, #20
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800d654:	b480      	push	{r7}
 800d656:	b085      	sub	sp, #20
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d660:	2300      	movs	r3, #0
 800d662:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	0c5b      	lsrs	r3, r3, #17
 800d672:	f003 0303 	and.w	r3, r3, #3
}
 800d676:	4618      	mov	r0, r3
 800d678:	3714      	adds	r7, #20
 800d67a:	46bd      	mov	sp, r7
 800d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d680:	4770      	bx	lr

0800d682 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800d682:	b480      	push	{r7}
 800d684:	b085      	sub	sp, #20
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	b29b      	uxth	r3, r3
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3714      	adds	r7, #20
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b088      	sub	sp, #32
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	4608      	mov	r0, r1
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	70fb      	strb	r3, [r7, #3]
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	70bb      	strb	r3, [r7, #2]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800d6c6:	78fb      	ldrb	r3, [r7, #3]
 800d6c8:	015a      	lsls	r2, r3, #5
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d6d8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d6da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d6de:	2b03      	cmp	r3, #3
 800d6e0:	d87c      	bhi.n	800d7dc <USB_HC_Init+0x138>
 800d6e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e8 <USB_HC_Init+0x44>)
 800d6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e8:	0800d6f9 	.word	0x0800d6f9
 800d6ec:	0800d79f 	.word	0x0800d79f
 800d6f0:	0800d6f9 	.word	0x0800d6f9
 800d6f4:	0800d761 	.word	0x0800d761
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d6f8:	78fb      	ldrb	r3, [r7, #3]
 800d6fa:	015a      	lsls	r2, r3, #5
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	4413      	add	r3, r2
 800d700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d704:	461a      	mov	r2, r3
 800d706:	f240 439d 	movw	r3, #1181	@ 0x49d
 800d70a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d70c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d710:	2b00      	cmp	r3, #0
 800d712:	da10      	bge.n	800d736 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d714:	78fb      	ldrb	r3, [r7, #3]
 800d716:	015a      	lsls	r2, r3, #5
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	4413      	add	r3, r2
 800d71c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	78fa      	ldrb	r2, [r7, #3]
 800d724:	0151      	lsls	r1, r2, #5
 800d726:	693a      	ldr	r2, [r7, #16]
 800d728:	440a      	add	r2, r1
 800d72a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d72e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d732:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800d734:	e055      	b.n	800d7e2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4a6f      	ldr	r2, [pc, #444]	@ (800d8f8 <USB_HC_Init+0x254>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d151      	bne.n	800d7e2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d73e:	78fb      	ldrb	r3, [r7, #3]
 800d740:	015a      	lsls	r2, r3, #5
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	4413      	add	r3, r2
 800d746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	78fa      	ldrb	r2, [r7, #3]
 800d74e:	0151      	lsls	r1, r2, #5
 800d750:	693a      	ldr	r2, [r7, #16]
 800d752:	440a      	add	r2, r1
 800d754:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d758:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800d75c:	60d3      	str	r3, [r2, #12]
      break;
 800d75e:	e040      	b.n	800d7e2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d760:	78fb      	ldrb	r3, [r7, #3]
 800d762:	015a      	lsls	r2, r3, #5
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	4413      	add	r3, r2
 800d768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d76c:	461a      	mov	r2, r3
 800d76e:	f240 639d 	movw	r3, #1693	@ 0x69d
 800d772:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d774:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	da34      	bge.n	800d7e6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d77c:	78fb      	ldrb	r3, [r7, #3]
 800d77e:	015a      	lsls	r2, r3, #5
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	4413      	add	r3, r2
 800d784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	78fa      	ldrb	r2, [r7, #3]
 800d78c:	0151      	lsls	r1, r2, #5
 800d78e:	693a      	ldr	r2, [r7, #16]
 800d790:	440a      	add	r2, r1
 800d792:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d79a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d79c:	e023      	b.n	800d7e6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d79e:	78fb      	ldrb	r3, [r7, #3]
 800d7a0:	015a      	lsls	r2, r3, #5
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	f240 2325 	movw	r3, #549	@ 0x225
 800d7b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d7b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	da17      	bge.n	800d7ea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d7ba:	78fb      	ldrb	r3, [r7, #3]
 800d7bc:	015a      	lsls	r2, r3, #5
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	78fa      	ldrb	r2, [r7, #3]
 800d7ca:	0151      	lsls	r1, r2, #5
 800d7cc:	693a      	ldr	r2, [r7, #16]
 800d7ce:	440a      	add	r2, r1
 800d7d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d7d4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800d7d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d7da:	e006      	b.n	800d7ea <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	77fb      	strb	r3, [r7, #31]
      break;
 800d7e0:	e004      	b.n	800d7ec <USB_HC_Init+0x148>
      break;
 800d7e2:	bf00      	nop
 800d7e4:	e002      	b.n	800d7ec <USB_HC_Init+0x148>
      break;
 800d7e6:	bf00      	nop
 800d7e8:	e000      	b.n	800d7ec <USB_HC_Init+0x148>
      break;
 800d7ea:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800d7ec:	78fb      	ldrb	r3, [r7, #3]
 800d7ee:	015a      	lsls	r2, r3, #5
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800d7fe:	78fb      	ldrb	r3, [r7, #3]
 800d800:	015a      	lsls	r2, r3, #5
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	4413      	add	r3, r2
 800d806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	78fa      	ldrb	r2, [r7, #3]
 800d80e:	0151      	lsls	r1, r2, #5
 800d810:	693a      	ldr	r2, [r7, #16]
 800d812:	440a      	add	r2, r1
 800d814:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d818:	f043 0302 	orr.w	r3, r3, #2
 800d81c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d824:	699a      	ldr	r2, [r3, #24]
 800d826:	78fb      	ldrb	r3, [r7, #3]
 800d828:	f003 030f 	and.w	r3, r3, #15
 800d82c:	2101      	movs	r1, #1
 800d82e:	fa01 f303 	lsl.w	r3, r1, r3
 800d832:	6939      	ldr	r1, [r7, #16]
 800d834:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d838:	4313      	orrs	r3, r2
 800d83a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	699b      	ldr	r3, [r3, #24]
 800d840:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d848:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	da03      	bge.n	800d858 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d850:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d854:	61bb      	str	r3, [r7, #24]
 800d856:	e001      	b.n	800d85c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800d858:	2300      	movs	r3, #0
 800d85a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f7ff fef9 	bl	800d654 <USB_GetHostSpeed>
 800d862:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d864:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d868:	2b02      	cmp	r3, #2
 800d86a:	d106      	bne.n	800d87a <USB_HC_Init+0x1d6>
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2b02      	cmp	r3, #2
 800d870:	d003      	beq.n	800d87a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d872:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d876:	617b      	str	r3, [r7, #20]
 800d878:	e001      	b.n	800d87e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d87a:	2300      	movs	r3, #0
 800d87c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d87e:	787b      	ldrb	r3, [r7, #1]
 800d880:	059b      	lsls	r3, r3, #22
 800d882:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d886:	78bb      	ldrb	r3, [r7, #2]
 800d888:	02db      	lsls	r3, r3, #11
 800d88a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d88e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d890:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d894:	049b      	lsls	r3, r3, #18
 800d896:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d89a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800d89c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d89e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d8a2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	431a      	orrs	r2, r3
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d8ac:	78fa      	ldrb	r2, [r7, #3]
 800d8ae:	0151      	lsls	r1, r2, #5
 800d8b0:	693a      	ldr	r2, [r7, #16]
 800d8b2:	440a      	add	r2, r1
 800d8b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800d8b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d8bc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800d8be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d8c2:	2b03      	cmp	r3, #3
 800d8c4:	d003      	beq.n	800d8ce <USB_HC_Init+0x22a>
 800d8c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d10f      	bne.n	800d8ee <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800d8ce:	78fb      	ldrb	r3, [r7, #3]
 800d8d0:	015a      	lsls	r2, r3, #5
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	78fa      	ldrb	r2, [r7, #3]
 800d8de:	0151      	lsls	r1, r2, #5
 800d8e0:	693a      	ldr	r2, [r7, #16]
 800d8e2:	440a      	add	r2, r1
 800d8e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d8e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d8ec:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d8ee:	7ffb      	ldrb	r3, [r7, #31]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3720      	adds	r7, #32
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	40040000 	.word	0x40040000

0800d8fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b08c      	sub	sp, #48	@ 0x30
 800d900:	af02      	add	r7, sp, #8
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	4613      	mov	r3, r2
 800d908:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	785b      	ldrb	r3, [r3, #1]
 800d912:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800d914:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d918:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	4a5d      	ldr	r2, [pc, #372]	@ (800da94 <USB_HC_StartXfer+0x198>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d12f      	bne.n	800d982 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800d922:	79fb      	ldrb	r3, [r7, #7]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d11c      	bne.n	800d962 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	7c9b      	ldrb	r3, [r3, #18]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d003      	beq.n	800d938 <USB_HC_StartXfer+0x3c>
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	7c9b      	ldrb	r3, [r3, #18]
 800d934:	2b02      	cmp	r3, #2
 800d936:	d124      	bne.n	800d982 <USB_HC_StartXfer+0x86>
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	799b      	ldrb	r3, [r3, #6]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d120      	bne.n	800d982 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	015a      	lsls	r2, r3, #5
 800d944:	6a3b      	ldr	r3, [r7, #32]
 800d946:	4413      	add	r3, r2
 800d948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	69fa      	ldr	r2, [r7, #28]
 800d950:	0151      	lsls	r1, r2, #5
 800d952:	6a3a      	ldr	r2, [r7, #32]
 800d954:	440a      	add	r2, r1
 800d956:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d95a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d95e:	60d3      	str	r3, [r2, #12]
 800d960:	e00f      	b.n	800d982 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	791b      	ldrb	r3, [r3, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10b      	bne.n	800d982 <USB_HC_StartXfer+0x86>
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	795b      	ldrb	r3, [r3, #5]
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d107      	bne.n	800d982 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	785b      	ldrb	r3, [r3, #1]
 800d976:	4619      	mov	r1, r3
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f000 fb6b 	bl	800e054 <USB_DoPing>
        return HAL_OK;
 800d97e:	2300      	movs	r3, #0
 800d980:	e232      	b.n	800dde8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	799b      	ldrb	r3, [r3, #6]
 800d986:	2b01      	cmp	r3, #1
 800d988:	d158      	bne.n	800da3c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800d98a:	2301      	movs	r3, #1
 800d98c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	78db      	ldrb	r3, [r3, #3]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d007      	beq.n	800d9a6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d996:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	8a92      	ldrh	r2, [r2, #20]
 800d99c:	fb03 f202 	mul.w	r2, r3, r2
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	61da      	str	r2, [r3, #28]
 800d9a4:	e07c      	b.n	800daa0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	7c9b      	ldrb	r3, [r3, #18]
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d130      	bne.n	800da10 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	6a1b      	ldr	r3, [r3, #32]
 800d9b2:	2bbc      	cmp	r3, #188	@ 0xbc
 800d9b4:	d918      	bls.n	800d9e8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	8a9b      	ldrh	r3, [r3, #20]
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	69da      	ldr	r2, [r3, #28]
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d003      	beq.n	800d9d8 <USB_HC_StartXfer+0xdc>
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	d103      	bne.n	800d9e0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	2202      	movs	r2, #2
 800d9dc:	60da      	str	r2, [r3, #12]
 800d9de:	e05f      	b.n	800daa0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	60da      	str	r2, [r3, #12]
 800d9e6:	e05b      	b.n	800daa0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	6a1a      	ldr	r2, [r3, #32]
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d007      	beq.n	800da08 <USB_HC_StartXfer+0x10c>
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d003      	beq.n	800da08 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2204      	movs	r2, #4
 800da04:	60da      	str	r2, [r3, #12]
 800da06:	e04b      	b.n	800daa0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	2203      	movs	r2, #3
 800da0c:	60da      	str	r2, [r3, #12]
 800da0e:	e047      	b.n	800daa0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800da10:	79fb      	ldrb	r3, [r7, #7]
 800da12:	2b01      	cmp	r3, #1
 800da14:	d10d      	bne.n	800da32 <USB_HC_StartXfer+0x136>
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	6a1b      	ldr	r3, [r3, #32]
 800da1a:	68ba      	ldr	r2, [r7, #8]
 800da1c:	8a92      	ldrh	r2, [r2, #20]
 800da1e:	4293      	cmp	r3, r2
 800da20:	d907      	bls.n	800da32 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800da22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da24:	68ba      	ldr	r2, [r7, #8]
 800da26:	8a92      	ldrh	r2, [r2, #20]
 800da28:	fb03 f202 	mul.w	r2, r3, r2
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	61da      	str	r2, [r3, #28]
 800da30:	e036      	b.n	800daa0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	6a1a      	ldr	r2, [r3, #32]
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	61da      	str	r2, [r3, #28]
 800da3a:	e031      	b.n	800daa0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	6a1b      	ldr	r3, [r3, #32]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d018      	beq.n	800da76 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	6a1b      	ldr	r3, [r3, #32]
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	8a92      	ldrh	r2, [r2, #20]
 800da4c:	4413      	add	r3, r2
 800da4e:	3b01      	subs	r3, #1
 800da50:	68ba      	ldr	r2, [r7, #8]
 800da52:	8a92      	ldrh	r2, [r2, #20]
 800da54:	fbb3 f3f2 	udiv	r3, r3, r2
 800da58:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800da5a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800da5c:	8b7b      	ldrh	r3, [r7, #26]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d90b      	bls.n	800da7a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800da62:	8b7b      	ldrh	r3, [r7, #26]
 800da64:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800da66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da68:	68ba      	ldr	r2, [r7, #8]
 800da6a:	8a92      	ldrh	r2, [r2, #20]
 800da6c:	fb03 f202 	mul.w	r2, r3, r2
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	61da      	str	r2, [r3, #28]
 800da74:	e001      	b.n	800da7a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800da76:	2301      	movs	r3, #1
 800da78:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	78db      	ldrb	r3, [r3, #3]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00a      	beq.n	800da98 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800da82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da84:	68ba      	ldr	r2, [r7, #8]
 800da86:	8a92      	ldrh	r2, [r2, #20]
 800da88:	fb03 f202 	mul.w	r2, r3, r2
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	61da      	str	r2, [r3, #28]
 800da90:	e006      	b.n	800daa0 <USB_HC_StartXfer+0x1a4>
 800da92:	bf00      	nop
 800da94:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	6a1a      	ldr	r2, [r3, #32]
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	69db      	ldr	r3, [r3, #28]
 800daa4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800daa8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800daaa:	04d9      	lsls	r1, r3, #19
 800daac:	4ba3      	ldr	r3, [pc, #652]	@ (800dd3c <USB_HC_StartXfer+0x440>)
 800daae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dab0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	7d9b      	ldrb	r3, [r3, #22]
 800dab6:	075b      	lsls	r3, r3, #29
 800dab8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dabc:	69f9      	ldr	r1, [r7, #28]
 800dabe:	0148      	lsls	r0, r1, #5
 800dac0:	6a39      	ldr	r1, [r7, #32]
 800dac2:	4401      	add	r1, r0
 800dac4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dac8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800daca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d009      	beq.n	800dae6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	6999      	ldr	r1, [r3, #24]
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	015a      	lsls	r2, r3, #5
 800dada:	6a3b      	ldr	r3, [r7, #32]
 800dadc:	4413      	add	r3, r2
 800dade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dae2:	460a      	mov	r2, r1
 800dae4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800dae6:	6a3b      	ldr	r3, [r7, #32]
 800dae8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	f003 0301 	and.w	r3, r3, #1
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	bf0c      	ite	eq
 800daf6:	2301      	moveq	r3, #1
 800daf8:	2300      	movne	r3, #0
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	015a      	lsls	r2, r3, #5
 800db02:	6a3b      	ldr	r3, [r7, #32]
 800db04:	4413      	add	r3, r2
 800db06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	69fa      	ldr	r2, [r7, #28]
 800db0e:	0151      	lsls	r1, r2, #5
 800db10:	6a3a      	ldr	r2, [r7, #32]
 800db12:	440a      	add	r2, r1
 800db14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800db18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800db1c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	015a      	lsls	r2, r3, #5
 800db22:	6a3b      	ldr	r3, [r7, #32]
 800db24:	4413      	add	r3, r2
 800db26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	7e7b      	ldrb	r3, [r7, #25]
 800db2e:	075b      	lsls	r3, r3, #29
 800db30:	69f9      	ldr	r1, [r7, #28]
 800db32:	0148      	lsls	r0, r1, #5
 800db34:	6a39      	ldr	r1, [r7, #32]
 800db36:	4401      	add	r1, r0
 800db38:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800db3c:	4313      	orrs	r3, r2
 800db3e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	799b      	ldrb	r3, [r3, #6]
 800db44:	2b01      	cmp	r3, #1
 800db46:	f040 80c3 	bne.w	800dcd0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	7c5b      	ldrb	r3, [r3, #17]
 800db4e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800db54:	4313      	orrs	r3, r2
 800db56:	69fa      	ldr	r2, [r7, #28]
 800db58:	0151      	lsls	r1, r2, #5
 800db5a:	6a3a      	ldr	r2, [r7, #32]
 800db5c:	440a      	add	r2, r1
 800db5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800db62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800db66:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	015a      	lsls	r2, r3, #5
 800db6c:	6a3b      	ldr	r3, [r7, #32]
 800db6e:	4413      	add	r3, r2
 800db70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	69fa      	ldr	r2, [r7, #28]
 800db78:	0151      	lsls	r1, r2, #5
 800db7a:	6a3a      	ldr	r2, [r7, #32]
 800db7c:	440a      	add	r2, r1
 800db7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800db82:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800db86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	79db      	ldrb	r3, [r3, #7]
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d123      	bne.n	800dbd8 <USB_HC_StartXfer+0x2dc>
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	78db      	ldrb	r3, [r3, #3]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d11f      	bne.n	800dbd8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800db98:	69fb      	ldr	r3, [r7, #28]
 800db9a:	015a      	lsls	r2, r3, #5
 800db9c:	6a3b      	ldr	r3, [r7, #32]
 800db9e:	4413      	add	r3, r2
 800dba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	69fa      	ldr	r2, [r7, #28]
 800dba8:	0151      	lsls	r1, r2, #5
 800dbaa:	6a3a      	ldr	r2, [r7, #32]
 800dbac:	440a      	add	r2, r1
 800dbae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dbb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dbb6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	015a      	lsls	r2, r3, #5
 800dbbc:	6a3b      	ldr	r3, [r7, #32]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbc4:	68db      	ldr	r3, [r3, #12]
 800dbc6:	69fa      	ldr	r2, [r7, #28]
 800dbc8:	0151      	lsls	r1, r2, #5
 800dbca:	6a3a      	ldr	r2, [r7, #32]
 800dbcc:	440a      	add	r2, r1
 800dbce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dbd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbd6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	7c9b      	ldrb	r3, [r3, #18]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d003      	beq.n	800dbe8 <USB_HC_StartXfer+0x2ec>
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	7c9b      	ldrb	r3, [r3, #18]
 800dbe4:	2b03      	cmp	r3, #3
 800dbe6:	d117      	bne.n	800dc18 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d113      	bne.n	800dc18 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	78db      	ldrb	r3, [r3, #3]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d10f      	bne.n	800dc18 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	015a      	lsls	r2, r3, #5
 800dbfc:	6a3b      	ldr	r3, [r7, #32]
 800dbfe:	4413      	add	r3, r2
 800dc00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	69fa      	ldr	r2, [r7, #28]
 800dc08:	0151      	lsls	r1, r2, #5
 800dc0a:	6a3a      	ldr	r2, [r7, #32]
 800dc0c:	440a      	add	r2, r1
 800dc0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc16:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	7c9b      	ldrb	r3, [r3, #18]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d162      	bne.n	800dce6 <USB_HC_StartXfer+0x3ea>
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	78db      	ldrb	r3, [r3, #3]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d15e      	bne.n	800dce6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	2b03      	cmp	r3, #3
 800dc30:	d858      	bhi.n	800dce4 <USB_HC_StartXfer+0x3e8>
 800dc32:	a201      	add	r2, pc, #4	@ (adr r2, 800dc38 <USB_HC_StartXfer+0x33c>)
 800dc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc38:	0800dc49 	.word	0x0800dc49
 800dc3c:	0800dc6b 	.word	0x0800dc6b
 800dc40:	0800dc8d 	.word	0x0800dc8d
 800dc44:	0800dcaf 	.word	0x0800dcaf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	015a      	lsls	r2, r3, #5
 800dc4c:	6a3b      	ldr	r3, [r7, #32]
 800dc4e:	4413      	add	r3, r2
 800dc50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	69fa      	ldr	r2, [r7, #28]
 800dc58:	0151      	lsls	r1, r2, #5
 800dc5a:	6a3a      	ldr	r2, [r7, #32]
 800dc5c:	440a      	add	r2, r1
 800dc5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc66:	6053      	str	r3, [r2, #4]
          break;
 800dc68:	e03d      	b.n	800dce6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	015a      	lsls	r2, r3, #5
 800dc6e:	6a3b      	ldr	r3, [r7, #32]
 800dc70:	4413      	add	r3, r2
 800dc72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	69fa      	ldr	r2, [r7, #28]
 800dc7a:	0151      	lsls	r1, r2, #5
 800dc7c:	6a3a      	ldr	r2, [r7, #32]
 800dc7e:	440a      	add	r2, r1
 800dc80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc84:	f043 030e 	orr.w	r3, r3, #14
 800dc88:	6053      	str	r3, [r2, #4]
          break;
 800dc8a:	e02c      	b.n	800dce6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	015a      	lsls	r2, r3, #5
 800dc90:	6a3b      	ldr	r3, [r7, #32]
 800dc92:	4413      	add	r3, r2
 800dc94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	69fa      	ldr	r2, [r7, #28]
 800dc9c:	0151      	lsls	r1, r2, #5
 800dc9e:	6a3a      	ldr	r2, [r7, #32]
 800dca0:	440a      	add	r2, r1
 800dca2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dca6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dcaa:	6053      	str	r3, [r2, #4]
          break;
 800dcac:	e01b      	b.n	800dce6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	015a      	lsls	r2, r3, #5
 800dcb2:	6a3b      	ldr	r3, [r7, #32]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	69fa      	ldr	r2, [r7, #28]
 800dcbe:	0151      	lsls	r1, r2, #5
 800dcc0:	6a3a      	ldr	r2, [r7, #32]
 800dcc2:	440a      	add	r2, r1
 800dcc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dcc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dccc:	6053      	str	r3, [r2, #4]
          break;
 800dcce:	e00a      	b.n	800dce6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	015a      	lsls	r2, r3, #5
 800dcd4:	6a3b      	ldr	r3, [r7, #32]
 800dcd6:	4413      	add	r3, r2
 800dcd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcdc:	461a      	mov	r2, r3
 800dcde:	2300      	movs	r3, #0
 800dce0:	6053      	str	r3, [r2, #4]
 800dce2:	e000      	b.n	800dce6 <USB_HC_StartXfer+0x3ea>
          break;
 800dce4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	015a      	lsls	r2, r3, #5
 800dcea:	6a3b      	ldr	r3, [r7, #32]
 800dcec:	4413      	add	r3, r2
 800dcee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800dcfc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	78db      	ldrb	r3, [r3, #3]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d004      	beq.n	800dd10 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd0c:	613b      	str	r3, [r7, #16]
 800dd0e:	e003      	b.n	800dd18 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dd16:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dd1e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	015a      	lsls	r2, r3, #5
 800dd24:	6a3b      	ldr	r3, [r7, #32]
 800dd26:	4413      	add	r3, r2
 800dd28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800dd32:	79fb      	ldrb	r3, [r7, #7]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d003      	beq.n	800dd40 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	e055      	b.n	800dde8 <USB_HC_StartXfer+0x4ec>
 800dd3c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	78db      	ldrb	r3, [r3, #3]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d14e      	bne.n	800dde6 <USB_HC_StartXfer+0x4ea>
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	6a1b      	ldr	r3, [r3, #32]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d04a      	beq.n	800dde6 <USB_HC_StartXfer+0x4ea>
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	79db      	ldrb	r3, [r3, #7]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d146      	bne.n	800dde6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	7c9b      	ldrb	r3, [r3, #18]
 800dd5c:	2b03      	cmp	r3, #3
 800dd5e:	d831      	bhi.n	800ddc4 <USB_HC_StartXfer+0x4c8>
 800dd60:	a201      	add	r2, pc, #4	@ (adr r2, 800dd68 <USB_HC_StartXfer+0x46c>)
 800dd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd66:	bf00      	nop
 800dd68:	0800dd79 	.word	0x0800dd79
 800dd6c:	0800dd9d 	.word	0x0800dd9d
 800dd70:	0800dd79 	.word	0x0800dd79
 800dd74:	0800dd9d 	.word	0x0800dd9d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	6a1b      	ldr	r3, [r3, #32]
 800dd7c:	3303      	adds	r3, #3
 800dd7e:	089b      	lsrs	r3, r3, #2
 800dd80:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800dd82:	8afa      	ldrh	r2, [r7, #22]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d91c      	bls.n	800ddc8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	699b      	ldr	r3, [r3, #24]
 800dd92:	f043 0220 	orr.w	r2, r3, #32
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	619a      	str	r2, [r3, #24]
        }
        break;
 800dd9a:	e015      	b.n	800ddc8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	6a1b      	ldr	r3, [r3, #32]
 800dda0:	3303      	adds	r3, #3
 800dda2:	089b      	lsrs	r3, r3, #2
 800dda4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800dda6:	8afa      	ldrh	r2, [r7, #22]
 800dda8:	6a3b      	ldr	r3, [r7, #32]
 800ddaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d90a      	bls.n	800ddcc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	699b      	ldr	r3, [r3, #24]
 800ddba:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	619a      	str	r2, [r3, #24]
        }
        break;
 800ddc2:	e003      	b.n	800ddcc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800ddc4:	bf00      	nop
 800ddc6:	e002      	b.n	800ddce <USB_HC_StartXfer+0x4d2>
        break;
 800ddc8:	bf00      	nop
 800ddca:	e000      	b.n	800ddce <USB_HC_StartXfer+0x4d2>
        break;
 800ddcc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	6999      	ldr	r1, [r3, #24]
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	785a      	ldrb	r2, [r3, #1]
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	6a1b      	ldr	r3, [r3, #32]
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	2000      	movs	r0, #0
 800ddde:	9000      	str	r0, [sp, #0]
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f7ff f9d5 	bl	800d190 <USB_WritePacket>
  }

  return HAL_OK;
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3728      	adds	r7, #40	@ 0x28
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b085      	sub	sp, #20
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de02:	695b      	ldr	r3, [r3, #20]
 800de04:	b29b      	uxth	r3, r3
}
 800de06:	4618      	mov	r0, r3
 800de08:	3714      	adds	r7, #20
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr

0800de12 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800de12:	b480      	push	{r7}
 800de14:	b089      	sub	sp, #36	@ 0x24
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	460b      	mov	r3, r1
 800de1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800de22:	78fb      	ldrb	r3, [r7, #3]
 800de24:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800de26:	2300      	movs	r3, #0
 800de28:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	015a      	lsls	r2, r3, #5
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	4413      	add	r3, r2
 800de32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	0c9b      	lsrs	r3, r3, #18
 800de3a:	f003 0303 	and.w	r3, r3, #3
 800de3e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	015a      	lsls	r2, r3, #5
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	4413      	add	r3, r2
 800de48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	0fdb      	lsrs	r3, r3, #31
 800de50:	f003 0301 	and.w	r3, r3, #1
 800de54:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	015a      	lsls	r2, r3, #5
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	4413      	add	r3, r2
 800de5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	0fdb      	lsrs	r3, r3, #31
 800de66:	f003 0301 	and.w	r3, r3, #1
 800de6a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	689b      	ldr	r3, [r3, #8]
 800de70:	f003 0320 	and.w	r3, r3, #32
 800de74:	2b20      	cmp	r3, #32
 800de76:	d10d      	bne.n	800de94 <USB_HC_Halt+0x82>
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d10a      	bne.n	800de94 <USB_HC_Halt+0x82>
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d005      	beq.n	800de90 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	2b01      	cmp	r3, #1
 800de88:	d002      	beq.n	800de90 <USB_HC_Halt+0x7e>
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	2b03      	cmp	r3, #3
 800de8e:	d101      	bne.n	800de94 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800de90:	2300      	movs	r3, #0
 800de92:	e0d8      	b.n	800e046 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d002      	beq.n	800dea0 <USB_HC_Halt+0x8e>
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d173      	bne.n	800df88 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dea0:	69bb      	ldr	r3, [r7, #24]
 800dea2:	015a      	lsls	r2, r3, #5
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	4413      	add	r3, r2
 800dea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	69ba      	ldr	r2, [r7, #24]
 800deb0:	0151      	lsls	r1, r2, #5
 800deb2:	69fa      	ldr	r2, [r7, #28]
 800deb4:	440a      	add	r2, r1
 800deb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800deba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800debe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	f003 0320 	and.w	r3, r3, #32
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d14a      	bne.n	800df62 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d133      	bne.n	800df40 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	015a      	lsls	r2, r3, #5
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	4413      	add	r3, r2
 800dee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	69ba      	ldr	r2, [r7, #24]
 800dee8:	0151      	lsls	r1, r2, #5
 800deea:	69fa      	ldr	r2, [r7, #28]
 800deec:	440a      	add	r2, r1
 800deee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800def2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800def6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	015a      	lsls	r2, r3, #5
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	4413      	add	r3, r2
 800df00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	69ba      	ldr	r2, [r7, #24]
 800df08:	0151      	lsls	r1, r2, #5
 800df0a:	69fa      	ldr	r2, [r7, #28]
 800df0c:	440a      	add	r2, r1
 800df0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800df16:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	3301      	adds	r3, #1
 800df1c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800df24:	d82e      	bhi.n	800df84 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800df26:	69bb      	ldr	r3, [r7, #24]
 800df28:	015a      	lsls	r2, r3, #5
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	4413      	add	r3, r2
 800df2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800df38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800df3c:	d0ec      	beq.n	800df18 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800df3e:	e081      	b.n	800e044 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	015a      	lsls	r2, r3, #5
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	4413      	add	r3, r2
 800df48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	69ba      	ldr	r2, [r7, #24]
 800df50:	0151      	lsls	r1, r2, #5
 800df52:	69fa      	ldr	r2, [r7, #28]
 800df54:	440a      	add	r2, r1
 800df56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800df5e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800df60:	e070      	b.n	800e044 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	015a      	lsls	r2, r3, #5
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	4413      	add	r3, r2
 800df6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	69ba      	ldr	r2, [r7, #24]
 800df72:	0151      	lsls	r1, r2, #5
 800df74:	69fa      	ldr	r2, [r7, #28]
 800df76:	440a      	add	r2, r1
 800df78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800df80:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800df82:	e05f      	b.n	800e044 <USB_HC_Halt+0x232>
            break;
 800df84:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800df86:	e05d      	b.n	800e044 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	015a      	lsls	r2, r3, #5
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	4413      	add	r3, r2
 800df90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	69ba      	ldr	r2, [r7, #24]
 800df98:	0151      	lsls	r1, r2, #5
 800df9a:	69fa      	ldr	r2, [r7, #28]
 800df9c:	440a      	add	r2, r1
 800df9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dfa2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dfa6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dfae:	691b      	ldr	r3, [r3, #16]
 800dfb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d133      	bne.n	800e020 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	015a      	lsls	r2, r3, #5
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	4413      	add	r3, r2
 800dfc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	69ba      	ldr	r2, [r7, #24]
 800dfc8:	0151      	lsls	r1, r2, #5
 800dfca:	69fa      	ldr	r2, [r7, #28]
 800dfcc:	440a      	add	r2, r1
 800dfce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dfd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dfd6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dfd8:	69bb      	ldr	r3, [r7, #24]
 800dfda:	015a      	lsls	r2, r3, #5
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	4413      	add	r3, r2
 800dfe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	69ba      	ldr	r2, [r7, #24]
 800dfe8:	0151      	lsls	r1, r2, #5
 800dfea:	69fa      	ldr	r2, [r7, #28]
 800dfec:	440a      	add	r2, r1
 800dfee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dff2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dff6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	3301      	adds	r3, #1
 800dffc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e004:	d81d      	bhi.n	800e042 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	015a      	lsls	r2, r3, #5
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	4413      	add	r3, r2
 800e00e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e018:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e01c:	d0ec      	beq.n	800dff8 <USB_HC_Halt+0x1e6>
 800e01e:	e011      	b.n	800e044 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	015a      	lsls	r2, r3, #5
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	4413      	add	r3, r2
 800e028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	69ba      	ldr	r2, [r7, #24]
 800e030:	0151      	lsls	r1, r2, #5
 800e032:	69fa      	ldr	r2, [r7, #28]
 800e034:	440a      	add	r2, r1
 800e036:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e03a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e03e:	6013      	str	r3, [r2, #0]
 800e040:	e000      	b.n	800e044 <USB_HC_Halt+0x232>
          break;
 800e042:	bf00      	nop
    }
  }

  return HAL_OK;
 800e044:	2300      	movs	r3, #0
}
 800e046:	4618      	mov	r0, r3
 800e048:	3724      	adds	r7, #36	@ 0x24
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
	...

0800e054 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e054:	b480      	push	{r7}
 800e056:	b087      	sub	sp, #28
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	460b      	mov	r3, r1
 800e05e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e064:	78fb      	ldrb	r3, [r7, #3]
 800e066:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e068:	2301      	movs	r3, #1
 800e06a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	04da      	lsls	r2, r3, #19
 800e070:	4b15      	ldr	r3, [pc, #84]	@ (800e0c8 <USB_DoPing+0x74>)
 800e072:	4013      	ands	r3, r2
 800e074:	693a      	ldr	r2, [r7, #16]
 800e076:	0151      	lsls	r1, r2, #5
 800e078:	697a      	ldr	r2, [r7, #20]
 800e07a:	440a      	add	r2, r1
 800e07c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e080:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e084:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	015a      	lsls	r2, r3, #5
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	4413      	add	r3, r2
 800e08e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e09c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e0a4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	015a      	lsls	r2, r3, #5
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	371c      	adds	r7, #28
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr
 800e0c6:	bf00      	nop
 800e0c8:	1ff80000 	.word	0x1ff80000

0800e0cc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b088      	sub	sp, #32
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f7fe ff98 	bl	800d016 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e0e6:	2110      	movs	r1, #16
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f7fe fff1 	bl	800d0d0 <USB_FlushTxFifo>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7ff f81b 	bl	800d134 <USB_FlushRxFifo>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d001      	beq.n	800e108 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800e104:	2301      	movs	r3, #1
 800e106:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e108:	2300      	movs	r3, #0
 800e10a:	61bb      	str	r3, [r7, #24]
 800e10c:	e01f      	b.n	800e14e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800e10e:	69bb      	ldr	r3, [r7, #24]
 800e110:	015a      	lsls	r2, r3, #5
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	4413      	add	r3, r2
 800e116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e124:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e12c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e134:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	015a      	lsls	r2, r3, #5
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	4413      	add	r3, r2
 800e13e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e142:	461a      	mov	r2, r3
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	3301      	adds	r3, #1
 800e14c:	61bb      	str	r3, [r7, #24]
 800e14e:	69bb      	ldr	r3, [r7, #24]
 800e150:	2b0f      	cmp	r3, #15
 800e152:	d9dc      	bls.n	800e10e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e154:	2300      	movs	r3, #0
 800e156:	61bb      	str	r3, [r7, #24]
 800e158:	e034      	b.n	800e1c4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	015a      	lsls	r2, r3, #5
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	4413      	add	r3, r2
 800e162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e170:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e178:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e180:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e182:	69bb      	ldr	r3, [r7, #24]
 800e184:	015a      	lsls	r2, r3, #5
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	4413      	add	r3, r2
 800e18a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e18e:	461a      	mov	r2, r3
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	3301      	adds	r3, #1
 800e198:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e1a0:	d80c      	bhi.n	800e1bc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	015a      	lsls	r2, r3, #5
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e1b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e1b8:	d0ec      	beq.n	800e194 <USB_StopHost+0xc8>
 800e1ba:	e000      	b.n	800e1be <USB_StopHost+0xf2>
        break;
 800e1bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	61bb      	str	r3, [r7, #24]
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	2b0f      	cmp	r3, #15
 800e1c8:	d9c7      	bls.n	800e15a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e1d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e1de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f7fe ff07 	bl	800cff4 <USB_EnableGlobalInt>

  return ret;
 800e1e6:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3720      	adds	r7, #32
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e1f4:	4904      	ldr	r1, [pc, #16]	@ (800e208 <MX_FATFS_Init+0x18>)
 800e1f6:	4805      	ldr	r0, [pc, #20]	@ (800e20c <MX_FATFS_Init+0x1c>)
 800e1f8:	f002 fd74 	bl	8010ce4 <FATFS_LinkDriver>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	461a      	mov	r2, r3
 800e200:	4b03      	ldr	r3, [pc, #12]	@ (800e210 <MX_FATFS_Init+0x20>)
 800e202:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e204:	bf00      	nop
 800e206:	bd80      	pop	{r7, pc}
 800e208:	20000d88 	.word	0x20000d88
 800e20c:	08013ce4 	.word	0x08013ce4
 800e210:	20000d84 	.word	0x20000d84

0800e214 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e21a:	2300      	movs	r3, #0
 800e21c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e21e:	f000 f87b 	bl	800e318 <BSP_SD_IsDetected>
 800e222:	4603      	mov	r3, r0
 800e224:	2b01      	cmp	r3, #1
 800e226:	d001      	beq.n	800e22c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e228:	2302      	movs	r3, #2
 800e22a:	e012      	b.n	800e252 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e22c:	480b      	ldr	r0, [pc, #44]	@ (800e25c <BSP_SD_Init+0x48>)
 800e22e:	f7fb f901 	bl	8009434 <HAL_SD_Init>
 800e232:	4603      	mov	r3, r0
 800e234:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e236:	79fb      	ldrb	r3, [r7, #7]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d109      	bne.n	800e250 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e23c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800e240:	4806      	ldr	r0, [pc, #24]	@ (800e25c <BSP_SD_Init+0x48>)
 800e242:	f7fb fd51 	bl	8009ce8 <HAL_SD_ConfigWideBusOperation>
 800e246:	4603      	mov	r3, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d001      	beq.n	800e250 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e24c:	2301      	movs	r3, #1
 800e24e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e250:	79fb      	ldrb	r3, [r7, #7]
}
 800e252:	4618      	mov	r0, r3
 800e254:	3708      	adds	r7, #8
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	200008dc 	.word	0x200008dc

0800e260 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e26c:	2300      	movs	r3, #0
 800e26e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	68f9      	ldr	r1, [r7, #12]
 800e276:	4806      	ldr	r0, [pc, #24]	@ (800e290 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e278:	f7fb f994 	bl	80095a4 <HAL_SD_ReadBlocks_DMA>
 800e27c:	4603      	mov	r3, r0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d001      	beq.n	800e286 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e286:	7dfb      	ldrb	r3, [r7, #23]
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3718      	adds	r7, #24
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	200008dc 	.word	0x200008dc

0800e294 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b086      	sub	sp, #24
 800e298:	af00      	add	r7, sp, #0
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	60b9      	str	r1, [r7, #8]
 800e29e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	68ba      	ldr	r2, [r7, #8]
 800e2a8:	68f9      	ldr	r1, [r7, #12]
 800e2aa:	4806      	ldr	r0, [pc, #24]	@ (800e2c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e2ac:	f7fb fa5c 	bl	8009768 <HAL_SD_WriteBlocks_DMA>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d001      	beq.n	800e2ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e2ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3718      	adds	r7, #24
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	200008dc 	.word	0x200008dc

0800e2c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e2cc:	4805      	ldr	r0, [pc, #20]	@ (800e2e4 <BSP_SD_GetCardState+0x1c>)
 800e2ce:	f7fb fda5 	bl	8009e1c <HAL_SD_GetCardState>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	2b04      	cmp	r3, #4
 800e2d6:	bf14      	ite	ne
 800e2d8:	2301      	movne	r3, #1
 800e2da:	2300      	moveq	r3, #0
 800e2dc:	b2db      	uxtb	r3, r3
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	200008dc 	.word	0x200008dc

0800e2e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e2f0:	6879      	ldr	r1, [r7, #4]
 800e2f2:	4803      	ldr	r0, [pc, #12]	@ (800e300 <BSP_SD_GetCardInfo+0x18>)
 800e2f4:	f7fb fccc 	bl	8009c90 <HAL_SD_GetCardInfo>
}
 800e2f8:	bf00      	nop
 800e2fa:	3708      	adds	r7, #8
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	200008dc 	.word	0x200008dc

0800e304 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e30c:	f000 f9b2 	bl	800e674 <BSP_SD_ReadCpltCallback>
}
 800e310:	bf00      	nop
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e31e:	2301      	movs	r3, #1
 800e320:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e322:	f000 f80b 	bl	800e33c <BSP_PlatformIsDetected>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d101      	bne.n	800e330 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e32c:	2300      	movs	r3, #0
 800e32e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e330:	79fb      	ldrb	r3, [r7, #7]
 800e332:	b2db      	uxtb	r3, r3
}
 800e334:	4618      	mov	r0, r3
 800e336:	3708      	adds	r7, #8
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e342:	2301      	movs	r3, #1
 800e344:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e346:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e34a:	4806      	ldr	r0, [pc, #24]	@ (800e364 <BSP_PlatformIsDetected+0x28>)
 800e34c:	f7f6 f9f0 	bl	8004730 <HAL_GPIO_ReadPin>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e356:	2300      	movs	r3, #0
 800e358:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e35a:	79fb      	ldrb	r3, [r7, #7]
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}
 800e364:	40020800 	.word	0x40020800

0800e368 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800e370:	f002 fd04 	bl	8010d7c <osKernelSysTick>
 800e374:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800e376:	e006      	b.n	800e386 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e378:	f7ff ffa6 	bl	800e2c8 <BSP_SD_GetCardState>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d101      	bne.n	800e386 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e382:	2300      	movs	r3, #0
 800e384:	e009      	b.n	800e39a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800e386:	f002 fcf9 	bl	8010d7c <osKernelSysTick>
 800e38a:	4602      	mov	r2, r0
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	429a      	cmp	r2, r3
 800e394:	d8f0      	bhi.n	800e378 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e396:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
	...

0800e3a4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e3ae:	4b0b      	ldr	r3, [pc, #44]	@ (800e3dc <SD_CheckStatus+0x38>)
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e3b4:	f7ff ff88 	bl	800e2c8 <BSP_SD_GetCardState>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d107      	bne.n	800e3ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e3be:	4b07      	ldr	r3, [pc, #28]	@ (800e3dc <SD_CheckStatus+0x38>)
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	f023 0301 	bic.w	r3, r3, #1
 800e3c8:	b2da      	uxtb	r2, r3
 800e3ca:	4b04      	ldr	r3, [pc, #16]	@ (800e3dc <SD_CheckStatus+0x38>)
 800e3cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e3ce:	4b03      	ldr	r3, [pc, #12]	@ (800e3dc <SD_CheckStatus+0x38>)
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	b2db      	uxtb	r3, r3
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	20000009 	.word	0x20000009

0800e3e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e3e0:	b590      	push	{r4, r7, lr}
 800e3e2:	b087      	sub	sp, #28
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e3ea:	4b20      	ldr	r3, [pc, #128]	@ (800e46c <SD_initialize+0x8c>)
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800e3f0:	f002 fcb8 	bl	8010d64 <osKernelRunning>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d030      	beq.n	800e45c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e3fa:	f7ff ff0b 	bl	800e214 <BSP_SD_Init>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d107      	bne.n	800e414 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e404:	79fb      	ldrb	r3, [r7, #7]
 800e406:	4618      	mov	r0, r3
 800e408:	f7ff ffcc 	bl	800e3a4 <SD_CheckStatus>
 800e40c:	4603      	mov	r3, r0
 800e40e:	461a      	mov	r2, r3
 800e410:	4b16      	ldr	r3, [pc, #88]	@ (800e46c <SD_initialize+0x8c>)
 800e412:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e414:	4b15      	ldr	r3, [pc, #84]	@ (800e46c <SD_initialize+0x8c>)
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d01e      	beq.n	800e45c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800e41e:	4b14      	ldr	r3, [pc, #80]	@ (800e470 <SD_initialize+0x90>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d10e      	bne.n	800e444 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e426:	4b13      	ldr	r3, [pc, #76]	@ (800e474 <SD_initialize+0x94>)
 800e428:	f107 0408 	add.w	r4, r7, #8
 800e42c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e42e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e432:	f107 0308 	add.w	r3, r7, #8
 800e436:	2100      	movs	r1, #0
 800e438:	4618      	mov	r0, r3
 800e43a:	f002 fd0f 	bl	8010e5c <osMessageCreate>
 800e43e:	4603      	mov	r3, r0
 800e440:	4a0b      	ldr	r2, [pc, #44]	@ (800e470 <SD_initialize+0x90>)
 800e442:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800e444:	4b0a      	ldr	r3, [pc, #40]	@ (800e470 <SD_initialize+0x90>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d107      	bne.n	800e45c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800e44c:	4b07      	ldr	r3, [pc, #28]	@ (800e46c <SD_initialize+0x8c>)
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	b2db      	uxtb	r3, r3
 800e452:	f043 0301 	orr.w	r3, r3, #1
 800e456:	b2da      	uxtb	r2, r3
 800e458:	4b04      	ldr	r3, [pc, #16]	@ (800e46c <SD_initialize+0x8c>)
 800e45a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e45c:	4b03      	ldr	r3, [pc, #12]	@ (800e46c <SD_initialize+0x8c>)
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	b2db      	uxtb	r3, r3
}
 800e462:	4618      	mov	r0, r3
 800e464:	371c      	adds	r7, #28
 800e466:	46bd      	mov	sp, r7
 800e468:	bd90      	pop	{r4, r7, pc}
 800e46a:	bf00      	nop
 800e46c:	20000009 	.word	0x20000009
 800e470:	20000d8c 	.word	0x20000d8c
 800e474:	08013c78 	.word	0x08013c78

0800e478 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	4603      	mov	r3, r0
 800e480:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e482:	79fb      	ldrb	r3, [r7, #7]
 800e484:	4618      	mov	r0, r3
 800e486:	f7ff ff8d 	bl	800e3a4 <SD_CheckStatus>
 800e48a:	4603      	mov	r3, r0
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3708      	adds	r7, #8
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b08a      	sub	sp, #40	@ 0x28
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60b9      	str	r1, [r7, #8]
 800e49c:	607a      	str	r2, [r7, #4]
 800e49e:	603b      	str	r3, [r7, #0]
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e4aa:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e4ae:	f7ff ff5b 	bl	800e368 <SD_CheckStatusWithTimeout>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	da02      	bge.n	800e4be <SD_read+0x2a>
  {
    return res;
 800e4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4bc:	e032      	b.n	800e524 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e4be:	683a      	ldr	r2, [r7, #0]
 800e4c0:	6879      	ldr	r1, [r7, #4]
 800e4c2:	68b8      	ldr	r0, [r7, #8]
 800e4c4:	f7ff fecc 	bl	800e260 <BSP_SD_ReadBlocks_DMA>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800e4ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d124      	bne.n	800e520 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e4d6:	4b15      	ldr	r3, [pc, #84]	@ (800e52c <SD_read+0x98>)
 800e4d8:	6819      	ldr	r1, [r3, #0]
 800e4da:	f107 0314 	add.w	r3, r7, #20
 800e4de:	f247 5230 	movw	r2, #30000	@ 0x7530
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f002 fd22 	bl	8010f2c <osMessageGet>

    if (event.status == osEventMessage)
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	2b10      	cmp	r3, #16
 800e4ec:	d118      	bne.n	800e520 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d115      	bne.n	800e520 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800e4f4:	f002 fc42 	bl	8010d7c <osKernelSysTick>
 800e4f8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e4fa:	e008      	b.n	800e50e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e4fc:	f7ff fee4 	bl	800e2c8 <BSP_SD_GetCardState>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d103      	bne.n	800e50e <SD_read+0x7a>
              {
                res = RES_OK;
 800e506:	2300      	movs	r3, #0
 800e508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e50c:	e008      	b.n	800e520 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e50e:	f002 fc35 	bl	8010d7c <osKernelSysTick>
 800e512:	4602      	mov	r2, r0
 800e514:	6a3b      	ldr	r3, [r7, #32]
 800e516:	1ad3      	subs	r3, r2, r3
 800e518:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d9ed      	bls.n	800e4fc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e524:	4618      	mov	r0, r3
 800e526:	3728      	adds	r7, #40	@ 0x28
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	20000d8c 	.word	0x20000d8c

0800e530 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b08a      	sub	sp, #40	@ 0x28
 800e534:	af00      	add	r7, sp, #0
 800e536:	60b9      	str	r1, [r7, #8]
 800e538:	607a      	str	r2, [r7, #4]
 800e53a:	603b      	str	r3, [r7, #0]
 800e53c:	4603      	mov	r3, r0
 800e53e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e540:	2301      	movs	r3, #1
 800e542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e546:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e54a:	f7ff ff0d 	bl	800e368 <SD_CheckStatusWithTimeout>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	da02      	bge.n	800e55a <SD_write+0x2a>
  {
    return res;
 800e554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e558:	e02e      	b.n	800e5b8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e55a:	683a      	ldr	r2, [r7, #0]
 800e55c:	6879      	ldr	r1, [r7, #4]
 800e55e:	68b8      	ldr	r0, [r7, #8]
 800e560:	f7ff fe98 	bl	800e294 <BSP_SD_WriteBlocks_DMA>
 800e564:	4603      	mov	r3, r0
 800e566:	2b00      	cmp	r3, #0
 800e568:	d124      	bne.n	800e5b4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e56a:	4b15      	ldr	r3, [pc, #84]	@ (800e5c0 <SD_write+0x90>)
 800e56c:	6819      	ldr	r1, [r3, #0]
 800e56e:	f107 0314 	add.w	r3, r7, #20
 800e572:	f247 5230 	movw	r2, #30000	@ 0x7530
 800e576:	4618      	mov	r0, r3
 800e578:	f002 fcd8 	bl	8010f2c <osMessageGet>

    if (event.status == osEventMessage)
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	2b10      	cmp	r3, #16
 800e580:	d118      	bne.n	800e5b4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	2b02      	cmp	r3, #2
 800e586:	d115      	bne.n	800e5b4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800e588:	f002 fbf8 	bl	8010d7c <osKernelSysTick>
 800e58c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e58e:	e008      	b.n	800e5a2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e590:	f7ff fe9a 	bl	800e2c8 <BSP_SD_GetCardState>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d103      	bne.n	800e5a2 <SD_write+0x72>
          {
            res = RES_OK;
 800e59a:	2300      	movs	r3, #0
 800e59c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e5a0:	e008      	b.n	800e5b4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e5a2:	f002 fbeb 	bl	8010d7c <osKernelSysTick>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	6a3b      	ldr	r3, [r7, #32]
 800e5aa:	1ad3      	subs	r3, r2, r3
 800e5ac:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d9ed      	bls.n	800e590 <SD_write+0x60>
    }

  }
#endif

  return res;
 800e5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3728      	adds	r7, #40	@ 0x28
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	20000d8c 	.word	0x20000d8c

0800e5c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b08c      	sub	sp, #48	@ 0x30
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	603a      	str	r2, [r7, #0]
 800e5ce:	71fb      	strb	r3, [r7, #7]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e5da:	4b25      	ldr	r3, [pc, #148]	@ (800e670 <SD_ioctl+0xac>)
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	f003 0301 	and.w	r3, r3, #1
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d001      	beq.n	800e5ec <SD_ioctl+0x28>
 800e5e8:	2303      	movs	r3, #3
 800e5ea:	e03c      	b.n	800e666 <SD_ioctl+0xa2>

  switch (cmd)
 800e5ec:	79bb      	ldrb	r3, [r7, #6]
 800e5ee:	2b03      	cmp	r3, #3
 800e5f0:	d834      	bhi.n	800e65c <SD_ioctl+0x98>
 800e5f2:	a201      	add	r2, pc, #4	@ (adr r2, 800e5f8 <SD_ioctl+0x34>)
 800e5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f8:	0800e609 	.word	0x0800e609
 800e5fc:	0800e611 	.word	0x0800e611
 800e600:	0800e629 	.word	0x0800e629
 800e604:	0800e643 	.word	0x0800e643
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e608:	2300      	movs	r3, #0
 800e60a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e60e:	e028      	b.n	800e662 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e610:	f107 030c 	add.w	r3, r7, #12
 800e614:	4618      	mov	r0, r3
 800e616:	f7ff fe67 	bl	800e2e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e61a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e620:	2300      	movs	r3, #0
 800e622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e626:	e01c      	b.n	800e662 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e628:	f107 030c 	add.w	r3, r7, #12
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7ff fe5b 	bl	800e2e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e634:	b29a      	uxth	r2, r3
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e63a:	2300      	movs	r3, #0
 800e63c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e640:	e00f      	b.n	800e662 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e642:	f107 030c 	add.w	r3, r7, #12
 800e646:	4618      	mov	r0, r3
 800e648:	f7ff fe4e 	bl	800e2e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e64e:	0a5a      	lsrs	r2, r3, #9
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e654:	2300      	movs	r3, #0
 800e656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e65a:	e002      	b.n	800e662 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e65c:	2304      	movs	r3, #4
 800e65e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800e662:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e666:	4618      	mov	r0, r3
 800e668:	3730      	adds	r7, #48	@ 0x30
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	20000009 	.word	0x20000009

0800e674 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800e678:	4b04      	ldr	r3, [pc, #16]	@ (800e68c <BSP_SD_ReadCpltCallback+0x18>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2200      	movs	r2, #0
 800e67e:	2101      	movs	r1, #1
 800e680:	4618      	mov	r0, r3
 800e682:	f002 fc13 	bl	8010eac <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800e686:	bf00      	nop
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	20000d8c 	.word	0x20000d8c

0800e690 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e690:	b590      	push	{r4, r7, lr}
 800e692:	b089      	sub	sp, #36	@ 0x24
 800e694:	af04      	add	r7, sp, #16
 800e696:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e698:	2301      	movs	r3, #1
 800e69a:	2202      	movs	r2, #2
 800e69c:	2102      	movs	r1, #2
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 fcd7 	bl	800f052 <USBH_FindInterface>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e6a8:	7bfb      	ldrb	r3, [r7, #15]
 800e6aa:	2bff      	cmp	r3, #255	@ 0xff
 800e6ac:	d002      	beq.n	800e6b4 <USBH_CDC_InterfaceInit+0x24>
 800e6ae:	7bfb      	ldrb	r3, [r7, #15]
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d901      	bls.n	800e6b8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e6b4:	2302      	movs	r3, #2
 800e6b6:	e13d      	b.n	800e934 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e6b8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 fcac 	bl	800f01a <USBH_SelectInterface>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e6c6:	7bbb      	ldrb	r3, [r7, #14]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d001      	beq.n	800e6d0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e6cc:	2302      	movs	r3, #2
 800e6ce:	e131      	b.n	800e934 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800e6d6:	2050      	movs	r0, #80	@ 0x50
 800e6d8:	f005 f954 	bl	8013984 <malloc>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e6e6:	69db      	ldr	r3, [r3, #28]
 800e6e8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d101      	bne.n	800e6f4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e6f0:	2302      	movs	r3, #2
 800e6f2:	e11f      	b.n	800e934 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e6f4:	2250      	movs	r2, #80	@ 0x50
 800e6f6:	2100      	movs	r1, #0
 800e6f8:	68b8      	ldr	r0, [r7, #8]
 800e6fa:	f005 fa01 	bl	8013b00 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800e6fe:	7bfb      	ldrb	r3, [r7, #15]
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	211a      	movs	r1, #26
 800e704:	fb01 f303 	mul.w	r3, r1, r3
 800e708:	4413      	add	r3, r2
 800e70a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	b25b      	sxtb	r3, r3
 800e712:	2b00      	cmp	r3, #0
 800e714:	da15      	bge.n	800e742 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e716:	7bfb      	ldrb	r3, [r7, #15]
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	211a      	movs	r1, #26
 800e71c:	fb01 f303 	mul.w	r3, r1, r3
 800e720:	4413      	add	r3, r2
 800e722:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e726:	781a      	ldrb	r2, [r3, #0]
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e72c:	7bfb      	ldrb	r3, [r7, #15]
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	211a      	movs	r1, #26
 800e732:	fb01 f303 	mul.w	r3, r1, r3
 800e736:	4413      	add	r3, r2
 800e738:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e73c:	881a      	ldrh	r2, [r3, #0]
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	785b      	ldrb	r3, [r3, #1]
 800e746:	4619      	mov	r1, r3
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f002 fa1c 	bl	8010b86 <USBH_AllocPipe>
 800e74e:	4603      	mov	r3, r0
 800e750:	461a      	mov	r2, r3
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	7819      	ldrb	r1, [r3, #0]
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	7858      	ldrb	r0, [r3, #1]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e76a:	68ba      	ldr	r2, [r7, #8]
 800e76c:	8952      	ldrh	r2, [r2, #10]
 800e76e:	9202      	str	r2, [sp, #8]
 800e770:	2203      	movs	r2, #3
 800e772:	9201      	str	r2, [sp, #4]
 800e774:	9300      	str	r3, [sp, #0]
 800e776:	4623      	mov	r3, r4
 800e778:	4602      	mov	r2, r0
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f002 f9d4 	bl	8010b28 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	2200      	movs	r2, #0
 800e786:	4619      	mov	r1, r3
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f005 f875 	bl	8013878 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e78e:	2300      	movs	r3, #0
 800e790:	2200      	movs	r2, #0
 800e792:	210a      	movs	r1, #10
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 fc5c 	bl	800f052 <USBH_FindInterface>
 800e79a:	4603      	mov	r3, r0
 800e79c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e79e:	7bfb      	ldrb	r3, [r7, #15]
 800e7a0:	2bff      	cmp	r3, #255	@ 0xff
 800e7a2:	d002      	beq.n	800e7aa <USBH_CDC_InterfaceInit+0x11a>
 800e7a4:	7bfb      	ldrb	r3, [r7, #15]
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d901      	bls.n	800e7ae <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e7aa:	2302      	movs	r3, #2
 800e7ac:	e0c2      	b.n	800e934 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800e7ae:	7bfb      	ldrb	r3, [r7, #15]
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	211a      	movs	r1, #26
 800e7b4:	fb01 f303 	mul.w	r3, r1, r3
 800e7b8:	4413      	add	r3, r2
 800e7ba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	b25b      	sxtb	r3, r3
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	da16      	bge.n	800e7f4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e7c6:	7bfb      	ldrb	r3, [r7, #15]
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	211a      	movs	r1, #26
 800e7cc:	fb01 f303 	mul.w	r3, r1, r3
 800e7d0:	4413      	add	r3, r2
 800e7d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e7d6:	781a      	ldrb	r2, [r3, #0]
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e7dc:	7bfb      	ldrb	r3, [r7, #15]
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	211a      	movs	r1, #26
 800e7e2:	fb01 f303 	mul.w	r3, r1, r3
 800e7e6:	4413      	add	r3, r2
 800e7e8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e7ec:	881a      	ldrh	r2, [r3, #0]
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	835a      	strh	r2, [r3, #26]
 800e7f2:	e015      	b.n	800e820 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e7f4:	7bfb      	ldrb	r3, [r7, #15]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	211a      	movs	r1, #26
 800e7fa:	fb01 f303 	mul.w	r3, r1, r3
 800e7fe:	4413      	add	r3, r2
 800e800:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e804:	781a      	ldrb	r2, [r3, #0]
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e80a:	7bfb      	ldrb	r3, [r7, #15]
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	211a      	movs	r1, #26
 800e810:	fb01 f303 	mul.w	r3, r1, r3
 800e814:	4413      	add	r3, r2
 800e816:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e81a:	881a      	ldrh	r2, [r3, #0]
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800e820:	7bfb      	ldrb	r3, [r7, #15]
 800e822:	687a      	ldr	r2, [r7, #4]
 800e824:	211a      	movs	r1, #26
 800e826:	fb01 f303 	mul.w	r3, r1, r3
 800e82a:	4413      	add	r3, r2
 800e82c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	b25b      	sxtb	r3, r3
 800e834:	2b00      	cmp	r3, #0
 800e836:	da16      	bge.n	800e866 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e838:	7bfb      	ldrb	r3, [r7, #15]
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	211a      	movs	r1, #26
 800e83e:	fb01 f303 	mul.w	r3, r1, r3
 800e842:	4413      	add	r3, r2
 800e844:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e848:	781a      	ldrb	r2, [r3, #0]
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e84e:	7bfb      	ldrb	r3, [r7, #15]
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	211a      	movs	r1, #26
 800e854:	fb01 f303 	mul.w	r3, r1, r3
 800e858:	4413      	add	r3, r2
 800e85a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800e85e:	881a      	ldrh	r2, [r3, #0]
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	835a      	strh	r2, [r3, #26]
 800e864:	e015      	b.n	800e892 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e866:	7bfb      	ldrb	r3, [r7, #15]
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	211a      	movs	r1, #26
 800e86c:	fb01 f303 	mul.w	r3, r1, r3
 800e870:	4413      	add	r3, r2
 800e872:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e876:	781a      	ldrb	r2, [r3, #0]
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e87c:	7bfb      	ldrb	r3, [r7, #15]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	211a      	movs	r1, #26
 800e882:	fb01 f303 	mul.w	r3, r1, r3
 800e886:	4413      	add	r3, r2
 800e888:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800e88c:	881a      	ldrh	r2, [r3, #0]
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	7b9b      	ldrb	r3, [r3, #14]
 800e896:	4619      	mov	r1, r3
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f002 f974 	bl	8010b86 <USBH_AllocPipe>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	7bdb      	ldrb	r3, [r3, #15]
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f002 f96a 	bl	8010b86 <USBH_AllocPipe>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	7b59      	ldrb	r1, [r3, #13]
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	7b98      	ldrb	r0, [r3, #14]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e8ce:	68ba      	ldr	r2, [r7, #8]
 800e8d0:	8b12      	ldrh	r2, [r2, #24]
 800e8d2:	9202      	str	r2, [sp, #8]
 800e8d4:	2202      	movs	r2, #2
 800e8d6:	9201      	str	r2, [sp, #4]
 800e8d8:	9300      	str	r3, [sp, #0]
 800e8da:	4623      	mov	r3, r4
 800e8dc:	4602      	mov	r2, r0
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f002 f922 	bl	8010b28 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	7b19      	ldrb	r1, [r3, #12]
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	7bd8      	ldrb	r0, [r3, #15]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	8b52      	ldrh	r2, [r2, #26]
 800e8fc:	9202      	str	r2, [sp, #8]
 800e8fe:	2202      	movs	r2, #2
 800e900:	9201      	str	r2, [sp, #4]
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	4623      	mov	r3, r4
 800e906:	4602      	mov	r2, r0
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f002 f90d 	bl	8010b28 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	7b5b      	ldrb	r3, [r3, #13]
 800e91a:	2200      	movs	r2, #0
 800e91c:	4619      	mov	r1, r3
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f004 ffaa 	bl	8013878 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	7b1b      	ldrb	r3, [r3, #12]
 800e928:	2200      	movs	r2, #0
 800e92a:	4619      	mov	r1, r3
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f004 ffa3 	bl	8013878 <USBH_LL_SetToggle>

  return USBH_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3714      	adds	r7, #20
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd90      	pop	{r4, r7, pc}

0800e93c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e94a:	69db      	ldr	r3, [r3, #28]
 800e94c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d00e      	beq.n	800e974 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	4619      	mov	r1, r3
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f002 f902 	bl	8010b66 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	4619      	mov	r1, r3
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f002 f92d 	bl	8010bc8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2200      	movs	r2, #0
 800e972:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	7b1b      	ldrb	r3, [r3, #12]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00e      	beq.n	800e99a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	7b1b      	ldrb	r3, [r3, #12]
 800e980:	4619      	mov	r1, r3
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f002 f8ef 	bl	8010b66 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	7b1b      	ldrb	r3, [r3, #12]
 800e98c:	4619      	mov	r1, r3
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f002 f91a 	bl	8010bc8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	7b5b      	ldrb	r3, [r3, #13]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d00e      	beq.n	800e9c0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	7b5b      	ldrb	r3, [r3, #13]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f002 f8dc 	bl	8010b66 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	7b5b      	ldrb	r3, [r3, #13]
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f002 f907 	bl	8010bc8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e9c6:	69db      	ldr	r3, [r3, #28]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00b      	beq.n	800e9e4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e9d2:	69db      	ldr	r3, [r3, #28]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f004 ffdd 	bl	8013994 <free>
    phost->pActiveClass->pData = 0U;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e9e4:	2300      	movs	r3, #0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3710      	adds	r7, #16
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b084      	sub	sp, #16
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e9fc:	69db      	ldr	r3, [r3, #28]
 800e9fe:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	3340      	adds	r3, #64	@ 0x40
 800ea04:	4619      	mov	r1, r3
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 f8b1 	bl	800eb6e <GetLineCoding>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ea10:	7afb      	ldrb	r3, [r7, #11]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d105      	bne.n	800ea22 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ea1c:	2102      	movs	r1, #2
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ea22:	7afb      	ldrb	r3, [r7, #11]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3710      	adds	r7, #16
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ea34:	2301      	movs	r3, #1
 800ea36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ea42:	69db      	ldr	r3, [r3, #28]
 800ea44:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ea4c:	2b04      	cmp	r3, #4
 800ea4e:	d877      	bhi.n	800eb40 <USBH_CDC_Process+0x114>
 800ea50:	a201      	add	r2, pc, #4	@ (adr r2, 800ea58 <USBH_CDC_Process+0x2c>)
 800ea52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea56:	bf00      	nop
 800ea58:	0800ea6d 	.word	0x0800ea6d
 800ea5c:	0800ea73 	.word	0x0800ea73
 800ea60:	0800eaa3 	.word	0x0800eaa3
 800ea64:	0800eb17 	.word	0x0800eb17
 800ea68:	0800eb25 	.word	0x0800eb25
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ea70:	e06d      	b.n	800eb4e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea76:	4619      	mov	r1, r3
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f000 f897 	bl	800ebac <SetLineCoding>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ea82:	7bbb      	ldrb	r3, [r7, #14]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d104      	bne.n	800ea92 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	2202      	movs	r2, #2
 800ea8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ea90:	e058      	b.n	800eb44 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ea92:	7bbb      	ldrb	r3, [r7, #14]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d055      	beq.n	800eb44 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	2204      	movs	r2, #4
 800ea9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800eaa0:	e050      	b.n	800eb44 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	3340      	adds	r3, #64	@ 0x40
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f000 f860 	bl	800eb6e <GetLineCoding>
 800eaae:	4603      	mov	r3, r0
 800eab0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800eab2:	7bbb      	ldrb	r3, [r7, #14]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d126      	bne.n	800eb06 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eaca:	791b      	ldrb	r3, [r3, #4]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d13b      	bne.n	800eb48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eada:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800eadc:	429a      	cmp	r2, r3
 800eade:	d133      	bne.n	800eb48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eaea:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d12b      	bne.n	800eb48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eaf8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d124      	bne.n	800eb48 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f000 f982 	bl	800ee08 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800eb04:	e020      	b.n	800eb48 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800eb06:	7bbb      	ldrb	r3, [r7, #14]
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d01d      	beq.n	800eb48 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	2204      	movs	r2, #4
 800eb10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800eb14:	e018      	b.n	800eb48 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f000 f867 	bl	800ebea <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 f8f6 	bl	800ed0e <CDC_ProcessReception>
      break;
 800eb22:	e014      	b.n	800eb4e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800eb24:	2100      	movs	r1, #0
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f001 f988 	bl	800fe3c <USBH_ClrFeature>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800eb30:	7bbb      	ldrb	r3, [r7, #14]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d10a      	bne.n	800eb4c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800eb3e:	e005      	b.n	800eb4c <USBH_CDC_Process+0x120>

    default:
      break;
 800eb40:	bf00      	nop
 800eb42:	e004      	b.n	800eb4e <USBH_CDC_Process+0x122>
      break;
 800eb44:	bf00      	nop
 800eb46:	e002      	b.n	800eb4e <USBH_CDC_Process+0x122>
      break;
 800eb48:	bf00      	nop
 800eb4a:	e000      	b.n	800eb4e <USBH_CDC_Process+0x122>
      break;
 800eb4c:	bf00      	nop

  }

  return status;
 800eb4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800eb60:	2300      	movs	r3, #0
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	370c      	adds	r7, #12
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b082      	sub	sp, #8
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
 800eb76:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	22a1      	movs	r2, #161	@ 0xa1
 800eb7c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2221      	movs	r2, #33	@ 0x21
 800eb82:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2207      	movs	r2, #7
 800eb94:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	2207      	movs	r2, #7
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f001 fc82 	bl	80104a6 <USBH_CtlReq>
 800eba2:	4603      	mov	r3, r0
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3708      	adds	r7, #8
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2221      	movs	r2, #33	@ 0x21
 800ebba:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2220      	movs	r2, #32
 800ebc0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2207      	movs	r2, #7
 800ebd2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	2207      	movs	r2, #7
 800ebd8:	4619      	mov	r1, r3
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f001 fc63 	bl	80104a6 <USBH_CtlReq>
 800ebe0:	4603      	mov	r3, r0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3708      	adds	r7, #8
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ebea:	b580      	push	{r7, lr}
 800ebec:	b086      	sub	sp, #24
 800ebee:	af02      	add	r7, sp, #8
 800ebf0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ebf8:	69db      	ldr	r3, [r3, #28]
 800ebfa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d002      	beq.n	800ec10 <CDC_ProcessTransmission+0x26>
 800ec0a:	2b02      	cmp	r3, #2
 800ec0c:	d023      	beq.n	800ec56 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ec0e:	e07a      	b.n	800ed06 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	8b12      	ldrh	r2, [r2, #24]
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d90b      	bls.n	800ec34 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	69d9      	ldr	r1, [r3, #28]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	8b1a      	ldrh	r2, [r3, #24]
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	7b5b      	ldrb	r3, [r3, #13]
 800ec28:	2001      	movs	r0, #1
 800ec2a:	9000      	str	r0, [sp, #0]
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f001 ff38 	bl	8010aa2 <USBH_BulkSendData>
 800ec32:	e00b      	b.n	800ec4c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800ec3c:	b29a      	uxth	r2, r3
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	7b5b      	ldrb	r3, [r3, #13]
 800ec42:	2001      	movs	r0, #1
 800ec44:	9000      	str	r0, [sp, #0]
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f001 ff2b 	bl	8010aa2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2202      	movs	r2, #2
 800ec50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800ec54:	e057      	b.n	800ed06 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	7b5b      	ldrb	r3, [r3, #13]
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f004 fde1 	bl	8013824 <USBH_LL_GetURBState>
 800ec62:	4603      	mov	r3, r0
 800ec64:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ec66:	7afb      	ldrb	r3, [r7, #11]
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	d136      	bne.n	800ecda <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	8b12      	ldrh	r2, [r2, #24]
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d90e      	bls.n	800ec96 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec7c:	68fa      	ldr	r2, [r7, #12]
 800ec7e:	8b12      	ldrh	r2, [r2, #24]
 800ec80:	1a9a      	subs	r2, r3, r2
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	69db      	ldr	r3, [r3, #28]
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	8b12      	ldrh	r2, [r2, #24]
 800ec8e:	441a      	add	r2, r3
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	61da      	str	r2, [r3, #28]
 800ec94:	e002      	b.n	800ec9c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d004      	beq.n	800ecae <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2201      	movs	r2, #1
 800eca8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800ecac:	e006      	b.n	800ecbc <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 f892 	bl	800ede0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2204      	movs	r2, #4
 800ecc0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	f002 f8ea 	bl	8010eac <osMessagePut>
      break;
 800ecd8:	e014      	b.n	800ed04 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800ecda:	7afb      	ldrb	r3, [r7, #11]
 800ecdc:	2b02      	cmp	r3, #2
 800ecde:	d111      	bne.n	800ed04 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2201      	movs	r2, #1
 800ece4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2204      	movs	r2, #4
 800ecec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	4619      	mov	r1, r3
 800ed00:	f002 f8d4 	bl	8010eac <osMessagePut>
      break;
 800ed04:	bf00      	nop
  }
}
 800ed06:	bf00      	nop
 800ed08:	3710      	adds	r7, #16
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b086      	sub	sp, #24
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ed1c:	69db      	ldr	r3, [r3, #28]
 800ed1e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ed20:	2300      	movs	r3, #0
 800ed22:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800ed2a:	2b03      	cmp	r3, #3
 800ed2c:	d002      	beq.n	800ed34 <CDC_ProcessReception+0x26>
 800ed2e:	2b04      	cmp	r3, #4
 800ed30:	d00e      	beq.n	800ed50 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ed32:	e051      	b.n	800edd8 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	6a19      	ldr	r1, [r3, #32]
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	8b5a      	ldrh	r2, [r3, #26]
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	7b1b      	ldrb	r3, [r3, #12]
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f001 fed3 	bl	8010aec <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	2204      	movs	r2, #4
 800ed4a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800ed4e:	e043      	b.n	800edd8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	7b1b      	ldrb	r3, [r3, #12]
 800ed54:	4619      	mov	r1, r3
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f004 fd64 	bl	8013824 <USBH_LL_GetURBState>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ed60:	7cfb      	ldrb	r3, [r7, #19]
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d137      	bne.n	800edd6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	7b1b      	ldrb	r3, [r3, #12]
 800ed6a:	4619      	mov	r1, r3
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f004 fcc7 	bl	8013700 <USBH_LL_GetLastXferSize>
 800ed72:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d016      	beq.n	800edac <CDC_ProcessReception+0x9e>
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	8b5b      	ldrh	r3, [r3, #26]
 800ed82:	461a      	mov	r2, r3
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d110      	bne.n	800edac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	1ad2      	subs	r2, r2, r3
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	6a1a      	ldr	r2, [r3, #32]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	441a      	add	r2, r3
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	2203      	movs	r2, #3
 800eda6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800edaa:	e006      	b.n	800edba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	2200      	movs	r2, #0
 800edb0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 f81d 	bl	800edf4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2204      	movs	r2, #4
 800edbe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800edce:	2200      	movs	r2, #0
 800edd0:	4619      	mov	r1, r3
 800edd2:	f002 f86b 	bl	8010eac <osMessagePut>
      break;
 800edd6:	bf00      	nop
  }
}
 800edd8:	bf00      	nop
 800edda:	3718      	adds	r7, #24
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ede8:	bf00      	nop
 800edea:	370c      	adds	r7, #12
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800edfc:	bf00      	nop
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ee10:	bf00      	nop
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ee1c:	b5b0      	push	{r4, r5, r7, lr}
 800ee1e:	b090      	sub	sp, #64	@ 0x40
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	4613      	mov	r3, r2
 800ee28:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d101      	bne.n	800ee34 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ee30:	2302      	movs	r3, #2
 800ee32:	e04d      	b.n	800eed0 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	79fa      	ldrb	r2, [r7, #7]
 800ee38:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2200      	movs	r2, #0
 800ee48:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	f000 f847 	bl	800eee0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	2200      	movs	r2, #0
 800ee56:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2200      	movs	r2, #0
 800ee66:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d003      	beq.n	800ee80 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	68ba      	ldr	r2, [r7, #8]
 800ee7c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ee80:	4b15      	ldr	r3, [pc, #84]	@ (800eed8 <USBH_Init+0xbc>)
 800ee82:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800ee86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ee88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800ee8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ee90:	2100      	movs	r1, #0
 800ee92:	4618      	mov	r0, r3
 800ee94:	f001 ffe2 	bl	8010e5c <osMessageCreate>
 800ee98:	4602      	mov	r2, r0
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800eea0:	4b0e      	ldr	r3, [pc, #56]	@ (800eedc <USBH_Init+0xc0>)
 800eea2:	f107 0414 	add.w	r4, r7, #20
 800eea6:	461d      	mov	r5, r3
 800eea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eeaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eeac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eeb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800eeb4:	f107 0314 	add.w	r3, r7, #20
 800eeb8:	68f9      	ldr	r1, [r7, #12]
 800eeba:	4618      	mov	r0, r3
 800eebc:	f001 ff6e 	bl	8010d9c <osThreadCreate>
 800eec0:	4602      	mov	r2, r0
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800eec8:	68f8      	ldr	r0, [r7, #12]
 800eeca:	f004 fb65 	bl	8013598 <USBH_LL_Init>

  return USBH_OK;
 800eece:	2300      	movs	r3, #0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3740      	adds	r7, #64	@ 0x40
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bdb0      	pop	{r4, r5, r7, pc}
 800eed8:	08013c8c 	.word	0x08013c8c
 800eedc:	08013ca8 	.word	0x08013ca8

0800eee0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800eee8:	2300      	movs	r3, #0
 800eeea:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800eeec:	2300      	movs	r3, #0
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	e009      	b.n	800ef06 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	33e0      	adds	r3, #224	@ 0xe0
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4413      	add	r3, r2
 800eefc:	2200      	movs	r2, #0
 800eefe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	3301      	adds	r3, #1
 800ef04:	60fb      	str	r3, [r7, #12]
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2b0f      	cmp	r3, #15
 800ef0a:	d9f2      	bls.n	800eef2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	60fb      	str	r3, [r7, #12]
 800ef10:	e009      	b.n	800ef26 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	4413      	add	r3, r2
 800ef18:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	3301      	adds	r3, #1
 800ef24:	60fb      	str	r3, [r7, #12]
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef2c:	d3f1      	bcc.n	800ef12 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2200      	movs	r2, #0
 800ef32:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2200      	movs	r2, #0
 800ef38:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2240      	movs	r2, #64	@ 0x40
 800ef52:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2200      	movs	r2, #0
 800ef58:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2201      	movs	r2, #1
 800ef66:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2200      	movs	r2, #0
 800ef76:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	331c      	adds	r3, #28
 800ef7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ef82:	2100      	movs	r1, #0
 800ef84:	4618      	mov	r0, r3
 800ef86:	f004 fdbb 	bl	8013b00 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ef90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef94:	2100      	movs	r1, #0
 800ef96:	4618      	mov	r0, r3
 800ef98:	f004 fdb2 	bl	8013b00 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800efa2:	2212      	movs	r2, #18
 800efa4:	2100      	movs	r1, #0
 800efa6:	4618      	mov	r0, r3
 800efa8:	f004 fdaa 	bl	8013b00 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800efb2:	223e      	movs	r2, #62	@ 0x3e
 800efb4:	2100      	movs	r1, #0
 800efb6:	4618      	mov	r0, r3
 800efb8:	f004 fda2 	bl	8013b00 <memset>

  return USBH_OK;
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800efc6:	b480      	push	{r7}
 800efc8:	b085      	sub	sp, #20
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
 800efce:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800efd0:	2300      	movs	r3, #0
 800efd2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d016      	beq.n	800f008 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d10e      	bne.n	800f002 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800efea:	1c59      	adds	r1, r3, #1
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800eff2:	687a      	ldr	r2, [r7, #4]
 800eff4:	33de      	adds	r3, #222	@ 0xde
 800eff6:	6839      	ldr	r1, [r7, #0]
 800eff8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800effc:	2300      	movs	r3, #0
 800effe:	73fb      	strb	r3, [r7, #15]
 800f000:	e004      	b.n	800f00c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f002:	2302      	movs	r3, #2
 800f004:	73fb      	strb	r3, [r7, #15]
 800f006:	e001      	b.n	800f00c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f008:	2302      	movs	r3, #2
 800f00a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3714      	adds	r7, #20
 800f012:	46bd      	mov	sp, r7
 800f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f018:	4770      	bx	lr

0800f01a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f01a:	b480      	push	{r7}
 800f01c:	b085      	sub	sp, #20
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
 800f022:	460b      	mov	r3, r1
 800f024:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f026:	2300      	movs	r3, #0
 800f028:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800f030:	78fa      	ldrb	r2, [r7, #3]
 800f032:	429a      	cmp	r2, r3
 800f034:	d204      	bcs.n	800f040 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	78fa      	ldrb	r2, [r7, #3]
 800f03a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800f03e:	e001      	b.n	800f044 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f040:	2302      	movs	r3, #2
 800f042:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f044:	7bfb      	ldrb	r3, [r7, #15]
}
 800f046:	4618      	mov	r0, r3
 800f048:	3714      	adds	r7, #20
 800f04a:	46bd      	mov	sp, r7
 800f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f050:	4770      	bx	lr

0800f052 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f052:	b480      	push	{r7}
 800f054:	b087      	sub	sp, #28
 800f056:	af00      	add	r7, sp, #0
 800f058:	6078      	str	r0, [r7, #4]
 800f05a:	4608      	mov	r0, r1
 800f05c:	4611      	mov	r1, r2
 800f05e:	461a      	mov	r2, r3
 800f060:	4603      	mov	r3, r0
 800f062:	70fb      	strb	r3, [r7, #3]
 800f064:	460b      	mov	r3, r1
 800f066:	70bb      	strb	r3, [r7, #2]
 800f068:	4613      	mov	r3, r2
 800f06a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f06c:	2300      	movs	r3, #0
 800f06e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f070:	2300      	movs	r3, #0
 800f072:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f07a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f07c:	e025      	b.n	800f0ca <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f07e:	7dfb      	ldrb	r3, [r7, #23]
 800f080:	221a      	movs	r2, #26
 800f082:	fb02 f303 	mul.w	r3, r2, r3
 800f086:	3308      	adds	r3, #8
 800f088:	68fa      	ldr	r2, [r7, #12]
 800f08a:	4413      	add	r3, r2
 800f08c:	3302      	adds	r3, #2
 800f08e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	795b      	ldrb	r3, [r3, #5]
 800f094:	78fa      	ldrb	r2, [r7, #3]
 800f096:	429a      	cmp	r2, r3
 800f098:	d002      	beq.n	800f0a0 <USBH_FindInterface+0x4e>
 800f09a:	78fb      	ldrb	r3, [r7, #3]
 800f09c:	2bff      	cmp	r3, #255	@ 0xff
 800f09e:	d111      	bne.n	800f0c4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f0a4:	78ba      	ldrb	r2, [r7, #2]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d002      	beq.n	800f0b0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f0aa:	78bb      	ldrb	r3, [r7, #2]
 800f0ac:	2bff      	cmp	r3, #255	@ 0xff
 800f0ae:	d109      	bne.n	800f0c4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f0b4:	787a      	ldrb	r2, [r7, #1]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d002      	beq.n	800f0c0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f0ba:	787b      	ldrb	r3, [r7, #1]
 800f0bc:	2bff      	cmp	r3, #255	@ 0xff
 800f0be:	d101      	bne.n	800f0c4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f0c0:	7dfb      	ldrb	r3, [r7, #23]
 800f0c2:	e006      	b.n	800f0d2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f0c4:	7dfb      	ldrb	r3, [r7, #23]
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f0ca:	7dfb      	ldrb	r3, [r7, #23]
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d9d6      	bls.n	800f07e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f0d0:	23ff      	movs	r3, #255	@ 0xff
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	371c      	adds	r7, #28
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr

0800f0de <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b082      	sub	sp, #8
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f004 fa92 	bl	8013610 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f0ec:	2101      	movs	r1, #1
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f004 fbab 	bl	801384a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f0f4:	2300      	movs	r3, #0
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3708      	adds	r7, #8
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
	...

0800f100 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b088      	sub	sp, #32
 800f104:	af04      	add	r7, sp, #16
 800f106:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f108:	2302      	movs	r3, #2
 800f10a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f10c:	2300      	movs	r3, #0
 800f10e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800f116:	b2db      	uxtb	r3, r3
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d102      	bne.n	800f122 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2203      	movs	r2, #3
 800f120:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	b2db      	uxtb	r3, r3
 800f128:	2b0b      	cmp	r3, #11
 800f12a:	f200 8244 	bhi.w	800f5b6 <USBH_Process+0x4b6>
 800f12e:	a201      	add	r2, pc, #4	@ (adr r2, 800f134 <USBH_Process+0x34>)
 800f130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f134:	0800f165 	.word	0x0800f165
 800f138:	0800f1b3 	.word	0x0800f1b3
 800f13c:	0800f237 	.word	0x0800f237
 800f140:	0800f535 	.word	0x0800f535
 800f144:	0800f5b7 	.word	0x0800f5b7
 800f148:	0800f2f3 	.word	0x0800f2f3
 800f14c:	0800f4bf 	.word	0x0800f4bf
 800f150:	0800f345 	.word	0x0800f345
 800f154:	0800f381 	.word	0x0800f381
 800f158:	0800f3b9 	.word	0x0800f3b9
 800f15c:	0800f417 	.word	0x0800f417
 800f160:	0800f51d 	.word	0x0800f51d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f000 8224 	beq.w	800f5ba <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2201      	movs	r2, #1
 800f176:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f178:	20c8      	movs	r0, #200	@ 0xc8
 800f17a:	f004 fbb0 	bl	80138de <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f004 faa3 	bl	80136ca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2200      	movs	r2, #0
 800f188:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2201      	movs	r2, #1
 800f198:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	f001 fe7e 	bl	8010eac <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f1b0:	e203      	b.n	800f5ba <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d107      	bne.n	800f1cc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2202      	movs	r2, #2
 800f1c8:	701a      	strb	r2, [r3, #0]
 800f1ca:	e025      	b.n	800f218 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f1d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f1d6:	d914      	bls.n	800f202 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f1de:	3301      	adds	r3, #1
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f1ee:	2b03      	cmp	r3, #3
 800f1f0:	d903      	bls.n	800f1fa <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	220d      	movs	r2, #13
 800f1f6:	701a      	strb	r2, [r3, #0]
 800f1f8:	e00e      	b.n	800f218 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	701a      	strb	r2, [r3, #0]
 800f200:	e00a      	b.n	800f218 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f208:	f103 020a 	add.w	r2, r3, #10
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800f212:	200a      	movs	r0, #10
 800f214:	f004 fb63 	bl	80138de <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2201      	movs	r2, #1
 800f21c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f22c:	2200      	movs	r2, #0
 800f22e:	4619      	mov	r1, r3
 800f230:	f001 fe3c 	bl	8010eac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f234:	e1c8      	b.n	800f5c8 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d005      	beq.n	800f24c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f246:	2104      	movs	r1, #4
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f24c:	2064      	movs	r0, #100	@ 0x64
 800f24e:	f004 fb46 	bl	80138de <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f004 fa12 	bl	801367c <USBH_LL_GetSpeed>
 800f258:	4603      	mov	r3, r0
 800f25a:	461a      	mov	r2, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2205      	movs	r2, #5
 800f266:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f268:	2100      	movs	r1, #0
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f001 fc8b 	bl	8010b86 <USBH_AllocPipe>
 800f270:	4603      	mov	r3, r0
 800f272:	461a      	mov	r2, r3
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f278:	2180      	movs	r1, #128	@ 0x80
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f001 fc83 	bl	8010b86 <USBH_AllocPipe>
 800f280:	4603      	mov	r3, r0
 800f282:	461a      	mov	r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	7919      	ldrb	r1, [r3, #4]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f29c:	9202      	str	r2, [sp, #8]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	9201      	str	r2, [sp, #4]
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2280      	movs	r2, #128	@ 0x80
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f001 fc3d 	bl	8010b28 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	7959      	ldrb	r1, [r3, #5]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f2c2:	9202      	str	r2, [sp, #8]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	9201      	str	r2, [sp, #4]
 800f2c8:	9300      	str	r3, [sp, #0]
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f001 fc2a 	bl	8010b28 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	f001 fdde 	bl	8010eac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f2f0:	e16a      	b.n	800f5c8 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 f96e 	bl	800f5d4 <USBH_HandleEnum>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f2fc:	7bbb      	ldrb	r3, [r7, #14]
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	2b00      	cmp	r3, #0
 800f302:	f040 815c 	bne.w	800f5be <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2200      	movs	r2, #0
 800f30a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800f314:	2b01      	cmp	r3, #1
 800f316:	d103      	bne.n	800f320 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2208      	movs	r2, #8
 800f31c:	701a      	strb	r2, [r3, #0]
 800f31e:	e002      	b.n	800f326 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2207      	movs	r2, #7
 800f324:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2205      	movs	r2, #5
 800f32a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f33a:	2200      	movs	r2, #0
 800f33c:	4619      	mov	r1, r3
 800f33e:	f001 fdb5 	bl	8010eac <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f342:	e13c      	b.n	800f5be <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	f000 8139 	beq.w	800f5c2 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f356:	2101      	movs	r1, #1
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2208      	movs	r2, #8
 800f360:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2205      	movs	r2, #5
 800f366:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f376:	2200      	movs	r2, #0
 800f378:	4619      	mov	r1, r3
 800f37a:	f001 fd97 	bl	8010eac <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800f37e:	e120      	b.n	800f5c2 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800f386:	4619      	mov	r1, r3
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 fd10 	bl	800fdae <USBH_SetCfg>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d102      	bne.n	800f39a <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2209      	movs	r2, #9
 800f398:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2201      	movs	r2, #1
 800f39e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	f001 fd7b 	bl	8010eac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f3b6:	e107      	b.n	800f5c8 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800f3be:	f003 0320 	and.w	r3, r3, #32
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d015      	beq.n	800f3f2 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800f3c6:	2101      	movs	r1, #1
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f000 fd13 	bl	800fdf4 <USBH_SetFeature>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f3d2:	7bbb      	ldrb	r3, [r7, #14]
 800f3d4:	b2db      	uxtb	r3, r3
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d103      	bne.n	800f3e2 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	220a      	movs	r2, #10
 800f3de:	701a      	strb	r2, [r3, #0]
 800f3e0:	e00a      	b.n	800f3f8 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800f3e2:	7bbb      	ldrb	r3, [r7, #14]
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	2b03      	cmp	r3, #3
 800f3e8:	d106      	bne.n	800f3f8 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	220a      	movs	r2, #10
 800f3ee:	701a      	strb	r2, [r3, #0]
 800f3f0:	e002      	b.n	800f3f8 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	220a      	movs	r2, #10
 800f3f6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f40c:	2200      	movs	r2, #0
 800f40e:	4619      	mov	r1, r3
 800f410:	f001 fd4c 	bl	8010eac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f414:	e0d8      	b.n	800f5c8 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d03f      	beq.n	800f4a0 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f428:	2300      	movs	r3, #0
 800f42a:	73fb      	strb	r3, [r7, #15]
 800f42c:	e016      	b.n	800f45c <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f42e:	7bfa      	ldrb	r2, [r7, #15]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	32de      	adds	r2, #222	@ 0xde
 800f434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f438:	791a      	ldrb	r2, [r3, #4]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800f440:	429a      	cmp	r2, r3
 800f442:	d108      	bne.n	800f456 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f444:	7bfa      	ldrb	r2, [r7, #15]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	32de      	adds	r2, #222	@ 0xde
 800f44a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800f454:	e005      	b.n	800f462 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f456:	7bfb      	ldrb	r3, [r7, #15]
 800f458:	3301      	adds	r3, #1
 800f45a:	73fb      	strb	r3, [r7, #15]
 800f45c:	7bfb      	ldrb	r3, [r7, #15]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d0e5      	beq.n	800f42e <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d016      	beq.n	800f49a <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f472:	689b      	ldr	r3, [r3, #8]
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	4798      	blx	r3
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d109      	bne.n	800f492 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2206      	movs	r2, #6
 800f482:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f48a:	2103      	movs	r1, #3
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	4798      	blx	r3
 800f490:	e006      	b.n	800f4a0 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	220d      	movs	r2, #13
 800f496:	701a      	strb	r2, [r3, #0]
 800f498:	e002      	b.n	800f4a0 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	220d      	movs	r2, #13
 800f49e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2205      	movs	r2, #5
 800f4a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	f001 fcf8 	bl	8010eac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f4bc:	e084      	b.n	800f5c8 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d017      	beq.n	800f4f8 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f4ce:	691b      	ldr	r3, [r3, #16]
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	4798      	blx	r3
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f4d8:	7bbb      	ldrb	r3, [r7, #14]
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d103      	bne.n	800f4e8 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	220b      	movs	r2, #11
 800f4e4:	701a      	strb	r2, [r3, #0]
 800f4e6:	e00a      	b.n	800f4fe <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800f4e8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	2b02      	cmp	r3, #2
 800f4ee:	d106      	bne.n	800f4fe <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	220d      	movs	r2, #13
 800f4f4:	701a      	strb	r2, [r3, #0]
 800f4f6:	e002      	b.n	800f4fe <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	220d      	movs	r2, #13
 800f4fc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2205      	movs	r2, #5
 800f502:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f512:	2200      	movs	r2, #0
 800f514:	4619      	mov	r1, r3
 800f516:	f001 fcc9 	bl	8010eac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f51a:	e055      	b.n	800f5c8 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f522:	2b00      	cmp	r3, #0
 800f524:	d04f      	beq.n	800f5c6 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f52c:	695b      	ldr	r3, [r3, #20]
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	4798      	blx	r3
      }
      break;
 800f532:	e048      	b.n	800f5c6 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2200      	movs	r2, #0
 800f538:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f7ff fccf 	bl	800eee0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d009      	beq.n	800f560 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2200      	movs	r2, #0
 800f55c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f566:	2b00      	cmp	r3, #0
 800f568:	d005      	beq.n	800f576 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f570:	2105      	movs	r1, #5
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d107      	bne.n	800f592 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2200      	movs	r2, #0
 800f586:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f7ff fda7 	bl	800f0de <USBH_Start>
 800f590:	e002      	b.n	800f598 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f004 f83c 	bl	8013610 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2201      	movs	r2, #1
 800f59c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	f001 fc7c 	bl	8010eac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f5b4:	e008      	b.n	800f5c8 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800f5b6:	bf00      	nop
 800f5b8:	e006      	b.n	800f5c8 <USBH_Process+0x4c8>
      break;
 800f5ba:	bf00      	nop
 800f5bc:	e004      	b.n	800f5c8 <USBH_Process+0x4c8>
      break;
 800f5be:	bf00      	nop
 800f5c0:	e002      	b.n	800f5c8 <USBH_Process+0x4c8>
    break;
 800f5c2:	bf00      	nop
 800f5c4:	e000      	b.n	800f5c8 <USBH_Process+0x4c8>
      break;
 800f5c6:	bf00      	nop
  }
  return USBH_OK;
 800f5c8:	2300      	movs	r3, #0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop

0800f5d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b088      	sub	sp, #32
 800f5d8:	af04      	add	r7, sp, #16
 800f5da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f5dc:	2301      	movs	r3, #1
 800f5de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	785b      	ldrb	r3, [r3, #1]
 800f5e8:	2b07      	cmp	r3, #7
 800f5ea:	f200 8204 	bhi.w	800f9f6 <USBH_HandleEnum+0x422>
 800f5ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f5f4 <USBH_HandleEnum+0x20>)
 800f5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f4:	0800f615 	.word	0x0800f615
 800f5f8:	0800f6cf 	.word	0x0800f6cf
 800f5fc:	0800f739 	.word	0x0800f739
 800f600:	0800f7c3 	.word	0x0800f7c3
 800f604:	0800f82d 	.word	0x0800f82d
 800f608:	0800f89d 	.word	0x0800f89d
 800f60c:	0800f939 	.word	0x0800f939
 800f610:	0800f9b7 	.word	0x0800f9b7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f614:	2108      	movs	r1, #8
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f000 fae6 	bl	800fbe8 <USBH_Get_DevDesc>
 800f61c:	4603      	mov	r3, r0
 800f61e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f620:	7bbb      	ldrb	r3, [r7, #14]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d12e      	bne.n	800f684 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2201      	movs	r2, #1
 800f634:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	7919      	ldrb	r1, [r3, #4]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f646:	687a      	ldr	r2, [r7, #4]
 800f648:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f64a:	9202      	str	r2, [sp, #8]
 800f64c:	2200      	movs	r2, #0
 800f64e:	9201      	str	r2, [sp, #4]
 800f650:	9300      	str	r3, [sp, #0]
 800f652:	4603      	mov	r3, r0
 800f654:	2280      	movs	r2, #128	@ 0x80
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f001 fa66 	bl	8010b28 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	7959      	ldrb	r1, [r3, #5]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f66c:	687a      	ldr	r2, [r7, #4]
 800f66e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f670:	9202      	str	r2, [sp, #8]
 800f672:	2200      	movs	r2, #0
 800f674:	9201      	str	r2, [sp, #4]
 800f676:	9300      	str	r3, [sp, #0]
 800f678:	4603      	mov	r3, r0
 800f67a:	2200      	movs	r2, #0
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f001 fa53 	bl	8010b28 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f682:	e1ba      	b.n	800f9fa <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f684:	7bbb      	ldrb	r3, [r7, #14]
 800f686:	2b03      	cmp	r3, #3
 800f688:	f040 81b7 	bne.w	800f9fa <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f692:	3301      	adds	r3, #1
 800f694:	b2da      	uxtb	r2, r3
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f6a2:	2b03      	cmp	r3, #3
 800f6a4:	d903      	bls.n	800f6ae <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	220d      	movs	r2, #13
 800f6aa:	701a      	strb	r2, [r3, #0]
      break;
 800f6ac:	e1a5      	b.n	800f9fa <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	795b      	ldrb	r3, [r3, #5]
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f001 fa87 	bl	8010bc8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	791b      	ldrb	r3, [r3, #4]
 800f6be:	4619      	mov	r1, r3
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f001 fa81 	bl	8010bc8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	701a      	strb	r2, [r3, #0]
      break;
 800f6cc:	e195      	b.n	800f9fa <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f6ce:	2112      	movs	r1, #18
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f000 fa89 	bl	800fbe8 <USBH_Get_DevDesc>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f6da:	7bbb      	ldrb	r3, [r7, #14]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d103      	bne.n	800f6e8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2202      	movs	r2, #2
 800f6e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f6e6:	e18a      	b.n	800f9fe <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f6e8:	7bbb      	ldrb	r3, [r7, #14]
 800f6ea:	2b03      	cmp	r3, #3
 800f6ec:	f040 8187 	bne.w	800f9fe <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	b2da      	uxtb	r2, r3
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f706:	2b03      	cmp	r3, #3
 800f708:	d903      	bls.n	800f712 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	220d      	movs	r2, #13
 800f70e:	701a      	strb	r2, [r3, #0]
      break;
 800f710:	e175      	b.n	800f9fe <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	795b      	ldrb	r3, [r3, #5]
 800f716:	4619      	mov	r1, r3
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f001 fa55 	bl	8010bc8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	791b      	ldrb	r3, [r3, #4]
 800f722:	4619      	mov	r1, r3
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f001 fa4f 	bl	8010bc8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2200      	movs	r2, #0
 800f72e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	701a      	strb	r2, [r3, #0]
      break;
 800f736:	e162      	b.n	800f9fe <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f738:	2101      	movs	r1, #1
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 fb13 	bl	800fd66 <USBH_SetAddress>
 800f740:	4603      	mov	r3, r0
 800f742:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f744:	7bbb      	ldrb	r3, [r7, #14]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d130      	bne.n	800f7ac <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800f74a:	2002      	movs	r0, #2
 800f74c:	f004 f8c7 	bl	80138de <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2201      	movs	r2, #1
 800f754:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2203      	movs	r2, #3
 800f75c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	7919      	ldrb	r1, [r3, #4]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f772:	9202      	str	r2, [sp, #8]
 800f774:	2200      	movs	r2, #0
 800f776:	9201      	str	r2, [sp, #4]
 800f778:	9300      	str	r3, [sp, #0]
 800f77a:	4603      	mov	r3, r0
 800f77c:	2280      	movs	r2, #128	@ 0x80
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f001 f9d2 	bl	8010b28 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	7959      	ldrb	r1, [r3, #5]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f798:	9202      	str	r2, [sp, #8]
 800f79a:	2200      	movs	r2, #0
 800f79c:	9201      	str	r2, [sp, #4]
 800f79e:	9300      	str	r3, [sp, #0]
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f001 f9bf 	bl	8010b28 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f7aa:	e12a      	b.n	800fa02 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f7ac:	7bbb      	ldrb	r3, [r7, #14]
 800f7ae:	2b03      	cmp	r3, #3
 800f7b0:	f040 8127 	bne.w	800fa02 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	220d      	movs	r2, #13
 800f7b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	705a      	strb	r2, [r3, #1]
      break;
 800f7c0:	e11f      	b.n	800fa02 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f7c2:	2109      	movs	r1, #9
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f000 fa3b 	bl	800fc40 <USBH_Get_CfgDesc>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f7ce:	7bbb      	ldrb	r3, [r7, #14]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d103      	bne.n	800f7dc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2204      	movs	r2, #4
 800f7d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f7da:	e114      	b.n	800fa06 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f7dc:	7bbb      	ldrb	r3, [r7, #14]
 800f7de:	2b03      	cmp	r3, #3
 800f7e0:	f040 8111 	bne.w	800fa06 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	b2da      	uxtb	r2, r3
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f7fa:	2b03      	cmp	r3, #3
 800f7fc:	d903      	bls.n	800f806 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	220d      	movs	r2, #13
 800f802:	701a      	strb	r2, [r3, #0]
      break;
 800f804:	e0ff      	b.n	800fa06 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	795b      	ldrb	r3, [r3, #5]
 800f80a:	4619      	mov	r1, r3
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f001 f9db 	bl	8010bc8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	791b      	ldrb	r3, [r3, #4]
 800f816:	4619      	mov	r1, r3
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f001 f9d5 	bl	8010bc8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2200      	movs	r2, #0
 800f822:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2200      	movs	r2, #0
 800f828:	701a      	strb	r2, [r3, #0]
      break;
 800f82a:	e0ec      	b.n	800fa06 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800f832:	4619      	mov	r1, r3
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f000 fa03 	bl	800fc40 <USBH_Get_CfgDesc>
 800f83a:	4603      	mov	r3, r0
 800f83c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f83e:	7bbb      	ldrb	r3, [r7, #14]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d103      	bne.n	800f84c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2205      	movs	r2, #5
 800f848:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f84a:	e0de      	b.n	800fa0a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f84c:	7bbb      	ldrb	r3, [r7, #14]
 800f84e:	2b03      	cmp	r3, #3
 800f850:	f040 80db 	bne.w	800fa0a <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f85a:	3301      	adds	r3, #1
 800f85c:	b2da      	uxtb	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f86a:	2b03      	cmp	r3, #3
 800f86c:	d903      	bls.n	800f876 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	220d      	movs	r2, #13
 800f872:	701a      	strb	r2, [r3, #0]
      break;
 800f874:	e0c9      	b.n	800fa0a <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	795b      	ldrb	r3, [r3, #5]
 800f87a:	4619      	mov	r1, r3
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f001 f9a3 	bl	8010bc8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	791b      	ldrb	r3, [r3, #4]
 800f886:	4619      	mov	r1, r3
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f001 f99d 	bl	8010bc8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2200      	movs	r2, #0
 800f892:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2200      	movs	r2, #0
 800f898:	701a      	strb	r2, [r3, #0]
      break;
 800f89a:	e0b6      	b.n	800fa0a <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d036      	beq.n	800f914 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f8b2:	23ff      	movs	r3, #255	@ 0xff
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f000 f9ed 	bl	800fc94 <USBH_Get_StringDesc>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f8be:	7bbb      	ldrb	r3, [r7, #14]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d111      	bne.n	800f8e8 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2206      	movs	r2, #6
 800f8c8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2205      	movs	r2, #5
 800f8ce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f8de:	2200      	movs	r2, #0
 800f8e0:	4619      	mov	r1, r3
 800f8e2:	f001 fae3 	bl	8010eac <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f8e6:	e092      	b.n	800fa0e <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f8e8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ea:	2b03      	cmp	r3, #3
 800f8ec:	f040 808f 	bne.w	800fa0e <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2206      	movs	r2, #6
 800f8f4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2205      	movs	r2, #5
 800f8fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f90a:	2200      	movs	r2, #0
 800f90c:	4619      	mov	r1, r3
 800f90e:	f001 facd 	bl	8010eac <osMessagePut>
      break;
 800f912:	e07c      	b.n	800fa0e <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2206      	movs	r2, #6
 800f918:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2205      	movs	r2, #5
 800f91e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f92e:	2200      	movs	r2, #0
 800f930:	4619      	mov	r1, r3
 800f932:	f001 fabb 	bl	8010eac <osMessagePut>
      break;
 800f936:	e06a      	b.n	800fa0e <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d027      	beq.n	800f992 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f94e:	23ff      	movs	r3, #255	@ 0xff
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f000 f99f 	bl	800fc94 <USBH_Get_StringDesc>
 800f956:	4603      	mov	r3, r0
 800f958:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f95a:	7bbb      	ldrb	r3, [r7, #14]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d103      	bne.n	800f968 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2207      	movs	r2, #7
 800f964:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f966:	e054      	b.n	800fa12 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f968:	7bbb      	ldrb	r3, [r7, #14]
 800f96a:	2b03      	cmp	r3, #3
 800f96c:	d151      	bne.n	800fa12 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2207      	movs	r2, #7
 800f972:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2205      	movs	r2, #5
 800f978:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f988:	2200      	movs	r2, #0
 800f98a:	4619      	mov	r1, r3
 800f98c:	f001 fa8e 	bl	8010eac <osMessagePut>
      break;
 800f990:	e03f      	b.n	800fa12 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2207      	movs	r2, #7
 800f996:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2205      	movs	r2, #5
 800f99c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	f001 fa7c 	bl	8010eac <osMessagePut>
      break;
 800f9b4:	e02d      	b.n	800fa12 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d017      	beq.n	800f9f0 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f9cc:	23ff      	movs	r3, #255	@ 0xff
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 f960 	bl	800fc94 <USBH_Get_StringDesc>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f9d8:	7bbb      	ldrb	r3, [r7, #14]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d102      	bne.n	800f9e4 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f9e2:	e018      	b.n	800fa16 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f9e4:	7bbb      	ldrb	r3, [r7, #14]
 800f9e6:	2b03      	cmp	r3, #3
 800f9e8:	d115      	bne.n	800fa16 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	73fb      	strb	r3, [r7, #15]
      break;
 800f9ee:	e012      	b.n	800fa16 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f9f4:	e00f      	b.n	800fa16 <USBH_HandleEnum+0x442>

    default:
      break;
 800f9f6:	bf00      	nop
 800f9f8:	e00e      	b.n	800fa18 <USBH_HandleEnum+0x444>
      break;
 800f9fa:	bf00      	nop
 800f9fc:	e00c      	b.n	800fa18 <USBH_HandleEnum+0x444>
      break;
 800f9fe:	bf00      	nop
 800fa00:	e00a      	b.n	800fa18 <USBH_HandleEnum+0x444>
      break;
 800fa02:	bf00      	nop
 800fa04:	e008      	b.n	800fa18 <USBH_HandleEnum+0x444>
      break;
 800fa06:	bf00      	nop
 800fa08:	e006      	b.n	800fa18 <USBH_HandleEnum+0x444>
      break;
 800fa0a:	bf00      	nop
 800fa0c:	e004      	b.n	800fa18 <USBH_HandleEnum+0x444>
      break;
 800fa0e:	bf00      	nop
 800fa10:	e002      	b.n	800fa18 <USBH_HandleEnum+0x444>
      break;
 800fa12:	bf00      	nop
 800fa14:	e000      	b.n	800fa18 <USBH_HandleEnum+0x444>
      break;
 800fa16:	bf00      	nop
  }
  return Status;
 800fa18:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop

0800fa24 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	683a      	ldr	r2, [r7, #0]
 800fa32:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800fa36:	bf00      	nop
 800fa38:	370c      	adds	r7, #12
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr

0800fa42 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800fa42:	b580      	push	{r7, lr}
 800fa44:	b082      	sub	sp, #8
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800fa50:	1c5a      	adds	r2, r3, #1
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f000 f804 	bl	800fa66 <USBH_HandleSof>
}
 800fa5e:	bf00      	nop
 800fa60:	3708      	adds	r7, #8
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}

0800fa66 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800fa66:	b580      	push	{r7, lr}
 800fa68:	b082      	sub	sp, #8
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	2b0b      	cmp	r3, #11
 800fa76:	d10a      	bne.n	800fa8e <USBH_HandleSof+0x28>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d005      	beq.n	800fa8e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa88:	699b      	ldr	r3, [r3, #24]
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	4798      	blx	r3
  }
}
 800fa8e:	bf00      	nop
 800fa90:	3708      	adds	r7, #8
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}

0800fa96 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800fa96:	b580      	push	{r7, lr}
 800fa98:	b082      	sub	sp, #8
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2201      	movs	r2, #1
 800faa2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2201      	movs	r2, #1
 800faaa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800faba:	2200      	movs	r2, #0
 800fabc:	4619      	mov	r1, r3
 800fabe:	f001 f9f5 	bl	8010eac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800fac2:	bf00      	nop
}
 800fac4:	3708      	adds	r7, #8
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800faca:	b480      	push	{r7}
 800facc:	b083      	sub	sp, #12
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2200      	movs	r2, #0
 800fad6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800fada:	bf00      	nop
}
 800fadc:	370c      	adds	r7, #12
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr

0800fae6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800fae6:	b580      	push	{r7, lr}
 800fae8:	b082      	sub	sp, #8
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2201      	movs	r2, #1
 800faf2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2201      	movs	r2, #1
 800fb0a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	f001 f9c5 	bl	8010eac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800fb22:	2300      	movs	r3, #0
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3708      	adds	r7, #8
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2201      	movs	r2, #1
 800fb38:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f003 fd7a 	bl	8013646 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	791b      	ldrb	r3, [r3, #4]
 800fb56:	4619      	mov	r1, r3
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f001 f835 	bl	8010bc8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	795b      	ldrb	r3, [r3, #5]
 800fb62:	4619      	mov	r1, r3
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f001 f82f 	bl	8010bc8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fb7e:	2200      	movs	r2, #0
 800fb80:	4619      	mov	r1, r3
 800fb82:	f001 f993 	bl	8010eac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800fb86:	2300      	movs	r3, #0
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3708      	adds	r7, #8
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 800fb9e:	f107 030c 	add.w	r3, r7, #12
 800fba2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fba6:	4618      	mov	r0, r3
 800fba8:	f001 f9c0 	bl	8010f2c <osMessageGet>
    if (event.status == osEventMessage)
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2b10      	cmp	r3, #16
 800fbb0:	d1f2      	bne.n	800fb98 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f7ff faa4 	bl	800f100 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800fbb8:	e7ee      	b.n	800fb98 <USBH_Process_OS+0x8>

0800fbba <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b082      	sub	sp, #8
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	4619      	mov	r1, r3
 800fbda:	f001 f967 	bl	8010eac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800fbde:	2300      	movs	r3, #0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b086      	sub	sp, #24
 800fbec:	af02      	add	r7, sp, #8
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800fbf4:	887b      	ldrh	r3, [r7, #2]
 800fbf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fbfa:	d901      	bls.n	800fc00 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800fbfc:	2303      	movs	r3, #3
 800fbfe:	e01b      	b.n	800fc38 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800fc06:	887b      	ldrh	r3, [r7, #2]
 800fc08:	9300      	str	r3, [sp, #0]
 800fc0a:	4613      	mov	r3, r2
 800fc0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fc10:	2100      	movs	r1, #0
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f000 f872 	bl	800fcfc <USBH_GetDescriptor>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800fc1c:	7bfb      	ldrb	r3, [r7, #15]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d109      	bne.n	800fc36 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fc28:	887a      	ldrh	r2, [r7, #2]
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 f929 	bl	800fe84 <USBH_ParseDevDesc>
 800fc32:	4603      	mov	r3, r0
 800fc34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fc36:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3710      	adds	r7, #16
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b086      	sub	sp, #24
 800fc44:	af02      	add	r7, sp, #8
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	460b      	mov	r3, r1
 800fc4a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	331c      	adds	r3, #28
 800fc50:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800fc52:	887b      	ldrh	r3, [r7, #2]
 800fc54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fc58:	d901      	bls.n	800fc5e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800fc5a:	2303      	movs	r3, #3
 800fc5c:	e016      	b.n	800fc8c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800fc5e:	887b      	ldrh	r3, [r7, #2]
 800fc60:	9300      	str	r3, [sp, #0]
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc68:	2100      	movs	r1, #0
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f000 f846 	bl	800fcfc <USBH_GetDescriptor>
 800fc70:	4603      	mov	r3, r0
 800fc72:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800fc74:	7bfb      	ldrb	r3, [r7, #15]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d107      	bne.n	800fc8a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800fc7a:	887b      	ldrh	r3, [r7, #2]
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	68b9      	ldr	r1, [r7, #8]
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f000 f9af 	bl	800ffe4 <USBH_ParseCfgDesc>
 800fc86:	4603      	mov	r3, r0
 800fc88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3710      	adds	r7, #16
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b088      	sub	sp, #32
 800fc98:	af02      	add	r7, sp, #8
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	607a      	str	r2, [r7, #4]
 800fc9e:	461a      	mov	r2, r3
 800fca0:	460b      	mov	r3, r1
 800fca2:	72fb      	strb	r3, [r7, #11]
 800fca4:	4613      	mov	r3, r2
 800fca6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800fca8:	893b      	ldrh	r3, [r7, #8]
 800fcaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fcae:	d802      	bhi.n	800fcb6 <USBH_Get_StringDesc+0x22>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d101      	bne.n	800fcba <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800fcb6:	2303      	movs	r3, #3
 800fcb8:	e01c      	b.n	800fcf4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800fcba:	7afb      	ldrb	r3, [r7, #11]
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800fcc2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800fcca:	893b      	ldrh	r3, [r7, #8]
 800fccc:	9300      	str	r3, [sp, #0]
 800fcce:	460b      	mov	r3, r1
 800fcd0:	2100      	movs	r1, #0
 800fcd2:	68f8      	ldr	r0, [r7, #12]
 800fcd4:	f000 f812 	bl	800fcfc <USBH_GetDescriptor>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800fcdc:	7dfb      	ldrb	r3, [r7, #23]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d107      	bne.n	800fcf2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fce8:	893a      	ldrh	r2, [r7, #8]
 800fcea:	6879      	ldr	r1, [r7, #4]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f000 fb8d 	bl	801040c <USBH_ParseStringDesc>
  }

  return status;
 800fcf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3718      	adds	r7, #24
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b084      	sub	sp, #16
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	607b      	str	r3, [r7, #4]
 800fd06:	460b      	mov	r3, r1
 800fd08:	72fb      	strb	r3, [r7, #11]
 800fd0a:	4613      	mov	r3, r2
 800fd0c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	789b      	ldrb	r3, [r3, #2]
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	d11c      	bne.n	800fd50 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fd16:	7afb      	ldrb	r3, [r7, #11]
 800fd18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fd1c:	b2da      	uxtb	r2, r3
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2206      	movs	r2, #6
 800fd26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	893a      	ldrh	r2, [r7, #8]
 800fd2c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800fd2e:	893b      	ldrh	r3, [r7, #8]
 800fd30:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fd34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fd38:	d104      	bne.n	800fd44 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f240 4209 	movw	r2, #1033	@ 0x409
 800fd40:	829a      	strh	r2, [r3, #20]
 800fd42:	e002      	b.n	800fd4a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2200      	movs	r2, #0
 800fd48:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	8b3a      	ldrh	r2, [r7, #24]
 800fd4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800fd50:	8b3b      	ldrh	r3, [r7, #24]
 800fd52:	461a      	mov	r2, r3
 800fd54:	6879      	ldr	r1, [r7, #4]
 800fd56:	68f8      	ldr	r0, [r7, #12]
 800fd58:	f000 fba5 	bl	80104a6 <USBH_CtlReq>
 800fd5c:	4603      	mov	r3, r0
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3710      	adds	r7, #16
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}

0800fd66 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800fd66:	b580      	push	{r7, lr}
 800fd68:	b082      	sub	sp, #8
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	6078      	str	r0, [r7, #4]
 800fd6e:	460b      	mov	r3, r1
 800fd70:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	789b      	ldrb	r3, [r3, #2]
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d10f      	bne.n	800fd9a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2205      	movs	r2, #5
 800fd84:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800fd86:	78fb      	ldrb	r3, [r7, #3]
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2200      	movs	r2, #0
 800fd92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2200      	movs	r2, #0
 800fd98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	2100      	movs	r1, #0
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 fb81 	bl	80104a6 <USBH_CtlReq>
 800fda4:	4603      	mov	r3, r0
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3708      	adds	r7, #8
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}

0800fdae <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800fdae:	b580      	push	{r7, lr}
 800fdb0:	b082      	sub	sp, #8
 800fdb2:	af00      	add	r7, sp, #0
 800fdb4:	6078      	str	r0, [r7, #4]
 800fdb6:	460b      	mov	r3, r1
 800fdb8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	789b      	ldrb	r3, [r3, #2]
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d10e      	bne.n	800fde0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2209      	movs	r2, #9
 800fdcc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	887a      	ldrh	r2, [r7, #2]
 800fdd2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2200      	movs	r2, #0
 800fdde:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fde0:	2200      	movs	r2, #0
 800fde2:	2100      	movs	r1, #0
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 fb5e 	bl	80104a6 <USBH_CtlReq>
 800fdea:	4603      	mov	r3, r0
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}

0800fdf4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	460b      	mov	r3, r1
 800fdfe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	789b      	ldrb	r3, [r3, #2]
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d10f      	bne.n	800fe28 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2203      	movs	r2, #3
 800fe12:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800fe14:	78fb      	ldrb	r3, [r7, #3]
 800fe16:	b29a      	uxth	r2, r3
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2200      	movs	r2, #0
 800fe26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fe28:	2200      	movs	r2, #0
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f000 fb3a 	bl	80104a6 <USBH_CtlReq>
 800fe32:	4603      	mov	r3, r0
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	460b      	mov	r3, r1
 800fe46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	789b      	ldrb	r3, [r3, #2]
 800fe4c:	2b01      	cmp	r3, #1
 800fe4e:	d10f      	bne.n	800fe70 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2202      	movs	r2, #2
 800fe54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2201      	movs	r2, #1
 800fe5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800fe62:	78fb      	ldrb	r3, [r7, #3]
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fe70:	2200      	movs	r2, #0
 800fe72:	2100      	movs	r1, #0
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 fb16 	bl	80104a6 <USBH_CtlReq>
 800fe7a:	4603      	mov	r3, r0
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800fe84:	b480      	push	{r7}
 800fe86:	b087      	sub	sp, #28
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	4613      	mov	r3, r2
 800fe90:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800fe98:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d101      	bne.n	800fea8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800fea4:	2302      	movs	r3, #2
 800fea6:	e094      	b.n	800ffd2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	781a      	ldrb	r2, [r3, #0]
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	785a      	ldrb	r2, [r3, #1]
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	3302      	adds	r3, #2
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	461a      	mov	r2, r3
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	3303      	adds	r3, #3
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	021b      	lsls	r3, r3, #8
 800fec8:	b29b      	uxth	r3, r3
 800feca:	4313      	orrs	r3, r2
 800fecc:	b29a      	uxth	r2, r3
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	791a      	ldrb	r2, [r3, #4]
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	795a      	ldrb	r2, [r3, #5]
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	799a      	ldrb	r2, [r3, #6]
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	79da      	ldrb	r2, [r3, #7]
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d004      	beq.n	800ff06 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ff02:	2b01      	cmp	r3, #1
 800ff04:	d11b      	bne.n	800ff3e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	79db      	ldrb	r3, [r3, #7]
 800ff0a:	2b20      	cmp	r3, #32
 800ff0c:	dc0f      	bgt.n	800ff2e <USBH_ParseDevDesc+0xaa>
 800ff0e:	2b08      	cmp	r3, #8
 800ff10:	db0f      	blt.n	800ff32 <USBH_ParseDevDesc+0xae>
 800ff12:	3b08      	subs	r3, #8
 800ff14:	4a32      	ldr	r2, [pc, #200]	@ (800ffe0 <USBH_ParseDevDesc+0x15c>)
 800ff16:	fa22 f303 	lsr.w	r3, r2, r3
 800ff1a:	f003 0301 	and.w	r3, r3, #1
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	bf14      	ite	ne
 800ff22:	2301      	movne	r3, #1
 800ff24:	2300      	moveq	r3, #0
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d106      	bne.n	800ff3a <USBH_ParseDevDesc+0xb6>
 800ff2c:	e001      	b.n	800ff32 <USBH_ParseDevDesc+0xae>
 800ff2e:	2b40      	cmp	r3, #64	@ 0x40
 800ff30:	d003      	beq.n	800ff3a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	2208      	movs	r2, #8
 800ff36:	71da      	strb	r2, [r3, #7]
        break;
 800ff38:	e000      	b.n	800ff3c <USBH_ParseDevDesc+0xb8>
        break;
 800ff3a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800ff3c:	e00e      	b.n	800ff5c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ff44:	2b02      	cmp	r3, #2
 800ff46:	d107      	bne.n	800ff58 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	79db      	ldrb	r3, [r3, #7]
 800ff4c:	2b08      	cmp	r3, #8
 800ff4e:	d005      	beq.n	800ff5c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	2208      	movs	r2, #8
 800ff54:	71da      	strb	r2, [r3, #7]
 800ff56:	e001      	b.n	800ff5c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ff58:	2303      	movs	r3, #3
 800ff5a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ff5c:	88fb      	ldrh	r3, [r7, #6]
 800ff5e:	2b08      	cmp	r3, #8
 800ff60:	d936      	bls.n	800ffd0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	3308      	adds	r3, #8
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	461a      	mov	r2, r3
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	3309      	adds	r3, #9
 800ff6e:	781b      	ldrb	r3, [r3, #0]
 800ff70:	021b      	lsls	r3, r3, #8
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	4313      	orrs	r3, r2
 800ff76:	b29a      	uxth	r2, r3
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	330a      	adds	r3, #10
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	461a      	mov	r2, r3
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	330b      	adds	r3, #11
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	021b      	lsls	r3, r3, #8
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	b29a      	uxth	r2, r3
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	330c      	adds	r3, #12
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	461a      	mov	r2, r3
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	330d      	adds	r3, #13
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	021b      	lsls	r3, r3, #8
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	b29a      	uxth	r2, r3
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	7b9a      	ldrb	r2, [r3, #14]
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	7bda      	ldrb	r2, [r3, #15]
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	7c1a      	ldrb	r2, [r3, #16]
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	7c5a      	ldrb	r2, [r3, #17]
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800ffd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	371c      	adds	r7, #28
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffdc:	4770      	bx	lr
 800ffde:	bf00      	nop
 800ffe0:	01000101 	.word	0x01000101

0800ffe4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b08c      	sub	sp, #48	@ 0x30
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	60f8      	str	r0, [r7, #12]
 800ffec:	60b9      	str	r1, [r7, #8]
 800ffee:	4613      	mov	r3, r2
 800fff0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800fff8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800fffa:	2300      	movs	r3, #0
 800fffc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010000:	2300      	movs	r3, #0
 8010002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8010006:	2300      	movs	r3, #0
 8010008:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d101      	bne.n	8010016 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8010012:	2302      	movs	r3, #2
 8010014:	e0da      	b.n	80101cc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 801001a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	2b09      	cmp	r3, #9
 8010020:	d002      	beq.n	8010028 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8010022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010024:	2209      	movs	r2, #9
 8010026:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	781a      	ldrb	r2, [r3, #0]
 801002c:	6a3b      	ldr	r3, [r7, #32]
 801002e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	785a      	ldrb	r2, [r3, #1]
 8010034:	6a3b      	ldr	r3, [r7, #32]
 8010036:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	3302      	adds	r3, #2
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	461a      	mov	r2, r3
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	3303      	adds	r3, #3
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	021b      	lsls	r3, r3, #8
 8010048:	b29b      	uxth	r3, r3
 801004a:	4313      	orrs	r3, r2
 801004c:	b29b      	uxth	r3, r3
 801004e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010052:	bf28      	it	cs
 8010054:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8010058:	b29a      	uxth	r2, r3
 801005a:	6a3b      	ldr	r3, [r7, #32]
 801005c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	791a      	ldrb	r2, [r3, #4]
 8010062:	6a3b      	ldr	r3, [r7, #32]
 8010064:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	795a      	ldrb	r2, [r3, #5]
 801006a:	6a3b      	ldr	r3, [r7, #32]
 801006c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	799a      	ldrb	r2, [r3, #6]
 8010072:	6a3b      	ldr	r3, [r7, #32]
 8010074:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	79da      	ldrb	r2, [r3, #7]
 801007a:	6a3b      	ldr	r3, [r7, #32]
 801007c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	7a1a      	ldrb	r2, [r3, #8]
 8010082:	6a3b      	ldr	r3, [r7, #32]
 8010084:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8010086:	88fb      	ldrh	r3, [r7, #6]
 8010088:	2b09      	cmp	r3, #9
 801008a:	f240 809d 	bls.w	80101c8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 801008e:	2309      	movs	r3, #9
 8010090:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010092:	2300      	movs	r3, #0
 8010094:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010096:	e081      	b.n	801019c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010098:	f107 0316 	add.w	r3, r7, #22
 801009c:	4619      	mov	r1, r3
 801009e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100a0:	f000 f9e7 	bl	8010472 <USBH_GetNextDesc>
 80100a4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80100a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100a8:	785b      	ldrb	r3, [r3, #1]
 80100aa:	2b04      	cmp	r3, #4
 80100ac:	d176      	bne.n	801019c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80100ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	2b09      	cmp	r3, #9
 80100b4:	d002      	beq.n	80100bc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80100b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100b8:	2209      	movs	r2, #9
 80100ba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80100bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80100c0:	221a      	movs	r2, #26
 80100c2:	fb02 f303 	mul.w	r3, r2, r3
 80100c6:	3308      	adds	r3, #8
 80100c8:	6a3a      	ldr	r2, [r7, #32]
 80100ca:	4413      	add	r3, r2
 80100cc:	3302      	adds	r3, #2
 80100ce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80100d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80100d2:	69f8      	ldr	r0, [r7, #28]
 80100d4:	f000 f87e 	bl	80101d4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80100d8:	2300      	movs	r3, #0
 80100da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80100de:	2300      	movs	r3, #0
 80100e0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80100e2:	e043      	b.n	801016c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80100e4:	f107 0316 	add.w	r3, r7, #22
 80100e8:	4619      	mov	r1, r3
 80100ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100ec:	f000 f9c1 	bl	8010472 <USBH_GetNextDesc>
 80100f0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80100f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100f4:	785b      	ldrb	r3, [r3, #1]
 80100f6:	2b05      	cmp	r3, #5
 80100f8:	d138      	bne.n	801016c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	795b      	ldrb	r3, [r3, #5]
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d113      	bne.n	801012a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010102:	69fb      	ldr	r3, [r7, #28]
 8010104:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8010106:	2b02      	cmp	r3, #2
 8010108:	d003      	beq.n	8010112 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	799b      	ldrb	r3, [r3, #6]
 801010e:	2b03      	cmp	r3, #3
 8010110:	d10b      	bne.n	801012a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	79db      	ldrb	r3, [r3, #7]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d10b      	bne.n	8010132 <USBH_ParseCfgDesc+0x14e>
 801011a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	2b09      	cmp	r3, #9
 8010120:	d007      	beq.n	8010132 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8010122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010124:	2209      	movs	r2, #9
 8010126:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010128:	e003      	b.n	8010132 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 801012a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801012c:	2207      	movs	r2, #7
 801012e:	701a      	strb	r2, [r3, #0]
 8010130:	e000      	b.n	8010134 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010132:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8010134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010138:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801013c:	3201      	adds	r2, #1
 801013e:	00d2      	lsls	r2, r2, #3
 8010140:	211a      	movs	r1, #26
 8010142:	fb01 f303 	mul.w	r3, r1, r3
 8010146:	4413      	add	r3, r2
 8010148:	3308      	adds	r3, #8
 801014a:	6a3a      	ldr	r2, [r7, #32]
 801014c:	4413      	add	r3, r2
 801014e:	3304      	adds	r3, #4
 8010150:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8010152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010154:	69b9      	ldr	r1, [r7, #24]
 8010156:	68f8      	ldr	r0, [r7, #12]
 8010158:	f000 f870 	bl	801023c <USBH_ParseEPDesc>
 801015c:	4603      	mov	r3, r0
 801015e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8010162:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010166:	3301      	adds	r3, #1
 8010168:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	791b      	ldrb	r3, [r3, #4]
 8010170:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010174:	429a      	cmp	r2, r3
 8010176:	d204      	bcs.n	8010182 <USBH_ParseCfgDesc+0x19e>
 8010178:	6a3b      	ldr	r3, [r7, #32]
 801017a:	885a      	ldrh	r2, [r3, #2]
 801017c:	8afb      	ldrh	r3, [r7, #22]
 801017e:	429a      	cmp	r2, r3
 8010180:	d8b0      	bhi.n	80100e4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	791b      	ldrb	r3, [r3, #4]
 8010186:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801018a:	429a      	cmp	r2, r3
 801018c:	d201      	bcs.n	8010192 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 801018e:	2303      	movs	r3, #3
 8010190:	e01c      	b.n	80101cc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8010192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010196:	3301      	adds	r3, #1
 8010198:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801019c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d805      	bhi.n	80101b0 <USBH_ParseCfgDesc+0x1cc>
 80101a4:	6a3b      	ldr	r3, [r7, #32]
 80101a6:	885a      	ldrh	r2, [r3, #2]
 80101a8:	8afb      	ldrh	r3, [r7, #22]
 80101aa:	429a      	cmp	r2, r3
 80101ac:	f63f af74 	bhi.w	8010098 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80101b0:	6a3b      	ldr	r3, [r7, #32]
 80101b2:	791b      	ldrb	r3, [r3, #4]
 80101b4:	2b02      	cmp	r3, #2
 80101b6:	bf28      	it	cs
 80101b8:	2302      	movcs	r3, #2
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d201      	bcs.n	80101c8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80101c4:	2303      	movs	r3, #3
 80101c6:	e001      	b.n	80101cc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80101c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3730      	adds	r7, #48	@ 0x30
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	781a      	ldrb	r2, [r3, #0]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	785a      	ldrb	r2, [r3, #1]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	789a      	ldrb	r2, [r3, #2]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	78da      	ldrb	r2, [r3, #3]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	3304      	adds	r3, #4
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	2b02      	cmp	r3, #2
 8010206:	bf28      	it	cs
 8010208:	2302      	movcs	r3, #2
 801020a:	b2da      	uxtb	r2, r3
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	795a      	ldrb	r2, [r3, #5]
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	799a      	ldrb	r2, [r3, #6]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	79da      	ldrb	r2, [r3, #7]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	7a1a      	ldrb	r2, [r3, #8]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	721a      	strb	r2, [r3, #8]
}
 8010230:	bf00      	nop
 8010232:	370c      	adds	r7, #12
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr

0801023c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 801023c:	b480      	push	{r7}
 801023e:	b087      	sub	sp, #28
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010248:	2300      	movs	r3, #0
 801024a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	781a      	ldrb	r2, [r3, #0]
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	785a      	ldrb	r2, [r3, #1]
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	789a      	ldrb	r2, [r3, #2]
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	78da      	ldrb	r2, [r3, #3]
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	3304      	adds	r3, #4
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	461a      	mov	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	3305      	adds	r3, #5
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	021b      	lsls	r3, r3, #8
 801027c:	b29b      	uxth	r3, r3
 801027e:	4313      	orrs	r3, r2
 8010280:	b29a      	uxth	r2, r3
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	799a      	ldrb	r2, [r3, #6]
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	889b      	ldrh	r3, [r3, #4]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d009      	beq.n	80102aa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801029a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801029e:	d804      	bhi.n	80102aa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80102a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80102a8:	d901      	bls.n	80102ae <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80102aa:	2303      	movs	r3, #3
 80102ac:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d136      	bne.n	8010326 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	78db      	ldrb	r3, [r3, #3]
 80102bc:	f003 0303 	and.w	r3, r3, #3
 80102c0:	2b02      	cmp	r3, #2
 80102c2:	d108      	bne.n	80102d6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	889b      	ldrh	r3, [r3, #4]
 80102c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80102cc:	f240 8097 	bls.w	80103fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80102d0:	2303      	movs	r3, #3
 80102d2:	75fb      	strb	r3, [r7, #23]
 80102d4:	e093      	b.n	80103fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	78db      	ldrb	r3, [r3, #3]
 80102da:	f003 0303 	and.w	r3, r3, #3
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d107      	bne.n	80102f2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	889b      	ldrh	r3, [r3, #4]
 80102e6:	2b40      	cmp	r3, #64	@ 0x40
 80102e8:	f240 8089 	bls.w	80103fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80102ec:	2303      	movs	r3, #3
 80102ee:	75fb      	strb	r3, [r7, #23]
 80102f0:	e085      	b.n	80103fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	78db      	ldrb	r3, [r3, #3]
 80102f6:	f003 0303 	and.w	r3, r3, #3
 80102fa:	2b01      	cmp	r3, #1
 80102fc:	d005      	beq.n	801030a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	78db      	ldrb	r3, [r3, #3]
 8010302:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010306:	2b03      	cmp	r3, #3
 8010308:	d10a      	bne.n	8010320 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	799b      	ldrb	r3, [r3, #6]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d003      	beq.n	801031a <USBH_ParseEPDesc+0xde>
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	799b      	ldrb	r3, [r3, #6]
 8010316:	2b10      	cmp	r3, #16
 8010318:	d970      	bls.n	80103fc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 801031a:	2303      	movs	r3, #3
 801031c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801031e:	e06d      	b.n	80103fc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010320:	2303      	movs	r3, #3
 8010322:	75fb      	strb	r3, [r7, #23]
 8010324:	e06b      	b.n	80103fe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801032c:	2b01      	cmp	r3, #1
 801032e:	d13c      	bne.n	80103aa <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	78db      	ldrb	r3, [r3, #3]
 8010334:	f003 0303 	and.w	r3, r3, #3
 8010338:	2b02      	cmp	r3, #2
 801033a:	d005      	beq.n	8010348 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	78db      	ldrb	r3, [r3, #3]
 8010340:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010344:	2b00      	cmp	r3, #0
 8010346:	d106      	bne.n	8010356 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	889b      	ldrh	r3, [r3, #4]
 801034c:	2b40      	cmp	r3, #64	@ 0x40
 801034e:	d956      	bls.n	80103fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010350:	2303      	movs	r3, #3
 8010352:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010354:	e053      	b.n	80103fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	78db      	ldrb	r3, [r3, #3]
 801035a:	f003 0303 	and.w	r3, r3, #3
 801035e:	2b01      	cmp	r3, #1
 8010360:	d10e      	bne.n	8010380 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	799b      	ldrb	r3, [r3, #6]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d007      	beq.n	801037a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801036e:	2b10      	cmp	r3, #16
 8010370:	d803      	bhi.n	801037a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8010376:	2b40      	cmp	r3, #64	@ 0x40
 8010378:	d941      	bls.n	80103fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801037a:	2303      	movs	r3, #3
 801037c:	75fb      	strb	r3, [r7, #23]
 801037e:	e03e      	b.n	80103fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	78db      	ldrb	r3, [r3, #3]
 8010384:	f003 0303 	and.w	r3, r3, #3
 8010388:	2b03      	cmp	r3, #3
 801038a:	d10b      	bne.n	80103a4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	799b      	ldrb	r3, [r3, #6]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d004      	beq.n	801039e <USBH_ParseEPDesc+0x162>
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	889b      	ldrh	r3, [r3, #4]
 8010398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801039c:	d32f      	bcc.n	80103fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801039e:	2303      	movs	r3, #3
 80103a0:	75fb      	strb	r3, [r7, #23]
 80103a2:	e02c      	b.n	80103fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80103a4:	2303      	movs	r3, #3
 80103a6:	75fb      	strb	r3, [r7, #23]
 80103a8:	e029      	b.n	80103fe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80103b0:	2b02      	cmp	r3, #2
 80103b2:	d120      	bne.n	80103f6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	78db      	ldrb	r3, [r3, #3]
 80103b8:	f003 0303 	and.w	r3, r3, #3
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d106      	bne.n	80103ce <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	889b      	ldrh	r3, [r3, #4]
 80103c4:	2b08      	cmp	r3, #8
 80103c6:	d01a      	beq.n	80103fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80103c8:	2303      	movs	r3, #3
 80103ca:	75fb      	strb	r3, [r7, #23]
 80103cc:	e017      	b.n	80103fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	78db      	ldrb	r3, [r3, #3]
 80103d2:	f003 0303 	and.w	r3, r3, #3
 80103d6:	2b03      	cmp	r3, #3
 80103d8:	d10a      	bne.n	80103f0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	799b      	ldrb	r3, [r3, #6]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d003      	beq.n	80103ea <USBH_ParseEPDesc+0x1ae>
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	889b      	ldrh	r3, [r3, #4]
 80103e6:	2b08      	cmp	r3, #8
 80103e8:	d909      	bls.n	80103fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80103ea:	2303      	movs	r3, #3
 80103ec:	75fb      	strb	r3, [r7, #23]
 80103ee:	e006      	b.n	80103fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80103f0:	2303      	movs	r3, #3
 80103f2:	75fb      	strb	r3, [r7, #23]
 80103f4:	e003      	b.n	80103fe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80103f6:	2303      	movs	r3, #3
 80103f8:	75fb      	strb	r3, [r7, #23]
 80103fa:	e000      	b.n	80103fe <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80103fc:	bf00      	nop
  }

  return status;
 80103fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010400:	4618      	mov	r0, r3
 8010402:	371c      	adds	r7, #28
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801040c:	b480      	push	{r7}
 801040e:	b087      	sub	sp, #28
 8010410:	af00      	add	r7, sp, #0
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	4613      	mov	r3, r2
 8010418:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	3301      	adds	r3, #1
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	2b03      	cmp	r3, #3
 8010422:	d120      	bne.n	8010466 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	1e9a      	subs	r2, r3, #2
 801042a:	88fb      	ldrh	r3, [r7, #6]
 801042c:	4293      	cmp	r3, r2
 801042e:	bf28      	it	cs
 8010430:	4613      	movcs	r3, r2
 8010432:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	3302      	adds	r3, #2
 8010438:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801043a:	2300      	movs	r3, #0
 801043c:	82fb      	strh	r3, [r7, #22]
 801043e:	e00b      	b.n	8010458 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010440:	8afb      	ldrh	r3, [r7, #22]
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	4413      	add	r3, r2
 8010446:	781a      	ldrb	r2, [r3, #0]
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	701a      	strb	r2, [r3, #0]
      pdest++;
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	3301      	adds	r3, #1
 8010450:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010452:	8afb      	ldrh	r3, [r7, #22]
 8010454:	3302      	adds	r3, #2
 8010456:	82fb      	strh	r3, [r7, #22]
 8010458:	8afa      	ldrh	r2, [r7, #22]
 801045a:	8abb      	ldrh	r3, [r7, #20]
 801045c:	429a      	cmp	r2, r3
 801045e:	d3ef      	bcc.n	8010440 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	2200      	movs	r2, #0
 8010464:	701a      	strb	r2, [r3, #0]
  }
}
 8010466:	bf00      	nop
 8010468:	371c      	adds	r7, #28
 801046a:	46bd      	mov	sp, r7
 801046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010470:	4770      	bx	lr

08010472 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010472:	b480      	push	{r7}
 8010474:	b085      	sub	sp, #20
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
 801047a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	881b      	ldrh	r3, [r3, #0]
 8010480:	687a      	ldr	r2, [r7, #4]
 8010482:	7812      	ldrb	r2, [r2, #0]
 8010484:	4413      	add	r3, r2
 8010486:	b29a      	uxth	r2, r3
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4413      	add	r3, r2
 8010496:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010498:	68fb      	ldr	r3, [r7, #12]
}
 801049a:	4618      	mov	r0, r3
 801049c:	3714      	adds	r7, #20
 801049e:	46bd      	mov	sp, r7
 80104a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a4:	4770      	bx	lr

080104a6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80104a6:	b580      	push	{r7, lr}
 80104a8:	b086      	sub	sp, #24
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	60f8      	str	r0, [r7, #12]
 80104ae:	60b9      	str	r1, [r7, #8]
 80104b0:	4613      	mov	r3, r2
 80104b2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80104b4:	2301      	movs	r3, #1
 80104b6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	789b      	ldrb	r3, [r3, #2]
 80104bc:	2b01      	cmp	r3, #1
 80104be:	d002      	beq.n	80104c6 <USBH_CtlReq+0x20>
 80104c0:	2b02      	cmp	r3, #2
 80104c2:	d01d      	beq.n	8010500 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80104c4:	e043      	b.n	801054e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	68ba      	ldr	r2, [r7, #8]
 80104ca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	88fa      	ldrh	r2, [r7, #6]
 80104d0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2201      	movs	r2, #1
 80104d6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	2202      	movs	r2, #2
 80104dc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80104de:	2301      	movs	r3, #1
 80104e0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2203      	movs	r2, #3
 80104e6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80104f6:	2200      	movs	r2, #0
 80104f8:	4619      	mov	r1, r3
 80104fa:	f000 fcd7 	bl	8010eac <osMessagePut>
      break;
 80104fe:	e026      	b.n	801054e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8010500:	68f8      	ldr	r0, [r7, #12]
 8010502:	f000 f829 	bl	8010558 <USBH_HandleControl>
 8010506:	4603      	mov	r3, r0
 8010508:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801050a:	7dfb      	ldrb	r3, [r7, #23]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d002      	beq.n	8010516 <USBH_CtlReq+0x70>
 8010510:	7dfb      	ldrb	r3, [r7, #23]
 8010512:	2b03      	cmp	r3, #3
 8010514:	d106      	bne.n	8010524 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	2201      	movs	r2, #1
 801051a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2200      	movs	r2, #0
 8010520:	761a      	strb	r2, [r3, #24]
 8010522:	e005      	b.n	8010530 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8010524:	7dfb      	ldrb	r3, [r7, #23]
 8010526:	2b02      	cmp	r3, #2
 8010528:	d102      	bne.n	8010530 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2201      	movs	r2, #1
 801052e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2203      	movs	r2, #3
 8010534:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010544:	2200      	movs	r2, #0
 8010546:	4619      	mov	r1, r3
 8010548:	f000 fcb0 	bl	8010eac <osMessagePut>
      break;
 801054c:	bf00      	nop
  }
  return status;
 801054e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010550:	4618      	mov	r0, r3
 8010552:	3718      	adds	r7, #24
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b086      	sub	sp, #24
 801055c:	af02      	add	r7, sp, #8
 801055e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010560:	2301      	movs	r3, #1
 8010562:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010564:	2300      	movs	r3, #0
 8010566:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	7e1b      	ldrb	r3, [r3, #24]
 801056c:	3b01      	subs	r3, #1
 801056e:	2b0a      	cmp	r3, #10
 8010570:	f200 8229 	bhi.w	80109c6 <USBH_HandleControl+0x46e>
 8010574:	a201      	add	r2, pc, #4	@ (adr r2, 801057c <USBH_HandleControl+0x24>)
 8010576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801057a:	bf00      	nop
 801057c:	080105a9 	.word	0x080105a9
 8010580:	080105c3 	.word	0x080105c3
 8010584:	08010665 	.word	0x08010665
 8010588:	0801068b 	.word	0x0801068b
 801058c:	08010717 	.word	0x08010717
 8010590:	08010741 	.word	0x08010741
 8010594:	08010803 	.word	0x08010803
 8010598:	08010825 	.word	0x08010825
 801059c:	080108b7 	.word	0x080108b7
 80105a0:	080108dd 	.word	0x080108dd
 80105a4:	0801096f 	.word	0x0801096f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f103 0110 	add.w	r1, r3, #16
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	795b      	ldrb	r3, [r3, #5]
 80105b2:	461a      	mov	r2, r3
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f000 fa17 	bl	80109e8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2202      	movs	r2, #2
 80105be:	761a      	strb	r2, [r3, #24]
      break;
 80105c0:	e20c      	b.n	80109dc <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	795b      	ldrb	r3, [r3, #5]
 80105c6:	4619      	mov	r1, r3
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f003 f92b 	bl	8013824 <USBH_LL_GetURBState>
 80105ce:	4603      	mov	r3, r0
 80105d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80105d2:	7bbb      	ldrb	r3, [r7, #14]
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d12c      	bne.n	8010632 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	7c1b      	ldrb	r3, [r3, #16]
 80105dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80105e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	8adb      	ldrh	r3, [r3, #22]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d00a      	beq.n	8010600 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80105ea:	7b7b      	ldrb	r3, [r7, #13]
 80105ec:	2b80      	cmp	r3, #128	@ 0x80
 80105ee:	d103      	bne.n	80105f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2203      	movs	r2, #3
 80105f4:	761a      	strb	r2, [r3, #24]
 80105f6:	e00d      	b.n	8010614 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2205      	movs	r2, #5
 80105fc:	761a      	strb	r2, [r3, #24]
 80105fe:	e009      	b.n	8010614 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8010600:	7b7b      	ldrb	r3, [r7, #13]
 8010602:	2b80      	cmp	r3, #128	@ 0x80
 8010604:	d103      	bne.n	801060e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2209      	movs	r2, #9
 801060a:	761a      	strb	r2, [r3, #24]
 801060c:	e002      	b.n	8010614 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2207      	movs	r2, #7
 8010612:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2203      	movs	r2, #3
 8010618:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010628:	2200      	movs	r2, #0
 801062a:	4619      	mov	r1, r3
 801062c:	f000 fc3e 	bl	8010eac <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010630:	e1cb      	b.n	80109ca <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010632:	7bbb      	ldrb	r3, [r7, #14]
 8010634:	2b04      	cmp	r3, #4
 8010636:	d003      	beq.n	8010640 <USBH_HandleControl+0xe8>
 8010638:	7bbb      	ldrb	r3, [r7, #14]
 801063a:	2b02      	cmp	r3, #2
 801063c:	f040 81c5 	bne.w	80109ca <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	220b      	movs	r2, #11
 8010644:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2203      	movs	r2, #3
 801064a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801065a:	2200      	movs	r2, #0
 801065c:	4619      	mov	r1, r3
 801065e:	f000 fc25 	bl	8010eac <osMessagePut>
      break;
 8010662:	e1b2      	b.n	80109ca <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801066a:	b29a      	uxth	r2, r3
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6899      	ldr	r1, [r3, #8]
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	899a      	ldrh	r2, [r3, #12]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	791b      	ldrb	r3, [r3, #4]
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f000 f9f2 	bl	8010a66 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2204      	movs	r2, #4
 8010686:	761a      	strb	r2, [r3, #24]
      break;
 8010688:	e1a8      	b.n	80109dc <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	791b      	ldrb	r3, [r3, #4]
 801068e:	4619      	mov	r1, r3
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f003 f8c7 	bl	8013824 <USBH_LL_GetURBState>
 8010696:	4603      	mov	r3, r0
 8010698:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801069a:	7bbb      	ldrb	r3, [r7, #14]
 801069c:	2b01      	cmp	r3, #1
 801069e:	d110      	bne.n	80106c2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2209      	movs	r2, #9
 80106a4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2203      	movs	r2, #3
 80106aa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80106ba:	2200      	movs	r2, #0
 80106bc:	4619      	mov	r1, r3
 80106be:	f000 fbf5 	bl	8010eac <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80106c2:	7bbb      	ldrb	r3, [r7, #14]
 80106c4:	2b05      	cmp	r3, #5
 80106c6:	d110      	bne.n	80106ea <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80106c8:	2303      	movs	r3, #3
 80106ca:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2203      	movs	r2, #3
 80106d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80106e0:	2200      	movs	r2, #0
 80106e2:	4619      	mov	r1, r3
 80106e4:	f000 fbe2 	bl	8010eac <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80106e8:	e171      	b.n	80109ce <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80106ea:	7bbb      	ldrb	r3, [r7, #14]
 80106ec:	2b04      	cmp	r3, #4
 80106ee:	f040 816e 	bne.w	80109ce <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	220b      	movs	r2, #11
 80106f6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2203      	movs	r2, #3
 80106fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801070c:	2200      	movs	r2, #0
 801070e:	4619      	mov	r1, r3
 8010710:	f000 fbcc 	bl	8010eac <osMessagePut>
      break;
 8010714:	e15b      	b.n	80109ce <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6899      	ldr	r1, [r3, #8]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	899a      	ldrh	r2, [r3, #12]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	795b      	ldrb	r3, [r3, #5]
 8010722:	2001      	movs	r0, #1
 8010724:	9000      	str	r0, [sp, #0]
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f000 f978 	bl	8010a1c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010732:	b29a      	uxth	r2, r3
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2206      	movs	r2, #6
 801073c:	761a      	strb	r2, [r3, #24]
      break;
 801073e:	e14d      	b.n	80109dc <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	795b      	ldrb	r3, [r3, #5]
 8010744:	4619      	mov	r1, r3
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f003 f86c 	bl	8013824 <USBH_LL_GetURBState>
 801074c:	4603      	mov	r3, r0
 801074e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010750:	7bbb      	ldrb	r3, [r7, #14]
 8010752:	2b01      	cmp	r3, #1
 8010754:	d111      	bne.n	801077a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2207      	movs	r2, #7
 801075a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2203      	movs	r2, #3
 8010760:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010770:	2200      	movs	r2, #0
 8010772:	4619      	mov	r1, r3
 8010774:	f000 fb9a 	bl	8010eac <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010778:	e12b      	b.n	80109d2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 801077a:	7bbb      	ldrb	r3, [r7, #14]
 801077c:	2b05      	cmp	r3, #5
 801077e:	d113      	bne.n	80107a8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	220c      	movs	r2, #12
 8010784:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010786:	2303      	movs	r3, #3
 8010788:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2203      	movs	r2, #3
 801078e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801079e:	2200      	movs	r2, #0
 80107a0:	4619      	mov	r1, r3
 80107a2:	f000 fb83 	bl	8010eac <osMessagePut>
      break;
 80107a6:	e114      	b.n	80109d2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80107a8:	7bbb      	ldrb	r3, [r7, #14]
 80107aa:	2b02      	cmp	r3, #2
 80107ac:	d111      	bne.n	80107d2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2205      	movs	r2, #5
 80107b2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2203      	movs	r2, #3
 80107b8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80107c8:	2200      	movs	r2, #0
 80107ca:	4619      	mov	r1, r3
 80107cc:	f000 fb6e 	bl	8010eac <osMessagePut>
      break;
 80107d0:	e0ff      	b.n	80109d2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80107d2:	7bbb      	ldrb	r3, [r7, #14]
 80107d4:	2b04      	cmp	r3, #4
 80107d6:	f040 80fc 	bne.w	80109d2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	220b      	movs	r2, #11
 80107de:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80107e0:	2302      	movs	r3, #2
 80107e2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2203      	movs	r2, #3
 80107e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80107f8:	2200      	movs	r2, #0
 80107fa:	4619      	mov	r1, r3
 80107fc:	f000 fb56 	bl	8010eac <osMessagePut>
      break;
 8010800:	e0e7      	b.n	80109d2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	791b      	ldrb	r3, [r3, #4]
 8010806:	2200      	movs	r2, #0
 8010808:	2100      	movs	r1, #0
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f000 f92b 	bl	8010a66 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010816:	b29a      	uxth	r2, r3
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2208      	movs	r2, #8
 8010820:	761a      	strb	r2, [r3, #24]

      break;
 8010822:	e0db      	b.n	80109dc <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	791b      	ldrb	r3, [r3, #4]
 8010828:	4619      	mov	r1, r3
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f002 fffa 	bl	8013824 <USBH_LL_GetURBState>
 8010830:	4603      	mov	r3, r0
 8010832:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010834:	7bbb      	ldrb	r3, [r7, #14]
 8010836:	2b01      	cmp	r3, #1
 8010838:	d113      	bne.n	8010862 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	220d      	movs	r2, #13
 801083e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010840:	2300      	movs	r3, #0
 8010842:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2203      	movs	r2, #3
 8010848:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010858:	2200      	movs	r2, #0
 801085a:	4619      	mov	r1, r3
 801085c:	f000 fb26 	bl	8010eac <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010860:	e0b9      	b.n	80109d6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8010862:	7bbb      	ldrb	r3, [r7, #14]
 8010864:	2b04      	cmp	r3, #4
 8010866:	d111      	bne.n	801088c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	220b      	movs	r2, #11
 801086c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2203      	movs	r2, #3
 8010872:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010882:	2200      	movs	r2, #0
 8010884:	4619      	mov	r1, r3
 8010886:	f000 fb11 	bl	8010eac <osMessagePut>
      break;
 801088a:	e0a4      	b.n	80109d6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 801088c:	7bbb      	ldrb	r3, [r7, #14]
 801088e:	2b05      	cmp	r3, #5
 8010890:	f040 80a1 	bne.w	80109d6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8010894:	2303      	movs	r3, #3
 8010896:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2203      	movs	r2, #3
 801089c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80108ac:	2200      	movs	r2, #0
 80108ae:	4619      	mov	r1, r3
 80108b0:	f000 fafc 	bl	8010eac <osMessagePut>
      break;
 80108b4:	e08f      	b.n	80109d6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	795b      	ldrb	r3, [r3, #5]
 80108ba:	2201      	movs	r2, #1
 80108bc:	9200      	str	r2, [sp, #0]
 80108be:	2200      	movs	r2, #0
 80108c0:	2100      	movs	r1, #0
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f000 f8aa 	bl	8010a1c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	220a      	movs	r2, #10
 80108d8:	761a      	strb	r2, [r3, #24]
      break;
 80108da:	e07f      	b.n	80109dc <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	795b      	ldrb	r3, [r3, #5]
 80108e0:	4619      	mov	r1, r3
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f002 ff9e 	bl	8013824 <USBH_LL_GetURBState>
 80108e8:	4603      	mov	r3, r0
 80108ea:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80108ec:	7bbb      	ldrb	r3, [r7, #14]
 80108ee:	2b01      	cmp	r3, #1
 80108f0:	d113      	bne.n	801091a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80108f2:	2300      	movs	r3, #0
 80108f4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	220d      	movs	r2, #13
 80108fa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2203      	movs	r2, #3
 8010900:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010910:	2200      	movs	r2, #0
 8010912:	4619      	mov	r1, r3
 8010914:	f000 faca 	bl	8010eac <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010918:	e05f      	b.n	80109da <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 801091a:	7bbb      	ldrb	r3, [r7, #14]
 801091c:	2b02      	cmp	r3, #2
 801091e:	d111      	bne.n	8010944 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2209      	movs	r2, #9
 8010924:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2203      	movs	r2, #3
 801092a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801093a:	2200      	movs	r2, #0
 801093c:	4619      	mov	r1, r3
 801093e:	f000 fab5 	bl	8010eac <osMessagePut>
      break;
 8010942:	e04a      	b.n	80109da <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8010944:	7bbb      	ldrb	r3, [r7, #14]
 8010946:	2b04      	cmp	r3, #4
 8010948:	d147      	bne.n	80109da <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	220b      	movs	r2, #11
 801094e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2203      	movs	r2, #3
 8010954:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010964:	2200      	movs	r2, #0
 8010966:	4619      	mov	r1, r3
 8010968:	f000 faa0 	bl	8010eac <osMessagePut>
      break;
 801096c:	e035      	b.n	80109da <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	7e5b      	ldrb	r3, [r3, #25]
 8010972:	3301      	adds	r3, #1
 8010974:	b2da      	uxtb	r2, r3
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	765a      	strb	r2, [r3, #25]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	7e5b      	ldrb	r3, [r3, #25]
 801097e:	2b02      	cmp	r3, #2
 8010980:	d806      	bhi.n	8010990 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2201      	movs	r2, #1
 8010986:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2201      	movs	r2, #1
 801098c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801098e:	e025      	b.n	80109dc <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010996:	2106      	movs	r1, #6
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2200      	movs	r2, #0
 80109a0:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	795b      	ldrb	r3, [r3, #5]
 80109a6:	4619      	mov	r1, r3
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f000 f90d 	bl	8010bc8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	791b      	ldrb	r3, [r3, #4]
 80109b2:	4619      	mov	r1, r3
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f000 f907 	bl	8010bc8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2200      	movs	r2, #0
 80109be:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80109c0:	2302      	movs	r3, #2
 80109c2:	73fb      	strb	r3, [r7, #15]
      break;
 80109c4:	e00a      	b.n	80109dc <USBH_HandleControl+0x484>

    default:
      break;
 80109c6:	bf00      	nop
 80109c8:	e008      	b.n	80109dc <USBH_HandleControl+0x484>
      break;
 80109ca:	bf00      	nop
 80109cc:	e006      	b.n	80109dc <USBH_HandleControl+0x484>
      break;
 80109ce:	bf00      	nop
 80109d0:	e004      	b.n	80109dc <USBH_HandleControl+0x484>
      break;
 80109d2:	bf00      	nop
 80109d4:	e002      	b.n	80109dc <USBH_HandleControl+0x484>
      break;
 80109d6:	bf00      	nop
 80109d8:	e000      	b.n	80109dc <USBH_HandleControl+0x484>
      break;
 80109da:	bf00      	nop
  }

  return status;
 80109dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop

080109e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b088      	sub	sp, #32
 80109ec:	af04      	add	r7, sp, #16
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	4613      	mov	r3, r2
 80109f4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80109f6:	79f9      	ldrb	r1, [r7, #7]
 80109f8:	2300      	movs	r3, #0
 80109fa:	9303      	str	r3, [sp, #12]
 80109fc:	2308      	movs	r3, #8
 80109fe:	9302      	str	r3, [sp, #8]
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	9301      	str	r3, [sp, #4]
 8010a04:	2300      	movs	r3, #0
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	2300      	movs	r3, #0
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	68f8      	ldr	r0, [r7, #12]
 8010a0e:	f002 fed8 	bl	80137c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8010a12:	2300      	movs	r3, #0
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3710      	adds	r7, #16
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b088      	sub	sp, #32
 8010a20:	af04      	add	r7, sp, #16
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	4611      	mov	r1, r2
 8010a28:	461a      	mov	r2, r3
 8010a2a:	460b      	mov	r3, r1
 8010a2c:	80fb      	strh	r3, [r7, #6]
 8010a2e:	4613      	mov	r3, r2
 8010a30:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d001      	beq.n	8010a40 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010a40:	7979      	ldrb	r1, [r7, #5]
 8010a42:	7e3b      	ldrb	r3, [r7, #24]
 8010a44:	9303      	str	r3, [sp, #12]
 8010a46:	88fb      	ldrh	r3, [r7, #6]
 8010a48:	9302      	str	r3, [sp, #8]
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	9301      	str	r3, [sp, #4]
 8010a4e:	2301      	movs	r3, #1
 8010a50:	9300      	str	r3, [sp, #0]
 8010a52:	2300      	movs	r3, #0
 8010a54:	2200      	movs	r2, #0
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	f002 feb3 	bl	80137c2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010a5c:	2300      	movs	r3, #0
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3710      	adds	r7, #16
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}

08010a66 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b088      	sub	sp, #32
 8010a6a:	af04      	add	r7, sp, #16
 8010a6c:	60f8      	str	r0, [r7, #12]
 8010a6e:	60b9      	str	r1, [r7, #8]
 8010a70:	4611      	mov	r1, r2
 8010a72:	461a      	mov	r2, r3
 8010a74:	460b      	mov	r3, r1
 8010a76:	80fb      	strh	r3, [r7, #6]
 8010a78:	4613      	mov	r3, r2
 8010a7a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010a7c:	7979      	ldrb	r1, [r7, #5]
 8010a7e:	2300      	movs	r3, #0
 8010a80:	9303      	str	r3, [sp, #12]
 8010a82:	88fb      	ldrh	r3, [r7, #6]
 8010a84:	9302      	str	r3, [sp, #8]
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	9301      	str	r3, [sp, #4]
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	9300      	str	r3, [sp, #0]
 8010a8e:	2300      	movs	r3, #0
 8010a90:	2201      	movs	r2, #1
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	f002 fe95 	bl	80137c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010a98:	2300      	movs	r3, #0

}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010aa2:	b580      	push	{r7, lr}
 8010aa4:	b088      	sub	sp, #32
 8010aa6:	af04      	add	r7, sp, #16
 8010aa8:	60f8      	str	r0, [r7, #12]
 8010aaa:	60b9      	str	r1, [r7, #8]
 8010aac:	4611      	mov	r1, r2
 8010aae:	461a      	mov	r2, r3
 8010ab0:	460b      	mov	r3, r1
 8010ab2:	80fb      	strh	r3, [r7, #6]
 8010ab4:	4613      	mov	r3, r2
 8010ab6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d001      	beq.n	8010ac6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010ac6:	7979      	ldrb	r1, [r7, #5]
 8010ac8:	7e3b      	ldrb	r3, [r7, #24]
 8010aca:	9303      	str	r3, [sp, #12]
 8010acc:	88fb      	ldrh	r3, [r7, #6]
 8010ace:	9302      	str	r3, [sp, #8]
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	9301      	str	r3, [sp, #4]
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	9300      	str	r3, [sp, #0]
 8010ad8:	2302      	movs	r3, #2
 8010ada:	2200      	movs	r2, #0
 8010adc:	68f8      	ldr	r0, [r7, #12]
 8010ade:	f002 fe70 	bl	80137c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010ae2:	2300      	movs	r3, #0
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3710      	adds	r7, #16
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b088      	sub	sp, #32
 8010af0:	af04      	add	r7, sp, #16
 8010af2:	60f8      	str	r0, [r7, #12]
 8010af4:	60b9      	str	r1, [r7, #8]
 8010af6:	4611      	mov	r1, r2
 8010af8:	461a      	mov	r2, r3
 8010afa:	460b      	mov	r3, r1
 8010afc:	80fb      	strh	r3, [r7, #6]
 8010afe:	4613      	mov	r3, r2
 8010b00:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010b02:	7979      	ldrb	r1, [r7, #5]
 8010b04:	2300      	movs	r3, #0
 8010b06:	9303      	str	r3, [sp, #12]
 8010b08:	88fb      	ldrh	r3, [r7, #6]
 8010b0a:	9302      	str	r3, [sp, #8]
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	9301      	str	r3, [sp, #4]
 8010b10:	2301      	movs	r3, #1
 8010b12:	9300      	str	r3, [sp, #0]
 8010b14:	2302      	movs	r3, #2
 8010b16:	2201      	movs	r2, #1
 8010b18:	68f8      	ldr	r0, [r7, #12]
 8010b1a:	f002 fe52 	bl	80137c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010b1e:	2300      	movs	r3, #0
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3710      	adds	r7, #16
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}

08010b28 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b086      	sub	sp, #24
 8010b2c:	af04      	add	r7, sp, #16
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	4608      	mov	r0, r1
 8010b32:	4611      	mov	r1, r2
 8010b34:	461a      	mov	r2, r3
 8010b36:	4603      	mov	r3, r0
 8010b38:	70fb      	strb	r3, [r7, #3]
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	70bb      	strb	r3, [r7, #2]
 8010b3e:	4613      	mov	r3, r2
 8010b40:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010b42:	7878      	ldrb	r0, [r7, #1]
 8010b44:	78ba      	ldrb	r2, [r7, #2]
 8010b46:	78f9      	ldrb	r1, [r7, #3]
 8010b48:	8b3b      	ldrh	r3, [r7, #24]
 8010b4a:	9302      	str	r3, [sp, #8]
 8010b4c:	7d3b      	ldrb	r3, [r7, #20]
 8010b4e:	9301      	str	r3, [sp, #4]
 8010b50:	7c3b      	ldrb	r3, [r7, #16]
 8010b52:	9300      	str	r3, [sp, #0]
 8010b54:	4603      	mov	r3, r0
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f002 fde5 	bl	8013726 <USBH_LL_OpenPipe>

  return USBH_OK;
 8010b5c:	2300      	movs	r3, #0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3708      	adds	r7, #8
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b082      	sub	sp, #8
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
 8010b6e:	460b      	mov	r3, r1
 8010b70:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8010b72:	78fb      	ldrb	r3, [r7, #3]
 8010b74:	4619      	mov	r1, r3
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f002 fe04 	bl	8013784 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010b7c:	2300      	movs	r3, #0
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3708      	adds	r7, #8
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b084      	sub	sp, #16
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
 8010b8e:	460b      	mov	r3, r1
 8010b90:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f000 f836 	bl	8010c04 <USBH_GetFreePipe>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010b9c:	89fb      	ldrh	r3, [r7, #14]
 8010b9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d00a      	beq.n	8010bbc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8010ba6:	78fa      	ldrb	r2, [r7, #3]
 8010ba8:	89fb      	ldrh	r3, [r7, #14]
 8010baa:	f003 030f 	and.w	r3, r3, #15
 8010bae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010bb2:	6879      	ldr	r1, [r7, #4]
 8010bb4:	33e0      	adds	r3, #224	@ 0xe0
 8010bb6:	009b      	lsls	r3, r3, #2
 8010bb8:	440b      	add	r3, r1
 8010bba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010bbc:	89fb      	ldrh	r3, [r7, #14]
 8010bbe:	b2db      	uxtb	r3, r3
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3710      	adds	r7, #16
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	460b      	mov	r3, r1
 8010bd2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8010bd4:	78fb      	ldrb	r3, [r7, #3]
 8010bd6:	2b0f      	cmp	r3, #15
 8010bd8:	d80d      	bhi.n	8010bf6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010bda:	78fb      	ldrb	r3, [r7, #3]
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	33e0      	adds	r3, #224	@ 0xe0
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	4413      	add	r3, r2
 8010be4:	685a      	ldr	r2, [r3, #4]
 8010be6:	78fb      	ldrb	r3, [r7, #3]
 8010be8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010bec:	6879      	ldr	r1, [r7, #4]
 8010bee:	33e0      	adds	r3, #224	@ 0xe0
 8010bf0:	009b      	lsls	r3, r3, #2
 8010bf2:	440b      	add	r3, r1
 8010bf4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010bf6:	2300      	movs	r3, #0
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	370c      	adds	r7, #12
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr

08010c04 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010c04:	b480      	push	{r7}
 8010c06:	b085      	sub	sp, #20
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010c10:	2300      	movs	r3, #0
 8010c12:	73fb      	strb	r3, [r7, #15]
 8010c14:	e00f      	b.n	8010c36 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010c16:	7bfb      	ldrb	r3, [r7, #15]
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	33e0      	adds	r3, #224	@ 0xe0
 8010c1c:	009b      	lsls	r3, r3, #2
 8010c1e:	4413      	add	r3, r2
 8010c20:	685b      	ldr	r3, [r3, #4]
 8010c22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d102      	bne.n	8010c30 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010c2a:	7bfb      	ldrb	r3, [r7, #15]
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	e007      	b.n	8010c40 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010c30:	7bfb      	ldrb	r3, [r7, #15]
 8010c32:	3301      	adds	r3, #1
 8010c34:	73fb      	strb	r3, [r7, #15]
 8010c36:	7bfb      	ldrb	r3, [r7, #15]
 8010c38:	2b0f      	cmp	r3, #15
 8010c3a:	d9ec      	bls.n	8010c16 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010c3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3714      	adds	r7, #20
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b087      	sub	sp, #28
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	60f8      	str	r0, [r7, #12]
 8010c54:	60b9      	str	r1, [r7, #8]
 8010c56:	4613      	mov	r3, r2
 8010c58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010c62:	4b1f      	ldr	r3, [pc, #124]	@ (8010ce0 <FATFS_LinkDriverEx+0x94>)
 8010c64:	7a5b      	ldrb	r3, [r3, #9]
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d131      	bne.n	8010cd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8010ce0 <FATFS_LinkDriverEx+0x94>)
 8010c6e:	7a5b      	ldrb	r3, [r3, #9]
 8010c70:	b2db      	uxtb	r3, r3
 8010c72:	461a      	mov	r2, r3
 8010c74:	4b1a      	ldr	r3, [pc, #104]	@ (8010ce0 <FATFS_LinkDriverEx+0x94>)
 8010c76:	2100      	movs	r1, #0
 8010c78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010c7a:	4b19      	ldr	r3, [pc, #100]	@ (8010ce0 <FATFS_LinkDriverEx+0x94>)
 8010c7c:	7a5b      	ldrb	r3, [r3, #9]
 8010c7e:	b2db      	uxtb	r3, r3
 8010c80:	4a17      	ldr	r2, [pc, #92]	@ (8010ce0 <FATFS_LinkDriverEx+0x94>)
 8010c82:	009b      	lsls	r3, r3, #2
 8010c84:	4413      	add	r3, r2
 8010c86:	68fa      	ldr	r2, [r7, #12]
 8010c88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010c8a:	4b15      	ldr	r3, [pc, #84]	@ (8010ce0 <FATFS_LinkDriverEx+0x94>)
 8010c8c:	7a5b      	ldrb	r3, [r3, #9]
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	461a      	mov	r2, r3
 8010c92:	4b13      	ldr	r3, [pc, #76]	@ (8010ce0 <FATFS_LinkDriverEx+0x94>)
 8010c94:	4413      	add	r3, r2
 8010c96:	79fa      	ldrb	r2, [r7, #7]
 8010c98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010c9a:	4b11      	ldr	r3, [pc, #68]	@ (8010ce0 <FATFS_LinkDriverEx+0x94>)
 8010c9c:	7a5b      	ldrb	r3, [r3, #9]
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	1c5a      	adds	r2, r3, #1
 8010ca2:	b2d1      	uxtb	r1, r2
 8010ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8010ce0 <FATFS_LinkDriverEx+0x94>)
 8010ca6:	7251      	strb	r1, [r2, #9]
 8010ca8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010caa:	7dbb      	ldrb	r3, [r7, #22]
 8010cac:	3330      	adds	r3, #48	@ 0x30
 8010cae:	b2da      	uxtb	r2, r3
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	223a      	movs	r2, #58	@ 0x3a
 8010cba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	3302      	adds	r3, #2
 8010cc0:	222f      	movs	r2, #47	@ 0x2f
 8010cc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	3303      	adds	r3, #3
 8010cc8:	2200      	movs	r2, #0
 8010cca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	371c      	adds	r7, #28
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cdc:	4770      	bx	lr
 8010cde:	bf00      	nop
 8010ce0:	20000d90 	.word	0x20000d90

08010ce4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010cee:	2200      	movs	r2, #0
 8010cf0:	6839      	ldr	r1, [r7, #0]
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f7ff ffaa 	bl	8010c4c <FATFS_LinkDriverEx>
 8010cf8:	4603      	mov	r3, r0
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3708      	adds	r7, #8
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}

08010d02 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010d02:	b480      	push	{r7}
 8010d04:	b085      	sub	sp, #20
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	4603      	mov	r3, r0
 8010d0a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d14:	2b84      	cmp	r3, #132	@ 0x84
 8010d16:	d005      	beq.n	8010d24 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010d18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	4413      	add	r3, r2
 8010d20:	3303      	adds	r3, #3
 8010d22:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010d24:	68fb      	ldr	r3, [r7, #12]
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3714      	adds	r7, #20
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr

08010d32 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010d32:	b480      	push	{r7}
 8010d34:	b083      	sub	sp, #12
 8010d36:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d38:	f3ef 8305 	mrs	r3, IPSR
 8010d3c:	607b      	str	r3, [r7, #4]
  return(result);
 8010d3e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	bf14      	ite	ne
 8010d44:	2301      	movne	r3, #1
 8010d46:	2300      	moveq	r3, #0
 8010d48:	b2db      	uxtb	r3, r3
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	370c      	adds	r7, #12
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr

08010d56 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010d56:	b580      	push	{r7, lr}
 8010d58:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010d5a:	f001 f975 	bl	8012048 <vTaskStartScheduler>
  
  return osOK;
 8010d5e:	2300      	movs	r3, #0
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8010d68:	f001 fdd6 	bl	8012918 <xTaskGetSchedulerState>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b01      	cmp	r3, #1
 8010d70:	d101      	bne.n	8010d76 <osKernelRunning+0x12>
    return 0;
 8010d72:	2300      	movs	r3, #0
 8010d74:	e000      	b.n	8010d78 <osKernelRunning+0x14>
  else
    return 1;
 8010d76:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	bd80      	pop	{r7, pc}

08010d7c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010d80:	f7ff ffd7 	bl	8010d32 <inHandlerMode>
 8010d84:	4603      	mov	r3, r0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d003      	beq.n	8010d92 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8010d8a:	f001 fa81 	bl	8012290 <xTaskGetTickCountFromISR>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	e002      	b.n	8010d98 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010d92:	f001 fa6d 	bl	8012270 <xTaskGetTickCount>
 8010d96:	4603      	mov	r3, r0
  }
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d9e:	b089      	sub	sp, #36	@ 0x24
 8010da0:	af04      	add	r7, sp, #16
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	695b      	ldr	r3, [r3, #20]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d020      	beq.n	8010df0 <osThreadCreate+0x54>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	699b      	ldr	r3, [r3, #24]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d01c      	beq.n	8010df0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	685c      	ldr	r4, [r3, #4]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	691e      	ldr	r6, [r3, #16]
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7ff ff9a 	bl	8010d02 <makeFreeRtosPriority>
 8010dce:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	695b      	ldr	r3, [r3, #20]
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010dd8:	9202      	str	r2, [sp, #8]
 8010dda:	9301      	str	r3, [sp, #4]
 8010ddc:	9100      	str	r1, [sp, #0]
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	4632      	mov	r2, r6
 8010de2:	4629      	mov	r1, r5
 8010de4:	4620      	mov	r0, r4
 8010de6:	f000 ff4d 	bl	8011c84 <xTaskCreateStatic>
 8010dea:	4603      	mov	r3, r0
 8010dec:	60fb      	str	r3, [r7, #12]
 8010dee:	e01c      	b.n	8010e2a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	685c      	ldr	r4, [r3, #4]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010dfc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7ff ff7c 	bl	8010d02 <makeFreeRtosPriority>
 8010e0a:	4602      	mov	r2, r0
 8010e0c:	f107 030c 	add.w	r3, r7, #12
 8010e10:	9301      	str	r3, [sp, #4]
 8010e12:	9200      	str	r2, [sp, #0]
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	4632      	mov	r2, r6
 8010e18:	4629      	mov	r1, r5
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	f000 ff98 	bl	8011d50 <xTaskCreate>
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b01      	cmp	r3, #1
 8010e24:	d001      	beq.n	8010e2a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010e26:	2300      	movs	r3, #0
 8010e28:	e000      	b.n	8010e2c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3714      	adds	r7, #20
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e34 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b084      	sub	sp, #16
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d001      	beq.n	8010e4a <osDelay+0x16>
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	e000      	b.n	8010e4c <osDelay+0x18>
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f001 f8c3 	bl	8011fd8 <vTaskDelay>
  
  return osOK;
 8010e52:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3710      	adds	r7, #16
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010e5c:	b590      	push	{r4, r7, lr}
 8010e5e:	b085      	sub	sp, #20
 8010e60:	af02      	add	r7, sp, #8
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	689b      	ldr	r3, [r3, #8]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d011      	beq.n	8010e92 <osMessageCreate+0x36>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d00d      	beq.n	8010e92 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6818      	ldr	r0, [r3, #0]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6859      	ldr	r1, [r3, #4]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	689a      	ldr	r2, [r3, #8]
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	68db      	ldr	r3, [r3, #12]
 8010e86:	2400      	movs	r4, #0
 8010e88:	9400      	str	r4, [sp, #0]
 8010e8a:	f000 f9e3 	bl	8011254 <xQueueGenericCreateStatic>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	e008      	b.n	8010ea4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6818      	ldr	r0, [r3, #0]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	f000 fa60 	bl	8011362 <xQueueGenericCreate>
 8010ea2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	370c      	adds	r7, #12
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd90      	pop	{r4, r7, pc}

08010eac <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b086      	sub	sp, #24
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	60b9      	str	r1, [r7, #8]
 8010eb6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d101      	bne.n	8010eca <osMessagePut+0x1e>
    ticks = 1;
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010eca:	f7ff ff32 	bl	8010d32 <inHandlerMode>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d018      	beq.n	8010f06 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010ed4:	f107 0210 	add.w	r2, r7, #16
 8010ed8:	f107 0108 	add.w	r1, r7, #8
 8010edc:	2300      	movs	r3, #0
 8010ede:	68f8      	ldr	r0, [r7, #12]
 8010ee0:	f000 fbac 	bl	801163c <xQueueGenericSendFromISR>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b01      	cmp	r3, #1
 8010ee8:	d001      	beq.n	8010eee <osMessagePut+0x42>
      return osErrorOS;
 8010eea:	23ff      	movs	r3, #255	@ 0xff
 8010eec:	e018      	b.n	8010f20 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d014      	beq.n	8010f1e <osMessagePut+0x72>
 8010ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8010f28 <osMessagePut+0x7c>)
 8010ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010efa:	601a      	str	r2, [r3, #0]
 8010efc:	f3bf 8f4f 	dsb	sy
 8010f00:	f3bf 8f6f 	isb	sy
 8010f04:	e00b      	b.n	8010f1e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8010f06:	f107 0108 	add.w	r1, r7, #8
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	697a      	ldr	r2, [r7, #20]
 8010f0e:	68f8      	ldr	r0, [r7, #12]
 8010f10:	f000 fa8a 	bl	8011428 <xQueueGenericSend>
 8010f14:	4603      	mov	r3, r0
 8010f16:	2b01      	cmp	r3, #1
 8010f18:	d001      	beq.n	8010f1e <osMessagePut+0x72>
      return osErrorOS;
 8010f1a:	23ff      	movs	r3, #255	@ 0xff
 8010f1c:	e000      	b.n	8010f20 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010f1e:	2300      	movs	r3, #0
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3718      	adds	r7, #24
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	e000ed04 	.word	0xe000ed04

08010f2c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010f2c:	b590      	push	{r4, r7, lr}
 8010f2e:	b08b      	sub	sp, #44	@ 0x2c
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d10a      	bne.n	8010f5c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8010f46:	2380      	movs	r3, #128	@ 0x80
 8010f48:	617b      	str	r3, [r7, #20]
    return event;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	461c      	mov	r4, r3
 8010f4e:	f107 0314 	add.w	r3, r7, #20
 8010f52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010f56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010f5a:	e054      	b.n	8011006 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010f60:	2300      	movs	r3, #0
 8010f62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010f6a:	d103      	bne.n	8010f74 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010f6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8010f72:	e009      	b.n	8010f88 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d006      	beq.n	8010f88 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8010f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d101      	bne.n	8010f88 <osMessageGet+0x5c>
      ticks = 1;
 8010f84:	2301      	movs	r3, #1
 8010f86:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010f88:	f7ff fed3 	bl	8010d32 <inHandlerMode>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d01c      	beq.n	8010fcc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010f92:	f107 0220 	add.w	r2, r7, #32
 8010f96:	f107 0314 	add.w	r3, r7, #20
 8010f9a:	3304      	adds	r3, #4
 8010f9c:	4619      	mov	r1, r3
 8010f9e:	68b8      	ldr	r0, [r7, #8]
 8010fa0:	f000 fcd8 	bl	8011954 <xQueueReceiveFromISR>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	2b01      	cmp	r3, #1
 8010fa8:	d102      	bne.n	8010fb0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8010faa:	2310      	movs	r3, #16
 8010fac:	617b      	str	r3, [r7, #20]
 8010fae:	e001      	b.n	8010fb4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010fb4:	6a3b      	ldr	r3, [r7, #32]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d01d      	beq.n	8010ff6 <osMessageGet+0xca>
 8010fba:	4b15      	ldr	r3, [pc, #84]	@ (8011010 <osMessageGet+0xe4>)
 8010fbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010fc0:	601a      	str	r2, [r3, #0]
 8010fc2:	f3bf 8f4f 	dsb	sy
 8010fc6:	f3bf 8f6f 	isb	sy
 8010fca:	e014      	b.n	8010ff6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010fcc:	f107 0314 	add.w	r3, r7, #20
 8010fd0:	3304      	adds	r3, #4
 8010fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	68b8      	ldr	r0, [r7, #8]
 8010fd8:	f000 fbd4 	bl	8011784 <xQueueReceive>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d102      	bne.n	8010fe8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010fe2:	2310      	movs	r3, #16
 8010fe4:	617b      	str	r3, [r7, #20]
 8010fe6:	e006      	b.n	8010ff6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d101      	bne.n	8010ff2 <osMessageGet+0xc6>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	e000      	b.n	8010ff4 <osMessageGet+0xc8>
 8010ff2:	2340      	movs	r3, #64	@ 0x40
 8010ff4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	461c      	mov	r4, r3
 8010ffa:	f107 0314 	add.w	r3, r7, #20
 8010ffe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011002:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011006:	68f8      	ldr	r0, [r7, #12]
 8011008:	372c      	adds	r7, #44	@ 0x2c
 801100a:	46bd      	mov	sp, r7
 801100c:	bd90      	pop	{r4, r7, pc}
 801100e:	bf00      	nop
 8011010:	e000ed04 	.word	0xe000ed04

08011014 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011014:	b480      	push	{r7}
 8011016:	b083      	sub	sp, #12
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f103 0208 	add.w	r2, r3, #8
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801102c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f103 0208 	add.w	r2, r3, #8
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f103 0208 	add.w	r2, r3, #8
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2200      	movs	r2, #0
 8011046:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011048:	bf00      	nop
 801104a:	370c      	adds	r7, #12
 801104c:	46bd      	mov	sp, r7
 801104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011052:	4770      	bx	lr

08011054 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011054:	b480      	push	{r7}
 8011056:	b083      	sub	sp, #12
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2200      	movs	r2, #0
 8011060:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011062:	bf00      	nop
 8011064:	370c      	adds	r7, #12
 8011066:	46bd      	mov	sp, r7
 8011068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106c:	4770      	bx	lr

0801106e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801106e:	b480      	push	{r7}
 8011070:	b085      	sub	sp, #20
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
 8011076:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	68fa      	ldr	r2, [r7, #12]
 8011082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	689a      	ldr	r2, [r3, #8]
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	689b      	ldr	r3, [r3, #8]
 8011090:	683a      	ldr	r2, [r7, #0]
 8011092:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	683a      	ldr	r2, [r7, #0]
 8011098:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	687a      	ldr	r2, [r7, #4]
 801109e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	1c5a      	adds	r2, r3, #1
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	601a      	str	r2, [r3, #0]
}
 80110aa:	bf00      	nop
 80110ac:	3714      	adds	r7, #20
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr

080110b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80110b6:	b480      	push	{r7}
 80110b8:	b085      	sub	sp, #20
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	6078      	str	r0, [r7, #4]
 80110be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80110cc:	d103      	bne.n	80110d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	691b      	ldr	r3, [r3, #16]
 80110d2:	60fb      	str	r3, [r7, #12]
 80110d4:	e00c      	b.n	80110f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	3308      	adds	r3, #8
 80110da:	60fb      	str	r3, [r7, #12]
 80110dc:	e002      	b.n	80110e4 <vListInsert+0x2e>
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	60fb      	str	r3, [r7, #12]
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	68ba      	ldr	r2, [r7, #8]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d2f6      	bcs.n	80110de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	685a      	ldr	r2, [r3, #4]
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	683a      	ldr	r2, [r7, #0]
 80110fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	68fa      	ldr	r2, [r7, #12]
 8011104:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	683a      	ldr	r2, [r7, #0]
 801110a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	1c5a      	adds	r2, r3, #1
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	601a      	str	r2, [r3, #0]
}
 801111c:	bf00      	nop
 801111e:	3714      	adds	r7, #20
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr

08011128 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	691b      	ldr	r3, [r3, #16]
 8011134:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	6892      	ldr	r2, [r2, #8]
 801113e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	689b      	ldr	r3, [r3, #8]
 8011144:	687a      	ldr	r2, [r7, #4]
 8011146:	6852      	ldr	r2, [r2, #4]
 8011148:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	687a      	ldr	r2, [r7, #4]
 8011150:	429a      	cmp	r2, r3
 8011152:	d103      	bne.n	801115c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	689a      	ldr	r2, [r3, #8]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2200      	movs	r2, #0
 8011160:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	1e5a      	subs	r2, r3, #1
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	681b      	ldr	r3, [r3, #0]
}
 8011170:	4618      	mov	r0, r3
 8011172:	3714      	adds	r7, #20
 8011174:	46bd      	mov	sp, r7
 8011176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117a:	4770      	bx	lr

0801117c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b084      	sub	sp, #16
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d10d      	bne.n	80111ac <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011194:	b672      	cpsid	i
 8011196:	f383 8811 	msr	BASEPRI, r3
 801119a:	f3bf 8f6f 	isb	sy
 801119e:	f3bf 8f4f 	dsb	sy
 80111a2:	b662      	cpsie	i
 80111a4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80111a6:	bf00      	nop
 80111a8:	bf00      	nop
 80111aa:	e7fd      	b.n	80111a8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80111ac:	f001 fdd6 	bl	8012d5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	681a      	ldr	r2, [r3, #0]
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111b8:	68f9      	ldr	r1, [r7, #12]
 80111ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80111bc:	fb01 f303 	mul.w	r3, r1, r3
 80111c0:	441a      	add	r2, r3
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	2200      	movs	r2, #0
 80111ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	681a      	ldr	r2, [r3, #0]
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681a      	ldr	r2, [r3, #0]
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111dc:	3b01      	subs	r3, #1
 80111de:	68f9      	ldr	r1, [r7, #12]
 80111e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80111e2:	fb01 f303 	mul.w	r3, r1, r3
 80111e6:	441a      	add	r2, r3
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	22ff      	movs	r2, #255	@ 0xff
 80111f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	22ff      	movs	r2, #255	@ 0xff
 80111f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d114      	bne.n	801122c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	691b      	ldr	r3, [r3, #16]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d01a      	beq.n	8011240 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	3310      	adds	r3, #16
 801120e:	4618      	mov	r0, r3
 8011210:	f001 f9b8 	bl	8012584 <xTaskRemoveFromEventList>
 8011214:	4603      	mov	r3, r0
 8011216:	2b00      	cmp	r3, #0
 8011218:	d012      	beq.n	8011240 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801121a:	4b0d      	ldr	r3, [pc, #52]	@ (8011250 <xQueueGenericReset+0xd4>)
 801121c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011220:	601a      	str	r2, [r3, #0]
 8011222:	f3bf 8f4f 	dsb	sy
 8011226:	f3bf 8f6f 	isb	sy
 801122a:	e009      	b.n	8011240 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	3310      	adds	r3, #16
 8011230:	4618      	mov	r0, r3
 8011232:	f7ff feef 	bl	8011014 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	3324      	adds	r3, #36	@ 0x24
 801123a:	4618      	mov	r0, r3
 801123c:	f7ff feea 	bl	8011014 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011240:	f001 fdc2 	bl	8012dc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011244:	2301      	movs	r3, #1
}
 8011246:	4618      	mov	r0, r3
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}
 801124e:	bf00      	nop
 8011250:	e000ed04 	.word	0xe000ed04

08011254 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011254:	b580      	push	{r7, lr}
 8011256:	b08e      	sub	sp, #56	@ 0x38
 8011258:	af02      	add	r7, sp, #8
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
 8011260:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d10d      	bne.n	8011284 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8011268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801126c:	b672      	cpsid	i
 801126e:	f383 8811 	msr	BASEPRI, r3
 8011272:	f3bf 8f6f 	isb	sy
 8011276:	f3bf 8f4f 	dsb	sy
 801127a:	b662      	cpsie	i
 801127c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801127e:	bf00      	nop
 8011280:	bf00      	nop
 8011282:	e7fd      	b.n	8011280 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d10d      	bne.n	80112a6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 801128a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801128e:	b672      	cpsid	i
 8011290:	f383 8811 	msr	BASEPRI, r3
 8011294:	f3bf 8f6f 	isb	sy
 8011298:	f3bf 8f4f 	dsb	sy
 801129c:	b662      	cpsie	i
 801129e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80112a0:	bf00      	nop
 80112a2:	bf00      	nop
 80112a4:	e7fd      	b.n	80112a2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d002      	beq.n	80112b2 <xQueueGenericCreateStatic+0x5e>
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d001      	beq.n	80112b6 <xQueueGenericCreateStatic+0x62>
 80112b2:	2301      	movs	r3, #1
 80112b4:	e000      	b.n	80112b8 <xQueueGenericCreateStatic+0x64>
 80112b6:	2300      	movs	r3, #0
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d10d      	bne.n	80112d8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80112bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112c0:	b672      	cpsid	i
 80112c2:	f383 8811 	msr	BASEPRI, r3
 80112c6:	f3bf 8f6f 	isb	sy
 80112ca:	f3bf 8f4f 	dsb	sy
 80112ce:	b662      	cpsie	i
 80112d0:	623b      	str	r3, [r7, #32]
}
 80112d2:	bf00      	nop
 80112d4:	bf00      	nop
 80112d6:	e7fd      	b.n	80112d4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d102      	bne.n	80112e4 <xQueueGenericCreateStatic+0x90>
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d101      	bne.n	80112e8 <xQueueGenericCreateStatic+0x94>
 80112e4:	2301      	movs	r3, #1
 80112e6:	e000      	b.n	80112ea <xQueueGenericCreateStatic+0x96>
 80112e8:	2300      	movs	r3, #0
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d10d      	bne.n	801130a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80112ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112f2:	b672      	cpsid	i
 80112f4:	f383 8811 	msr	BASEPRI, r3
 80112f8:	f3bf 8f6f 	isb	sy
 80112fc:	f3bf 8f4f 	dsb	sy
 8011300:	b662      	cpsie	i
 8011302:	61fb      	str	r3, [r7, #28]
}
 8011304:	bf00      	nop
 8011306:	bf00      	nop
 8011308:	e7fd      	b.n	8011306 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801130a:	2348      	movs	r3, #72	@ 0x48
 801130c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	2b48      	cmp	r3, #72	@ 0x48
 8011312:	d00d      	beq.n	8011330 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8011314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011318:	b672      	cpsid	i
 801131a:	f383 8811 	msr	BASEPRI, r3
 801131e:	f3bf 8f6f 	isb	sy
 8011322:	f3bf 8f4f 	dsb	sy
 8011326:	b662      	cpsie	i
 8011328:	61bb      	str	r3, [r7, #24]
}
 801132a:	bf00      	nop
 801132c:	bf00      	nop
 801132e:	e7fd      	b.n	801132c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011330:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8011336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011338:	2b00      	cmp	r3, #0
 801133a:	d00d      	beq.n	8011358 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801133c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801133e:	2201      	movs	r2, #1
 8011340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011344:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8011348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801134a:	9300      	str	r3, [sp, #0]
 801134c:	4613      	mov	r3, r2
 801134e:	687a      	ldr	r2, [r7, #4]
 8011350:	68b9      	ldr	r1, [r7, #8]
 8011352:	68f8      	ldr	r0, [r7, #12]
 8011354:	f000 f848 	bl	80113e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801135a:	4618      	mov	r0, r3
 801135c:	3730      	adds	r7, #48	@ 0x30
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}

08011362 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011362:	b580      	push	{r7, lr}
 8011364:	b08a      	sub	sp, #40	@ 0x28
 8011366:	af02      	add	r7, sp, #8
 8011368:	60f8      	str	r0, [r7, #12]
 801136a:	60b9      	str	r1, [r7, #8]
 801136c:	4613      	mov	r3, r2
 801136e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d10d      	bne.n	8011392 <xQueueGenericCreate+0x30>
	__asm volatile
 8011376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801137a:	b672      	cpsid	i
 801137c:	f383 8811 	msr	BASEPRI, r3
 8011380:	f3bf 8f6f 	isb	sy
 8011384:	f3bf 8f4f 	dsb	sy
 8011388:	b662      	cpsie	i
 801138a:	613b      	str	r3, [r7, #16]
}
 801138c:	bf00      	nop
 801138e:	bf00      	nop
 8011390:	e7fd      	b.n	801138e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d102      	bne.n	801139e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011398:	2300      	movs	r3, #0
 801139a:	61fb      	str	r3, [r7, #28]
 801139c:	e004      	b.n	80113a8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	68ba      	ldr	r2, [r7, #8]
 80113a2:	fb02 f303 	mul.w	r3, r2, r3
 80113a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	3348      	adds	r3, #72	@ 0x48
 80113ac:	4618      	mov	r0, r3
 80113ae:	f001 fe03 	bl	8012fb8 <pvPortMalloc>
 80113b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d011      	beq.n	80113de <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80113ba:	69bb      	ldr	r3, [r7, #24]
 80113bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	3348      	adds	r3, #72	@ 0x48
 80113c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80113c4:	69bb      	ldr	r3, [r7, #24]
 80113c6:	2200      	movs	r2, #0
 80113c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80113cc:	79fa      	ldrb	r2, [r7, #7]
 80113ce:	69bb      	ldr	r3, [r7, #24]
 80113d0:	9300      	str	r3, [sp, #0]
 80113d2:	4613      	mov	r3, r2
 80113d4:	697a      	ldr	r2, [r7, #20]
 80113d6:	68b9      	ldr	r1, [r7, #8]
 80113d8:	68f8      	ldr	r0, [r7, #12]
 80113da:	f000 f805 	bl	80113e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80113de:	69bb      	ldr	r3, [r7, #24]
	}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3720      	adds	r7, #32
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	607a      	str	r2, [r7, #4]
 80113f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d103      	bne.n	8011404 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80113fc:	69bb      	ldr	r3, [r7, #24]
 80113fe:	69ba      	ldr	r2, [r7, #24]
 8011400:	601a      	str	r2, [r3, #0]
 8011402:	e002      	b.n	801140a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011404:	69bb      	ldr	r3, [r7, #24]
 8011406:	687a      	ldr	r2, [r7, #4]
 8011408:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	68fa      	ldr	r2, [r7, #12]
 801140e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011410:	69bb      	ldr	r3, [r7, #24]
 8011412:	68ba      	ldr	r2, [r7, #8]
 8011414:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011416:	2101      	movs	r1, #1
 8011418:	69b8      	ldr	r0, [r7, #24]
 801141a:	f7ff feaf 	bl	801117c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801141e:	bf00      	nop
 8011420:	3710      	adds	r7, #16
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}
	...

08011428 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b08e      	sub	sp, #56	@ 0x38
 801142c:	af00      	add	r7, sp, #0
 801142e:	60f8      	str	r0, [r7, #12]
 8011430:	60b9      	str	r1, [r7, #8]
 8011432:	607a      	str	r2, [r7, #4]
 8011434:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011436:	2300      	movs	r3, #0
 8011438:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801143e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011440:	2b00      	cmp	r3, #0
 8011442:	d10d      	bne.n	8011460 <xQueueGenericSend+0x38>
	__asm volatile
 8011444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011448:	b672      	cpsid	i
 801144a:	f383 8811 	msr	BASEPRI, r3
 801144e:	f3bf 8f6f 	isb	sy
 8011452:	f3bf 8f4f 	dsb	sy
 8011456:	b662      	cpsie	i
 8011458:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801145a:	bf00      	nop
 801145c:	bf00      	nop
 801145e:	e7fd      	b.n	801145c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d103      	bne.n	801146e <xQueueGenericSend+0x46>
 8011466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801146a:	2b00      	cmp	r3, #0
 801146c:	d101      	bne.n	8011472 <xQueueGenericSend+0x4a>
 801146e:	2301      	movs	r3, #1
 8011470:	e000      	b.n	8011474 <xQueueGenericSend+0x4c>
 8011472:	2300      	movs	r3, #0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d10d      	bne.n	8011494 <xQueueGenericSend+0x6c>
	__asm volatile
 8011478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801147c:	b672      	cpsid	i
 801147e:	f383 8811 	msr	BASEPRI, r3
 8011482:	f3bf 8f6f 	isb	sy
 8011486:	f3bf 8f4f 	dsb	sy
 801148a:	b662      	cpsie	i
 801148c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801148e:	bf00      	nop
 8011490:	bf00      	nop
 8011492:	e7fd      	b.n	8011490 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	2b02      	cmp	r3, #2
 8011498:	d103      	bne.n	80114a2 <xQueueGenericSend+0x7a>
 801149a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801149c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d101      	bne.n	80114a6 <xQueueGenericSend+0x7e>
 80114a2:	2301      	movs	r3, #1
 80114a4:	e000      	b.n	80114a8 <xQueueGenericSend+0x80>
 80114a6:	2300      	movs	r3, #0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d10d      	bne.n	80114c8 <xQueueGenericSend+0xa0>
	__asm volatile
 80114ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114b0:	b672      	cpsid	i
 80114b2:	f383 8811 	msr	BASEPRI, r3
 80114b6:	f3bf 8f6f 	isb	sy
 80114ba:	f3bf 8f4f 	dsb	sy
 80114be:	b662      	cpsie	i
 80114c0:	623b      	str	r3, [r7, #32]
}
 80114c2:	bf00      	nop
 80114c4:	bf00      	nop
 80114c6:	e7fd      	b.n	80114c4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114c8:	f001 fa26 	bl	8012918 <xTaskGetSchedulerState>
 80114cc:	4603      	mov	r3, r0
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d102      	bne.n	80114d8 <xQueueGenericSend+0xb0>
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d101      	bne.n	80114dc <xQueueGenericSend+0xb4>
 80114d8:	2301      	movs	r3, #1
 80114da:	e000      	b.n	80114de <xQueueGenericSend+0xb6>
 80114dc:	2300      	movs	r3, #0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d10d      	bne.n	80114fe <xQueueGenericSend+0xd6>
	__asm volatile
 80114e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114e6:	b672      	cpsid	i
 80114e8:	f383 8811 	msr	BASEPRI, r3
 80114ec:	f3bf 8f6f 	isb	sy
 80114f0:	f3bf 8f4f 	dsb	sy
 80114f4:	b662      	cpsie	i
 80114f6:	61fb      	str	r3, [r7, #28]
}
 80114f8:	bf00      	nop
 80114fa:	bf00      	nop
 80114fc:	e7fd      	b.n	80114fa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80114fe:	f001 fc2d 	bl	8012d5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011504:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801150a:	429a      	cmp	r2, r3
 801150c:	d302      	bcc.n	8011514 <xQueueGenericSend+0xec>
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	2b02      	cmp	r3, #2
 8011512:	d129      	bne.n	8011568 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011514:	683a      	ldr	r2, [r7, #0]
 8011516:	68b9      	ldr	r1, [r7, #8]
 8011518:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801151a:	f000 faa3 	bl	8011a64 <prvCopyDataToQueue>
 801151e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011524:	2b00      	cmp	r3, #0
 8011526:	d010      	beq.n	801154a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801152a:	3324      	adds	r3, #36	@ 0x24
 801152c:	4618      	mov	r0, r3
 801152e:	f001 f829 	bl	8012584 <xTaskRemoveFromEventList>
 8011532:	4603      	mov	r3, r0
 8011534:	2b00      	cmp	r3, #0
 8011536:	d013      	beq.n	8011560 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011538:	4b3f      	ldr	r3, [pc, #252]	@ (8011638 <xQueueGenericSend+0x210>)
 801153a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801153e:	601a      	str	r2, [r3, #0]
 8011540:	f3bf 8f4f 	dsb	sy
 8011544:	f3bf 8f6f 	isb	sy
 8011548:	e00a      	b.n	8011560 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801154a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801154c:	2b00      	cmp	r3, #0
 801154e:	d007      	beq.n	8011560 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011550:	4b39      	ldr	r3, [pc, #228]	@ (8011638 <xQueueGenericSend+0x210>)
 8011552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011556:	601a      	str	r2, [r3, #0]
 8011558:	f3bf 8f4f 	dsb	sy
 801155c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011560:	f001 fc32 	bl	8012dc8 <vPortExitCritical>
				return pdPASS;
 8011564:	2301      	movs	r3, #1
 8011566:	e063      	b.n	8011630 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d103      	bne.n	8011576 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801156e:	f001 fc2b 	bl	8012dc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011572:	2300      	movs	r3, #0
 8011574:	e05c      	b.n	8011630 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011578:	2b00      	cmp	r3, #0
 801157a:	d106      	bne.n	801158a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801157c:	f107 0314 	add.w	r3, r7, #20
 8011580:	4618      	mov	r0, r3
 8011582:	f001 f865 	bl	8012650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011586:	2301      	movs	r3, #1
 8011588:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801158a:	f001 fc1d 	bl	8012dc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801158e:	f000 fdc1 	bl	8012114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011592:	f001 fbe3 	bl	8012d5c <vPortEnterCritical>
 8011596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801159c:	b25b      	sxtb	r3, r3
 801159e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80115a2:	d103      	bne.n	80115ac <xQueueGenericSend+0x184>
 80115a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115a6:	2200      	movs	r2, #0
 80115a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80115ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80115b2:	b25b      	sxtb	r3, r3
 80115b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80115b8:	d103      	bne.n	80115c2 <xQueueGenericSend+0x19a>
 80115ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115bc:	2200      	movs	r2, #0
 80115be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80115c2:	f001 fc01 	bl	8012dc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115c6:	1d3a      	adds	r2, r7, #4
 80115c8:	f107 0314 	add.w	r3, r7, #20
 80115cc:	4611      	mov	r1, r2
 80115ce:	4618      	mov	r0, r3
 80115d0:	f001 f854 	bl	801267c <xTaskCheckForTimeOut>
 80115d4:	4603      	mov	r3, r0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d124      	bne.n	8011624 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80115da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80115dc:	f000 fb3a 	bl	8011c54 <prvIsQueueFull>
 80115e0:	4603      	mov	r3, r0
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d018      	beq.n	8011618 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80115e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115e8:	3310      	adds	r3, #16
 80115ea:	687a      	ldr	r2, [r7, #4]
 80115ec:	4611      	mov	r1, r2
 80115ee:	4618      	mov	r0, r3
 80115f0:	f000 ffa0 	bl	8012534 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80115f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80115f6:	f000 fac5 	bl	8011b84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80115fa:	f000 fd99 	bl	8012130 <xTaskResumeAll>
 80115fe:	4603      	mov	r3, r0
 8011600:	2b00      	cmp	r3, #0
 8011602:	f47f af7c 	bne.w	80114fe <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8011606:	4b0c      	ldr	r3, [pc, #48]	@ (8011638 <xQueueGenericSend+0x210>)
 8011608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801160c:	601a      	str	r2, [r3, #0]
 801160e:	f3bf 8f4f 	dsb	sy
 8011612:	f3bf 8f6f 	isb	sy
 8011616:	e772      	b.n	80114fe <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011618:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801161a:	f000 fab3 	bl	8011b84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801161e:	f000 fd87 	bl	8012130 <xTaskResumeAll>
 8011622:	e76c      	b.n	80114fe <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011626:	f000 faad 	bl	8011b84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801162a:	f000 fd81 	bl	8012130 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801162e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011630:	4618      	mov	r0, r3
 8011632:	3738      	adds	r7, #56	@ 0x38
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}
 8011638:	e000ed04 	.word	0xe000ed04

0801163c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b08e      	sub	sp, #56	@ 0x38
 8011640:	af00      	add	r7, sp, #0
 8011642:	60f8      	str	r0, [r7, #12]
 8011644:	60b9      	str	r1, [r7, #8]
 8011646:	607a      	str	r2, [r7, #4]
 8011648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801164e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011650:	2b00      	cmp	r3, #0
 8011652:	d10d      	bne.n	8011670 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8011654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011658:	b672      	cpsid	i
 801165a:	f383 8811 	msr	BASEPRI, r3
 801165e:	f3bf 8f6f 	isb	sy
 8011662:	f3bf 8f4f 	dsb	sy
 8011666:	b662      	cpsie	i
 8011668:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801166a:	bf00      	nop
 801166c:	bf00      	nop
 801166e:	e7fd      	b.n	801166c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d103      	bne.n	801167e <xQueueGenericSendFromISR+0x42>
 8011676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801167a:	2b00      	cmp	r3, #0
 801167c:	d101      	bne.n	8011682 <xQueueGenericSendFromISR+0x46>
 801167e:	2301      	movs	r3, #1
 8011680:	e000      	b.n	8011684 <xQueueGenericSendFromISR+0x48>
 8011682:	2300      	movs	r3, #0
 8011684:	2b00      	cmp	r3, #0
 8011686:	d10d      	bne.n	80116a4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8011688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801168c:	b672      	cpsid	i
 801168e:	f383 8811 	msr	BASEPRI, r3
 8011692:	f3bf 8f6f 	isb	sy
 8011696:	f3bf 8f4f 	dsb	sy
 801169a:	b662      	cpsie	i
 801169c:	623b      	str	r3, [r7, #32]
}
 801169e:	bf00      	nop
 80116a0:	bf00      	nop
 80116a2:	e7fd      	b.n	80116a0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	2b02      	cmp	r3, #2
 80116a8:	d103      	bne.n	80116b2 <xQueueGenericSendFromISR+0x76>
 80116aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116ae:	2b01      	cmp	r3, #1
 80116b0:	d101      	bne.n	80116b6 <xQueueGenericSendFromISR+0x7a>
 80116b2:	2301      	movs	r3, #1
 80116b4:	e000      	b.n	80116b8 <xQueueGenericSendFromISR+0x7c>
 80116b6:	2300      	movs	r3, #0
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d10d      	bne.n	80116d8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80116bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116c0:	b672      	cpsid	i
 80116c2:	f383 8811 	msr	BASEPRI, r3
 80116c6:	f3bf 8f6f 	isb	sy
 80116ca:	f3bf 8f4f 	dsb	sy
 80116ce:	b662      	cpsie	i
 80116d0:	61fb      	str	r3, [r7, #28]
}
 80116d2:	bf00      	nop
 80116d4:	bf00      	nop
 80116d6:	e7fd      	b.n	80116d4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80116d8:	f001 fc28 	bl	8012f2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80116dc:	f3ef 8211 	mrs	r2, BASEPRI
 80116e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116e4:	b672      	cpsid	i
 80116e6:	f383 8811 	msr	BASEPRI, r3
 80116ea:	f3bf 8f6f 	isb	sy
 80116ee:	f3bf 8f4f 	dsb	sy
 80116f2:	b662      	cpsie	i
 80116f4:	61ba      	str	r2, [r7, #24]
 80116f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80116f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80116fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80116fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011704:	429a      	cmp	r2, r3
 8011706:	d302      	bcc.n	801170e <xQueueGenericSendFromISR+0xd2>
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	2b02      	cmp	r3, #2
 801170c:	d12c      	bne.n	8011768 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801170e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011710:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011714:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011718:	683a      	ldr	r2, [r7, #0]
 801171a:	68b9      	ldr	r1, [r7, #8]
 801171c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801171e:	f000 f9a1 	bl	8011a64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011722:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8011726:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801172a:	d112      	bne.n	8011752 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801172c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801172e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011730:	2b00      	cmp	r3, #0
 8011732:	d016      	beq.n	8011762 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011736:	3324      	adds	r3, #36	@ 0x24
 8011738:	4618      	mov	r0, r3
 801173a:	f000 ff23 	bl	8012584 <xTaskRemoveFromEventList>
 801173e:	4603      	mov	r3, r0
 8011740:	2b00      	cmp	r3, #0
 8011742:	d00e      	beq.n	8011762 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d00b      	beq.n	8011762 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2201      	movs	r2, #1
 801174e:	601a      	str	r2, [r3, #0]
 8011750:	e007      	b.n	8011762 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011752:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011756:	3301      	adds	r3, #1
 8011758:	b2db      	uxtb	r3, r3
 801175a:	b25a      	sxtb	r2, r3
 801175c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801175e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011762:	2301      	movs	r3, #1
 8011764:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8011766:	e001      	b.n	801176c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011768:	2300      	movs	r3, #0
 801176a:	637b      	str	r3, [r7, #52]	@ 0x34
 801176c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801176e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011776:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801177a:	4618      	mov	r0, r3
 801177c:	3738      	adds	r7, #56	@ 0x38
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
	...

08011784 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b08c      	sub	sp, #48	@ 0x30
 8011788:	af00      	add	r7, sp, #0
 801178a:	60f8      	str	r0, [r7, #12]
 801178c:	60b9      	str	r1, [r7, #8]
 801178e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011790:	2300      	movs	r3, #0
 8011792:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801179a:	2b00      	cmp	r3, #0
 801179c:	d10d      	bne.n	80117ba <xQueueReceive+0x36>
	__asm volatile
 801179e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117a2:	b672      	cpsid	i
 80117a4:	f383 8811 	msr	BASEPRI, r3
 80117a8:	f3bf 8f6f 	isb	sy
 80117ac:	f3bf 8f4f 	dsb	sy
 80117b0:	b662      	cpsie	i
 80117b2:	623b      	str	r3, [r7, #32]
}
 80117b4:	bf00      	nop
 80117b6:	bf00      	nop
 80117b8:	e7fd      	b.n	80117b6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d103      	bne.n	80117c8 <xQueueReceive+0x44>
 80117c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d101      	bne.n	80117cc <xQueueReceive+0x48>
 80117c8:	2301      	movs	r3, #1
 80117ca:	e000      	b.n	80117ce <xQueueReceive+0x4a>
 80117cc:	2300      	movs	r3, #0
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d10d      	bne.n	80117ee <xQueueReceive+0x6a>
	__asm volatile
 80117d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117d6:	b672      	cpsid	i
 80117d8:	f383 8811 	msr	BASEPRI, r3
 80117dc:	f3bf 8f6f 	isb	sy
 80117e0:	f3bf 8f4f 	dsb	sy
 80117e4:	b662      	cpsie	i
 80117e6:	61fb      	str	r3, [r7, #28]
}
 80117e8:	bf00      	nop
 80117ea:	bf00      	nop
 80117ec:	e7fd      	b.n	80117ea <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80117ee:	f001 f893 	bl	8012918 <xTaskGetSchedulerState>
 80117f2:	4603      	mov	r3, r0
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d102      	bne.n	80117fe <xQueueReceive+0x7a>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d101      	bne.n	8011802 <xQueueReceive+0x7e>
 80117fe:	2301      	movs	r3, #1
 8011800:	e000      	b.n	8011804 <xQueueReceive+0x80>
 8011802:	2300      	movs	r3, #0
 8011804:	2b00      	cmp	r3, #0
 8011806:	d10d      	bne.n	8011824 <xQueueReceive+0xa0>
	__asm volatile
 8011808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801180c:	b672      	cpsid	i
 801180e:	f383 8811 	msr	BASEPRI, r3
 8011812:	f3bf 8f6f 	isb	sy
 8011816:	f3bf 8f4f 	dsb	sy
 801181a:	b662      	cpsie	i
 801181c:	61bb      	str	r3, [r7, #24]
}
 801181e:	bf00      	nop
 8011820:	bf00      	nop
 8011822:	e7fd      	b.n	8011820 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011824:	f001 fa9a 	bl	8012d5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801182a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801182c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011830:	2b00      	cmp	r3, #0
 8011832:	d01f      	beq.n	8011874 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011834:	68b9      	ldr	r1, [r7, #8]
 8011836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011838:	f000 f97e 	bl	8011b38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801183c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801183e:	1e5a      	subs	r2, r3, #1
 8011840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011842:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011846:	691b      	ldr	r3, [r3, #16]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00f      	beq.n	801186c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801184c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801184e:	3310      	adds	r3, #16
 8011850:	4618      	mov	r0, r3
 8011852:	f000 fe97 	bl	8012584 <xTaskRemoveFromEventList>
 8011856:	4603      	mov	r3, r0
 8011858:	2b00      	cmp	r3, #0
 801185a:	d007      	beq.n	801186c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801185c:	4b3c      	ldr	r3, [pc, #240]	@ (8011950 <xQueueReceive+0x1cc>)
 801185e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011862:	601a      	str	r2, [r3, #0]
 8011864:	f3bf 8f4f 	dsb	sy
 8011868:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801186c:	f001 faac 	bl	8012dc8 <vPortExitCritical>
				return pdPASS;
 8011870:	2301      	movs	r3, #1
 8011872:	e069      	b.n	8011948 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d103      	bne.n	8011882 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801187a:	f001 faa5 	bl	8012dc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801187e:	2300      	movs	r3, #0
 8011880:	e062      	b.n	8011948 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011884:	2b00      	cmp	r3, #0
 8011886:	d106      	bne.n	8011896 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011888:	f107 0310 	add.w	r3, r7, #16
 801188c:	4618      	mov	r0, r3
 801188e:	f000 fedf 	bl	8012650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011892:	2301      	movs	r3, #1
 8011894:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011896:	f001 fa97 	bl	8012dc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801189a:	f000 fc3b 	bl	8012114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801189e:	f001 fa5d 	bl	8012d5c <vPortEnterCritical>
 80118a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80118a8:	b25b      	sxtb	r3, r3
 80118aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80118ae:	d103      	bne.n	80118b8 <xQueueReceive+0x134>
 80118b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118b2:	2200      	movs	r2, #0
 80118b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80118b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80118be:	b25b      	sxtb	r3, r3
 80118c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80118c4:	d103      	bne.n	80118ce <xQueueReceive+0x14a>
 80118c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118c8:	2200      	movs	r2, #0
 80118ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80118ce:	f001 fa7b 	bl	8012dc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80118d2:	1d3a      	adds	r2, r7, #4
 80118d4:	f107 0310 	add.w	r3, r7, #16
 80118d8:	4611      	mov	r1, r2
 80118da:	4618      	mov	r0, r3
 80118dc:	f000 fece 	bl	801267c <xTaskCheckForTimeOut>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d123      	bne.n	801192e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80118e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80118e8:	f000 f99e 	bl	8011c28 <prvIsQueueEmpty>
 80118ec:	4603      	mov	r3, r0
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d017      	beq.n	8011922 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80118f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f4:	3324      	adds	r3, #36	@ 0x24
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	4611      	mov	r1, r2
 80118fa:	4618      	mov	r0, r3
 80118fc:	f000 fe1a 	bl	8012534 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011900:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011902:	f000 f93f 	bl	8011b84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011906:	f000 fc13 	bl	8012130 <xTaskResumeAll>
 801190a:	4603      	mov	r3, r0
 801190c:	2b00      	cmp	r3, #0
 801190e:	d189      	bne.n	8011824 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8011910:	4b0f      	ldr	r3, [pc, #60]	@ (8011950 <xQueueReceive+0x1cc>)
 8011912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011916:	601a      	str	r2, [r3, #0]
 8011918:	f3bf 8f4f 	dsb	sy
 801191c:	f3bf 8f6f 	isb	sy
 8011920:	e780      	b.n	8011824 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011924:	f000 f92e 	bl	8011b84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011928:	f000 fc02 	bl	8012130 <xTaskResumeAll>
 801192c:	e77a      	b.n	8011824 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801192e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011930:	f000 f928 	bl	8011b84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011934:	f000 fbfc 	bl	8012130 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011938:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801193a:	f000 f975 	bl	8011c28 <prvIsQueueEmpty>
 801193e:	4603      	mov	r3, r0
 8011940:	2b00      	cmp	r3, #0
 8011942:	f43f af6f 	beq.w	8011824 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011946:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011948:	4618      	mov	r0, r3
 801194a:	3730      	adds	r7, #48	@ 0x30
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}
 8011950:	e000ed04 	.word	0xe000ed04

08011954 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b08e      	sub	sp, #56	@ 0x38
 8011958:	af00      	add	r7, sp, #0
 801195a:	60f8      	str	r0, [r7, #12]
 801195c:	60b9      	str	r1, [r7, #8]
 801195e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011966:	2b00      	cmp	r3, #0
 8011968:	d10d      	bne.n	8011986 <xQueueReceiveFromISR+0x32>
	__asm volatile
 801196a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801196e:	b672      	cpsid	i
 8011970:	f383 8811 	msr	BASEPRI, r3
 8011974:	f3bf 8f6f 	isb	sy
 8011978:	f3bf 8f4f 	dsb	sy
 801197c:	b662      	cpsie	i
 801197e:	623b      	str	r3, [r7, #32]
}
 8011980:	bf00      	nop
 8011982:	bf00      	nop
 8011984:	e7fd      	b.n	8011982 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d103      	bne.n	8011994 <xQueueReceiveFromISR+0x40>
 801198c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011990:	2b00      	cmp	r3, #0
 8011992:	d101      	bne.n	8011998 <xQueueReceiveFromISR+0x44>
 8011994:	2301      	movs	r3, #1
 8011996:	e000      	b.n	801199a <xQueueReceiveFromISR+0x46>
 8011998:	2300      	movs	r3, #0
 801199a:	2b00      	cmp	r3, #0
 801199c:	d10d      	bne.n	80119ba <xQueueReceiveFromISR+0x66>
	__asm volatile
 801199e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119a2:	b672      	cpsid	i
 80119a4:	f383 8811 	msr	BASEPRI, r3
 80119a8:	f3bf 8f6f 	isb	sy
 80119ac:	f3bf 8f4f 	dsb	sy
 80119b0:	b662      	cpsie	i
 80119b2:	61fb      	str	r3, [r7, #28]
}
 80119b4:	bf00      	nop
 80119b6:	bf00      	nop
 80119b8:	e7fd      	b.n	80119b6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80119ba:	f001 fab7 	bl	8012f2c <vPortValidateInterruptPriority>
	__asm volatile
 80119be:	f3ef 8211 	mrs	r2, BASEPRI
 80119c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119c6:	b672      	cpsid	i
 80119c8:	f383 8811 	msr	BASEPRI, r3
 80119cc:	f3bf 8f6f 	isb	sy
 80119d0:	f3bf 8f4f 	dsb	sy
 80119d4:	b662      	cpsie	i
 80119d6:	61ba      	str	r2, [r7, #24]
 80119d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80119da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80119dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119e2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80119e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d02f      	beq.n	8011a4a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80119ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80119f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80119f4:	68b9      	ldr	r1, [r7, #8]
 80119f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80119f8:	f000 f89e 	bl	8011b38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80119fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119fe:	1e5a      	subs	r2, r3, #1
 8011a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a02:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011a04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011a08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011a0c:	d112      	bne.n	8011a34 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a10:	691b      	ldr	r3, [r3, #16]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d016      	beq.n	8011a44 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a18:	3310      	adds	r3, #16
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f000 fdb2 	bl	8012584 <xTaskRemoveFromEventList>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d00e      	beq.n	8011a44 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d00b      	beq.n	8011a44 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2201      	movs	r2, #1
 8011a30:	601a      	str	r2, [r3, #0]
 8011a32:	e007      	b.n	8011a44 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a38:	3301      	adds	r3, #1
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	b25a      	sxtb	r2, r3
 8011a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8011a44:	2301      	movs	r3, #1
 8011a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a48:	e001      	b.n	8011a4e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	f383 8811 	msr	BASEPRI, r3
}
 8011a58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3738      	adds	r7, #56	@ 0x38
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b086      	sub	sp, #24
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	60f8      	str	r0, [r7, #12]
 8011a6c:	60b9      	str	r1, [r7, #8]
 8011a6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011a70:	2300      	movs	r3, #0
 8011a72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d10d      	bne.n	8011a9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d14d      	bne.n	8011b26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	689b      	ldr	r3, [r3, #8]
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f000 ff60 	bl	8012954 <xTaskPriorityDisinherit>
 8011a94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	609a      	str	r2, [r3, #8]
 8011a9c:	e043      	b.n	8011b26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d119      	bne.n	8011ad8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	6858      	ldr	r0, [r3, #4]
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011aac:	461a      	mov	r2, r3
 8011aae:	68b9      	ldr	r1, [r7, #8]
 8011ab0:	f002 f86a 	bl	8013b88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	685a      	ldr	r2, [r3, #4]
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011abc:	441a      	add	r2, r3
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	685a      	ldr	r2, [r3, #4]
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	689b      	ldr	r3, [r3, #8]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d32b      	bcc.n	8011b26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681a      	ldr	r2, [r3, #0]
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	605a      	str	r2, [r3, #4]
 8011ad6:	e026      	b.n	8011b26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	68d8      	ldr	r0, [r3, #12]
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	68b9      	ldr	r1, [r7, #8]
 8011ae4:	f002 f850 	bl	8013b88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	68da      	ldr	r2, [r3, #12]
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011af0:	425b      	negs	r3, r3
 8011af2:	441a      	add	r2, r3
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	68da      	ldr	r2, [r3, #12]
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	429a      	cmp	r2, r3
 8011b02:	d207      	bcs.n	8011b14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	689a      	ldr	r2, [r3, #8]
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b0c:	425b      	negs	r3, r3
 8011b0e:	441a      	add	r2, r3
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2b02      	cmp	r3, #2
 8011b18:	d105      	bne.n	8011b26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d002      	beq.n	8011b26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	3b01      	subs	r3, #1
 8011b24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	1c5a      	adds	r2, r3, #1
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8011b2e:	697b      	ldr	r3, [r7, #20]
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3718      	adds	r7, #24
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d018      	beq.n	8011b7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	68da      	ldr	r2, [r3, #12]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b52:	441a      	add	r2, r3
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	68da      	ldr	r2, [r3, #12]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	689b      	ldr	r3, [r3, #8]
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d303      	bcc.n	8011b6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681a      	ldr	r2, [r3, #0]
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	68d9      	ldr	r1, [r3, #12]
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b74:	461a      	mov	r2, r3
 8011b76:	6838      	ldr	r0, [r7, #0]
 8011b78:	f002 f806 	bl	8013b88 <memcpy>
	}
}
 8011b7c:	bf00      	nop
 8011b7e:	3708      	adds	r7, #8
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}

08011b84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b084      	sub	sp, #16
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011b8c:	f001 f8e6 	bl	8012d5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011b96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011b98:	e011      	b.n	8011bbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d012      	beq.n	8011bc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	3324      	adds	r3, #36	@ 0x24
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f000 fcec 	bl	8012584 <xTaskRemoveFromEventList>
 8011bac:	4603      	mov	r3, r0
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d001      	beq.n	8011bb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011bb2:	f000 fdcb 	bl	801274c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011bb6:	7bfb      	ldrb	r3, [r7, #15]
 8011bb8:	3b01      	subs	r3, #1
 8011bba:	b2db      	uxtb	r3, r3
 8011bbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	dce9      	bgt.n	8011b9a <prvUnlockQueue+0x16>
 8011bc6:	e000      	b.n	8011bca <prvUnlockQueue+0x46>
					break;
 8011bc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	22ff      	movs	r2, #255	@ 0xff
 8011bce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8011bd2:	f001 f8f9 	bl	8012dc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011bd6:	f001 f8c1 	bl	8012d5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011be0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011be2:	e011      	b.n	8011c08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	691b      	ldr	r3, [r3, #16]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d012      	beq.n	8011c12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	3310      	adds	r3, #16
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f000 fcc7 	bl	8012584 <xTaskRemoveFromEventList>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d001      	beq.n	8011c00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011bfc:	f000 fda6 	bl	801274c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011c00:	7bbb      	ldrb	r3, [r7, #14]
 8011c02:	3b01      	subs	r3, #1
 8011c04:	b2db      	uxtb	r3, r3
 8011c06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011c08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	dce9      	bgt.n	8011be4 <prvUnlockQueue+0x60>
 8011c10:	e000      	b.n	8011c14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011c12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	22ff      	movs	r2, #255	@ 0xff
 8011c18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011c1c:	f001 f8d4 	bl	8012dc8 <vPortExitCritical>
}
 8011c20:	bf00      	nop
 8011c22:	3710      	adds	r7, #16
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}

08011c28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b084      	sub	sp, #16
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011c30:	f001 f894 	bl	8012d5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d102      	bne.n	8011c42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	60fb      	str	r3, [r7, #12]
 8011c40:	e001      	b.n	8011c46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011c42:	2300      	movs	r3, #0
 8011c44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011c46:	f001 f8bf 	bl	8012dc8 <vPortExitCritical>

	return xReturn;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3710      	adds	r7, #16
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011c5c:	f001 f87e 	bl	8012d5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d102      	bne.n	8011c72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	60fb      	str	r3, [r7, #12]
 8011c70:	e001      	b.n	8011c76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011c72:	2300      	movs	r3, #0
 8011c74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011c76:	f001 f8a7 	bl	8012dc8 <vPortExitCritical>

	return xReturn;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3710      	adds	r7, #16
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}

08011c84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b08e      	sub	sp, #56	@ 0x38
 8011c88:	af04      	add	r7, sp, #16
 8011c8a:	60f8      	str	r0, [r7, #12]
 8011c8c:	60b9      	str	r1, [r7, #8]
 8011c8e:	607a      	str	r2, [r7, #4]
 8011c90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d10d      	bne.n	8011cb4 <xTaskCreateStatic+0x30>
	__asm volatile
 8011c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c9c:	b672      	cpsid	i
 8011c9e:	f383 8811 	msr	BASEPRI, r3
 8011ca2:	f3bf 8f6f 	isb	sy
 8011ca6:	f3bf 8f4f 	dsb	sy
 8011caa:	b662      	cpsie	i
 8011cac:	623b      	str	r3, [r7, #32]
}
 8011cae:	bf00      	nop
 8011cb0:	bf00      	nop
 8011cb2:	e7fd      	b.n	8011cb0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8011cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d10d      	bne.n	8011cd6 <xTaskCreateStatic+0x52>
	__asm volatile
 8011cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cbe:	b672      	cpsid	i
 8011cc0:	f383 8811 	msr	BASEPRI, r3
 8011cc4:	f3bf 8f6f 	isb	sy
 8011cc8:	f3bf 8f4f 	dsb	sy
 8011ccc:	b662      	cpsie	i
 8011cce:	61fb      	str	r3, [r7, #28]
}
 8011cd0:	bf00      	nop
 8011cd2:	bf00      	nop
 8011cd4:	e7fd      	b.n	8011cd2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011cd6:	2358      	movs	r3, #88	@ 0x58
 8011cd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	2b58      	cmp	r3, #88	@ 0x58
 8011cde:	d00d      	beq.n	8011cfc <xTaskCreateStatic+0x78>
	__asm volatile
 8011ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ce4:	b672      	cpsid	i
 8011ce6:	f383 8811 	msr	BASEPRI, r3
 8011cea:	f3bf 8f6f 	isb	sy
 8011cee:	f3bf 8f4f 	dsb	sy
 8011cf2:	b662      	cpsie	i
 8011cf4:	61bb      	str	r3, [r7, #24]
}
 8011cf6:	bf00      	nop
 8011cf8:	bf00      	nop
 8011cfa:	e7fd      	b.n	8011cf8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011cfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d01e      	beq.n	8011d42 <xTaskCreateStatic+0xbe>
 8011d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d01b      	beq.n	8011d42 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d16:	2202      	movs	r2, #2
 8011d18:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	9303      	str	r3, [sp, #12]
 8011d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d22:	9302      	str	r3, [sp, #8]
 8011d24:	f107 0314 	add.w	r3, r7, #20
 8011d28:	9301      	str	r3, [sp, #4]
 8011d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d2c:	9300      	str	r3, [sp, #0]
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	687a      	ldr	r2, [r7, #4]
 8011d32:	68b9      	ldr	r1, [r7, #8]
 8011d34:	68f8      	ldr	r0, [r7, #12]
 8011d36:	f000 f850 	bl	8011dda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011d3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011d3c:	f000 f8e2 	bl	8011f04 <prvAddNewTaskToReadyList>
 8011d40:	e001      	b.n	8011d46 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8011d42:	2300      	movs	r3, #0
 8011d44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011d46:	697b      	ldr	r3, [r7, #20]
	}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	3728      	adds	r7, #40	@ 0x28
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}

08011d50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b08c      	sub	sp, #48	@ 0x30
 8011d54:	af04      	add	r7, sp, #16
 8011d56:	60f8      	str	r0, [r7, #12]
 8011d58:	60b9      	str	r1, [r7, #8]
 8011d5a:	603b      	str	r3, [r7, #0]
 8011d5c:	4613      	mov	r3, r2
 8011d5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011d60:	88fb      	ldrh	r3, [r7, #6]
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	4618      	mov	r0, r3
 8011d66:	f001 f927 	bl	8012fb8 <pvPortMalloc>
 8011d6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d00e      	beq.n	8011d90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011d72:	2058      	movs	r0, #88	@ 0x58
 8011d74:	f001 f920 	bl	8012fb8 <pvPortMalloc>
 8011d78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011d7a:	69fb      	ldr	r3, [r7, #28]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d003      	beq.n	8011d88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011d80:	69fb      	ldr	r3, [r7, #28]
 8011d82:	697a      	ldr	r2, [r7, #20]
 8011d84:	631a      	str	r2, [r3, #48]	@ 0x30
 8011d86:	e005      	b.n	8011d94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011d88:	6978      	ldr	r0, [r7, #20]
 8011d8a:	f001 f9e7 	bl	801315c <vPortFree>
 8011d8e:	e001      	b.n	8011d94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011d90:	2300      	movs	r3, #0
 8011d92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011d94:	69fb      	ldr	r3, [r7, #28]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d017      	beq.n	8011dca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011d9a:	69fb      	ldr	r3, [r7, #28]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011da2:	88fa      	ldrh	r2, [r7, #6]
 8011da4:	2300      	movs	r3, #0
 8011da6:	9303      	str	r3, [sp, #12]
 8011da8:	69fb      	ldr	r3, [r7, #28]
 8011daa:	9302      	str	r3, [sp, #8]
 8011dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dae:	9301      	str	r3, [sp, #4]
 8011db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011db2:	9300      	str	r3, [sp, #0]
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	68b9      	ldr	r1, [r7, #8]
 8011db8:	68f8      	ldr	r0, [r7, #12]
 8011dba:	f000 f80e 	bl	8011dda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011dbe:	69f8      	ldr	r0, [r7, #28]
 8011dc0:	f000 f8a0 	bl	8011f04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	61bb      	str	r3, [r7, #24]
 8011dc8:	e002      	b.n	8011dd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011dce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011dd0:	69bb      	ldr	r3, [r7, #24]
	}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3720      	adds	r7, #32
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}

08011dda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011dda:	b580      	push	{r7, lr}
 8011ddc:	b088      	sub	sp, #32
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	60f8      	str	r0, [r7, #12]
 8011de2:	60b9      	str	r1, [r7, #8]
 8011de4:	607a      	str	r2, [r7, #4]
 8011de6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	461a      	mov	r2, r3
 8011df2:	21a5      	movs	r1, #165	@ 0xa5
 8011df4:	f001 fe84 	bl	8013b00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011dfc:	6879      	ldr	r1, [r7, #4]
 8011dfe:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011e02:	440b      	add	r3, r1
 8011e04:	009b      	lsls	r3, r3, #2
 8011e06:	4413      	add	r3, r2
 8011e08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011e0a:	69bb      	ldr	r3, [r7, #24]
 8011e0c:	f023 0307 	bic.w	r3, r3, #7
 8011e10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011e12:	69bb      	ldr	r3, [r7, #24]
 8011e14:	f003 0307 	and.w	r3, r3, #7
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00d      	beq.n	8011e38 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8011e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e20:	b672      	cpsid	i
 8011e22:	f383 8811 	msr	BASEPRI, r3
 8011e26:	f3bf 8f6f 	isb	sy
 8011e2a:	f3bf 8f4f 	dsb	sy
 8011e2e:	b662      	cpsie	i
 8011e30:	617b      	str	r3, [r7, #20]
}
 8011e32:	bf00      	nop
 8011e34:	bf00      	nop
 8011e36:	e7fd      	b.n	8011e34 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d01f      	beq.n	8011e7e <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011e3e:	2300      	movs	r3, #0
 8011e40:	61fb      	str	r3, [r7, #28]
 8011e42:	e012      	b.n	8011e6a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011e44:	68ba      	ldr	r2, [r7, #8]
 8011e46:	69fb      	ldr	r3, [r7, #28]
 8011e48:	4413      	add	r3, r2
 8011e4a:	7819      	ldrb	r1, [r3, #0]
 8011e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e4e:	69fb      	ldr	r3, [r7, #28]
 8011e50:	4413      	add	r3, r2
 8011e52:	3334      	adds	r3, #52	@ 0x34
 8011e54:	460a      	mov	r2, r1
 8011e56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011e58:	68ba      	ldr	r2, [r7, #8]
 8011e5a:	69fb      	ldr	r3, [r7, #28]
 8011e5c:	4413      	add	r3, r2
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d006      	beq.n	8011e72 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011e64:	69fb      	ldr	r3, [r7, #28]
 8011e66:	3301      	adds	r3, #1
 8011e68:	61fb      	str	r3, [r7, #28]
 8011e6a:	69fb      	ldr	r3, [r7, #28]
 8011e6c:	2b0f      	cmp	r3, #15
 8011e6e:	d9e9      	bls.n	8011e44 <prvInitialiseNewTask+0x6a>
 8011e70:	e000      	b.n	8011e74 <prvInitialiseNewTask+0x9a>
			{
				break;
 8011e72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e76:	2200      	movs	r2, #0
 8011e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011e7c:	e003      	b.n	8011e86 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e80:	2200      	movs	r2, #0
 8011e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e88:	2b06      	cmp	r3, #6
 8011e8a:	d901      	bls.n	8011e90 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011e8c:	2306      	movs	r3, #6
 8011e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e94:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e9a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ea4:	3304      	adds	r3, #4
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7ff f8d4 	bl	8011054 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eae:	3318      	adds	r3, #24
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7ff f8cf 	bl	8011054 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011eba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ebe:	f1c3 0207 	rsb	r2, r3, #7
 8011ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011eca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8011ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ece:	2200      	movs	r2, #0
 8011ed0:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eda:	2200      	movs	r2, #0
 8011edc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011ee0:	683a      	ldr	r2, [r7, #0]
 8011ee2:	68f9      	ldr	r1, [r7, #12]
 8011ee4:	69b8      	ldr	r0, [r7, #24]
 8011ee6:	f000 fe27 	bl	8012b38 <pxPortInitialiseStack>
 8011eea:	4602      	mov	r2, r0
 8011eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d002      	beq.n	8011efc <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011efa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011efc:	bf00      	nop
 8011efe:	3720      	adds	r7, #32
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011f0c:	f000 ff26 	bl	8012d5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011f10:	4b2a      	ldr	r3, [pc, #168]	@ (8011fbc <prvAddNewTaskToReadyList+0xb8>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	3301      	adds	r3, #1
 8011f16:	4a29      	ldr	r2, [pc, #164]	@ (8011fbc <prvAddNewTaskToReadyList+0xb8>)
 8011f18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011f1a:	4b29      	ldr	r3, [pc, #164]	@ (8011fc0 <prvAddNewTaskToReadyList+0xbc>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d109      	bne.n	8011f36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011f22:	4a27      	ldr	r2, [pc, #156]	@ (8011fc0 <prvAddNewTaskToReadyList+0xbc>)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011f28:	4b24      	ldr	r3, [pc, #144]	@ (8011fbc <prvAddNewTaskToReadyList+0xb8>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d110      	bne.n	8011f52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011f30:	f000 fc32 	bl	8012798 <prvInitialiseTaskLists>
 8011f34:	e00d      	b.n	8011f52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011f36:	4b23      	ldr	r3, [pc, #140]	@ (8011fc4 <prvAddNewTaskToReadyList+0xc0>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d109      	bne.n	8011f52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011f3e:	4b20      	ldr	r3, [pc, #128]	@ (8011fc0 <prvAddNewTaskToReadyList+0xbc>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d802      	bhi.n	8011f52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8011fc0 <prvAddNewTaskToReadyList+0xbc>)
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011f52:	4b1d      	ldr	r3, [pc, #116]	@ (8011fc8 <prvAddNewTaskToReadyList+0xc4>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	3301      	adds	r3, #1
 8011f58:	4a1b      	ldr	r2, [pc, #108]	@ (8011fc8 <prvAddNewTaskToReadyList+0xc4>)
 8011f5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f60:	2201      	movs	r2, #1
 8011f62:	409a      	lsls	r2, r3
 8011f64:	4b19      	ldr	r3, [pc, #100]	@ (8011fcc <prvAddNewTaskToReadyList+0xc8>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	4313      	orrs	r3, r2
 8011f6a:	4a18      	ldr	r2, [pc, #96]	@ (8011fcc <prvAddNewTaskToReadyList+0xc8>)
 8011f6c:	6013      	str	r3, [r2, #0]
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f72:	4613      	mov	r3, r2
 8011f74:	009b      	lsls	r3, r3, #2
 8011f76:	4413      	add	r3, r2
 8011f78:	009b      	lsls	r3, r3, #2
 8011f7a:	4a15      	ldr	r2, [pc, #84]	@ (8011fd0 <prvAddNewTaskToReadyList+0xcc>)
 8011f7c:	441a      	add	r2, r3
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	3304      	adds	r3, #4
 8011f82:	4619      	mov	r1, r3
 8011f84:	4610      	mov	r0, r2
 8011f86:	f7ff f872 	bl	801106e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011f8a:	f000 ff1d 	bl	8012dc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8011fc4 <prvAddNewTaskToReadyList+0xc0>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d00e      	beq.n	8011fb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011f96:	4b0a      	ldr	r3, [pc, #40]	@ (8011fc0 <prvAddNewTaskToReadyList+0xbc>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d207      	bcs.n	8011fb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8011fd4 <prvAddNewTaskToReadyList+0xd0>)
 8011fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011faa:	601a      	str	r2, [r3, #0]
 8011fac:	f3bf 8f4f 	dsb	sy
 8011fb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011fb4:	bf00      	nop
 8011fb6:	3708      	adds	r7, #8
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}
 8011fbc:	20000e9c 	.word	0x20000e9c
 8011fc0:	20000d9c 	.word	0x20000d9c
 8011fc4:	20000ea8 	.word	0x20000ea8
 8011fc8:	20000eb8 	.word	0x20000eb8
 8011fcc:	20000ea4 	.word	0x20000ea4
 8011fd0:	20000da0 	.word	0x20000da0
 8011fd4:	e000ed04 	.word	0xe000ed04

08011fd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b084      	sub	sp, #16
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d01a      	beq.n	8012020 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011fea:	4b15      	ldr	r3, [pc, #84]	@ (8012040 <vTaskDelay+0x68>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00d      	beq.n	801200e <vTaskDelay+0x36>
	__asm volatile
 8011ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ff6:	b672      	cpsid	i
 8011ff8:	f383 8811 	msr	BASEPRI, r3
 8011ffc:	f3bf 8f6f 	isb	sy
 8012000:	f3bf 8f4f 	dsb	sy
 8012004:	b662      	cpsie	i
 8012006:	60bb      	str	r3, [r7, #8]
}
 8012008:	bf00      	nop
 801200a:	bf00      	nop
 801200c:	e7fd      	b.n	801200a <vTaskDelay+0x32>
			vTaskSuspendAll();
 801200e:	f000 f881 	bl	8012114 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012012:	2100      	movs	r1, #0
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f000 fd29 	bl	8012a6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801201a:	f000 f889 	bl	8012130 <xTaskResumeAll>
 801201e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d107      	bne.n	8012036 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8012026:	4b07      	ldr	r3, [pc, #28]	@ (8012044 <vTaskDelay+0x6c>)
 8012028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801202c:	601a      	str	r2, [r3, #0]
 801202e:	f3bf 8f4f 	dsb	sy
 8012032:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012036:	bf00      	nop
 8012038:	3710      	adds	r7, #16
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}
 801203e:	bf00      	nop
 8012040:	20000ec4 	.word	0x20000ec4
 8012044:	e000ed04 	.word	0xe000ed04

08012048 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b08a      	sub	sp, #40	@ 0x28
 801204c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801204e:	2300      	movs	r3, #0
 8012050:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012052:	2300      	movs	r3, #0
 8012054:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012056:	463a      	mov	r2, r7
 8012058:	1d39      	adds	r1, r7, #4
 801205a:	f107 0308 	add.w	r3, r7, #8
 801205e:	4618      	mov	r0, r3
 8012060:	f7ee fa68 	bl	8000534 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012064:	6839      	ldr	r1, [r7, #0]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	68ba      	ldr	r2, [r7, #8]
 801206a:	9202      	str	r2, [sp, #8]
 801206c:	9301      	str	r3, [sp, #4]
 801206e:	2300      	movs	r3, #0
 8012070:	9300      	str	r3, [sp, #0]
 8012072:	2300      	movs	r3, #0
 8012074:	460a      	mov	r2, r1
 8012076:	4921      	ldr	r1, [pc, #132]	@ (80120fc <vTaskStartScheduler+0xb4>)
 8012078:	4821      	ldr	r0, [pc, #132]	@ (8012100 <vTaskStartScheduler+0xb8>)
 801207a:	f7ff fe03 	bl	8011c84 <xTaskCreateStatic>
 801207e:	4603      	mov	r3, r0
 8012080:	4a20      	ldr	r2, [pc, #128]	@ (8012104 <vTaskStartScheduler+0xbc>)
 8012082:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012084:	4b1f      	ldr	r3, [pc, #124]	@ (8012104 <vTaskStartScheduler+0xbc>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d002      	beq.n	8012092 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801208c:	2301      	movs	r3, #1
 801208e:	617b      	str	r3, [r7, #20]
 8012090:	e001      	b.n	8012096 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012092:	2300      	movs	r3, #0
 8012094:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	2b01      	cmp	r3, #1
 801209a:	d118      	bne.n	80120ce <vTaskStartScheduler+0x86>
	__asm volatile
 801209c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120a0:	b672      	cpsid	i
 80120a2:	f383 8811 	msr	BASEPRI, r3
 80120a6:	f3bf 8f6f 	isb	sy
 80120aa:	f3bf 8f4f 	dsb	sy
 80120ae:	b662      	cpsie	i
 80120b0:	613b      	str	r3, [r7, #16]
}
 80120b2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80120b4:	4b14      	ldr	r3, [pc, #80]	@ (8012108 <vTaskStartScheduler+0xc0>)
 80120b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80120ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80120bc:	4b13      	ldr	r3, [pc, #76]	@ (801210c <vTaskStartScheduler+0xc4>)
 80120be:	2201      	movs	r2, #1
 80120c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80120c2:	4b13      	ldr	r3, [pc, #76]	@ (8012110 <vTaskStartScheduler+0xc8>)
 80120c4:	2200      	movs	r2, #0
 80120c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80120c8:	f000 fdca 	bl	8012c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80120cc:	e011      	b.n	80120f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80120d4:	d10d      	bne.n	80120f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80120d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120da:	b672      	cpsid	i
 80120dc:	f383 8811 	msr	BASEPRI, r3
 80120e0:	f3bf 8f6f 	isb	sy
 80120e4:	f3bf 8f4f 	dsb	sy
 80120e8:	b662      	cpsie	i
 80120ea:	60fb      	str	r3, [r7, #12]
}
 80120ec:	bf00      	nop
 80120ee:	bf00      	nop
 80120f0:	e7fd      	b.n	80120ee <vTaskStartScheduler+0xa6>
}
 80120f2:	bf00      	nop
 80120f4:	3718      	adds	r7, #24
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	bf00      	nop
 80120fc:	08013cc4 	.word	0x08013cc4
 8012100:	08012765 	.word	0x08012765
 8012104:	20000ec0 	.word	0x20000ec0
 8012108:	20000ebc 	.word	0x20000ebc
 801210c:	20000ea8 	.word	0x20000ea8
 8012110:	20000ea0 	.word	0x20000ea0

08012114 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012114:	b480      	push	{r7}
 8012116:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012118:	4b04      	ldr	r3, [pc, #16]	@ (801212c <vTaskSuspendAll+0x18>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	3301      	adds	r3, #1
 801211e:	4a03      	ldr	r2, [pc, #12]	@ (801212c <vTaskSuspendAll+0x18>)
 8012120:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012122:	bf00      	nop
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr
 801212c:	20000ec4 	.word	0x20000ec4

08012130 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b084      	sub	sp, #16
 8012134:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012136:	2300      	movs	r3, #0
 8012138:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801213a:	2300      	movs	r3, #0
 801213c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801213e:	4b43      	ldr	r3, [pc, #268]	@ (801224c <xTaskResumeAll+0x11c>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d10d      	bne.n	8012162 <xTaskResumeAll+0x32>
	__asm volatile
 8012146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801214a:	b672      	cpsid	i
 801214c:	f383 8811 	msr	BASEPRI, r3
 8012150:	f3bf 8f6f 	isb	sy
 8012154:	f3bf 8f4f 	dsb	sy
 8012158:	b662      	cpsie	i
 801215a:	603b      	str	r3, [r7, #0]
}
 801215c:	bf00      	nop
 801215e:	bf00      	nop
 8012160:	e7fd      	b.n	801215e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012162:	f000 fdfb 	bl	8012d5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012166:	4b39      	ldr	r3, [pc, #228]	@ (801224c <xTaskResumeAll+0x11c>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	3b01      	subs	r3, #1
 801216c:	4a37      	ldr	r2, [pc, #220]	@ (801224c <xTaskResumeAll+0x11c>)
 801216e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012170:	4b36      	ldr	r3, [pc, #216]	@ (801224c <xTaskResumeAll+0x11c>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d161      	bne.n	801223c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012178:	4b35      	ldr	r3, [pc, #212]	@ (8012250 <xTaskResumeAll+0x120>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d05d      	beq.n	801223c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012180:	e02e      	b.n	80121e0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012182:	4b34      	ldr	r3, [pc, #208]	@ (8012254 <xTaskResumeAll+0x124>)
 8012184:	68db      	ldr	r3, [r3, #12]
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	3318      	adds	r3, #24
 801218e:	4618      	mov	r0, r3
 8012190:	f7fe ffca 	bl	8011128 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	3304      	adds	r3, #4
 8012198:	4618      	mov	r0, r3
 801219a:	f7fe ffc5 	bl	8011128 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121a2:	2201      	movs	r2, #1
 80121a4:	409a      	lsls	r2, r3
 80121a6:	4b2c      	ldr	r3, [pc, #176]	@ (8012258 <xTaskResumeAll+0x128>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	4313      	orrs	r3, r2
 80121ac:	4a2a      	ldr	r2, [pc, #168]	@ (8012258 <xTaskResumeAll+0x128>)
 80121ae:	6013      	str	r3, [r2, #0]
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121b4:	4613      	mov	r3, r2
 80121b6:	009b      	lsls	r3, r3, #2
 80121b8:	4413      	add	r3, r2
 80121ba:	009b      	lsls	r3, r3, #2
 80121bc:	4a27      	ldr	r2, [pc, #156]	@ (801225c <xTaskResumeAll+0x12c>)
 80121be:	441a      	add	r2, r3
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	3304      	adds	r3, #4
 80121c4:	4619      	mov	r1, r3
 80121c6:	4610      	mov	r0, r2
 80121c8:	f7fe ff51 	bl	801106e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121d0:	4b23      	ldr	r3, [pc, #140]	@ (8012260 <xTaskResumeAll+0x130>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d302      	bcc.n	80121e0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80121da:	4b22      	ldr	r3, [pc, #136]	@ (8012264 <xTaskResumeAll+0x134>)
 80121dc:	2201      	movs	r2, #1
 80121de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80121e0:	4b1c      	ldr	r3, [pc, #112]	@ (8012254 <xTaskResumeAll+0x124>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d1cc      	bne.n	8012182 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d001      	beq.n	80121f2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80121ee:	f000 fb73 	bl	80128d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80121f2:	4b1d      	ldr	r3, [pc, #116]	@ (8012268 <xTaskResumeAll+0x138>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d010      	beq.n	8012220 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80121fe:	f000 f859 	bl	80122b4 <xTaskIncrementTick>
 8012202:	4603      	mov	r3, r0
 8012204:	2b00      	cmp	r3, #0
 8012206:	d002      	beq.n	801220e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8012208:	4b16      	ldr	r3, [pc, #88]	@ (8012264 <xTaskResumeAll+0x134>)
 801220a:	2201      	movs	r2, #1
 801220c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	3b01      	subs	r3, #1
 8012212:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d1f1      	bne.n	80121fe <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 801221a:	4b13      	ldr	r3, [pc, #76]	@ (8012268 <xTaskResumeAll+0x138>)
 801221c:	2200      	movs	r2, #0
 801221e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012220:	4b10      	ldr	r3, [pc, #64]	@ (8012264 <xTaskResumeAll+0x134>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d009      	beq.n	801223c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012228:	2301      	movs	r3, #1
 801222a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801222c:	4b0f      	ldr	r3, [pc, #60]	@ (801226c <xTaskResumeAll+0x13c>)
 801222e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012232:	601a      	str	r2, [r3, #0]
 8012234:	f3bf 8f4f 	dsb	sy
 8012238:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801223c:	f000 fdc4 	bl	8012dc8 <vPortExitCritical>

	return xAlreadyYielded;
 8012240:	68bb      	ldr	r3, [r7, #8]
}
 8012242:	4618      	mov	r0, r3
 8012244:	3710      	adds	r7, #16
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}
 801224a:	bf00      	nop
 801224c:	20000ec4 	.word	0x20000ec4
 8012250:	20000e9c 	.word	0x20000e9c
 8012254:	20000e5c 	.word	0x20000e5c
 8012258:	20000ea4 	.word	0x20000ea4
 801225c:	20000da0 	.word	0x20000da0
 8012260:	20000d9c 	.word	0x20000d9c
 8012264:	20000eb0 	.word	0x20000eb0
 8012268:	20000eac 	.word	0x20000eac
 801226c:	e000ed04 	.word	0xe000ed04

08012270 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012270:	b480      	push	{r7}
 8012272:	b083      	sub	sp, #12
 8012274:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012276:	4b05      	ldr	r3, [pc, #20]	@ (801228c <xTaskGetTickCount+0x1c>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801227c:	687b      	ldr	r3, [r7, #4]
}
 801227e:	4618      	mov	r0, r3
 8012280:	370c      	adds	r7, #12
 8012282:	46bd      	mov	sp, r7
 8012284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012288:	4770      	bx	lr
 801228a:	bf00      	nop
 801228c:	20000ea0 	.word	0x20000ea0

08012290 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b082      	sub	sp, #8
 8012294:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012296:	f000 fe49 	bl	8012f2c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801229a:	2300      	movs	r3, #0
 801229c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801229e:	4b04      	ldr	r3, [pc, #16]	@ (80122b0 <xTaskGetTickCountFromISR+0x20>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80122a4:	683b      	ldr	r3, [r7, #0]
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3708      	adds	r7, #8
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}
 80122ae:	bf00      	nop
 80122b0:	20000ea0 	.word	0x20000ea0

080122b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80122ba:	2300      	movs	r3, #0
 80122bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80122be:	4b50      	ldr	r3, [pc, #320]	@ (8012400 <xTaskIncrementTick+0x14c>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	f040 808b 	bne.w	80123de <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80122c8:	4b4e      	ldr	r3, [pc, #312]	@ (8012404 <xTaskIncrementTick+0x150>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	3301      	adds	r3, #1
 80122ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80122d0:	4a4c      	ldr	r2, [pc, #304]	@ (8012404 <xTaskIncrementTick+0x150>)
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d123      	bne.n	8012324 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80122dc:	4b4a      	ldr	r3, [pc, #296]	@ (8012408 <xTaskIncrementTick+0x154>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d00d      	beq.n	8012302 <xTaskIncrementTick+0x4e>
	__asm volatile
 80122e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122ea:	b672      	cpsid	i
 80122ec:	f383 8811 	msr	BASEPRI, r3
 80122f0:	f3bf 8f6f 	isb	sy
 80122f4:	f3bf 8f4f 	dsb	sy
 80122f8:	b662      	cpsie	i
 80122fa:	603b      	str	r3, [r7, #0]
}
 80122fc:	bf00      	nop
 80122fe:	bf00      	nop
 8012300:	e7fd      	b.n	80122fe <xTaskIncrementTick+0x4a>
 8012302:	4b41      	ldr	r3, [pc, #260]	@ (8012408 <xTaskIncrementTick+0x154>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	60fb      	str	r3, [r7, #12]
 8012308:	4b40      	ldr	r3, [pc, #256]	@ (801240c <xTaskIncrementTick+0x158>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	4a3e      	ldr	r2, [pc, #248]	@ (8012408 <xTaskIncrementTick+0x154>)
 801230e:	6013      	str	r3, [r2, #0]
 8012310:	4a3e      	ldr	r2, [pc, #248]	@ (801240c <xTaskIncrementTick+0x158>)
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	6013      	str	r3, [r2, #0]
 8012316:	4b3e      	ldr	r3, [pc, #248]	@ (8012410 <xTaskIncrementTick+0x15c>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	3301      	adds	r3, #1
 801231c:	4a3c      	ldr	r2, [pc, #240]	@ (8012410 <xTaskIncrementTick+0x15c>)
 801231e:	6013      	str	r3, [r2, #0]
 8012320:	f000 fada 	bl	80128d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012324:	4b3b      	ldr	r3, [pc, #236]	@ (8012414 <xTaskIncrementTick+0x160>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	693a      	ldr	r2, [r7, #16]
 801232a:	429a      	cmp	r2, r3
 801232c:	d348      	bcc.n	80123c0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801232e:	4b36      	ldr	r3, [pc, #216]	@ (8012408 <xTaskIncrementTick+0x154>)
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d104      	bne.n	8012342 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012338:	4b36      	ldr	r3, [pc, #216]	@ (8012414 <xTaskIncrementTick+0x160>)
 801233a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801233e:	601a      	str	r2, [r3, #0]
					break;
 8012340:	e03e      	b.n	80123c0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012342:	4b31      	ldr	r3, [pc, #196]	@ (8012408 <xTaskIncrementTick+0x154>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	68db      	ldr	r3, [r3, #12]
 8012348:	68db      	ldr	r3, [r3, #12]
 801234a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	685b      	ldr	r3, [r3, #4]
 8012350:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012352:	693a      	ldr	r2, [r7, #16]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	429a      	cmp	r2, r3
 8012358:	d203      	bcs.n	8012362 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801235a:	4a2e      	ldr	r2, [pc, #184]	@ (8012414 <xTaskIncrementTick+0x160>)
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012360:	e02e      	b.n	80123c0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	3304      	adds	r3, #4
 8012366:	4618      	mov	r0, r3
 8012368:	f7fe fede 	bl	8011128 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012370:	2b00      	cmp	r3, #0
 8012372:	d004      	beq.n	801237e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	3318      	adds	r3, #24
 8012378:	4618      	mov	r0, r3
 801237a:	f7fe fed5 	bl	8011128 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012382:	2201      	movs	r2, #1
 8012384:	409a      	lsls	r2, r3
 8012386:	4b24      	ldr	r3, [pc, #144]	@ (8012418 <xTaskIncrementTick+0x164>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	4313      	orrs	r3, r2
 801238c:	4a22      	ldr	r2, [pc, #136]	@ (8012418 <xTaskIncrementTick+0x164>)
 801238e:	6013      	str	r3, [r2, #0]
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012394:	4613      	mov	r3, r2
 8012396:	009b      	lsls	r3, r3, #2
 8012398:	4413      	add	r3, r2
 801239a:	009b      	lsls	r3, r3, #2
 801239c:	4a1f      	ldr	r2, [pc, #124]	@ (801241c <xTaskIncrementTick+0x168>)
 801239e:	441a      	add	r2, r3
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	3304      	adds	r3, #4
 80123a4:	4619      	mov	r1, r3
 80123a6:	4610      	mov	r0, r2
 80123a8:	f7fe fe61 	bl	801106e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123b0:	4b1b      	ldr	r3, [pc, #108]	@ (8012420 <xTaskIncrementTick+0x16c>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d3b9      	bcc.n	801232e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80123ba:	2301      	movs	r3, #1
 80123bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123be:	e7b6      	b.n	801232e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80123c0:	4b17      	ldr	r3, [pc, #92]	@ (8012420 <xTaskIncrementTick+0x16c>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123c6:	4915      	ldr	r1, [pc, #84]	@ (801241c <xTaskIncrementTick+0x168>)
 80123c8:	4613      	mov	r3, r2
 80123ca:	009b      	lsls	r3, r3, #2
 80123cc:	4413      	add	r3, r2
 80123ce:	009b      	lsls	r3, r3, #2
 80123d0:	440b      	add	r3, r1
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b01      	cmp	r3, #1
 80123d6:	d907      	bls.n	80123e8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80123d8:	2301      	movs	r3, #1
 80123da:	617b      	str	r3, [r7, #20]
 80123dc:	e004      	b.n	80123e8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80123de:	4b11      	ldr	r3, [pc, #68]	@ (8012424 <xTaskIncrementTick+0x170>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	3301      	adds	r3, #1
 80123e4:	4a0f      	ldr	r2, [pc, #60]	@ (8012424 <xTaskIncrementTick+0x170>)
 80123e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80123e8:	4b0f      	ldr	r3, [pc, #60]	@ (8012428 <xTaskIncrementTick+0x174>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d001      	beq.n	80123f4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80123f0:	2301      	movs	r3, #1
 80123f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80123f4:	697b      	ldr	r3, [r7, #20]
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3718      	adds	r7, #24
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	bf00      	nop
 8012400:	20000ec4 	.word	0x20000ec4
 8012404:	20000ea0 	.word	0x20000ea0
 8012408:	20000e54 	.word	0x20000e54
 801240c:	20000e58 	.word	0x20000e58
 8012410:	20000eb4 	.word	0x20000eb4
 8012414:	20000ebc 	.word	0x20000ebc
 8012418:	20000ea4 	.word	0x20000ea4
 801241c:	20000da0 	.word	0x20000da0
 8012420:	20000d9c 	.word	0x20000d9c
 8012424:	20000eac 	.word	0x20000eac
 8012428:	20000eb0 	.word	0x20000eb0

0801242c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b088      	sub	sp, #32
 8012430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012432:	4b3b      	ldr	r3, [pc, #236]	@ (8012520 <vTaskSwitchContext+0xf4>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d003      	beq.n	8012442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801243a:	4b3a      	ldr	r3, [pc, #232]	@ (8012524 <vTaskSwitchContext+0xf8>)
 801243c:	2201      	movs	r2, #1
 801243e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012440:	e069      	b.n	8012516 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8012442:	4b38      	ldr	r3, [pc, #224]	@ (8012524 <vTaskSwitchContext+0xf8>)
 8012444:	2200      	movs	r2, #0
 8012446:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012448:	4b37      	ldr	r3, [pc, #220]	@ (8012528 <vTaskSwitchContext+0xfc>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801244e:	61fb      	str	r3, [r7, #28]
 8012450:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8012454:	61bb      	str	r3, [r7, #24]
 8012456:	69fb      	ldr	r3, [r7, #28]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	69ba      	ldr	r2, [r7, #24]
 801245c:	429a      	cmp	r2, r3
 801245e:	d111      	bne.n	8012484 <vTaskSwitchContext+0x58>
 8012460:	69fb      	ldr	r3, [r7, #28]
 8012462:	3304      	adds	r3, #4
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	69ba      	ldr	r2, [r7, #24]
 8012468:	429a      	cmp	r2, r3
 801246a:	d10b      	bne.n	8012484 <vTaskSwitchContext+0x58>
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	3308      	adds	r3, #8
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	69ba      	ldr	r2, [r7, #24]
 8012474:	429a      	cmp	r2, r3
 8012476:	d105      	bne.n	8012484 <vTaskSwitchContext+0x58>
 8012478:	69fb      	ldr	r3, [r7, #28]
 801247a:	330c      	adds	r3, #12
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	69ba      	ldr	r2, [r7, #24]
 8012480:	429a      	cmp	r2, r3
 8012482:	d008      	beq.n	8012496 <vTaskSwitchContext+0x6a>
 8012484:	4b28      	ldr	r3, [pc, #160]	@ (8012528 <vTaskSwitchContext+0xfc>)
 8012486:	681a      	ldr	r2, [r3, #0]
 8012488:	4b27      	ldr	r3, [pc, #156]	@ (8012528 <vTaskSwitchContext+0xfc>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	3334      	adds	r3, #52	@ 0x34
 801248e:	4619      	mov	r1, r3
 8012490:	4610      	mov	r0, r2
 8012492:	f7ee f83c 	bl	800050e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012496:	4b25      	ldr	r3, [pc, #148]	@ (801252c <vTaskSwitchContext+0x100>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	fab3 f383 	clz	r3, r3
 80124a2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80124a4:	7afb      	ldrb	r3, [r7, #11]
 80124a6:	f1c3 031f 	rsb	r3, r3, #31
 80124aa:	617b      	str	r3, [r7, #20]
 80124ac:	4920      	ldr	r1, [pc, #128]	@ (8012530 <vTaskSwitchContext+0x104>)
 80124ae:	697a      	ldr	r2, [r7, #20]
 80124b0:	4613      	mov	r3, r2
 80124b2:	009b      	lsls	r3, r3, #2
 80124b4:	4413      	add	r3, r2
 80124b6:	009b      	lsls	r3, r3, #2
 80124b8:	440b      	add	r3, r1
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d10d      	bne.n	80124dc <vTaskSwitchContext+0xb0>
	__asm volatile
 80124c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124c4:	b672      	cpsid	i
 80124c6:	f383 8811 	msr	BASEPRI, r3
 80124ca:	f3bf 8f6f 	isb	sy
 80124ce:	f3bf 8f4f 	dsb	sy
 80124d2:	b662      	cpsie	i
 80124d4:	607b      	str	r3, [r7, #4]
}
 80124d6:	bf00      	nop
 80124d8:	bf00      	nop
 80124da:	e7fd      	b.n	80124d8 <vTaskSwitchContext+0xac>
 80124dc:	697a      	ldr	r2, [r7, #20]
 80124de:	4613      	mov	r3, r2
 80124e0:	009b      	lsls	r3, r3, #2
 80124e2:	4413      	add	r3, r2
 80124e4:	009b      	lsls	r3, r3, #2
 80124e6:	4a12      	ldr	r2, [pc, #72]	@ (8012530 <vTaskSwitchContext+0x104>)
 80124e8:	4413      	add	r3, r2
 80124ea:	613b      	str	r3, [r7, #16]
 80124ec:	693b      	ldr	r3, [r7, #16]
 80124ee:	685b      	ldr	r3, [r3, #4]
 80124f0:	685a      	ldr	r2, [r3, #4]
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	605a      	str	r2, [r3, #4]
 80124f6:	693b      	ldr	r3, [r7, #16]
 80124f8:	685a      	ldr	r2, [r3, #4]
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	3308      	adds	r3, #8
 80124fe:	429a      	cmp	r2, r3
 8012500:	d104      	bne.n	801250c <vTaskSwitchContext+0xe0>
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	685b      	ldr	r3, [r3, #4]
 8012506:	685a      	ldr	r2, [r3, #4]
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	605a      	str	r2, [r3, #4]
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	68db      	ldr	r3, [r3, #12]
 8012512:	4a05      	ldr	r2, [pc, #20]	@ (8012528 <vTaskSwitchContext+0xfc>)
 8012514:	6013      	str	r3, [r2, #0]
}
 8012516:	bf00      	nop
 8012518:	3720      	adds	r7, #32
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	20000ec4 	.word	0x20000ec4
 8012524:	20000eb0 	.word	0x20000eb0
 8012528:	20000d9c 	.word	0x20000d9c
 801252c:	20000ea4 	.word	0x20000ea4
 8012530:	20000da0 	.word	0x20000da0

08012534 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b084      	sub	sp, #16
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d10d      	bne.n	8012560 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8012544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012548:	b672      	cpsid	i
 801254a:	f383 8811 	msr	BASEPRI, r3
 801254e:	f3bf 8f6f 	isb	sy
 8012552:	f3bf 8f4f 	dsb	sy
 8012556:	b662      	cpsie	i
 8012558:	60fb      	str	r3, [r7, #12]
}
 801255a:	bf00      	nop
 801255c:	bf00      	nop
 801255e:	e7fd      	b.n	801255c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012560:	4b07      	ldr	r3, [pc, #28]	@ (8012580 <vTaskPlaceOnEventList+0x4c>)
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	3318      	adds	r3, #24
 8012566:	4619      	mov	r1, r3
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f7fe fda4 	bl	80110b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801256e:	2101      	movs	r1, #1
 8012570:	6838      	ldr	r0, [r7, #0]
 8012572:	f000 fa7b 	bl	8012a6c <prvAddCurrentTaskToDelayedList>
}
 8012576:	bf00      	nop
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop
 8012580:	20000d9c 	.word	0x20000d9c

08012584 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b086      	sub	sp, #24
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	68db      	ldr	r3, [r3, #12]
 8012590:	68db      	ldr	r3, [r3, #12]
 8012592:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d10d      	bne.n	80125b6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 801259a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801259e:	b672      	cpsid	i
 80125a0:	f383 8811 	msr	BASEPRI, r3
 80125a4:	f3bf 8f6f 	isb	sy
 80125a8:	f3bf 8f4f 	dsb	sy
 80125ac:	b662      	cpsie	i
 80125ae:	60fb      	str	r3, [r7, #12]
}
 80125b0:	bf00      	nop
 80125b2:	bf00      	nop
 80125b4:	e7fd      	b.n	80125b2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	3318      	adds	r3, #24
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7fe fdb4 	bl	8011128 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80125c0:	4b1d      	ldr	r3, [pc, #116]	@ (8012638 <xTaskRemoveFromEventList+0xb4>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d11c      	bne.n	8012602 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	3304      	adds	r3, #4
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7fe fdab 	bl	8011128 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80125d2:	693b      	ldr	r3, [r7, #16]
 80125d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125d6:	2201      	movs	r2, #1
 80125d8:	409a      	lsls	r2, r3
 80125da:	4b18      	ldr	r3, [pc, #96]	@ (801263c <xTaskRemoveFromEventList+0xb8>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	4313      	orrs	r3, r2
 80125e0:	4a16      	ldr	r2, [pc, #88]	@ (801263c <xTaskRemoveFromEventList+0xb8>)
 80125e2:	6013      	str	r3, [r2, #0]
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125e8:	4613      	mov	r3, r2
 80125ea:	009b      	lsls	r3, r3, #2
 80125ec:	4413      	add	r3, r2
 80125ee:	009b      	lsls	r3, r3, #2
 80125f0:	4a13      	ldr	r2, [pc, #76]	@ (8012640 <xTaskRemoveFromEventList+0xbc>)
 80125f2:	441a      	add	r2, r3
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	3304      	adds	r3, #4
 80125f8:	4619      	mov	r1, r3
 80125fa:	4610      	mov	r0, r2
 80125fc:	f7fe fd37 	bl	801106e <vListInsertEnd>
 8012600:	e005      	b.n	801260e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012602:	693b      	ldr	r3, [r7, #16]
 8012604:	3318      	adds	r3, #24
 8012606:	4619      	mov	r1, r3
 8012608:	480e      	ldr	r0, [pc, #56]	@ (8012644 <xTaskRemoveFromEventList+0xc0>)
 801260a:	f7fe fd30 	bl	801106e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801260e:	693b      	ldr	r3, [r7, #16]
 8012610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012612:	4b0d      	ldr	r3, [pc, #52]	@ (8012648 <xTaskRemoveFromEventList+0xc4>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012618:	429a      	cmp	r2, r3
 801261a:	d905      	bls.n	8012628 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801261c:	2301      	movs	r3, #1
 801261e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012620:	4b0a      	ldr	r3, [pc, #40]	@ (801264c <xTaskRemoveFromEventList+0xc8>)
 8012622:	2201      	movs	r2, #1
 8012624:	601a      	str	r2, [r3, #0]
 8012626:	e001      	b.n	801262c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8012628:	2300      	movs	r3, #0
 801262a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801262c:	697b      	ldr	r3, [r7, #20]
}
 801262e:	4618      	mov	r0, r3
 8012630:	3718      	adds	r7, #24
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}
 8012636:	bf00      	nop
 8012638:	20000ec4 	.word	0x20000ec4
 801263c:	20000ea4 	.word	0x20000ea4
 8012640:	20000da0 	.word	0x20000da0
 8012644:	20000e5c 	.word	0x20000e5c
 8012648:	20000d9c 	.word	0x20000d9c
 801264c:	20000eb0 	.word	0x20000eb0

08012650 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012650:	b480      	push	{r7}
 8012652:	b083      	sub	sp, #12
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012658:	4b06      	ldr	r3, [pc, #24]	@ (8012674 <vTaskInternalSetTimeOutState+0x24>)
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012660:	4b05      	ldr	r3, [pc, #20]	@ (8012678 <vTaskInternalSetTimeOutState+0x28>)
 8012662:	681a      	ldr	r2, [r3, #0]
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	605a      	str	r2, [r3, #4]
}
 8012668:	bf00      	nop
 801266a:	370c      	adds	r7, #12
 801266c:	46bd      	mov	sp, r7
 801266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012672:	4770      	bx	lr
 8012674:	20000eb4 	.word	0x20000eb4
 8012678:	20000ea0 	.word	0x20000ea0

0801267c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b088      	sub	sp, #32
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
 8012684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d10d      	bne.n	80126a8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 801268c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012690:	b672      	cpsid	i
 8012692:	f383 8811 	msr	BASEPRI, r3
 8012696:	f3bf 8f6f 	isb	sy
 801269a:	f3bf 8f4f 	dsb	sy
 801269e:	b662      	cpsie	i
 80126a0:	613b      	str	r3, [r7, #16]
}
 80126a2:	bf00      	nop
 80126a4:	bf00      	nop
 80126a6:	e7fd      	b.n	80126a4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d10d      	bne.n	80126ca <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80126ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126b2:	b672      	cpsid	i
 80126b4:	f383 8811 	msr	BASEPRI, r3
 80126b8:	f3bf 8f6f 	isb	sy
 80126bc:	f3bf 8f4f 	dsb	sy
 80126c0:	b662      	cpsie	i
 80126c2:	60fb      	str	r3, [r7, #12]
}
 80126c4:	bf00      	nop
 80126c6:	bf00      	nop
 80126c8:	e7fd      	b.n	80126c6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80126ca:	f000 fb47 	bl	8012d5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80126ce:	4b1d      	ldr	r3, [pc, #116]	@ (8012744 <xTaskCheckForTimeOut+0xc8>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	69ba      	ldr	r2, [r7, #24]
 80126da:	1ad3      	subs	r3, r2, r3
 80126dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80126e6:	d102      	bne.n	80126ee <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80126e8:	2300      	movs	r3, #0
 80126ea:	61fb      	str	r3, [r7, #28]
 80126ec:	e023      	b.n	8012736 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681a      	ldr	r2, [r3, #0]
 80126f2:	4b15      	ldr	r3, [pc, #84]	@ (8012748 <xTaskCheckForTimeOut+0xcc>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d007      	beq.n	801270a <xTaskCheckForTimeOut+0x8e>
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	69ba      	ldr	r2, [r7, #24]
 8012700:	429a      	cmp	r2, r3
 8012702:	d302      	bcc.n	801270a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012704:	2301      	movs	r3, #1
 8012706:	61fb      	str	r3, [r7, #28]
 8012708:	e015      	b.n	8012736 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	697a      	ldr	r2, [r7, #20]
 8012710:	429a      	cmp	r2, r3
 8012712:	d20b      	bcs.n	801272c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012714:	683b      	ldr	r3, [r7, #0]
 8012716:	681a      	ldr	r2, [r3, #0]
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	1ad2      	subs	r2, r2, r3
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f7ff ff95 	bl	8012650 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012726:	2300      	movs	r3, #0
 8012728:	61fb      	str	r3, [r7, #28]
 801272a:	e004      	b.n	8012736 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	2200      	movs	r2, #0
 8012730:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012732:	2301      	movs	r3, #1
 8012734:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012736:	f000 fb47 	bl	8012dc8 <vPortExitCritical>

	return xReturn;
 801273a:	69fb      	ldr	r3, [r7, #28]
}
 801273c:	4618      	mov	r0, r3
 801273e:	3720      	adds	r7, #32
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}
 8012744:	20000ea0 	.word	0x20000ea0
 8012748:	20000eb4 	.word	0x20000eb4

0801274c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801274c:	b480      	push	{r7}
 801274e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012750:	4b03      	ldr	r3, [pc, #12]	@ (8012760 <vTaskMissedYield+0x14>)
 8012752:	2201      	movs	r2, #1
 8012754:	601a      	str	r2, [r3, #0]
}
 8012756:	bf00      	nop
 8012758:	46bd      	mov	sp, r7
 801275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275e:	4770      	bx	lr
 8012760:	20000eb0 	.word	0x20000eb0

08012764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b082      	sub	sp, #8
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801276c:	f000 f854 	bl	8012818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012770:	4b07      	ldr	r3, [pc, #28]	@ (8012790 <prvIdleTask+0x2c>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	2b01      	cmp	r3, #1
 8012776:	d907      	bls.n	8012788 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012778:	4b06      	ldr	r3, [pc, #24]	@ (8012794 <prvIdleTask+0x30>)
 801277a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801277e:	601a      	str	r2, [r3, #0]
 8012780:	f3bf 8f4f 	dsb	sy
 8012784:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012788:	f7ed feba 	bl	8000500 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801278c:	e7ee      	b.n	801276c <prvIdleTask+0x8>
 801278e:	bf00      	nop
 8012790:	20000da0 	.word	0x20000da0
 8012794:	e000ed04 	.word	0xe000ed04

08012798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801279e:	2300      	movs	r3, #0
 80127a0:	607b      	str	r3, [r7, #4]
 80127a2:	e00c      	b.n	80127be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80127a4:	687a      	ldr	r2, [r7, #4]
 80127a6:	4613      	mov	r3, r2
 80127a8:	009b      	lsls	r3, r3, #2
 80127aa:	4413      	add	r3, r2
 80127ac:	009b      	lsls	r3, r3, #2
 80127ae:	4a12      	ldr	r2, [pc, #72]	@ (80127f8 <prvInitialiseTaskLists+0x60>)
 80127b0:	4413      	add	r3, r2
 80127b2:	4618      	mov	r0, r3
 80127b4:	f7fe fc2e 	bl	8011014 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	3301      	adds	r3, #1
 80127bc:	607b      	str	r3, [r7, #4]
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2b06      	cmp	r3, #6
 80127c2:	d9ef      	bls.n	80127a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80127c4:	480d      	ldr	r0, [pc, #52]	@ (80127fc <prvInitialiseTaskLists+0x64>)
 80127c6:	f7fe fc25 	bl	8011014 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80127ca:	480d      	ldr	r0, [pc, #52]	@ (8012800 <prvInitialiseTaskLists+0x68>)
 80127cc:	f7fe fc22 	bl	8011014 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80127d0:	480c      	ldr	r0, [pc, #48]	@ (8012804 <prvInitialiseTaskLists+0x6c>)
 80127d2:	f7fe fc1f 	bl	8011014 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80127d6:	480c      	ldr	r0, [pc, #48]	@ (8012808 <prvInitialiseTaskLists+0x70>)
 80127d8:	f7fe fc1c 	bl	8011014 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80127dc:	480b      	ldr	r0, [pc, #44]	@ (801280c <prvInitialiseTaskLists+0x74>)
 80127de:	f7fe fc19 	bl	8011014 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80127e2:	4b0b      	ldr	r3, [pc, #44]	@ (8012810 <prvInitialiseTaskLists+0x78>)
 80127e4:	4a05      	ldr	r2, [pc, #20]	@ (80127fc <prvInitialiseTaskLists+0x64>)
 80127e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80127e8:	4b0a      	ldr	r3, [pc, #40]	@ (8012814 <prvInitialiseTaskLists+0x7c>)
 80127ea:	4a05      	ldr	r2, [pc, #20]	@ (8012800 <prvInitialiseTaskLists+0x68>)
 80127ec:	601a      	str	r2, [r3, #0]
}
 80127ee:	bf00      	nop
 80127f0:	3708      	adds	r7, #8
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
 80127f6:	bf00      	nop
 80127f8:	20000da0 	.word	0x20000da0
 80127fc:	20000e2c 	.word	0x20000e2c
 8012800:	20000e40 	.word	0x20000e40
 8012804:	20000e5c 	.word	0x20000e5c
 8012808:	20000e70 	.word	0x20000e70
 801280c:	20000e88 	.word	0x20000e88
 8012810:	20000e54 	.word	0x20000e54
 8012814:	20000e58 	.word	0x20000e58

08012818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801281e:	e019      	b.n	8012854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012820:	f000 fa9c 	bl	8012d5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012824:	4b10      	ldr	r3, [pc, #64]	@ (8012868 <prvCheckTasksWaitingTermination+0x50>)
 8012826:	68db      	ldr	r3, [r3, #12]
 8012828:	68db      	ldr	r3, [r3, #12]
 801282a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	3304      	adds	r3, #4
 8012830:	4618      	mov	r0, r3
 8012832:	f7fe fc79 	bl	8011128 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012836:	4b0d      	ldr	r3, [pc, #52]	@ (801286c <prvCheckTasksWaitingTermination+0x54>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	3b01      	subs	r3, #1
 801283c:	4a0b      	ldr	r2, [pc, #44]	@ (801286c <prvCheckTasksWaitingTermination+0x54>)
 801283e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012840:	4b0b      	ldr	r3, [pc, #44]	@ (8012870 <prvCheckTasksWaitingTermination+0x58>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	3b01      	subs	r3, #1
 8012846:	4a0a      	ldr	r2, [pc, #40]	@ (8012870 <prvCheckTasksWaitingTermination+0x58>)
 8012848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801284a:	f000 fabd 	bl	8012dc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801284e:	6878      	ldr	r0, [r7, #4]
 8012850:	f000 f810 	bl	8012874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012854:	4b06      	ldr	r3, [pc, #24]	@ (8012870 <prvCheckTasksWaitingTermination+0x58>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d1e1      	bne.n	8012820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801285c:	bf00      	nop
 801285e:	bf00      	nop
 8012860:	3708      	adds	r7, #8
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
 8012866:	bf00      	nop
 8012868:	20000e70 	.word	0x20000e70
 801286c:	20000e9c 	.word	0x20000e9c
 8012870:	20000e84 	.word	0x20000e84

08012874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012874:	b580      	push	{r7, lr}
 8012876:	b084      	sub	sp, #16
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8012882:	2b00      	cmp	r3, #0
 8012884:	d108      	bne.n	8012898 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801288a:	4618      	mov	r0, r3
 801288c:	f000 fc66 	bl	801315c <vPortFree>
				vPortFree( pxTCB );
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	f000 fc63 	bl	801315c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012896:	e01b      	b.n	80128d0 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801289e:	2b01      	cmp	r3, #1
 80128a0:	d103      	bne.n	80128aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 fc5a 	bl	801315c <vPortFree>
	}
 80128a8:	e012      	b.n	80128d0 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80128b0:	2b02      	cmp	r3, #2
 80128b2:	d00d      	beq.n	80128d0 <prvDeleteTCB+0x5c>
	__asm volatile
 80128b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128b8:	b672      	cpsid	i
 80128ba:	f383 8811 	msr	BASEPRI, r3
 80128be:	f3bf 8f6f 	isb	sy
 80128c2:	f3bf 8f4f 	dsb	sy
 80128c6:	b662      	cpsie	i
 80128c8:	60fb      	str	r3, [r7, #12]
}
 80128ca:	bf00      	nop
 80128cc:	bf00      	nop
 80128ce:	e7fd      	b.n	80128cc <prvDeleteTCB+0x58>
	}
 80128d0:	bf00      	nop
 80128d2:	3710      	adds	r7, #16
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}

080128d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80128d8:	b480      	push	{r7}
 80128da:	b083      	sub	sp, #12
 80128dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128de:	4b0c      	ldr	r3, [pc, #48]	@ (8012910 <prvResetNextTaskUnblockTime+0x38>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d104      	bne.n	80128f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80128e8:	4b0a      	ldr	r3, [pc, #40]	@ (8012914 <prvResetNextTaskUnblockTime+0x3c>)
 80128ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80128ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80128f0:	e008      	b.n	8012904 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128f2:	4b07      	ldr	r3, [pc, #28]	@ (8012910 <prvResetNextTaskUnblockTime+0x38>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	68db      	ldr	r3, [r3, #12]
 80128f8:	68db      	ldr	r3, [r3, #12]
 80128fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	4a04      	ldr	r2, [pc, #16]	@ (8012914 <prvResetNextTaskUnblockTime+0x3c>)
 8012902:	6013      	str	r3, [r2, #0]
}
 8012904:	bf00      	nop
 8012906:	370c      	adds	r7, #12
 8012908:	46bd      	mov	sp, r7
 801290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290e:	4770      	bx	lr
 8012910:	20000e54 	.word	0x20000e54
 8012914:	20000ebc 	.word	0x20000ebc

08012918 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801291e:	4b0b      	ldr	r3, [pc, #44]	@ (801294c <xTaskGetSchedulerState+0x34>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d102      	bne.n	801292c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012926:	2301      	movs	r3, #1
 8012928:	607b      	str	r3, [r7, #4]
 801292a:	e008      	b.n	801293e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801292c:	4b08      	ldr	r3, [pc, #32]	@ (8012950 <xTaskGetSchedulerState+0x38>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d102      	bne.n	801293a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012934:	2302      	movs	r3, #2
 8012936:	607b      	str	r3, [r7, #4]
 8012938:	e001      	b.n	801293e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801293a:	2300      	movs	r3, #0
 801293c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801293e:	687b      	ldr	r3, [r7, #4]
	}
 8012940:	4618      	mov	r0, r3
 8012942:	370c      	adds	r7, #12
 8012944:	46bd      	mov	sp, r7
 8012946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294a:	4770      	bx	lr
 801294c:	20000ea8 	.word	0x20000ea8
 8012950:	20000ec4 	.word	0x20000ec4

08012954 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012954:	b580      	push	{r7, lr}
 8012956:	b086      	sub	sp, #24
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012960:	2300      	movs	r3, #0
 8012962:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d074      	beq.n	8012a54 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801296a:	4b3d      	ldr	r3, [pc, #244]	@ (8012a60 <xTaskPriorityDisinherit+0x10c>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	693a      	ldr	r2, [r7, #16]
 8012970:	429a      	cmp	r2, r3
 8012972:	d00d      	beq.n	8012990 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8012974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012978:	b672      	cpsid	i
 801297a:	f383 8811 	msr	BASEPRI, r3
 801297e:	f3bf 8f6f 	isb	sy
 8012982:	f3bf 8f4f 	dsb	sy
 8012986:	b662      	cpsie	i
 8012988:	60fb      	str	r3, [r7, #12]
}
 801298a:	bf00      	nop
 801298c:	bf00      	nop
 801298e:	e7fd      	b.n	801298c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012994:	2b00      	cmp	r3, #0
 8012996:	d10d      	bne.n	80129b4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8012998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801299c:	b672      	cpsid	i
 801299e:	f383 8811 	msr	BASEPRI, r3
 80129a2:	f3bf 8f6f 	isb	sy
 80129a6:	f3bf 8f4f 	dsb	sy
 80129aa:	b662      	cpsie	i
 80129ac:	60bb      	str	r3, [r7, #8]
}
 80129ae:	bf00      	nop
 80129b0:	bf00      	nop
 80129b2:	e7fd      	b.n	80129b0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80129b8:	1e5a      	subs	r2, r3, #1
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d044      	beq.n	8012a54 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d140      	bne.n	8012a54 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	3304      	adds	r3, #4
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7fe fba6 	bl	8011128 <uxListRemove>
 80129dc:	4603      	mov	r3, r0
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d115      	bne.n	8012a0e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80129e2:	693b      	ldr	r3, [r7, #16]
 80129e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129e6:	491f      	ldr	r1, [pc, #124]	@ (8012a64 <xTaskPriorityDisinherit+0x110>)
 80129e8:	4613      	mov	r3, r2
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	4413      	add	r3, r2
 80129ee:	009b      	lsls	r3, r3, #2
 80129f0:	440b      	add	r3, r1
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d10a      	bne.n	8012a0e <xTaskPriorityDisinherit+0xba>
 80129f8:	693b      	ldr	r3, [r7, #16]
 80129fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129fc:	2201      	movs	r2, #1
 80129fe:	fa02 f303 	lsl.w	r3, r2, r3
 8012a02:	43da      	mvns	r2, r3
 8012a04:	4b18      	ldr	r3, [pc, #96]	@ (8012a68 <xTaskPriorityDisinherit+0x114>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	4013      	ands	r3, r2
 8012a0a:	4a17      	ldr	r2, [pc, #92]	@ (8012a68 <xTaskPriorityDisinherit+0x114>)
 8012a0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a1a:	f1c3 0207 	rsb	r2, r3, #7
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a26:	2201      	movs	r2, #1
 8012a28:	409a      	lsls	r2, r3
 8012a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8012a68 <xTaskPriorityDisinherit+0x114>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	4313      	orrs	r3, r2
 8012a30:	4a0d      	ldr	r2, [pc, #52]	@ (8012a68 <xTaskPriorityDisinherit+0x114>)
 8012a32:	6013      	str	r3, [r2, #0]
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a38:	4613      	mov	r3, r2
 8012a3a:	009b      	lsls	r3, r3, #2
 8012a3c:	4413      	add	r3, r2
 8012a3e:	009b      	lsls	r3, r3, #2
 8012a40:	4a08      	ldr	r2, [pc, #32]	@ (8012a64 <xTaskPriorityDisinherit+0x110>)
 8012a42:	441a      	add	r2, r3
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	3304      	adds	r3, #4
 8012a48:	4619      	mov	r1, r3
 8012a4a:	4610      	mov	r0, r2
 8012a4c:	f7fe fb0f 	bl	801106e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012a50:	2301      	movs	r3, #1
 8012a52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012a54:	697b      	ldr	r3, [r7, #20]
	}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3718      	adds	r7, #24
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	20000d9c 	.word	0x20000d9c
 8012a64:	20000da0 	.word	0x20000da0
 8012a68:	20000ea4 	.word	0x20000ea4

08012a6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b084      	sub	sp, #16
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012a76:	4b29      	ldr	r3, [pc, #164]	@ (8012b1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a7c:	4b28      	ldr	r3, [pc, #160]	@ (8012b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	3304      	adds	r3, #4
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7fe fb50 	bl	8011128 <uxListRemove>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d10b      	bne.n	8012aa6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012a8e:	4b24      	ldr	r3, [pc, #144]	@ (8012b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a94:	2201      	movs	r2, #1
 8012a96:	fa02 f303 	lsl.w	r3, r2, r3
 8012a9a:	43da      	mvns	r2, r3
 8012a9c:	4b21      	ldr	r3, [pc, #132]	@ (8012b24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	4013      	ands	r3, r2
 8012aa2:	4a20      	ldr	r2, [pc, #128]	@ (8012b24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012aa4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012aac:	d10a      	bne.n	8012ac4 <prvAddCurrentTaskToDelayedList+0x58>
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d007      	beq.n	8012ac4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8012b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	3304      	adds	r3, #4
 8012aba:	4619      	mov	r1, r3
 8012abc:	481a      	ldr	r0, [pc, #104]	@ (8012b28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012abe:	f7fe fad6 	bl	801106e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012ac2:	e026      	b.n	8012b12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012ac4:	68fa      	ldr	r2, [r7, #12]
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	4413      	add	r3, r2
 8012aca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012acc:	4b14      	ldr	r3, [pc, #80]	@ (8012b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	68ba      	ldr	r2, [r7, #8]
 8012ad2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012ad4:	68ba      	ldr	r2, [r7, #8]
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	429a      	cmp	r2, r3
 8012ada:	d209      	bcs.n	8012af0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012adc:	4b13      	ldr	r3, [pc, #76]	@ (8012b2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8012ade:	681a      	ldr	r2, [r3, #0]
 8012ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8012b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	3304      	adds	r3, #4
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	4610      	mov	r0, r2
 8012aea:	f7fe fae4 	bl	80110b6 <vListInsert>
}
 8012aee:	e010      	b.n	8012b12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012af0:	4b0f      	ldr	r3, [pc, #60]	@ (8012b30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012af2:	681a      	ldr	r2, [r3, #0]
 8012af4:	4b0a      	ldr	r3, [pc, #40]	@ (8012b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	3304      	adds	r3, #4
 8012afa:	4619      	mov	r1, r3
 8012afc:	4610      	mov	r0, r2
 8012afe:	f7fe fada 	bl	80110b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012b02:	4b0c      	ldr	r3, [pc, #48]	@ (8012b34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	68ba      	ldr	r2, [r7, #8]
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d202      	bcs.n	8012b12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012b0c:	4a09      	ldr	r2, [pc, #36]	@ (8012b34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	6013      	str	r3, [r2, #0]
}
 8012b12:	bf00      	nop
 8012b14:	3710      	adds	r7, #16
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	20000ea0 	.word	0x20000ea0
 8012b20:	20000d9c 	.word	0x20000d9c
 8012b24:	20000ea4 	.word	0x20000ea4
 8012b28:	20000e88 	.word	0x20000e88
 8012b2c:	20000e58 	.word	0x20000e58
 8012b30:	20000e54 	.word	0x20000e54
 8012b34:	20000ebc 	.word	0x20000ebc

08012b38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012b38:	b480      	push	{r7}
 8012b3a:	b085      	sub	sp, #20
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	60b9      	str	r1, [r7, #8]
 8012b42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	3b04      	subs	r3, #4
 8012b48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	3b04      	subs	r3, #4
 8012b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	f023 0201 	bic.w	r2, r3, #1
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	3b04      	subs	r3, #4
 8012b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012b68:	4a0c      	ldr	r2, [pc, #48]	@ (8012b9c <pxPortInitialiseStack+0x64>)
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	3b14      	subs	r3, #20
 8012b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012b74:	687a      	ldr	r2, [r7, #4]
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	3b04      	subs	r3, #4
 8012b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	f06f 0202 	mvn.w	r2, #2
 8012b86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	3b20      	subs	r3, #32
 8012b8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	3714      	adds	r7, #20
 8012b94:	46bd      	mov	sp, r7
 8012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9a:	4770      	bx	lr
 8012b9c:	08012ba1 	.word	0x08012ba1

08012ba0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012ba0:	b480      	push	{r7}
 8012ba2:	b085      	sub	sp, #20
 8012ba4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012baa:	4b15      	ldr	r3, [pc, #84]	@ (8012c00 <prvTaskExitError+0x60>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012bb2:	d00d      	beq.n	8012bd0 <prvTaskExitError+0x30>
	__asm volatile
 8012bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bb8:	b672      	cpsid	i
 8012bba:	f383 8811 	msr	BASEPRI, r3
 8012bbe:	f3bf 8f6f 	isb	sy
 8012bc2:	f3bf 8f4f 	dsb	sy
 8012bc6:	b662      	cpsie	i
 8012bc8:	60fb      	str	r3, [r7, #12]
}
 8012bca:	bf00      	nop
 8012bcc:	bf00      	nop
 8012bce:	e7fd      	b.n	8012bcc <prvTaskExitError+0x2c>
	__asm volatile
 8012bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bd4:	b672      	cpsid	i
 8012bd6:	f383 8811 	msr	BASEPRI, r3
 8012bda:	f3bf 8f6f 	isb	sy
 8012bde:	f3bf 8f4f 	dsb	sy
 8012be2:	b662      	cpsie	i
 8012be4:	60bb      	str	r3, [r7, #8]
}
 8012be6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012be8:	bf00      	nop
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d0fc      	beq.n	8012bea <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012bf0:	bf00      	nop
 8012bf2:	bf00      	nop
 8012bf4:	3714      	adds	r7, #20
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfc:	4770      	bx	lr
 8012bfe:	bf00      	nop
 8012c00:	2000002c 	.word	0x2000002c
	...

08012c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012c10:	4b07      	ldr	r3, [pc, #28]	@ (8012c30 <pxCurrentTCBConst2>)
 8012c12:	6819      	ldr	r1, [r3, #0]
 8012c14:	6808      	ldr	r0, [r1, #0]
 8012c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c1a:	f380 8809 	msr	PSP, r0
 8012c1e:	f3bf 8f6f 	isb	sy
 8012c22:	f04f 0000 	mov.w	r0, #0
 8012c26:	f380 8811 	msr	BASEPRI, r0
 8012c2a:	4770      	bx	lr
 8012c2c:	f3af 8000 	nop.w

08012c30 <pxCurrentTCBConst2>:
 8012c30:	20000d9c 	.word	0x20000d9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012c34:	bf00      	nop
 8012c36:	bf00      	nop

08012c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012c38:	4808      	ldr	r0, [pc, #32]	@ (8012c5c <prvPortStartFirstTask+0x24>)
 8012c3a:	6800      	ldr	r0, [r0, #0]
 8012c3c:	6800      	ldr	r0, [r0, #0]
 8012c3e:	f380 8808 	msr	MSP, r0
 8012c42:	f04f 0000 	mov.w	r0, #0
 8012c46:	f380 8814 	msr	CONTROL, r0
 8012c4a:	b662      	cpsie	i
 8012c4c:	b661      	cpsie	f
 8012c4e:	f3bf 8f4f 	dsb	sy
 8012c52:	f3bf 8f6f 	isb	sy
 8012c56:	df00      	svc	0
 8012c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012c5a:	bf00      	nop
 8012c5c:	e000ed08 	.word	0xe000ed08

08012c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b084      	sub	sp, #16
 8012c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012c66:	4b37      	ldr	r3, [pc, #220]	@ (8012d44 <xPortStartScheduler+0xe4>)
 8012c68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	781b      	ldrb	r3, [r3, #0]
 8012c6e:	b2db      	uxtb	r3, r3
 8012c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	22ff      	movs	r2, #255	@ 0xff
 8012c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	781b      	ldrb	r3, [r3, #0]
 8012c7c:	b2db      	uxtb	r3, r3
 8012c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012c80:	78fb      	ldrb	r3, [r7, #3]
 8012c82:	b2db      	uxtb	r3, r3
 8012c84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012c88:	b2da      	uxtb	r2, r3
 8012c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8012d48 <xPortStartScheduler+0xe8>)
 8012c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8012d4c <xPortStartScheduler+0xec>)
 8012c90:	2207      	movs	r2, #7
 8012c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012c94:	e009      	b.n	8012caa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012c96:	4b2d      	ldr	r3, [pc, #180]	@ (8012d4c <xPortStartScheduler+0xec>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	3b01      	subs	r3, #1
 8012c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8012d4c <xPortStartScheduler+0xec>)
 8012c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012ca0:	78fb      	ldrb	r3, [r7, #3]
 8012ca2:	b2db      	uxtb	r3, r3
 8012ca4:	005b      	lsls	r3, r3, #1
 8012ca6:	b2db      	uxtb	r3, r3
 8012ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012caa:	78fb      	ldrb	r3, [r7, #3]
 8012cac:	b2db      	uxtb	r3, r3
 8012cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012cb2:	2b80      	cmp	r3, #128	@ 0x80
 8012cb4:	d0ef      	beq.n	8012c96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012cb6:	4b25      	ldr	r3, [pc, #148]	@ (8012d4c <xPortStartScheduler+0xec>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	f1c3 0307 	rsb	r3, r3, #7
 8012cbe:	2b04      	cmp	r3, #4
 8012cc0:	d00d      	beq.n	8012cde <xPortStartScheduler+0x7e>
	__asm volatile
 8012cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cc6:	b672      	cpsid	i
 8012cc8:	f383 8811 	msr	BASEPRI, r3
 8012ccc:	f3bf 8f6f 	isb	sy
 8012cd0:	f3bf 8f4f 	dsb	sy
 8012cd4:	b662      	cpsie	i
 8012cd6:	60bb      	str	r3, [r7, #8]
}
 8012cd8:	bf00      	nop
 8012cda:	bf00      	nop
 8012cdc:	e7fd      	b.n	8012cda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012cde:	4b1b      	ldr	r3, [pc, #108]	@ (8012d4c <xPortStartScheduler+0xec>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	021b      	lsls	r3, r3, #8
 8012ce4:	4a19      	ldr	r2, [pc, #100]	@ (8012d4c <xPortStartScheduler+0xec>)
 8012ce6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012ce8:	4b18      	ldr	r3, [pc, #96]	@ (8012d4c <xPortStartScheduler+0xec>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012cf0:	4a16      	ldr	r2, [pc, #88]	@ (8012d4c <xPortStartScheduler+0xec>)
 8012cf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	b2da      	uxtb	r2, r3
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012cfc:	4b14      	ldr	r3, [pc, #80]	@ (8012d50 <xPortStartScheduler+0xf0>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	4a13      	ldr	r2, [pc, #76]	@ (8012d50 <xPortStartScheduler+0xf0>)
 8012d02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012d06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012d08:	4b11      	ldr	r3, [pc, #68]	@ (8012d50 <xPortStartScheduler+0xf0>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	4a10      	ldr	r2, [pc, #64]	@ (8012d50 <xPortStartScheduler+0xf0>)
 8012d0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012d12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012d14:	f000 f8dc 	bl	8012ed0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012d18:	4b0e      	ldr	r3, [pc, #56]	@ (8012d54 <xPortStartScheduler+0xf4>)
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012d1e:	f000 f8fb 	bl	8012f18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012d22:	4b0d      	ldr	r3, [pc, #52]	@ (8012d58 <xPortStartScheduler+0xf8>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	4a0c      	ldr	r2, [pc, #48]	@ (8012d58 <xPortStartScheduler+0xf8>)
 8012d28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8012d2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012d2e:	f7ff ff83 	bl	8012c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012d32:	f7ff fb7b 	bl	801242c <vTaskSwitchContext>
	prvTaskExitError();
 8012d36:	f7ff ff33 	bl	8012ba0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012d3a:	2300      	movs	r3, #0
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3710      	adds	r7, #16
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	e000e400 	.word	0xe000e400
 8012d48:	20000ec8 	.word	0x20000ec8
 8012d4c:	20000ecc 	.word	0x20000ecc
 8012d50:	e000ed20 	.word	0xe000ed20
 8012d54:	2000002c 	.word	0x2000002c
 8012d58:	e000ef34 	.word	0xe000ef34

08012d5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	b083      	sub	sp, #12
 8012d60:	af00      	add	r7, sp, #0
	__asm volatile
 8012d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d66:	b672      	cpsid	i
 8012d68:	f383 8811 	msr	BASEPRI, r3
 8012d6c:	f3bf 8f6f 	isb	sy
 8012d70:	f3bf 8f4f 	dsb	sy
 8012d74:	b662      	cpsie	i
 8012d76:	607b      	str	r3, [r7, #4]
}
 8012d78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012d7a:	4b11      	ldr	r3, [pc, #68]	@ (8012dc0 <vPortEnterCritical+0x64>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	3301      	adds	r3, #1
 8012d80:	4a0f      	ldr	r2, [pc, #60]	@ (8012dc0 <vPortEnterCritical+0x64>)
 8012d82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012d84:	4b0e      	ldr	r3, [pc, #56]	@ (8012dc0 <vPortEnterCritical+0x64>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	d112      	bne.n	8012db2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8012dc4 <vPortEnterCritical+0x68>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	b2db      	uxtb	r3, r3
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d00d      	beq.n	8012db2 <vPortEnterCritical+0x56>
	__asm volatile
 8012d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d9a:	b672      	cpsid	i
 8012d9c:	f383 8811 	msr	BASEPRI, r3
 8012da0:	f3bf 8f6f 	isb	sy
 8012da4:	f3bf 8f4f 	dsb	sy
 8012da8:	b662      	cpsie	i
 8012daa:	603b      	str	r3, [r7, #0]
}
 8012dac:	bf00      	nop
 8012dae:	bf00      	nop
 8012db0:	e7fd      	b.n	8012dae <vPortEnterCritical+0x52>
	}
}
 8012db2:	bf00      	nop
 8012db4:	370c      	adds	r7, #12
 8012db6:	46bd      	mov	sp, r7
 8012db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop
 8012dc0:	2000002c 	.word	0x2000002c
 8012dc4:	e000ed04 	.word	0xe000ed04

08012dc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012dc8:	b480      	push	{r7}
 8012dca:	b083      	sub	sp, #12
 8012dcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012dce:	4b13      	ldr	r3, [pc, #76]	@ (8012e1c <vPortExitCritical+0x54>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d10d      	bne.n	8012df2 <vPortExitCritical+0x2a>
	__asm volatile
 8012dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dda:	b672      	cpsid	i
 8012ddc:	f383 8811 	msr	BASEPRI, r3
 8012de0:	f3bf 8f6f 	isb	sy
 8012de4:	f3bf 8f4f 	dsb	sy
 8012de8:	b662      	cpsie	i
 8012dea:	607b      	str	r3, [r7, #4]
}
 8012dec:	bf00      	nop
 8012dee:	bf00      	nop
 8012df0:	e7fd      	b.n	8012dee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012df2:	4b0a      	ldr	r3, [pc, #40]	@ (8012e1c <vPortExitCritical+0x54>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	3b01      	subs	r3, #1
 8012df8:	4a08      	ldr	r2, [pc, #32]	@ (8012e1c <vPortExitCritical+0x54>)
 8012dfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012dfc:	4b07      	ldr	r3, [pc, #28]	@ (8012e1c <vPortExitCritical+0x54>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d105      	bne.n	8012e10 <vPortExitCritical+0x48>
 8012e04:	2300      	movs	r3, #0
 8012e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	f383 8811 	msr	BASEPRI, r3
}
 8012e0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012e10:	bf00      	nop
 8012e12:	370c      	adds	r7, #12
 8012e14:	46bd      	mov	sp, r7
 8012e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1a:	4770      	bx	lr
 8012e1c:	2000002c 	.word	0x2000002c

08012e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012e20:	f3ef 8009 	mrs	r0, PSP
 8012e24:	f3bf 8f6f 	isb	sy
 8012e28:	4b15      	ldr	r3, [pc, #84]	@ (8012e80 <pxCurrentTCBConst>)
 8012e2a:	681a      	ldr	r2, [r3, #0]
 8012e2c:	f01e 0f10 	tst.w	lr, #16
 8012e30:	bf08      	it	eq
 8012e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e3a:	6010      	str	r0, [r2, #0]
 8012e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012e40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012e44:	b672      	cpsid	i
 8012e46:	f380 8811 	msr	BASEPRI, r0
 8012e4a:	f3bf 8f4f 	dsb	sy
 8012e4e:	f3bf 8f6f 	isb	sy
 8012e52:	b662      	cpsie	i
 8012e54:	f7ff faea 	bl	801242c <vTaskSwitchContext>
 8012e58:	f04f 0000 	mov.w	r0, #0
 8012e5c:	f380 8811 	msr	BASEPRI, r0
 8012e60:	bc09      	pop	{r0, r3}
 8012e62:	6819      	ldr	r1, [r3, #0]
 8012e64:	6808      	ldr	r0, [r1, #0]
 8012e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e6a:	f01e 0f10 	tst.w	lr, #16
 8012e6e:	bf08      	it	eq
 8012e70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012e74:	f380 8809 	msr	PSP, r0
 8012e78:	f3bf 8f6f 	isb	sy
 8012e7c:	4770      	bx	lr
 8012e7e:	bf00      	nop

08012e80 <pxCurrentTCBConst>:
 8012e80:	20000d9c 	.word	0x20000d9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012e84:	bf00      	nop
 8012e86:	bf00      	nop

08012e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8012e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e92:	b672      	cpsid	i
 8012e94:	f383 8811 	msr	BASEPRI, r3
 8012e98:	f3bf 8f6f 	isb	sy
 8012e9c:	f3bf 8f4f 	dsb	sy
 8012ea0:	b662      	cpsie	i
 8012ea2:	607b      	str	r3, [r7, #4]
}
 8012ea4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012ea6:	f7ff fa05 	bl	80122b4 <xTaskIncrementTick>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d003      	beq.n	8012eb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012eb0:	4b06      	ldr	r3, [pc, #24]	@ (8012ecc <SysTick_Handler+0x44>)
 8012eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012eb6:	601a      	str	r2, [r3, #0]
 8012eb8:	2300      	movs	r3, #0
 8012eba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	f383 8811 	msr	BASEPRI, r3
}
 8012ec2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012ec4:	bf00      	nop
 8012ec6:	3708      	adds	r7, #8
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	e000ed04 	.word	0xe000ed04

08012ed0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8012f04 <vPortSetupTimerInterrupt+0x34>)
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012eda:	4b0b      	ldr	r3, [pc, #44]	@ (8012f08 <vPortSetupTimerInterrupt+0x38>)
 8012edc:	2200      	movs	r2, #0
 8012ede:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8012f0c <vPortSetupTimerInterrupt+0x3c>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8012f10 <vPortSetupTimerInterrupt+0x40>)
 8012ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8012eea:	099b      	lsrs	r3, r3, #6
 8012eec:	4a09      	ldr	r2, [pc, #36]	@ (8012f14 <vPortSetupTimerInterrupt+0x44>)
 8012eee:	3b01      	subs	r3, #1
 8012ef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012ef2:	4b04      	ldr	r3, [pc, #16]	@ (8012f04 <vPortSetupTimerInterrupt+0x34>)
 8012ef4:	2207      	movs	r2, #7
 8012ef6:	601a      	str	r2, [r3, #0]
}
 8012ef8:	bf00      	nop
 8012efa:	46bd      	mov	sp, r7
 8012efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f00:	4770      	bx	lr
 8012f02:	bf00      	nop
 8012f04:	e000e010 	.word	0xe000e010
 8012f08:	e000e018 	.word	0xe000e018
 8012f0c:	20000000 	.word	0x20000000
 8012f10:	10624dd3 	.word	0x10624dd3
 8012f14:	e000e014 	.word	0xe000e014

08012f18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012f18:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012f28 <vPortEnableVFP+0x10>
 8012f1c:	6801      	ldr	r1, [r0, #0]
 8012f1e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012f22:	6001      	str	r1, [r0, #0]
 8012f24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012f26:	bf00      	nop
 8012f28:	e000ed88 	.word	0xe000ed88

08012f2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012f2c:	b480      	push	{r7}
 8012f2e:	b085      	sub	sp, #20
 8012f30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012f32:	f3ef 8305 	mrs	r3, IPSR
 8012f36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	2b0f      	cmp	r3, #15
 8012f3c:	d917      	bls.n	8012f6e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8012fa8 <vPortValidateInterruptPriority+0x7c>)
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	4413      	add	r3, r2
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012f48:	4b18      	ldr	r3, [pc, #96]	@ (8012fac <vPortValidateInterruptPriority+0x80>)
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	7afa      	ldrb	r2, [r7, #11]
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d20d      	bcs.n	8012f6e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8012f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f56:	b672      	cpsid	i
 8012f58:	f383 8811 	msr	BASEPRI, r3
 8012f5c:	f3bf 8f6f 	isb	sy
 8012f60:	f3bf 8f4f 	dsb	sy
 8012f64:	b662      	cpsie	i
 8012f66:	607b      	str	r3, [r7, #4]
}
 8012f68:	bf00      	nop
 8012f6a:	bf00      	nop
 8012f6c:	e7fd      	b.n	8012f6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012f6e:	4b10      	ldr	r3, [pc, #64]	@ (8012fb0 <vPortValidateInterruptPriority+0x84>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012f76:	4b0f      	ldr	r3, [pc, #60]	@ (8012fb4 <vPortValidateInterruptPriority+0x88>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d90d      	bls.n	8012f9a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8012f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f82:	b672      	cpsid	i
 8012f84:	f383 8811 	msr	BASEPRI, r3
 8012f88:	f3bf 8f6f 	isb	sy
 8012f8c:	f3bf 8f4f 	dsb	sy
 8012f90:	b662      	cpsie	i
 8012f92:	603b      	str	r3, [r7, #0]
}
 8012f94:	bf00      	nop
 8012f96:	bf00      	nop
 8012f98:	e7fd      	b.n	8012f96 <vPortValidateInterruptPriority+0x6a>
	}
 8012f9a:	bf00      	nop
 8012f9c:	3714      	adds	r7, #20
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa4:	4770      	bx	lr
 8012fa6:	bf00      	nop
 8012fa8:	e000e3f0 	.word	0xe000e3f0
 8012fac:	20000ec8 	.word	0x20000ec8
 8012fb0:	e000ed0c 	.word	0xe000ed0c
 8012fb4:	20000ecc 	.word	0x20000ecc

08012fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b08a      	sub	sp, #40	@ 0x28
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012fc4:	f7ff f8a6 	bl	8012114 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8013148 <pvPortMalloc+0x190>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d101      	bne.n	8012fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012fd0:	f000 f924 	bl	801321c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012fd4:	4b5d      	ldr	r3, [pc, #372]	@ (801314c <pvPortMalloc+0x194>)
 8012fd6:	681a      	ldr	r2, [r3, #0]
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	4013      	ands	r3, r2
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	f040 8094 	bne.w	801310a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d020      	beq.n	801302a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8012fe8:	2208      	movs	r2, #8
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	4413      	add	r3, r2
 8012fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f003 0307 	and.w	r3, r3, #7
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d017      	beq.n	801302a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f023 0307 	bic.w	r3, r3, #7
 8013000:	3308      	adds	r3, #8
 8013002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f003 0307 	and.w	r3, r3, #7
 801300a:	2b00      	cmp	r3, #0
 801300c:	d00d      	beq.n	801302a <pvPortMalloc+0x72>
	__asm volatile
 801300e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013012:	b672      	cpsid	i
 8013014:	f383 8811 	msr	BASEPRI, r3
 8013018:	f3bf 8f6f 	isb	sy
 801301c:	f3bf 8f4f 	dsb	sy
 8013020:	b662      	cpsie	i
 8013022:	617b      	str	r3, [r7, #20]
}
 8013024:	bf00      	nop
 8013026:	bf00      	nop
 8013028:	e7fd      	b.n	8013026 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d06c      	beq.n	801310a <pvPortMalloc+0x152>
 8013030:	4b47      	ldr	r3, [pc, #284]	@ (8013150 <pvPortMalloc+0x198>)
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	687a      	ldr	r2, [r7, #4]
 8013036:	429a      	cmp	r2, r3
 8013038:	d867      	bhi.n	801310a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801303a:	4b46      	ldr	r3, [pc, #280]	@ (8013154 <pvPortMalloc+0x19c>)
 801303c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801303e:	4b45      	ldr	r3, [pc, #276]	@ (8013154 <pvPortMalloc+0x19c>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013044:	e004      	b.n	8013050 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8013046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013052:	685b      	ldr	r3, [r3, #4]
 8013054:	687a      	ldr	r2, [r7, #4]
 8013056:	429a      	cmp	r2, r3
 8013058:	d903      	bls.n	8013062 <pvPortMalloc+0xaa>
 801305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d1f1      	bne.n	8013046 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013062:	4b39      	ldr	r3, [pc, #228]	@ (8013148 <pvPortMalloc+0x190>)
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013068:	429a      	cmp	r2, r3
 801306a:	d04e      	beq.n	801310a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801306c:	6a3b      	ldr	r3, [r7, #32]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	2208      	movs	r2, #8
 8013072:	4413      	add	r3, r2
 8013074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013078:	681a      	ldr	r2, [r3, #0]
 801307a:	6a3b      	ldr	r3, [r7, #32]
 801307c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013080:	685a      	ldr	r2, [r3, #4]
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	1ad2      	subs	r2, r2, r3
 8013086:	2308      	movs	r3, #8
 8013088:	005b      	lsls	r3, r3, #1
 801308a:	429a      	cmp	r2, r3
 801308c:	d922      	bls.n	80130d4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801308e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	4413      	add	r3, r2
 8013094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013096:	69bb      	ldr	r3, [r7, #24]
 8013098:	f003 0307 	and.w	r3, r3, #7
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00d      	beq.n	80130bc <pvPortMalloc+0x104>
	__asm volatile
 80130a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130a4:	b672      	cpsid	i
 80130a6:	f383 8811 	msr	BASEPRI, r3
 80130aa:	f3bf 8f6f 	isb	sy
 80130ae:	f3bf 8f4f 	dsb	sy
 80130b2:	b662      	cpsie	i
 80130b4:	613b      	str	r3, [r7, #16]
}
 80130b6:	bf00      	nop
 80130b8:	bf00      	nop
 80130ba:	e7fd      	b.n	80130b8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80130bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130be:	685a      	ldr	r2, [r3, #4]
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	1ad2      	subs	r2, r2, r3
 80130c4:	69bb      	ldr	r3, [r7, #24]
 80130c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80130c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130ca:	687a      	ldr	r2, [r7, #4]
 80130cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80130ce:	69b8      	ldr	r0, [r7, #24]
 80130d0:	f000 f906 	bl	80132e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80130d4:	4b1e      	ldr	r3, [pc, #120]	@ (8013150 <pvPortMalloc+0x198>)
 80130d6:	681a      	ldr	r2, [r3, #0]
 80130d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130da:	685b      	ldr	r3, [r3, #4]
 80130dc:	1ad3      	subs	r3, r2, r3
 80130de:	4a1c      	ldr	r2, [pc, #112]	@ (8013150 <pvPortMalloc+0x198>)
 80130e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80130e2:	4b1b      	ldr	r3, [pc, #108]	@ (8013150 <pvPortMalloc+0x198>)
 80130e4:	681a      	ldr	r2, [r3, #0]
 80130e6:	4b1c      	ldr	r3, [pc, #112]	@ (8013158 <pvPortMalloc+0x1a0>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d203      	bcs.n	80130f6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80130ee:	4b18      	ldr	r3, [pc, #96]	@ (8013150 <pvPortMalloc+0x198>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	4a19      	ldr	r2, [pc, #100]	@ (8013158 <pvPortMalloc+0x1a0>)
 80130f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80130f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130f8:	685a      	ldr	r2, [r3, #4]
 80130fa:	4b14      	ldr	r3, [pc, #80]	@ (801314c <pvPortMalloc+0x194>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	431a      	orrs	r2, r3
 8013100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013102:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013106:	2200      	movs	r2, #0
 8013108:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801310a:	f7ff f811 	bl	8012130 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801310e:	69fb      	ldr	r3, [r7, #28]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d101      	bne.n	8013118 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8013114:	f7ed fa06 	bl	8000524 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013118:	69fb      	ldr	r3, [r7, #28]
 801311a:	f003 0307 	and.w	r3, r3, #7
 801311e:	2b00      	cmp	r3, #0
 8013120:	d00d      	beq.n	801313e <pvPortMalloc+0x186>
	__asm volatile
 8013122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013126:	b672      	cpsid	i
 8013128:	f383 8811 	msr	BASEPRI, r3
 801312c:	f3bf 8f6f 	isb	sy
 8013130:	f3bf 8f4f 	dsb	sy
 8013134:	b662      	cpsie	i
 8013136:	60fb      	str	r3, [r7, #12]
}
 8013138:	bf00      	nop
 801313a:	bf00      	nop
 801313c:	e7fd      	b.n	801313a <pvPortMalloc+0x182>
	return pvReturn;
 801313e:	69fb      	ldr	r3, [r7, #28]
}
 8013140:	4618      	mov	r0, r3
 8013142:	3728      	adds	r7, #40	@ 0x28
 8013144:	46bd      	mov	sp, r7
 8013146:	bd80      	pop	{r7, pc}
 8013148:	20008ed8 	.word	0x20008ed8
 801314c:	20008ee4 	.word	0x20008ee4
 8013150:	20008edc 	.word	0x20008edc
 8013154:	20008ed0 	.word	0x20008ed0
 8013158:	20008ee0 	.word	0x20008ee0

0801315c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b086      	sub	sp, #24
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d04e      	beq.n	801320c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801316e:	2308      	movs	r3, #8
 8013170:	425b      	negs	r3, r3
 8013172:	697a      	ldr	r2, [r7, #20]
 8013174:	4413      	add	r3, r2
 8013176:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	685a      	ldr	r2, [r3, #4]
 8013180:	4b24      	ldr	r3, [pc, #144]	@ (8013214 <vPortFree+0xb8>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4013      	ands	r3, r2
 8013186:	2b00      	cmp	r3, #0
 8013188:	d10d      	bne.n	80131a6 <vPortFree+0x4a>
	__asm volatile
 801318a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801318e:	b672      	cpsid	i
 8013190:	f383 8811 	msr	BASEPRI, r3
 8013194:	f3bf 8f6f 	isb	sy
 8013198:	f3bf 8f4f 	dsb	sy
 801319c:	b662      	cpsie	i
 801319e:	60fb      	str	r3, [r7, #12]
}
 80131a0:	bf00      	nop
 80131a2:	bf00      	nop
 80131a4:	e7fd      	b.n	80131a2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d00d      	beq.n	80131ca <vPortFree+0x6e>
	__asm volatile
 80131ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131b2:	b672      	cpsid	i
 80131b4:	f383 8811 	msr	BASEPRI, r3
 80131b8:	f3bf 8f6f 	isb	sy
 80131bc:	f3bf 8f4f 	dsb	sy
 80131c0:	b662      	cpsie	i
 80131c2:	60bb      	str	r3, [r7, #8]
}
 80131c4:	bf00      	nop
 80131c6:	bf00      	nop
 80131c8:	e7fd      	b.n	80131c6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80131ca:	693b      	ldr	r3, [r7, #16]
 80131cc:	685a      	ldr	r2, [r3, #4]
 80131ce:	4b11      	ldr	r3, [pc, #68]	@ (8013214 <vPortFree+0xb8>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	4013      	ands	r3, r2
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d019      	beq.n	801320c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d115      	bne.n	801320c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	685a      	ldr	r2, [r3, #4]
 80131e4:	4b0b      	ldr	r3, [pc, #44]	@ (8013214 <vPortFree+0xb8>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	43db      	mvns	r3, r3
 80131ea:	401a      	ands	r2, r3
 80131ec:	693b      	ldr	r3, [r7, #16]
 80131ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80131f0:	f7fe ff90 	bl	8012114 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	685a      	ldr	r2, [r3, #4]
 80131f8:	4b07      	ldr	r3, [pc, #28]	@ (8013218 <vPortFree+0xbc>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	4413      	add	r3, r2
 80131fe:	4a06      	ldr	r2, [pc, #24]	@ (8013218 <vPortFree+0xbc>)
 8013200:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013202:	6938      	ldr	r0, [r7, #16]
 8013204:	f000 f86c 	bl	80132e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013208:	f7fe ff92 	bl	8012130 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801320c:	bf00      	nop
 801320e:	3718      	adds	r7, #24
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}
 8013214:	20008ee4 	.word	0x20008ee4
 8013218:	20008edc 	.word	0x20008edc

0801321c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801321c:	b480      	push	{r7}
 801321e:	b085      	sub	sp, #20
 8013220:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013226:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013228:	4b27      	ldr	r3, [pc, #156]	@ (80132c8 <prvHeapInit+0xac>)
 801322a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	f003 0307 	and.w	r3, r3, #7
 8013232:	2b00      	cmp	r3, #0
 8013234:	d00c      	beq.n	8013250 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	3307      	adds	r3, #7
 801323a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	f023 0307 	bic.w	r3, r3, #7
 8013242:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013244:	68ba      	ldr	r2, [r7, #8]
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	1ad3      	subs	r3, r2, r3
 801324a:	4a1f      	ldr	r2, [pc, #124]	@ (80132c8 <prvHeapInit+0xac>)
 801324c:	4413      	add	r3, r2
 801324e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013254:	4a1d      	ldr	r2, [pc, #116]	@ (80132cc <prvHeapInit+0xb0>)
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801325a:	4b1c      	ldr	r3, [pc, #112]	@ (80132cc <prvHeapInit+0xb0>)
 801325c:	2200      	movs	r2, #0
 801325e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	68ba      	ldr	r2, [r7, #8]
 8013264:	4413      	add	r3, r2
 8013266:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013268:	2208      	movs	r2, #8
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	1a9b      	subs	r3, r3, r2
 801326e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	f023 0307 	bic.w	r3, r3, #7
 8013276:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	4a15      	ldr	r2, [pc, #84]	@ (80132d0 <prvHeapInit+0xb4>)
 801327c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801327e:	4b14      	ldr	r3, [pc, #80]	@ (80132d0 <prvHeapInit+0xb4>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	2200      	movs	r2, #0
 8013284:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013286:	4b12      	ldr	r3, [pc, #72]	@ (80132d0 <prvHeapInit+0xb4>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	2200      	movs	r2, #0
 801328c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	68fa      	ldr	r2, [r7, #12]
 8013296:	1ad2      	subs	r2, r2, r3
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801329c:	4b0c      	ldr	r3, [pc, #48]	@ (80132d0 <prvHeapInit+0xb4>)
 801329e:	681a      	ldr	r2, [r3, #0]
 80132a0:	683b      	ldr	r3, [r7, #0]
 80132a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	4a0a      	ldr	r2, [pc, #40]	@ (80132d4 <prvHeapInit+0xb8>)
 80132aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	4a09      	ldr	r2, [pc, #36]	@ (80132d8 <prvHeapInit+0xbc>)
 80132b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80132b4:	4b09      	ldr	r3, [pc, #36]	@ (80132dc <prvHeapInit+0xc0>)
 80132b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80132ba:	601a      	str	r2, [r3, #0]
}
 80132bc:	bf00      	nop
 80132be:	3714      	adds	r7, #20
 80132c0:	46bd      	mov	sp, r7
 80132c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c6:	4770      	bx	lr
 80132c8:	20000ed0 	.word	0x20000ed0
 80132cc:	20008ed0 	.word	0x20008ed0
 80132d0:	20008ed8 	.word	0x20008ed8
 80132d4:	20008ee0 	.word	0x20008ee0
 80132d8:	20008edc 	.word	0x20008edc
 80132dc:	20008ee4 	.word	0x20008ee4

080132e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80132e0:	b480      	push	{r7}
 80132e2:	b085      	sub	sp, #20
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80132e8:	4b28      	ldr	r3, [pc, #160]	@ (801338c <prvInsertBlockIntoFreeList+0xac>)
 80132ea:	60fb      	str	r3, [r7, #12]
 80132ec:	e002      	b.n	80132f4 <prvInsertBlockIntoFreeList+0x14>
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	60fb      	str	r3, [r7, #12]
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	687a      	ldr	r2, [r7, #4]
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d8f7      	bhi.n	80132ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	68ba      	ldr	r2, [r7, #8]
 8013308:	4413      	add	r3, r2
 801330a:	687a      	ldr	r2, [r7, #4]
 801330c:	429a      	cmp	r2, r3
 801330e:	d108      	bne.n	8013322 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	685a      	ldr	r2, [r3, #4]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	685b      	ldr	r3, [r3, #4]
 8013318:	441a      	add	r2, r3
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	685b      	ldr	r3, [r3, #4]
 801332a:	68ba      	ldr	r2, [r7, #8]
 801332c:	441a      	add	r2, r3
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	429a      	cmp	r2, r3
 8013334:	d118      	bne.n	8013368 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	681a      	ldr	r2, [r3, #0]
 801333a:	4b15      	ldr	r3, [pc, #84]	@ (8013390 <prvInsertBlockIntoFreeList+0xb0>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	429a      	cmp	r2, r3
 8013340:	d00d      	beq.n	801335e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	685a      	ldr	r2, [r3, #4]
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	685b      	ldr	r3, [r3, #4]
 801334c:	441a      	add	r2, r3
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	681a      	ldr	r2, [r3, #0]
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	601a      	str	r2, [r3, #0]
 801335c:	e008      	b.n	8013370 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801335e:	4b0c      	ldr	r3, [pc, #48]	@ (8013390 <prvInsertBlockIntoFreeList+0xb0>)
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	601a      	str	r2, [r3, #0]
 8013366:	e003      	b.n	8013370 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	681a      	ldr	r2, [r3, #0]
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013370:	68fa      	ldr	r2, [r7, #12]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	429a      	cmp	r2, r3
 8013376:	d002      	beq.n	801337e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	687a      	ldr	r2, [r7, #4]
 801337c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801337e:	bf00      	nop
 8013380:	3714      	adds	r7, #20
 8013382:	46bd      	mov	sp, r7
 8013384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013388:	4770      	bx	lr
 801338a:	bf00      	nop
 801338c:	20008ed0 	.word	0x20008ed0
 8013390:	20008ed8 	.word	0x20008ed8

08013394 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8013398:	2201      	movs	r2, #1
 801339a:	490e      	ldr	r1, [pc, #56]	@ (80133d4 <MX_USB_HOST_Init+0x40>)
 801339c:	480e      	ldr	r0, [pc, #56]	@ (80133d8 <MX_USB_HOST_Init+0x44>)
 801339e:	f7fb fd3d 	bl	800ee1c <USBH_Init>
 80133a2:	4603      	mov	r3, r0
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d001      	beq.n	80133ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80133a8:	f7ee fb3e 	bl	8001a28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80133ac:	490b      	ldr	r1, [pc, #44]	@ (80133dc <MX_USB_HOST_Init+0x48>)
 80133ae:	480a      	ldr	r0, [pc, #40]	@ (80133d8 <MX_USB_HOST_Init+0x44>)
 80133b0:	f7fb fe09 	bl	800efc6 <USBH_RegisterClass>
 80133b4:	4603      	mov	r3, r0
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d001      	beq.n	80133be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80133ba:	f7ee fb35 	bl	8001a28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80133be:	4806      	ldr	r0, [pc, #24]	@ (80133d8 <MX_USB_HOST_Init+0x44>)
 80133c0:	f7fb fe8d 	bl	800f0de <USBH_Start>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d001      	beq.n	80133ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80133ca:	f7ee fb2d 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80133ce:	bf00      	nop
 80133d0:	bd80      	pop	{r7, pc}
 80133d2:	bf00      	nop
 80133d4:	080133e1 	.word	0x080133e1
 80133d8:	20008ee8 	.word	0x20008ee8
 80133dc:	2000000c 	.word	0x2000000c

080133e0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80133e0:	b480      	push	{r7}
 80133e2:	b083      	sub	sp, #12
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
 80133e8:	460b      	mov	r3, r1
 80133ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80133ec:	78fb      	ldrb	r3, [r7, #3]
 80133ee:	3b01      	subs	r3, #1
 80133f0:	2b04      	cmp	r3, #4
 80133f2:	d819      	bhi.n	8013428 <USBH_UserProcess+0x48>
 80133f4:	a201      	add	r2, pc, #4	@ (adr r2, 80133fc <USBH_UserProcess+0x1c>)
 80133f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133fa:	bf00      	nop
 80133fc:	08013429 	.word	0x08013429
 8013400:	08013419 	.word	0x08013419
 8013404:	08013429 	.word	0x08013429
 8013408:	08013421 	.word	0x08013421
 801340c:	08013411 	.word	0x08013411
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013410:	4b09      	ldr	r3, [pc, #36]	@ (8013438 <USBH_UserProcess+0x58>)
 8013412:	2203      	movs	r2, #3
 8013414:	701a      	strb	r2, [r3, #0]
  break;
 8013416:	e008      	b.n	801342a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013418:	4b07      	ldr	r3, [pc, #28]	@ (8013438 <USBH_UserProcess+0x58>)
 801341a:	2202      	movs	r2, #2
 801341c:	701a      	strb	r2, [r3, #0]
  break;
 801341e:	e004      	b.n	801342a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013420:	4b05      	ldr	r3, [pc, #20]	@ (8013438 <USBH_UserProcess+0x58>)
 8013422:	2201      	movs	r2, #1
 8013424:	701a      	strb	r2, [r3, #0]
  break;
 8013426:	e000      	b.n	801342a <USBH_UserProcess+0x4a>

  default:
  break;
 8013428:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801342a:	bf00      	nop
 801342c:	370c      	adds	r7, #12
 801342e:	46bd      	mov	sp, r7
 8013430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013434:	4770      	bx	lr
 8013436:	bf00      	nop
 8013438:	200092cc 	.word	0x200092cc

0801343c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b08a      	sub	sp, #40	@ 0x28
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013444:	f107 0314 	add.w	r3, r7, #20
 8013448:	2200      	movs	r2, #0
 801344a:	601a      	str	r2, [r3, #0]
 801344c:	605a      	str	r2, [r3, #4]
 801344e:	609a      	str	r2, [r3, #8]
 8013450:	60da      	str	r2, [r3, #12]
 8013452:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801345c:	d13c      	bne.n	80134d8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801345e:	4b20      	ldr	r3, [pc, #128]	@ (80134e0 <HAL_HCD_MspInit+0xa4>)
 8013460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013462:	4a1f      	ldr	r2, [pc, #124]	@ (80134e0 <HAL_HCD_MspInit+0xa4>)
 8013464:	f043 0301 	orr.w	r3, r3, #1
 8013468:	6313      	str	r3, [r2, #48]	@ 0x30
 801346a:	4b1d      	ldr	r3, [pc, #116]	@ (80134e0 <HAL_HCD_MspInit+0xa4>)
 801346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801346e:	f003 0301 	and.w	r3, r3, #1
 8013472:	613b      	str	r3, [r7, #16]
 8013474:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8013476:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801347a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801347c:	2302      	movs	r3, #2
 801347e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013480:	2300      	movs	r3, #0
 8013482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013484:	2303      	movs	r3, #3
 8013486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013488:	230a      	movs	r3, #10
 801348a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801348c:	f107 0314 	add.w	r3, r7, #20
 8013490:	4619      	mov	r1, r3
 8013492:	4814      	ldr	r0, [pc, #80]	@ (80134e4 <HAL_HCD_MspInit+0xa8>)
 8013494:	f7f0 ffa0 	bl	80043d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013498:	4b11      	ldr	r3, [pc, #68]	@ (80134e0 <HAL_HCD_MspInit+0xa4>)
 801349a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801349c:	4a10      	ldr	r2, [pc, #64]	@ (80134e0 <HAL_HCD_MspInit+0xa4>)
 801349e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80134a2:	6353      	str	r3, [r2, #52]	@ 0x34
 80134a4:	4b0e      	ldr	r3, [pc, #56]	@ (80134e0 <HAL_HCD_MspInit+0xa4>)
 80134a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80134a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80134ac:	60fb      	str	r3, [r7, #12]
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	4b0b      	ldr	r3, [pc, #44]	@ (80134e0 <HAL_HCD_MspInit+0xa4>)
 80134b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134b4:	4a0a      	ldr	r2, [pc, #40]	@ (80134e0 <HAL_HCD_MspInit+0xa4>)
 80134b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80134ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80134bc:	4b08      	ldr	r3, [pc, #32]	@ (80134e0 <HAL_HCD_MspInit+0xa4>)
 80134be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80134c4:	60bb      	str	r3, [r7, #8]
 80134c6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80134c8:	2200      	movs	r2, #0
 80134ca:	2105      	movs	r1, #5
 80134cc:	2043      	movs	r0, #67	@ 0x43
 80134ce:	f7f0 f819 	bl	8003504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80134d2:	2043      	movs	r0, #67	@ 0x43
 80134d4:	f7f0 f832 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80134d8:	bf00      	nop
 80134da:	3728      	adds	r7, #40	@ 0x28
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	40023800 	.word	0x40023800
 80134e4:	40020000 	.word	0x40020000

080134e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b082      	sub	sp, #8
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7fc faa3 	bl	800fa42 <USBH_LL_IncTimer>
}
 80134fc:	bf00      	nop
 80134fe:	3708      	adds	r7, #8
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}

08013504 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013512:	4618      	mov	r0, r3
 8013514:	f7fc fae7 	bl	800fae6 <USBH_LL_Connect>
}
 8013518:	bf00      	nop
 801351a:	3708      	adds	r7, #8
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b082      	sub	sp, #8
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801352e:	4618      	mov	r0, r3
 8013530:	f7fc fafc 	bl	800fb2c <USBH_LL_Disconnect>
}
 8013534:	bf00      	nop
 8013536:	3708      	adds	r7, #8
 8013538:	46bd      	mov	sp, r7
 801353a:	bd80      	pop	{r7, pc}

0801353c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	460b      	mov	r3, r1
 8013546:	70fb      	strb	r3, [r7, #3]
 8013548:	4613      	mov	r3, r2
 801354a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013552:	4618      	mov	r0, r3
 8013554:	f7fc fb31 	bl	800fbba <USBH_LL_NotifyURBChange>
#endif
}
 8013558:	bf00      	nop
 801355a:	3708      	adds	r7, #8
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}

08013560 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b082      	sub	sp, #8
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801356e:	4618      	mov	r0, r3
 8013570:	f7fc fa91 	bl	800fa96 <USBH_LL_PortEnabled>
}
 8013574:	bf00      	nop
 8013576:	3708      	adds	r7, #8
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}

0801357c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801358a:	4618      	mov	r0, r3
 801358c:	f7fc fa9d 	bl	800faca <USBH_LL_PortDisabled>
}
 8013590:	bf00      	nop
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	d12a      	bne.n	8013600 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80135aa:	4a18      	ldr	r2, [pc, #96]	@ (801360c <USBH_LL_Init+0x74>)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4a15      	ldr	r2, [pc, #84]	@ (801360c <USBH_LL_Init+0x74>)
 80135b6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80135ba:	4b14      	ldr	r3, [pc, #80]	@ (801360c <USBH_LL_Init+0x74>)
 80135bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80135c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80135c2:	4b12      	ldr	r3, [pc, #72]	@ (801360c <USBH_LL_Init+0x74>)
 80135c4:	2208      	movs	r2, #8
 80135c6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80135c8:	4b10      	ldr	r3, [pc, #64]	@ (801360c <USBH_LL_Init+0x74>)
 80135ca:	2201      	movs	r2, #1
 80135cc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80135ce:	4b0f      	ldr	r3, [pc, #60]	@ (801360c <USBH_LL_Init+0x74>)
 80135d0:	2200      	movs	r2, #0
 80135d2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80135d4:	4b0d      	ldr	r3, [pc, #52]	@ (801360c <USBH_LL_Init+0x74>)
 80135d6:	2202      	movs	r2, #2
 80135d8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80135da:	4b0c      	ldr	r3, [pc, #48]	@ (801360c <USBH_LL_Init+0x74>)
 80135dc:	2200      	movs	r2, #0
 80135de:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80135e0:	480a      	ldr	r0, [pc, #40]	@ (801360c <USBH_LL_Init+0x74>)
 80135e2:	f7f1 f8d6 	bl	8004792 <HAL_HCD_Init>
 80135e6:	4603      	mov	r3, r0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d001      	beq.n	80135f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80135ec:	f7ee fa1c 	bl	8001a28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80135f0:	4806      	ldr	r0, [pc, #24]	@ (801360c <USBH_LL_Init+0x74>)
 80135f2:	f7f1 fd37 	bl	8005064 <HAL_HCD_GetCurrentFrame>
 80135f6:	4603      	mov	r3, r0
 80135f8:	4619      	mov	r1, r3
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f7fc fa12 	bl	800fa24 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013600:	2300      	movs	r3, #0
}
 8013602:	4618      	mov	r0, r3
 8013604:	3708      	adds	r7, #8
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	200092d0 	.word	0x200092d0

08013610 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b084      	sub	sp, #16
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013618:	2300      	movs	r3, #0
 801361a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801361c:	2300      	movs	r3, #0
 801361e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013626:	4618      	mov	r0, r3
 8013628:	f7f1 fca4 	bl	8004f74 <HAL_HCD_Start>
 801362c:	4603      	mov	r3, r0
 801362e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013630:	7bfb      	ldrb	r3, [r7, #15]
 8013632:	4618      	mov	r0, r3
 8013634:	f000 f95e 	bl	80138f4 <USBH_Get_USB_Status>
 8013638:	4603      	mov	r3, r0
 801363a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801363c:	7bbb      	ldrb	r3, [r7, #14]
}
 801363e:	4618      	mov	r0, r3
 8013640:	3710      	adds	r7, #16
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}

08013646 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013646:	b580      	push	{r7, lr}
 8013648:	b084      	sub	sp, #16
 801364a:	af00      	add	r7, sp, #0
 801364c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801364e:	2300      	movs	r3, #0
 8013650:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013652:	2300      	movs	r3, #0
 8013654:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801365c:	4618      	mov	r0, r3
 801365e:	f7f1 fcac 	bl	8004fba <HAL_HCD_Stop>
 8013662:	4603      	mov	r3, r0
 8013664:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013666:	7bfb      	ldrb	r3, [r7, #15]
 8013668:	4618      	mov	r0, r3
 801366a:	f000 f943 	bl	80138f4 <USBH_Get_USB_Status>
 801366e:	4603      	mov	r3, r0
 8013670:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013672:	7bbb      	ldrb	r3, [r7, #14]
}
 8013674:	4618      	mov	r0, r3
 8013676:	3710      	adds	r7, #16
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}

0801367c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b084      	sub	sp, #16
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8013684:	2301      	movs	r3, #1
 8013686:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801368e:	4618      	mov	r0, r3
 8013690:	f7f1 fcf6 	bl	8005080 <HAL_HCD_GetCurrentSpeed>
 8013694:	4603      	mov	r3, r0
 8013696:	2b02      	cmp	r3, #2
 8013698:	d00c      	beq.n	80136b4 <USBH_LL_GetSpeed+0x38>
 801369a:	2b02      	cmp	r3, #2
 801369c:	d80d      	bhi.n	80136ba <USBH_LL_GetSpeed+0x3e>
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d002      	beq.n	80136a8 <USBH_LL_GetSpeed+0x2c>
 80136a2:	2b01      	cmp	r3, #1
 80136a4:	d003      	beq.n	80136ae <USBH_LL_GetSpeed+0x32>
 80136a6:	e008      	b.n	80136ba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80136a8:	2300      	movs	r3, #0
 80136aa:	73fb      	strb	r3, [r7, #15]
    break;
 80136ac:	e008      	b.n	80136c0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80136ae:	2301      	movs	r3, #1
 80136b0:	73fb      	strb	r3, [r7, #15]
    break;
 80136b2:	e005      	b.n	80136c0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80136b4:	2302      	movs	r3, #2
 80136b6:	73fb      	strb	r3, [r7, #15]
    break;
 80136b8:	e002      	b.n	80136c0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80136ba:	2301      	movs	r3, #1
 80136bc:	73fb      	strb	r3, [r7, #15]
    break;
 80136be:	bf00      	nop
  }
  return  speed;
 80136c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3710      	adds	r7, #16
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}

080136ca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80136ca:	b580      	push	{r7, lr}
 80136cc:	b084      	sub	sp, #16
 80136ce:	af00      	add	r7, sp, #0
 80136d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136d2:	2300      	movs	r3, #0
 80136d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80136d6:	2300      	movs	r3, #0
 80136d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7f1 fc87 	bl	8004ff4 <HAL_HCD_ResetPort>
 80136e6:	4603      	mov	r3, r0
 80136e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80136ea:	7bfb      	ldrb	r3, [r7, #15]
 80136ec:	4618      	mov	r0, r3
 80136ee:	f000 f901 	bl	80138f4 <USBH_Get_USB_Status>
 80136f2:	4603      	mov	r3, r0
 80136f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80136f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3710      	adds	r7, #16
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	460b      	mov	r3, r1
 801370a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013712:	78fa      	ldrb	r2, [r7, #3]
 8013714:	4611      	mov	r1, r2
 8013716:	4618      	mov	r0, r3
 8013718:	f7f1 fc8f 	bl	800503a <HAL_HCD_HC_GetXferCount>
 801371c:	4603      	mov	r3, r0
}
 801371e:	4618      	mov	r0, r3
 8013720:	3708      	adds	r7, #8
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}

08013726 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013726:	b590      	push	{r4, r7, lr}
 8013728:	b089      	sub	sp, #36	@ 0x24
 801372a:	af04      	add	r7, sp, #16
 801372c:	6078      	str	r0, [r7, #4]
 801372e:	4608      	mov	r0, r1
 8013730:	4611      	mov	r1, r2
 8013732:	461a      	mov	r2, r3
 8013734:	4603      	mov	r3, r0
 8013736:	70fb      	strb	r3, [r7, #3]
 8013738:	460b      	mov	r3, r1
 801373a:	70bb      	strb	r3, [r7, #2]
 801373c:	4613      	mov	r3, r2
 801373e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013740:	2300      	movs	r3, #0
 8013742:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013744:	2300      	movs	r3, #0
 8013746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801374e:	787c      	ldrb	r4, [r7, #1]
 8013750:	78ba      	ldrb	r2, [r7, #2]
 8013752:	78f9      	ldrb	r1, [r7, #3]
 8013754:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013756:	9302      	str	r3, [sp, #8]
 8013758:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801375c:	9301      	str	r3, [sp, #4]
 801375e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013762:	9300      	str	r3, [sp, #0]
 8013764:	4623      	mov	r3, r4
 8013766:	f7f1 f87b 	bl	8004860 <HAL_HCD_HC_Init>
 801376a:	4603      	mov	r3, r0
 801376c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801376e:	7bfb      	ldrb	r3, [r7, #15]
 8013770:	4618      	mov	r0, r3
 8013772:	f000 f8bf 	bl	80138f4 <USBH_Get_USB_Status>
 8013776:	4603      	mov	r3, r0
 8013778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801377a:	7bbb      	ldrb	r3, [r7, #14]
}
 801377c:	4618      	mov	r0, r3
 801377e:	3714      	adds	r7, #20
 8013780:	46bd      	mov	sp, r7
 8013782:	bd90      	pop	{r4, r7, pc}

08013784 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b084      	sub	sp, #16
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	460b      	mov	r3, r1
 801378e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013790:	2300      	movs	r3, #0
 8013792:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013794:	2300      	movs	r3, #0
 8013796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801379e:	78fa      	ldrb	r2, [r7, #3]
 80137a0:	4611      	mov	r1, r2
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7f1 f914 	bl	80049d0 <HAL_HCD_HC_Halt>
 80137a8:	4603      	mov	r3, r0
 80137aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80137ac:	7bfb      	ldrb	r3, [r7, #15]
 80137ae:	4618      	mov	r0, r3
 80137b0:	f000 f8a0 	bl	80138f4 <USBH_Get_USB_Status>
 80137b4:	4603      	mov	r3, r0
 80137b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80137b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3710      	adds	r7, #16
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}

080137c2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80137c2:	b590      	push	{r4, r7, lr}
 80137c4:	b089      	sub	sp, #36	@ 0x24
 80137c6:	af04      	add	r7, sp, #16
 80137c8:	6078      	str	r0, [r7, #4]
 80137ca:	4608      	mov	r0, r1
 80137cc:	4611      	mov	r1, r2
 80137ce:	461a      	mov	r2, r3
 80137d0:	4603      	mov	r3, r0
 80137d2:	70fb      	strb	r3, [r7, #3]
 80137d4:	460b      	mov	r3, r1
 80137d6:	70bb      	strb	r3, [r7, #2]
 80137d8:	4613      	mov	r3, r2
 80137da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137dc:	2300      	movs	r3, #0
 80137de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80137e0:	2300      	movs	r3, #0
 80137e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80137ea:	787c      	ldrb	r4, [r7, #1]
 80137ec:	78ba      	ldrb	r2, [r7, #2]
 80137ee:	78f9      	ldrb	r1, [r7, #3]
 80137f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80137f4:	9303      	str	r3, [sp, #12]
 80137f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80137f8:	9302      	str	r3, [sp, #8]
 80137fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137fc:	9301      	str	r3, [sp, #4]
 80137fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013802:	9300      	str	r3, [sp, #0]
 8013804:	4623      	mov	r3, r4
 8013806:	f7f1 f907 	bl	8004a18 <HAL_HCD_HC_SubmitRequest>
 801380a:	4603      	mov	r3, r0
 801380c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801380e:	7bfb      	ldrb	r3, [r7, #15]
 8013810:	4618      	mov	r0, r3
 8013812:	f000 f86f 	bl	80138f4 <USBH_Get_USB_Status>
 8013816:	4603      	mov	r3, r0
 8013818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801381a:	7bbb      	ldrb	r3, [r7, #14]
}
 801381c:	4618      	mov	r0, r3
 801381e:	3714      	adds	r7, #20
 8013820:	46bd      	mov	sp, r7
 8013822:	bd90      	pop	{r4, r7, pc}

08013824 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	460b      	mov	r3, r1
 801382e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013836:	78fa      	ldrb	r2, [r7, #3]
 8013838:	4611      	mov	r1, r2
 801383a:	4618      	mov	r0, r3
 801383c:	f7f1 fbe8 	bl	8005010 <HAL_HCD_HC_GetURBState>
 8013840:	4603      	mov	r3, r0
}
 8013842:	4618      	mov	r0, r3
 8013844:	3708      	adds	r7, #8
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}

0801384a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801384a:	b580      	push	{r7, lr}
 801384c:	b082      	sub	sp, #8
 801384e:	af00      	add	r7, sp, #0
 8013850:	6078      	str	r0, [r7, #4]
 8013852:	460b      	mov	r3, r1
 8013854:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801385c:	2b01      	cmp	r3, #1
 801385e:	d103      	bne.n	8013868 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8013860:	78fb      	ldrb	r3, [r7, #3]
 8013862:	4618      	mov	r0, r3
 8013864:	f000 f872 	bl	801394c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8013868:	20c8      	movs	r0, #200	@ 0xc8
 801386a:	f7ef fadb 	bl	8002e24 <HAL_Delay>
  return USBH_OK;
 801386e:	2300      	movs	r3, #0
}
 8013870:	4618      	mov	r0, r3
 8013872:	3708      	adds	r7, #8
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8013878:	b480      	push	{r7}
 801387a:	b085      	sub	sp, #20
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	460b      	mov	r3, r1
 8013882:	70fb      	strb	r3, [r7, #3]
 8013884:	4613      	mov	r3, r2
 8013886:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801388e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8013890:	78fa      	ldrb	r2, [r7, #3]
 8013892:	68f9      	ldr	r1, [r7, #12]
 8013894:	4613      	mov	r3, r2
 8013896:	011b      	lsls	r3, r3, #4
 8013898:	1a9b      	subs	r3, r3, r2
 801389a:	009b      	lsls	r3, r3, #2
 801389c:	440b      	add	r3, r1
 801389e:	3317      	adds	r3, #23
 80138a0:	781b      	ldrb	r3, [r3, #0]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d00a      	beq.n	80138bc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80138a6:	78fa      	ldrb	r2, [r7, #3]
 80138a8:	68f9      	ldr	r1, [r7, #12]
 80138aa:	4613      	mov	r3, r2
 80138ac:	011b      	lsls	r3, r3, #4
 80138ae:	1a9b      	subs	r3, r3, r2
 80138b0:	009b      	lsls	r3, r3, #2
 80138b2:	440b      	add	r3, r1
 80138b4:	333c      	adds	r3, #60	@ 0x3c
 80138b6:	78ba      	ldrb	r2, [r7, #2]
 80138b8:	701a      	strb	r2, [r3, #0]
 80138ba:	e009      	b.n	80138d0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80138bc:	78fa      	ldrb	r2, [r7, #3]
 80138be:	68f9      	ldr	r1, [r7, #12]
 80138c0:	4613      	mov	r3, r2
 80138c2:	011b      	lsls	r3, r3, #4
 80138c4:	1a9b      	subs	r3, r3, r2
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	440b      	add	r3, r1
 80138ca:	333d      	adds	r3, #61	@ 0x3d
 80138cc:	78ba      	ldrb	r2, [r7, #2]
 80138ce:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80138d0:	2300      	movs	r3, #0
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3714      	adds	r7, #20
 80138d6:	46bd      	mov	sp, r7
 80138d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138dc:	4770      	bx	lr

080138de <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80138de:	b580      	push	{r7, lr}
 80138e0:	b082      	sub	sp, #8
 80138e2:	af00      	add	r7, sp, #0
 80138e4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7ef fa9c 	bl	8002e24 <HAL_Delay>
}
 80138ec:	bf00      	nop
 80138ee:	3708      	adds	r7, #8
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}

080138f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80138f4:	b480      	push	{r7}
 80138f6:	b085      	sub	sp, #20
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	4603      	mov	r3, r0
 80138fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80138fe:	2300      	movs	r3, #0
 8013900:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013902:	79fb      	ldrb	r3, [r7, #7]
 8013904:	2b03      	cmp	r3, #3
 8013906:	d817      	bhi.n	8013938 <USBH_Get_USB_Status+0x44>
 8013908:	a201      	add	r2, pc, #4	@ (adr r2, 8013910 <USBH_Get_USB_Status+0x1c>)
 801390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801390e:	bf00      	nop
 8013910:	08013921 	.word	0x08013921
 8013914:	08013927 	.word	0x08013927
 8013918:	0801392d 	.word	0x0801392d
 801391c:	08013933 	.word	0x08013933
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8013920:	2300      	movs	r3, #0
 8013922:	73fb      	strb	r3, [r7, #15]
    break;
 8013924:	e00b      	b.n	801393e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013926:	2302      	movs	r3, #2
 8013928:	73fb      	strb	r3, [r7, #15]
    break;
 801392a:	e008      	b.n	801393e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801392c:	2301      	movs	r3, #1
 801392e:	73fb      	strb	r3, [r7, #15]
    break;
 8013930:	e005      	b.n	801393e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013932:	2302      	movs	r3, #2
 8013934:	73fb      	strb	r3, [r7, #15]
    break;
 8013936:	e002      	b.n	801393e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8013938:	2302      	movs	r3, #2
 801393a:	73fb      	strb	r3, [r7, #15]
    break;
 801393c:	bf00      	nop
  }
  return usb_status;
 801393e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013940:	4618      	mov	r0, r3
 8013942:	3714      	adds	r7, #20
 8013944:	46bd      	mov	sp, r7
 8013946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394a:	4770      	bx	lr

0801394c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b084      	sub	sp, #16
 8013950:	af00      	add	r7, sp, #0
 8013952:	4603      	mov	r3, r0
 8013954:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8013956:	79fb      	ldrb	r3, [r7, #7]
 8013958:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801395a:	79fb      	ldrb	r3, [r7, #7]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d102      	bne.n	8013966 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8013960:	2300      	movs	r3, #0
 8013962:	73fb      	strb	r3, [r7, #15]
 8013964:	e001      	b.n	801396a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8013966:	2301      	movs	r3, #1
 8013968:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801396a:	7bfb      	ldrb	r3, [r7, #15]
 801396c:	461a      	mov	r2, r3
 801396e:	2120      	movs	r1, #32
 8013970:	4803      	ldr	r0, [pc, #12]	@ (8013980 <MX_DriverVbusFS+0x34>)
 8013972:	f7f0 fef5 	bl	8004760 <HAL_GPIO_WritePin>
}
 8013976:	bf00      	nop
 8013978:	3710      	adds	r7, #16
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}
 801397e:	bf00      	nop
 8013980:	40020c00 	.word	0x40020c00

08013984 <malloc>:
 8013984:	4b02      	ldr	r3, [pc, #8]	@ (8013990 <malloc+0xc>)
 8013986:	4601      	mov	r1, r0
 8013988:	6818      	ldr	r0, [r3, #0]
 801398a:	f000 b82d 	b.w	80139e8 <_malloc_r>
 801398e:	bf00      	nop
 8013990:	20000030 	.word	0x20000030

08013994 <free>:
 8013994:	4b02      	ldr	r3, [pc, #8]	@ (80139a0 <free+0xc>)
 8013996:	4601      	mov	r1, r0
 8013998:	6818      	ldr	r0, [r3, #0]
 801399a:	f000 b903 	b.w	8013ba4 <_free_r>
 801399e:	bf00      	nop
 80139a0:	20000030 	.word	0x20000030

080139a4 <sbrk_aligned>:
 80139a4:	b570      	push	{r4, r5, r6, lr}
 80139a6:	4e0f      	ldr	r6, [pc, #60]	@ (80139e4 <sbrk_aligned+0x40>)
 80139a8:	460c      	mov	r4, r1
 80139aa:	6831      	ldr	r1, [r6, #0]
 80139ac:	4605      	mov	r5, r0
 80139ae:	b911      	cbnz	r1, 80139b6 <sbrk_aligned+0x12>
 80139b0:	f000 f8ae 	bl	8013b10 <_sbrk_r>
 80139b4:	6030      	str	r0, [r6, #0]
 80139b6:	4621      	mov	r1, r4
 80139b8:	4628      	mov	r0, r5
 80139ba:	f000 f8a9 	bl	8013b10 <_sbrk_r>
 80139be:	1c43      	adds	r3, r0, #1
 80139c0:	d103      	bne.n	80139ca <sbrk_aligned+0x26>
 80139c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80139c6:	4620      	mov	r0, r4
 80139c8:	bd70      	pop	{r4, r5, r6, pc}
 80139ca:	1cc4      	adds	r4, r0, #3
 80139cc:	f024 0403 	bic.w	r4, r4, #3
 80139d0:	42a0      	cmp	r0, r4
 80139d2:	d0f8      	beq.n	80139c6 <sbrk_aligned+0x22>
 80139d4:	1a21      	subs	r1, r4, r0
 80139d6:	4628      	mov	r0, r5
 80139d8:	f000 f89a 	bl	8013b10 <_sbrk_r>
 80139dc:	3001      	adds	r0, #1
 80139de:	d1f2      	bne.n	80139c6 <sbrk_aligned+0x22>
 80139e0:	e7ef      	b.n	80139c2 <sbrk_aligned+0x1e>
 80139e2:	bf00      	nop
 80139e4:	200096b0 	.word	0x200096b0

080139e8 <_malloc_r>:
 80139e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139ec:	1ccd      	adds	r5, r1, #3
 80139ee:	f025 0503 	bic.w	r5, r5, #3
 80139f2:	3508      	adds	r5, #8
 80139f4:	2d0c      	cmp	r5, #12
 80139f6:	bf38      	it	cc
 80139f8:	250c      	movcc	r5, #12
 80139fa:	2d00      	cmp	r5, #0
 80139fc:	4606      	mov	r6, r0
 80139fe:	db01      	blt.n	8013a04 <_malloc_r+0x1c>
 8013a00:	42a9      	cmp	r1, r5
 8013a02:	d904      	bls.n	8013a0e <_malloc_r+0x26>
 8013a04:	230c      	movs	r3, #12
 8013a06:	6033      	str	r3, [r6, #0]
 8013a08:	2000      	movs	r0, #0
 8013a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013ae4 <_malloc_r+0xfc>
 8013a12:	f000 f869 	bl	8013ae8 <__malloc_lock>
 8013a16:	f8d8 3000 	ldr.w	r3, [r8]
 8013a1a:	461c      	mov	r4, r3
 8013a1c:	bb44      	cbnz	r4, 8013a70 <_malloc_r+0x88>
 8013a1e:	4629      	mov	r1, r5
 8013a20:	4630      	mov	r0, r6
 8013a22:	f7ff ffbf 	bl	80139a4 <sbrk_aligned>
 8013a26:	1c43      	adds	r3, r0, #1
 8013a28:	4604      	mov	r4, r0
 8013a2a:	d158      	bne.n	8013ade <_malloc_r+0xf6>
 8013a2c:	f8d8 4000 	ldr.w	r4, [r8]
 8013a30:	4627      	mov	r7, r4
 8013a32:	2f00      	cmp	r7, #0
 8013a34:	d143      	bne.n	8013abe <_malloc_r+0xd6>
 8013a36:	2c00      	cmp	r4, #0
 8013a38:	d04b      	beq.n	8013ad2 <_malloc_r+0xea>
 8013a3a:	6823      	ldr	r3, [r4, #0]
 8013a3c:	4639      	mov	r1, r7
 8013a3e:	4630      	mov	r0, r6
 8013a40:	eb04 0903 	add.w	r9, r4, r3
 8013a44:	f000 f864 	bl	8013b10 <_sbrk_r>
 8013a48:	4581      	cmp	r9, r0
 8013a4a:	d142      	bne.n	8013ad2 <_malloc_r+0xea>
 8013a4c:	6821      	ldr	r1, [r4, #0]
 8013a4e:	1a6d      	subs	r5, r5, r1
 8013a50:	4629      	mov	r1, r5
 8013a52:	4630      	mov	r0, r6
 8013a54:	f7ff ffa6 	bl	80139a4 <sbrk_aligned>
 8013a58:	3001      	adds	r0, #1
 8013a5a:	d03a      	beq.n	8013ad2 <_malloc_r+0xea>
 8013a5c:	6823      	ldr	r3, [r4, #0]
 8013a5e:	442b      	add	r3, r5
 8013a60:	6023      	str	r3, [r4, #0]
 8013a62:	f8d8 3000 	ldr.w	r3, [r8]
 8013a66:	685a      	ldr	r2, [r3, #4]
 8013a68:	bb62      	cbnz	r2, 8013ac4 <_malloc_r+0xdc>
 8013a6a:	f8c8 7000 	str.w	r7, [r8]
 8013a6e:	e00f      	b.n	8013a90 <_malloc_r+0xa8>
 8013a70:	6822      	ldr	r2, [r4, #0]
 8013a72:	1b52      	subs	r2, r2, r5
 8013a74:	d420      	bmi.n	8013ab8 <_malloc_r+0xd0>
 8013a76:	2a0b      	cmp	r2, #11
 8013a78:	d917      	bls.n	8013aaa <_malloc_r+0xc2>
 8013a7a:	1961      	adds	r1, r4, r5
 8013a7c:	42a3      	cmp	r3, r4
 8013a7e:	6025      	str	r5, [r4, #0]
 8013a80:	bf18      	it	ne
 8013a82:	6059      	strne	r1, [r3, #4]
 8013a84:	6863      	ldr	r3, [r4, #4]
 8013a86:	bf08      	it	eq
 8013a88:	f8c8 1000 	streq.w	r1, [r8]
 8013a8c:	5162      	str	r2, [r4, r5]
 8013a8e:	604b      	str	r3, [r1, #4]
 8013a90:	4630      	mov	r0, r6
 8013a92:	f000 f82f 	bl	8013af4 <__malloc_unlock>
 8013a96:	f104 000b 	add.w	r0, r4, #11
 8013a9a:	1d23      	adds	r3, r4, #4
 8013a9c:	f020 0007 	bic.w	r0, r0, #7
 8013aa0:	1ac2      	subs	r2, r0, r3
 8013aa2:	bf1c      	itt	ne
 8013aa4:	1a1b      	subne	r3, r3, r0
 8013aa6:	50a3      	strne	r3, [r4, r2]
 8013aa8:	e7af      	b.n	8013a0a <_malloc_r+0x22>
 8013aaa:	6862      	ldr	r2, [r4, #4]
 8013aac:	42a3      	cmp	r3, r4
 8013aae:	bf0c      	ite	eq
 8013ab0:	f8c8 2000 	streq.w	r2, [r8]
 8013ab4:	605a      	strne	r2, [r3, #4]
 8013ab6:	e7eb      	b.n	8013a90 <_malloc_r+0xa8>
 8013ab8:	4623      	mov	r3, r4
 8013aba:	6864      	ldr	r4, [r4, #4]
 8013abc:	e7ae      	b.n	8013a1c <_malloc_r+0x34>
 8013abe:	463c      	mov	r4, r7
 8013ac0:	687f      	ldr	r7, [r7, #4]
 8013ac2:	e7b6      	b.n	8013a32 <_malloc_r+0x4a>
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	685b      	ldr	r3, [r3, #4]
 8013ac8:	42a3      	cmp	r3, r4
 8013aca:	d1fb      	bne.n	8013ac4 <_malloc_r+0xdc>
 8013acc:	2300      	movs	r3, #0
 8013ace:	6053      	str	r3, [r2, #4]
 8013ad0:	e7de      	b.n	8013a90 <_malloc_r+0xa8>
 8013ad2:	230c      	movs	r3, #12
 8013ad4:	6033      	str	r3, [r6, #0]
 8013ad6:	4630      	mov	r0, r6
 8013ad8:	f000 f80c 	bl	8013af4 <__malloc_unlock>
 8013adc:	e794      	b.n	8013a08 <_malloc_r+0x20>
 8013ade:	6005      	str	r5, [r0, #0]
 8013ae0:	e7d6      	b.n	8013a90 <_malloc_r+0xa8>
 8013ae2:	bf00      	nop
 8013ae4:	200096b4 	.word	0x200096b4

08013ae8 <__malloc_lock>:
 8013ae8:	4801      	ldr	r0, [pc, #4]	@ (8013af0 <__malloc_lock+0x8>)
 8013aea:	f000 b84b 	b.w	8013b84 <__retarget_lock_acquire_recursive>
 8013aee:	bf00      	nop
 8013af0:	200097f4 	.word	0x200097f4

08013af4 <__malloc_unlock>:
 8013af4:	4801      	ldr	r0, [pc, #4]	@ (8013afc <__malloc_unlock+0x8>)
 8013af6:	f000 b846 	b.w	8013b86 <__retarget_lock_release_recursive>
 8013afa:	bf00      	nop
 8013afc:	200097f4 	.word	0x200097f4

08013b00 <memset>:
 8013b00:	4402      	add	r2, r0
 8013b02:	4603      	mov	r3, r0
 8013b04:	4293      	cmp	r3, r2
 8013b06:	d100      	bne.n	8013b0a <memset+0xa>
 8013b08:	4770      	bx	lr
 8013b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8013b0e:	e7f9      	b.n	8013b04 <memset+0x4>

08013b10 <_sbrk_r>:
 8013b10:	b538      	push	{r3, r4, r5, lr}
 8013b12:	4d06      	ldr	r5, [pc, #24]	@ (8013b2c <_sbrk_r+0x1c>)
 8013b14:	2300      	movs	r3, #0
 8013b16:	4604      	mov	r4, r0
 8013b18:	4608      	mov	r0, r1
 8013b1a:	602b      	str	r3, [r5, #0]
 8013b1c:	f7ef f8e4 	bl	8002ce8 <_sbrk>
 8013b20:	1c43      	adds	r3, r0, #1
 8013b22:	d102      	bne.n	8013b2a <_sbrk_r+0x1a>
 8013b24:	682b      	ldr	r3, [r5, #0]
 8013b26:	b103      	cbz	r3, 8013b2a <_sbrk_r+0x1a>
 8013b28:	6023      	str	r3, [r4, #0]
 8013b2a:	bd38      	pop	{r3, r4, r5, pc}
 8013b2c:	200097f0 	.word	0x200097f0

08013b30 <__errno>:
 8013b30:	4b01      	ldr	r3, [pc, #4]	@ (8013b38 <__errno+0x8>)
 8013b32:	6818      	ldr	r0, [r3, #0]
 8013b34:	4770      	bx	lr
 8013b36:	bf00      	nop
 8013b38:	20000030 	.word	0x20000030

08013b3c <__libc_init_array>:
 8013b3c:	b570      	push	{r4, r5, r6, lr}
 8013b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8013b74 <__libc_init_array+0x38>)
 8013b40:	4c0d      	ldr	r4, [pc, #52]	@ (8013b78 <__libc_init_array+0x3c>)
 8013b42:	1b64      	subs	r4, r4, r5
 8013b44:	10a4      	asrs	r4, r4, #2
 8013b46:	2600      	movs	r6, #0
 8013b48:	42a6      	cmp	r6, r4
 8013b4a:	d109      	bne.n	8013b60 <__libc_init_array+0x24>
 8013b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8013b7c <__libc_init_array+0x40>)
 8013b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8013b80 <__libc_init_array+0x44>)
 8013b50:	f000 f872 	bl	8013c38 <_init>
 8013b54:	1b64      	subs	r4, r4, r5
 8013b56:	10a4      	asrs	r4, r4, #2
 8013b58:	2600      	movs	r6, #0
 8013b5a:	42a6      	cmp	r6, r4
 8013b5c:	d105      	bne.n	8013b6a <__libc_init_array+0x2e>
 8013b5e:	bd70      	pop	{r4, r5, r6, pc}
 8013b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b64:	4798      	blx	r3
 8013b66:	3601      	adds	r6, #1
 8013b68:	e7ee      	b.n	8013b48 <__libc_init_array+0xc>
 8013b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b6e:	4798      	blx	r3
 8013b70:	3601      	adds	r6, #1
 8013b72:	e7f2      	b.n	8013b5a <__libc_init_array+0x1e>
 8013b74:	08013d00 	.word	0x08013d00
 8013b78:	08013d00 	.word	0x08013d00
 8013b7c:	08013d00 	.word	0x08013d00
 8013b80:	08013d04 	.word	0x08013d04

08013b84 <__retarget_lock_acquire_recursive>:
 8013b84:	4770      	bx	lr

08013b86 <__retarget_lock_release_recursive>:
 8013b86:	4770      	bx	lr

08013b88 <memcpy>:
 8013b88:	440a      	add	r2, r1
 8013b8a:	4291      	cmp	r1, r2
 8013b8c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013b90:	d100      	bne.n	8013b94 <memcpy+0xc>
 8013b92:	4770      	bx	lr
 8013b94:	b510      	push	{r4, lr}
 8013b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b9e:	4291      	cmp	r1, r2
 8013ba0:	d1f9      	bne.n	8013b96 <memcpy+0xe>
 8013ba2:	bd10      	pop	{r4, pc}

08013ba4 <_free_r>:
 8013ba4:	b538      	push	{r3, r4, r5, lr}
 8013ba6:	4605      	mov	r5, r0
 8013ba8:	2900      	cmp	r1, #0
 8013baa:	d041      	beq.n	8013c30 <_free_r+0x8c>
 8013bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bb0:	1f0c      	subs	r4, r1, #4
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	bfb8      	it	lt
 8013bb6:	18e4      	addlt	r4, r4, r3
 8013bb8:	f7ff ff96 	bl	8013ae8 <__malloc_lock>
 8013bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8013c34 <_free_r+0x90>)
 8013bbe:	6813      	ldr	r3, [r2, #0]
 8013bc0:	b933      	cbnz	r3, 8013bd0 <_free_r+0x2c>
 8013bc2:	6063      	str	r3, [r4, #4]
 8013bc4:	6014      	str	r4, [r2, #0]
 8013bc6:	4628      	mov	r0, r5
 8013bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bcc:	f7ff bf92 	b.w	8013af4 <__malloc_unlock>
 8013bd0:	42a3      	cmp	r3, r4
 8013bd2:	d908      	bls.n	8013be6 <_free_r+0x42>
 8013bd4:	6820      	ldr	r0, [r4, #0]
 8013bd6:	1821      	adds	r1, r4, r0
 8013bd8:	428b      	cmp	r3, r1
 8013bda:	bf01      	itttt	eq
 8013bdc:	6819      	ldreq	r1, [r3, #0]
 8013bde:	685b      	ldreq	r3, [r3, #4]
 8013be0:	1809      	addeq	r1, r1, r0
 8013be2:	6021      	streq	r1, [r4, #0]
 8013be4:	e7ed      	b.n	8013bc2 <_free_r+0x1e>
 8013be6:	461a      	mov	r2, r3
 8013be8:	685b      	ldr	r3, [r3, #4]
 8013bea:	b10b      	cbz	r3, 8013bf0 <_free_r+0x4c>
 8013bec:	42a3      	cmp	r3, r4
 8013bee:	d9fa      	bls.n	8013be6 <_free_r+0x42>
 8013bf0:	6811      	ldr	r1, [r2, #0]
 8013bf2:	1850      	adds	r0, r2, r1
 8013bf4:	42a0      	cmp	r0, r4
 8013bf6:	d10b      	bne.n	8013c10 <_free_r+0x6c>
 8013bf8:	6820      	ldr	r0, [r4, #0]
 8013bfa:	4401      	add	r1, r0
 8013bfc:	1850      	adds	r0, r2, r1
 8013bfe:	4283      	cmp	r3, r0
 8013c00:	6011      	str	r1, [r2, #0]
 8013c02:	d1e0      	bne.n	8013bc6 <_free_r+0x22>
 8013c04:	6818      	ldr	r0, [r3, #0]
 8013c06:	685b      	ldr	r3, [r3, #4]
 8013c08:	6053      	str	r3, [r2, #4]
 8013c0a:	4408      	add	r0, r1
 8013c0c:	6010      	str	r0, [r2, #0]
 8013c0e:	e7da      	b.n	8013bc6 <_free_r+0x22>
 8013c10:	d902      	bls.n	8013c18 <_free_r+0x74>
 8013c12:	230c      	movs	r3, #12
 8013c14:	602b      	str	r3, [r5, #0]
 8013c16:	e7d6      	b.n	8013bc6 <_free_r+0x22>
 8013c18:	6820      	ldr	r0, [r4, #0]
 8013c1a:	1821      	adds	r1, r4, r0
 8013c1c:	428b      	cmp	r3, r1
 8013c1e:	bf04      	itt	eq
 8013c20:	6819      	ldreq	r1, [r3, #0]
 8013c22:	685b      	ldreq	r3, [r3, #4]
 8013c24:	6063      	str	r3, [r4, #4]
 8013c26:	bf04      	itt	eq
 8013c28:	1809      	addeq	r1, r1, r0
 8013c2a:	6021      	streq	r1, [r4, #0]
 8013c2c:	6054      	str	r4, [r2, #4]
 8013c2e:	e7ca      	b.n	8013bc6 <_free_r+0x22>
 8013c30:	bd38      	pop	{r3, r4, r5, pc}
 8013c32:	bf00      	nop
 8013c34:	200096b4 	.word	0x200096b4

08013c38 <_init>:
 8013c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c3a:	bf00      	nop
 8013c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c3e:	bc08      	pop	{r3}
 8013c40:	469e      	mov	lr, r3
 8013c42:	4770      	bx	lr

08013c44 <_fini>:
 8013c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c46:	bf00      	nop
 8013c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c4a:	bc08      	pop	{r3}
 8013c4c:	469e      	mov	lr, r3
 8013c4e:	4770      	bx	lr
